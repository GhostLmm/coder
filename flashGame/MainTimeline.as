package 
{
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.MovieClip;
	import flash.display.Shape;
	import flash.display.SimpleButton;
	import flash.display.Sprite;
	import flash.display.StageAlign;
	import flash.display.StageScaleMode;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.events.MouseEvent;
	import flash.events.ProgressEvent;
	import flash.filters.BlurFilter;
	import flash.filters.ColorMatrixFilter;
	import flash.geom.ColorTransform;
	import flash.geom.Matrix;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.media.SoundMixer;
	import flash.media.SoundTransform;
	import flash.net.SharedObject;
	import flash.net.URLRequest;
	import flash.net.navigateToURL;
	import flash.system.System;
	import flash.text.TextField;
	import flash.ui.ContextMenu;
	import flash.ui.Mouse;
	import flash.utils.getTimer;
	
	import __AS3__.vec.Vector;
	
	import fl.motion.AdjustColor;
	
	public class MainTimeline 
	{
		public var mc:MainMC1;
		
		public var sfx_0:Sound;
		public var sfx_1:Sound;
		public var sfx_2:Sound;
		public var sfx_3:Sound;
		public var sfx_4:Sound;
		public var sfx_5:Sound;
		public var sfx_6:Sound;
		public var sfx_7:Sound;
		public var sfx_8:Sound;
		public var sfx_9:Sound;
		public var sfx_10:Sound;
		public var sfx_11:Sound;
		public var sfx_12:Sound;
		public var sfx_13:Sound;
		public var sfx_14:Sound;
		public var sfx_15:Sound;
		public var sfx_20:Sound;
		public var sfx_21:Sound;
		public var sfx_22:Sound;
		public var sfx_23:Sound;
		public var sfx_24:Sound;
		public var sfx_25:Sound;
		public var sfx_26:Sound;
		public var sfx_27:Sound;
		public var sfx_28:Sound;
		public var sfx_29:Sound;
		public var sfx_30:Sound;
		public var sfx_31:Sound;
		public var sfx_32:Sound;
		public var sfx_33:Sound;
		public var sfx_34:Sound;
		public var sfx_35:Sound;
		public var sfx_36:Sound;
		public var sfx_37:Sound;
		public var sfx_38:Sound;
		public var sfx_39:Sound;
		public var sfx_40:Sound;
		public var sfx_41:Sound;
		public var sfx_42:Sound;
		public var sfx_43:Sound;
		public var sfx_44:Sound;
		public var sfx_45:Sound;
		public var sfx_46:Sound;
		public var sfx_47:Sound;
		public var sfx_48:Sound;
		public var sfx_49:Sound;
		public var sfx_50:Sound;
		public var sfx_51:Sound;
		public var sfx_52:Sound;
		public var sfx_53:Sound;
		public var sfx_54:Sound;
		public var sfx_55:Sound;
		public var sfx_56:Sound;
		public var sfx_57:Sound;
		public var sfx_58:Sound;
		public var sfx_59:Sound;
		public var sfx_60:Sound;
		public var sfx_61:Sound;
		public var sfx_62:Sound;
		public var sfx_63:Sound;
		public var sfx_64:Sound;
		public var sfx_65:Sound;
		public var sfx_66:Sound;
		public var sfx_67:Sound;
		public var sfx_68:Sound;
		public var sfx_69:Sound;
		public var sfx_70:Sound;
		public var sfx_71:Sound;
		public var sfx_72:Sound;
		public var sfx_73:Sound;
		public var sfx_74:Sound;
		public var sfx_75:Sound;
		public var sfx_76:Sound;
		public var sfx_77:Sound;
		public var sfx_78:Sound;
		public var sfx_79:Sound;
		public var sfx_80:Sound;
		public var sfx_81:Sound;
		public var sfx_82:Sound;
		public var sfx_83:Sound;
		public var sfx_84:Sound;
		public var sfx_85:Sound;
		public var sfx_86:Sound;
		public var sfx_87:Sound;
		public var sfx_88:Sound;
		public var sfx_89:Sound;
		public var sfx_90:Sound;
		public var sfx_91:Sound;
		public var sfx_92:Sound;
		public var sfx_93:Sound;
		public var sfx_94:Sound;
		public var sfx_95:Sound;
		public var sfx_96:Sound;
		public var sfx_97:Sound;
		public var sfx_98:Sound;
		public var sfx_99:Sound;
		public var sfx_100:Sound;
		public var sfx_101:Sound;
		public var sfx_102:Sound;
		public var sfx_103:Sound;
		public var sfx_104:Sound;
		public var sfx_105:Sound;
		public var sfx_106:Sound;
		public var sfx_107:Sound;
		public var sfx_108:Sound;
		public var sfx_109:Sound;
		public var sfx_110:Sound;
		public var sfx_111:Sound;
		public var sfx_112:Sound;
		public var sfx_113:Sound;
		public var sfx_114:Sound;
		public var sfxVolume:Number;
		public var sfxOn:Boolean;
		public var tempVol:Number;
		public var sfxChannel_0:SoundChannel;
		public var sfxTransform_0:SoundTransform;
		public var sfxChannel_0_playing:Boolean;
		public var sfxChannel_1:SoundChannel;
		public var sfxTransform_1:SoundTransform;
		public var sfxChannel_1_playing:Boolean;
		public var sfxChannel_2:SoundChannel;
		public var sfxTransform_2:SoundTransform;
		public var sfxChannel_2_playing:Boolean;
		public var sfxChannel_3:SoundChannel;
		public var sfxTransform_3:SoundTransform;
		public var sfxChannel_3_playing:Boolean;
		public var sfxChannel_4:SoundChannel;
		public var sfxTransform_4:SoundTransform;
		public var sfxChannel_4_playing:Boolean;
		public var sfxChannel_5:SoundChannel;
		public var sfxTransform_5:SoundTransform;
		public var sfxChannel_5_playing:Boolean;
		public var sfxChannel_6:SoundChannel;
		public var sfxTransform_6:SoundTransform;
		public var sfxChannel_6_playing:Boolean;
		public var sfxChannel_7:SoundChannel;
		public var sfxTransform_7:SoundTransform;
		public var sfxChannel_7_playing:Boolean;
		public var sfxChannel_8:SoundChannel;
		public var sfxTransform_8:SoundTransform;
		public var sfxChannel_8_playing:Boolean;
		public var sfxChannel_9:SoundChannel;
		public var sfxTransform_9:SoundTransform;
		public var sfxChannel_9_playing:Boolean;
		public var sfxChannel_10:SoundChannel;
		public var sfxTransform_10:SoundTransform;
		public var sfxChannel_10_playing:Boolean;
		public var sfx_a:int;
		public var sfx_b:int;
		public var gameVersion:int;
		public var isOnCMG:Boolean;
		public var temp_cmg_URL:Object;
		public var my_menu:ContextMenu;
		public var musicOn:Boolean;
		public var isHackedVersion:Boolean;
		public var addedCheatMenu:Boolean;
		public var preLoaderPercent:Number;
		public var preloadComplete:Boolean;
		public var music0:Sound;
		public var music1:Sound;
		public var music2:Sound;
		public var music3:Sound;
		public var music4:Sound;
		public var music5:Sound;
		public var music6:Sound;
		public var music7:Sound;
		public var musicChannel:SoundChannel;
		public var musicTransform:SoundTransform;
		public var musicVolume:Number;
		public var musicFade:Number;
		public var musicTrackPlaying:int;
		public var dpTime:int;
		public var dpBlurStartX:Number;
		public var dpBlurStartY:Number;
		public var dpBlurStartX2:Number;
		public var dpBlurStartY2:Number;
		public var cheatMenu:MovieClip;
		public var character_appearance_intro:Array;
		public var character_weapons_intro:Array;
		public var gameData_intro:SharedObject;
		public var dataExists_intro:Boolean;
		public var wepNeeded:Array;
		public var noTooltip:Boolean;
		public var k:Array;
		public var kD:Array;
		public var stinkyBeanMode:Boolean;
		public var zombieMode:Boolean;
		public var levelToLoad:int;
		public var character_appearance:Array;
		public var character_colors:Array;
		public var character_color_values:Array;
		public var character_weapons:Array;
		public var playerName:String;
		public var objectives_complete_arr:Array;
		public var soundToggle:Array;
		public var mapToggled:Boolean;
		public var weaponsUnlocked:Array;
		public var weaponsNew:Array;
		public var bestScore:Array;
		public var bestScore_survival:Array;
		public var levelsLocked:Array;
		public var title_gun_names:Array;
		public var gameData:SharedObject;
		public var dataExists:Boolean;
		public var tempObjectivesComplete:int;
		public var tempTotalObjectivesComplete:int;
		public var charModel_title:MovieClip;
		public var title_mouseIsDown2:Boolean;
		public var character_colorTransform:ColorTransform;
		public var tempBtn:MovieClip;
		public var btnArr:Array;
		public var btn_nextPage:SimpleButton;
		public var btn_prevPage:SimpleButton;
		public var f:int;
		public var g:int;
		public var characterCreate_partSelected:int;
		public var characterCreate_rowLength:int;
		public var characterCreate_rowOrigin_x:int;
		public var characterCreate_rowOrigin_y:int;
		public var characterCreate_pageOn:int;
		public var charModel:MovieClip;
		public var title_mouseIsDown:Boolean;
		public var changeColor:Boolean;
		public var changeColor_hex:uint;
		public var changeColor_r:uint;
		public var changeColor_g:uint;
		public var changeColor_b:uint;
		public var colorPickerIsOn:Boolean;
		public var whichColorPicker:int;
		public var tileSet:int;
		public var tileSet1_collidable:Object;
		public var tileSet3_collidable:Object;
		public var tileSet4_collidable:Object;
		public var tileSet5_collidable:Object;
		public var tileSet6_collidable:Object;
		public var tileSet7_collidable:Object;
		public var tileSet8_collidable:Object;
		public var tileSet9_collidable:Object;
		public var level0:Array;
		public var level0_width:int;
		public var level0_height:int;
		public var level0_rect_x:Array;
		public var level0_rect_y:Array;
		public var level0_rect_w:Array;
		public var level0_rect_h:Array;
		public var level0_item_type:Array;
		public var level0_item_x:Array;
		public var level0_item_y:Array;
		public var level0_tileSet:int;
		public var level0_gameType:int;
		public var level0_objective_names:Array;
		public var level0_objective_scores:Array;
		public var level0_objective_specialKills_needed:int;
		public var level0_objective_specialKillType:int;
		public var level0_objective_whichWeaponProficiency:int;
		public var level2:Array;
		public var level2_width:int;
		public var level2_height:int;
		public var level2_rect_x:Array;
		public var level2_rect_y:Array;
		public var level2_rect_w:Array;
		public var level2_rect_h:Array;
		public var level2_item_type:Array;
		public var level2_item_x:Array;
		public var level2_item_y:Array;
		public var level2_tileSet:int;
		public var level2_gameType:int;
		public var level2_objective_names:Array;
		public var level2_objective_scores:Array;
		public var level2_objective_specialKills_needed:int;
		public var level2_objective_specialKillType:int;
		public var level2_objective_whichWeaponProficiency:int;
		public var level3:Array;
		public var level3_width:int;
		public var level3_height:int;
		public var level3_rect_x:Array;
		public var level3_rect_y:Array;
		public var level3_rect_w:Array;
		public var level3_rect_h:Array;
		public var level3_item_type:Array;
		public var level3_item_x:Array;
		public var level3_item_y:Array;
		public var level3_tileSet:int;
		public var level3_gameType:int;
		public var level3_objective_names:Array;
		public var level3_objective_scores:Array;
		public var level3_objective_specialKills_needed:int;
		public var level3_objective_specialKillType:int;
		public var level3_objective_whichWeaponProficiency:int;
		public var level4:Array;
		public var level4_width:int;
		public var level4_height:int;
		public var level4_rect_x:Array;
		public var level4_rect_y:Array;
		public var level4_rect_w:Array;
		public var level4_rect_h:Array;
		public var level4_item_type:Array;
		public var level4_item_x:Array;
		public var level4_item_y:Array;
		public var level4_tileSet:int;
		public var level4_gameType:int;
		public var level4_objective_names:Array;
		public var level4_objective_scores:Array;
		public var level4_objective_specialKills_needed:int;
		public var level4_objective_specialKillType:int;
		public var level4_objective_whichWeaponProficiency:int;
		public var level5:Array;
		public var level5_width:int;
		public var level5_height:int;
		public var level5_rect_x:Array;
		public var level5_rect_y:Array;
		public var level5_rect_w:Array;
		public var level5_rect_h:Array;
		public var level5_item_type:Array;
		public var level5_item_x:Array;
		public var level5_item_y:Array;
		public var level5_tileSet:int;
		public var level5_gameType:int;
		public var level5_objective_names:Array;
		public var level5_objective_scores:Array;
		public var level5_objective_specialKills_needed:int;
		public var level5_objective_specialKillType:int;
		public var level5_objective_whichWeaponProficiency:int;
		public var level6:Array;
		public var level6_width:int;
		public var level6_height:int;
		public var level6_rect_x:Array;
		public var level6_rect_y:Array;
		public var level6_rect_w:Array;
		public var level6_rect_h:Array;
		public var level6_item_type:Array;
		public var level6_item_x:Array;
		public var level6_item_y:Array;
		public var level6_tileSet:int;
		public var level6_gameType:int;
		public var level7:Array;
		public var level7_width:int;
		public var level7_height:int;
		public var level7_rect_x:Array;
		public var level7_rect_y:Array;
		public var level7_rect_w:Array;
		public var level7_rect_h:Array;
		public var level7_item_type:Array;
		public var level7_item_x:Array;
		public var level7_item_y:Array;
		public var level7_tileSet:int;
		public var level7_gameType:int;
		public var level8:Array;
		public var level8_width:int;
		public var level8_height:int;
		public var level8_rect_x:Array;
		public var level8_rect_y:Array;
		public var level8_rect_w:Array;
		public var level8_rect_h:Array;
		public var level8_item_type:Array;
		public var level8_item_x:Array;
		public var level8_item_y:Array;
		public var level8_tileSet:int;
		public var level8_gameType:int;
		public var level9:Array;
		public var level9_width:int;
		public var level9_height:int;
		public var level9_rect_x:Array;
		public var level9_rect_y:Array;
		public var level9_rect_w:Array;
		public var level9_rect_h:Array;
		public var level9_item_type:Array;
		public var level9_item_x:Array;
		public var level9_item_y:Array;
		public var level9_tileSet:int;
		public var level9_gameType:int;
		public var level10:Array;
		public var level10_width:int;
		public var level10_height:int;
		public var level10_rect_x:Array;
		public var level10_rect_y:Array;
		public var level10_rect_w:Array;
		public var level10_rect_h:Array;
		public var level10_item_type:Array;
		public var level10_item_x:Array;
		public var level10_item_y:Array;
		public var level10_tileSet:int;
		public var level10_gameType:int;
		public var level11:Array;
		public var level11_width:int;
		public var level11_height:int;
		public var level11_rect_x:Array;
		public var level11_rect_y:Array;
		public var level11_rect_w:Array;
		public var level11_rect_h:Array;
		public var level11_item_type:Array;
		public var level11_item_x:Array;
		public var level11_item_y:Array;
		public var level11_tileSet:int;
		public var level11_gameType:int;
		public var level12:Array;
		public var level12_width:int;
		public var level12_height:int;
		public var level12_rect_x:Array;
		public var level12_rect_y:Array;
		public var level12_rect_w:Array;
		public var level12_rect_h:Array;
		public var level12_item_type:Array;
		public var level12_item_x:Array;
		public var level12_item_y:Array;
		public var level12_tileSet:int;
		public var level12_gameType:int;
		public var level13:Array;
		public var level13_width:int;
		public var level13_height:int;
		public var level13_rect_x:Array;
		public var level13_rect_y:Array;
		public var level13_rect_w:Array;
		public var level13_rect_h:Array;
		public var level13_item_type:Array;
		public var level13_item_x:Array;
		public var level13_item_y:Array;
		public var level13_tileSet:int;
		public var level13_gameType:int;
		public var level:Vector.<uint>;
		public var level_width:int;
		public var level_height:int;
		public var level_rect_x:Vector.<int>;
		public var level_rect_y:Vector.<int>;
		public var level_rect_w:Vector.<int>;
		public var level_rect_h:Vector.<int>;
		public var level_collidable:Vector.<int>;
		public var objective_collectables_collected:Array;
		public var objective_score_complete:Array;
		public var objective_skill_complete:Array;
		public var objective_briefcase_collected:Boolean;
		public var objective_weaponProficiency:Boolean;
		public var objective_specialKills:int;
		public var totals:Array;
		public var objectives:Array;
		public var cameraStart_x:int;
		public var cameraStart_y:int;
		public var objective_scores:Array;
		public var objective_specialKills_needed:int;
		public var objective_specialKillType:int;
		public var objective_whichWeaponProficiency:int;
		public var gameType:int;
		public var numberOfBloodSplatSFX:int;
		public var acidSfx:int;
		public var artifactSfx:int;
		public var closestArtifact_dist:int;
		public var closestArtifact_num:int;
		public var simpleParticle_type:Vector.<int>;
		public var simpleParticle_x:Vector.<Number>;
		public var simpleParticle_y:Vector.<Number>;
		public var simpleParticle_r:Vector.<Number>;
		public var simpleParticle_p1:Vector.<Number>;
		public var simpleParticle_p2:Vector.<Number>;
		public var simpleParticle_bg_type:Vector.<int>;
		public var simpleParticle_bg_x:Vector.<Number>;
		public var simpleParticle_bg_y:Vector.<Number>;
		public var simpleParticle_bg_r:Vector.<Number>;
		public var simpleParticle_bg_p1:Vector.<Number>;
		public var simpleParticle_bg_p2:Vector.<Number>;
		public var particle_type:Vector.<int>;
		public var particle_x:Vector.<Number>;
		public var particle_y:Vector.<Number>;
		public var particle_r:Vector.<Number>;
		public var particle_xOld:Vector.<Number>;
		public var particle_yOld:Vector.<Number>;
		public var particle_rOld:Vector.<Number>;
		public var particle_velX:Vector.<Number>;
		public var particle_velY:Vector.<Number>;
		public var particle_frame:Vector.<Number>;
		public var particle_p1:Vector.<Number>;
		public var particle_p2:Vector.<Number>;
		public var particle_p3:Vector.<Number>;
		public var particle_p4:Vector.<Number>;
		public var particle_p5:Vector.<Number>;
		public var gaussStartPoint_x:Number;
		public var gaussStartPoint_y:Number;
		public var gaussLength:Number;
		public var jumpHeightInTiles:Array;
		public var bullet_dx:Number;
		public var bullet_dy:Number;
		public var bloodLoop:int;
		public var splatterCount:int;
		public var a:int;
		public var b:int;
		public var c:int;
		public var d:int;
		public var e:int;
		public var tempMc:MovieClip;
		public var trans:Matrix;
		public var rect:Rectangle;
		public var tempPoint:Point;
		public var tempInterp:Point;
		public var tempInterpOld:Point;
		public var tileOn:int;
		public var screenWidth:int;
		public var screenHeight:int;
		public var screenWidthTiles:int;
		public var screenHeightTiles:int;
		public var characterStartPoint:Point;
		public var bm:BitmapData;
		public var bg:Bitmap;
		public var userMap:BitmapData;
		public var userMapColor:uint;
		public var tileSet_bm:BitmapData;
		public var tileSet_width:int;
		public var tileSet_numOfTiles:int;
		public var light_x:Array;
		public var light_y:Array;
		public var light_s:Array;
		public var level_bm:BitmapData;
		public var precompute_time:int;
		public var light_bm_lg:BitmapData;
		public var light_bm_md:BitmapData;
		public var light_bm_sm:BitmapData;
		public var occlusion_bm:BitmapData;
		public var occlusionMap:Array;
		public var node_bm:BitmapData;
		public var node_bm2:BitmapData;
		public var nodeMap:Array;
		public var alphabet_bm_lg:BitmapData;
		public var alphabet_bm_sm:BitmapData;
		public var health_meter:BitmapData;
		public var health_meter_back:BitmapData;
		public var health_meter_top:BitmapData;
		public var ammo_meter:BitmapData;
		public var ammo_meter_back:BitmapData;
		public var ammo_meter_top:BitmapData;
		public var combo_meter:BitmapData;
		public var combo_meter_back:BitmapData;
		public var combo_meter_top:BitmapData;
		public var keyHeadsUp:BitmapData;
		public var hud_back:BitmapData;
		public var cursor:BitmapData;
		public var door_bm:BitmapData;
		public var door_keycard_bm:BitmapData;
		public var health_bm:BitmapData;
		public var time_bm:BitmapData;
		public var door_lock_bm:BitmapData;
		public var collectable_gunPiece_bm:BitmapData;
		public var disc_bm:BitmapData;
		public var briefcase_bm:BitmapData;
		public var collectStar_yellow_bm:BitmapData;
		public var collectStar_red_bm:BitmapData;
		public var collectStar_blue_bm:BitmapData;
		public var collectStar_white_bm:BitmapData;
		public var bloodSplatter0:Sprite;
		public var bloodSplatter1:Sprite;
		public var bloodSplatter2:Sprite;
		public var bloodSplatter3:Sprite;
		public var bloodSplatter4:Sprite;
		public var bloodSplatter5:Sprite;
		public var bloodSplatter6:Sprite;
		public var bloodSplatter7:Sprite;
		public var bloodSplatter8:Sprite;
		public var blood_bm:BitmapData;
		public var bloodColorFilter:AdjustColor;
		public var bloodHueList:Array;
		public var tempBloodSplatter_bm:BitmapData;
		public var tempBloodSplatter_erase:BitmapData;
		public var blood_drop:BitmapData;
		public var charAnim_1_head_x:Vector.<Number>;
		public var charAnim_1_head_y:Vector.<Number>;
		public var charAnim_1_body_x:Vector.<Number>;
		public var charAnim_1_body_y:Vector.<Number>;
		public var charAnim_1_body_r:Vector.<Number>;
		public var charAnim_1_foot1_x:Vector.<Number>;
		public var charAnim_1_foot1_y:Vector.<Number>;
		public var charAnim_1_foot1_r:Vector.<Number>;
		public var charAnim_1_foot2_x:Vector.<Number>;
		public var charAnim_1_foot2_y:Vector.<Number>;
		public var charAnim_1_foot2_r:Vector.<Number>;
		public var charAnim_1_ankle1_x:Vector.<Number>;
		public var charAnim_1_ankle1_y:Vector.<Number>;
		public var charAnim_1_ankle1_r:Vector.<Number>;
		public var charAnim_1_ankle2_x:Vector.<Number>;
		public var charAnim_1_ankle2_y:Vector.<Number>;
		public var charAnim_1_ankle2_r:Vector.<Number>;
		public var charAnim_2_head_x:Vector.<Number>;
		public var charAnim_2_head_y:Vector.<Number>;
		public var charAnim_2_body_x:Vector.<Number>;
		public var charAnim_2_body_y:Vector.<Number>;
		public var charAnim_2_body_r:Vector.<Number>;
		public var charAnim_2_foot1_x:Vector.<Number>;
		public var charAnim_2_foot1_y:Vector.<Number>;
		public var charAnim_2_foot1_r:Vector.<Number>;
		public var charAnim_2_foot2_x:Vector.<Number>;
		public var charAnim_2_foot2_y:Vector.<Number>;
		public var charAnim_2_foot2_r:Vector.<Number>;
		public var charAnim_2_ankle1_x:Vector.<Number>;
		public var charAnim_2_ankle1_y:Vector.<Number>;
		public var charAnim_2_ankle1_r:Vector.<Number>;
		public var charAnim_2_ankle2_x:Vector.<Number>;
		public var charAnim_2_ankle2_y:Vector.<Number>;
		public var charAnim_2_ankle2_r:Vector.<Number>;
		public var charAnim_3_head_x:Vector.<Number>;
		public var charAnim_3_head_y:Vector.<Number>;
		public var charAnim_3_body_x:Vector.<Number>;
		public var charAnim_3_body_y:Vector.<Number>;
		public var charAnim_3_body_r:Vector.<Number>;
		public var charAnim_3_foot1_x:Vector.<Number>;
		public var charAnim_3_foot1_y:Vector.<Number>;
		public var charAnim_3_foot1_r:Vector.<Number>;
		public var charAnim_3_foot2_x:Vector.<Number>;
		public var charAnim_3_foot2_y:Vector.<Number>;
		public var charAnim_3_foot2_r:Vector.<Number>;
		public var charAnim_3_ankle1_x:Vector.<Number>;
		public var charAnim_3_ankle1_y:Vector.<Number>;
		public var charAnim_3_ankle1_r:Vector.<Number>;
		public var charAnim_3_ankle2_x:Vector.<Number>;
		public var charAnim_3_ankle2_y:Vector.<Number>;
		public var charAnim_3_ankle2_r:Vector.<Number>;
		public var charAnim_4_head_x:Vector.<Number>;
		public var charAnim_4_head_y:Vector.<Number>;
		public var charAnim_4_body_x:Vector.<Number>;
		public var charAnim_4_body_y:Vector.<Number>;
		public var charAnim_4_body_r:Vector.<Number>;
		public var charAnim_4_foot1_x:Vector.<Number>;
		public var charAnim_4_foot1_y:Vector.<Number>;
		public var charAnim_4_foot1_r:Vector.<Number>;
		public var charAnim_4_foot2_x:Vector.<Number>;
		public var charAnim_4_foot2_y:Vector.<Number>;
		public var charAnim_4_foot2_r:Vector.<Number>;
		public var charAnim_4_ankle1_x:Vector.<Number>;
		public var charAnim_4_ankle1_y:Vector.<Number>;
		public var charAnim_4_ankle1_r:Vector.<Number>;
		public var charAnim_4_ankle2_x:Vector.<Number>;
		public var charAnim_4_ankle2_y:Vector.<Number>;
		public var charAnim_4_ankle2_r:Vector.<Number>;
		public var charAnim_5_head_x:Vector.<Number>;
		public var charAnim_5_head_y:Vector.<Number>;
		public var charAnim_5_body_x:Vector.<Number>;
		public var charAnim_5_body_y:Vector.<Number>;
		public var charAnim_5_body_r:Vector.<Number>;
		public var charAnim_5_foot1_x:Vector.<Number>;
		public var charAnim_5_foot1_y:Vector.<Number>;
		public var charAnim_5_foot1_r:Vector.<Number>;
		public var charAnim_5_foot2_x:Vector.<Number>;
		public var charAnim_5_foot2_y:Vector.<Number>;
		public var charAnim_5_foot2_r:Vector.<Number>;
		public var charAnim_5_ankle1_x:Vector.<Number>;
		public var charAnim_5_ankle1_y:Vector.<Number>;
		public var charAnim_5_ankle1_r:Vector.<Number>;
		public var charAnim_5_ankle2_x:Vector.<Number>;
		public var charAnim_5_ankle2_y:Vector.<Number>;
		public var charAnim_5_ankle2_r:Vector.<Number>;
		public var charAnim_6_head_x:Vector.<Number>;
		public var charAnim_6_head_y:Vector.<Number>;
		public var charAnim_6_body_x:Vector.<Number>;
		public var charAnim_6_body_y:Vector.<Number>;
		public var charAnim_6_body_r:Vector.<Number>;
		public var charAnim_6_foot1_x:Vector.<Number>;
		public var charAnim_6_foot1_y:Vector.<Number>;
		public var charAnim_6_foot1_r:Vector.<Number>;
		public var charAnim_6_foot2_x:Vector.<Number>;
		public var charAnim_6_foot2_y:Vector.<Number>;
		public var charAnim_6_foot2_r:Vector.<Number>;
		public var charAnim_6_ankle1_x:Vector.<Number>;
		public var charAnim_6_ankle1_y:Vector.<Number>;
		public var charAnim_6_ankle1_r:Vector.<Number>;
		public var charAnim_6_ankle2_x:Vector.<Number>;
		public var charAnim_6_ankle2_y:Vector.<Number>;
		public var charAnim_6_ankle2_r:Vector.<Number>;
		public var charAnim_7_head_x:Vector.<Number>;
		public var charAnim_7_head_y:Vector.<Number>;
		public var charAnim_7_body_x:Vector.<Number>;
		public var charAnim_7_body_y:Vector.<Number>;
		public var charAnim_7_body_r:Vector.<Number>;
		public var charAnim_7_foot1_x:Vector.<Number>;
		public var charAnim_7_foot1_y:Vector.<Number>;
		public var charAnim_7_foot1_r:Vector.<Number>;
		public var charAnim_7_foot2_x:Vector.<Number>;
		public var charAnim_7_foot2_y:Vector.<Number>;
		public var charAnim_7_foot2_r:Vector.<Number>;
		public var charAnim_7_ankle1_x:Vector.<Number>;
		public var charAnim_7_ankle1_y:Vector.<Number>;
		public var charAnim_7_ankle1_r:Vector.<Number>;
		public var charAnim_7_ankle2_x:Vector.<Number>;
		public var charAnim_7_ankle2_y:Vector.<Number>;
		public var charAnim_7_ankle2_r:Vector.<Number>;
		public var charAnim_8_head_x:Vector.<Number>;
		public var charAnim_8_head_y:Vector.<Number>;
		public var charAnim_8_body_x:Vector.<Number>;
		public var charAnim_8_body_y:Vector.<Number>;
		public var charAnim_8_body_r:Vector.<Number>;
		public var charAnim_8_foot1_x:Vector.<Number>;
		public var charAnim_8_foot1_y:Vector.<Number>;
		public var charAnim_8_foot1_r:Vector.<Number>;
		public var charAnim_8_foot2_x:Vector.<Number>;
		public var charAnim_8_foot2_y:Vector.<Number>;
		public var charAnim_8_foot2_r:Vector.<Number>;
		public var charAnim_8_ankle1_x:Vector.<Number>;
		public var charAnim_8_ankle1_y:Vector.<Number>;
		public var charAnim_8_ankle1_r:Vector.<Number>;
		public var charAnim_8_ankle2_x:Vector.<Number>;
		public var charAnim_8_ankle2_y:Vector.<Number>;
		public var charAnim_8_ankle2_r:Vector.<Number>;
		public var charAnim_9_head_x:Vector.<Number>;
		public var charAnim_9_head_y:Vector.<Number>;
		public var charAnim_9_body_x:Vector.<Number>;
		public var charAnim_9_body_y:Vector.<Number>;
		public var charAnim_9_body_r:Vector.<Number>;
		public var charAnim_9_foot1_x:Vector.<Number>;
		public var charAnim_9_foot1_y:Vector.<Number>;
		public var charAnim_9_foot1_r:Vector.<Number>;
		public var charAnim_9_foot2_x:Vector.<Number>;
		public var charAnim_9_foot2_y:Vector.<Number>;
		public var charAnim_9_foot2_r:Vector.<Number>;
		public var charAnim_9_ankle1_x:Vector.<Number>;
		public var charAnim_9_ankle1_y:Vector.<Number>;
		public var charAnim_9_ankle1_r:Vector.<Number>;
		public var charAnim_9_ankle2_x:Vector.<Number>;
		public var charAnim_9_ankle2_y:Vector.<Number>;
		public var charAnim_9_ankle2_r:Vector.<Number>;
		public var charAnim_10_head_x:Vector.<Number>;
		public var charAnim_10_head_y:Vector.<Number>;
		public var charAnim_10_body_x:Vector.<Number>;
		public var charAnim_10_body_y:Vector.<Number>;
		public var charAnim_10_body_r:Vector.<Number>;
		public var charAnim_10_foot1_x:Vector.<Number>;
		public var charAnim_10_foot1_y:Vector.<Number>;
		public var charAnim_10_foot1_r:Vector.<Number>;
		public var charAnim_10_foot2_x:Vector.<Number>;
		public var charAnim_10_foot2_y:Vector.<Number>;
		public var charAnim_10_foot2_r:Vector.<Number>;
		public var charAnim_10_ankle1_x:Vector.<Number>;
		public var charAnim_10_ankle1_y:Vector.<Number>;
		public var charAnim_10_ankle1_r:Vector.<Number>;
		public var charAnim_10_ankle2_x:Vector.<Number>;
		public var charAnim_10_ankle2_y:Vector.<Number>;
		public var charAnim_10_ankle2_r:Vector.<Number>;
		public var charAnim_11_head_x:Vector.<Number>;
		public var charAnim_11_head_y:Vector.<Number>;
		public var charAnim_11_head_r:Vector.<Number>;
		public var charAnim_11_body_x:Vector.<Number>;
		public var charAnim_11_body_y:Vector.<Number>;
		public var charAnim_11_body_r:Vector.<Number>;
		public var charAnim_11_foot1_x:Vector.<Number>;
		public var charAnim_11_foot1_y:Vector.<Number>;
		public var charAnim_11_foot1_r:Vector.<Number>;
		public var charAnim_11_foot2_x:Vector.<Number>;
		public var charAnim_11_foot2_y:Vector.<Number>;
		public var charAnim_11_foot2_r:Vector.<Number>;
		public var charAnim_11_ankle1_x:Vector.<Number>;
		public var charAnim_11_ankle1_y:Vector.<Number>;
		public var charAnim_11_ankle1_r:Vector.<Number>;
		public var charAnim_11_ankle2_x:Vector.<Number>;
		public var charAnim_11_ankle2_y:Vector.<Number>;
		public var charAnim_11_ankle2_r:Vector.<Number>;
		public var charAnim_12_head_x:Vector.<Number>;
		public var charAnim_12_head_y:Vector.<Number>;
		public var charAnim_12_head_r:Vector.<Number>;
		public var charAnim_12_body_x:Vector.<Number>;
		public var charAnim_12_body_y:Vector.<Number>;
		public var charAnim_12_body_r:Vector.<Number>;
		public var charAnim_12_foot1_x:Vector.<Number>;
		public var charAnim_12_foot1_y:Vector.<Number>;
		public var charAnim_12_foot1_r:Vector.<Number>;
		public var charAnim_12_foot2_x:Vector.<Number>;
		public var charAnim_12_foot2_y:Vector.<Number>;
		public var charAnim_12_foot2_r:Vector.<Number>;
		public var charAnim_12_ankle1_x:Vector.<Number>;
		public var charAnim_12_ankle1_y:Vector.<Number>;
		public var charAnim_12_ankle1_r:Vector.<Number>;
		public var charAnim_12_ankle2_x:Vector.<Number>;
		public var charAnim_12_ankle2_y:Vector.<Number>;
		public var charAnim_12_ankle2_r:Vector.<Number>;
		public var charAnim_13_head_x:Vector.<Number>;
		public var charAnim_13_head_y:Vector.<Number>;
		public var charAnim_13_head_r:Vector.<Number>;
		public var charAnim_13_body_x:Vector.<Number>;
		public var charAnim_13_body_y:Vector.<Number>;
		public var charAnim_13_body_r:Vector.<Number>;
		public var charAnim_13_foot1_x:Vector.<Number>;
		public var charAnim_13_foot1_y:Vector.<Number>;
		public var charAnim_13_foot1_r:Vector.<Number>;
		public var charAnim_13_foot2_x:Vector.<Number>;
		public var charAnim_13_foot2_y:Vector.<Number>;
		public var charAnim_13_foot2_r:Vector.<Number>;
		public var charAnim_13_ankle1_x:Vector.<Number>;
		public var charAnim_13_ankle1_y:Vector.<Number>;
		public var charAnim_13_ankle1_r:Vector.<Number>;
		public var charAnim_13_ankle2_x:Vector.<Number>;
		public var charAnim_13_ankle2_y:Vector.<Number>;
		public var charAnim_13_ankle2_r:Vector.<Number>;
		public var charAnim_14_head_x:Vector.<Number>;
		public var charAnim_14_head_y:Vector.<Number>;
		public var charAnim_14_head_r:Vector.<Number>;
		public var charAnim_14_body_x:Vector.<Number>;
		public var charAnim_14_body_y:Vector.<Number>;
		public var charAnim_14_body_r:Vector.<Number>;
		public var charAnim_14_foot1_x:Vector.<Number>;
		public var charAnim_14_foot1_y:Vector.<Number>;
		public var charAnim_14_foot1_r:Vector.<Number>;
		public var charAnim_14_foot2_x:Vector.<Number>;
		public var charAnim_14_foot2_y:Vector.<Number>;
		public var charAnim_14_foot2_r:Vector.<Number>;
		public var charAnim_14_ankle1_x:Vector.<Number>;
		public var charAnim_14_ankle1_y:Vector.<Number>;
		public var charAnim_14_ankle1_r:Vector.<Number>;
		public var charAnim_14_ankle2_x:Vector.<Number>;
		public var charAnim_14_ankle2_y:Vector.<Number>;
		public var charAnim_14_ankle2_r:Vector.<Number>;
		public var charAnim_15_head_x:Vector.<Number>;
		public var charAnim_15_head_y:Vector.<Number>;
		public var charAnim_15_head_r:Vector.<Number>;
		public var charAnim_15_body_x:Vector.<Number>;
		public var charAnim_15_body_y:Vector.<Number>;
		public var charAnim_15_body_r:Vector.<Number>;
		public var charAnim_15_foot1_x:Vector.<Number>;
		public var charAnim_15_foot1_y:Vector.<Number>;
		public var charAnim_15_foot1_r:Vector.<Number>;
		public var charAnim_15_foot2_x:Vector.<Number>;
		public var charAnim_15_foot2_y:Vector.<Number>;
		public var charAnim_15_foot2_r:Vector.<Number>;
		public var charAnim_15_ankle1_x:Vector.<Number>;
		public var charAnim_15_ankle1_y:Vector.<Number>;
		public var charAnim_15_ankle1_r:Vector.<Number>;
		public var charAnim_15_ankle2_x:Vector.<Number>;
		public var charAnim_15_ankle2_y:Vector.<Number>;
		public var charAnim_15_ankle2_r:Vector.<Number>;
		public var charAnim_16_head_x:Vector.<Number>;
		public var charAnim_16_head_y:Vector.<Number>;
		public var charAnim_16_head_r:Vector.<Number>;
		public var charAnim_16_body_x:Vector.<Number>;
		public var charAnim_16_body_y:Vector.<Number>;
		public var charAnim_16_body_r:Vector.<Number>;
		public var charAnim_16_foot1_x:Vector.<Number>;
		public var charAnim_16_foot1_y:Vector.<Number>;
		public var charAnim_16_foot1_r:Vector.<Number>;
		public var charAnim_16_foot2_x:Vector.<Number>;
		public var charAnim_16_foot2_y:Vector.<Number>;
		public var charAnim_16_foot2_r:Vector.<Number>;
		public var charAnim_16_ankle1_x:Vector.<Number>;
		public var charAnim_16_ankle1_y:Vector.<Number>;
		public var charAnim_16_ankle1_r:Vector.<Number>;
		public var charAnim_16_ankle2_x:Vector.<Number>;
		public var charAnim_16_ankle2_y:Vector.<Number>;
		public var charAnim_16_ankle2_r:Vector.<Number>;
		public var charAnim_17_head_x:Vector.<Number>;
		public var charAnim_17_head_y:Vector.<Number>;
		public var charAnim_17_head_r:Vector.<Number>;
		public var charAnim_17_body_x:Vector.<Number>;
		public var charAnim_17_body_y:Vector.<Number>;
		public var charAnim_17_body_r:Vector.<Number>;
		public var charAnim_17_foot1_x:Vector.<Number>;
		public var charAnim_17_foot1_y:Vector.<Number>;
		public var charAnim_17_foot1_r:Vector.<Number>;
		public var charAnim_17_foot2_x:Vector.<Number>;
		public var charAnim_17_foot2_y:Vector.<Number>;
		public var charAnim_17_foot2_r:Vector.<Number>;
		public var charAnim_17_ankle1_x:Vector.<Number>;
		public var charAnim_17_ankle1_y:Vector.<Number>;
		public var charAnim_17_ankle1_r:Vector.<Number>;
		public var charAnim_17_ankle2_x:Vector.<Number>;
		public var charAnim_17_ankle2_y:Vector.<Number>;
		public var charAnim_17_ankle2_r:Vector.<Number>;
		public var charAnim_18_head_x:Vector.<Number>;
		public var charAnim_18_head_y:Vector.<Number>;
		public var charAnim_18_head_r:Vector.<Number>;
		public var charAnim_18_body_x:Vector.<Number>;
		public var charAnim_18_body_y:Vector.<Number>;
		public var charAnim_18_body_r:Vector.<Number>;
		public var charAnim_18_foot1_x:Vector.<Number>;
		public var charAnim_18_foot1_y:Vector.<Number>;
		public var charAnim_18_foot1_r:Vector.<Number>;
		public var charAnim_18_foot2_x:Vector.<Number>;
		public var charAnim_18_foot2_y:Vector.<Number>;
		public var charAnim_18_foot2_r:Vector.<Number>;
		public var charAnim_18_ankle1_x:Vector.<Number>;
		public var charAnim_18_ankle1_y:Vector.<Number>;
		public var charAnim_18_ankle1_r:Vector.<Number>;
		public var charAnim_18_ankle2_x:Vector.<Number>;
		public var charAnim_18_ankle2_y:Vector.<Number>;
		public var charAnim_18_ankle2_r:Vector.<Number>;
		public var charAnim_19_head_x:Vector.<Number>;
		public var charAnim_19_head_y:Vector.<Number>;
		public var charAnim_19_head_r:Vector.<Number>;
		public var charAnim_19_body_x:Vector.<Number>;
		public var charAnim_19_body_y:Vector.<Number>;
		public var charAnim_19_body_r:Vector.<Number>;
		public var charAnim_19_foot1_x:Vector.<Number>;
		public var charAnim_19_foot1_y:Vector.<Number>;
		public var charAnim_19_foot1_r:Vector.<Number>;
		public var charAnim_19_foot2_x:Vector.<Number>;
		public var charAnim_19_foot2_y:Vector.<Number>;
		public var charAnim_19_foot2_r:Vector.<Number>;
		public var charAnim_19_ankle1_x:Vector.<Number>;
		public var charAnim_19_ankle1_y:Vector.<Number>;
		public var charAnim_19_ankle1_r:Vector.<Number>;
		public var charAnim_19_ankle2_x:Vector.<Number>;
		public var charAnim_19_ankle2_y:Vector.<Number>;
		public var charAnim_19_ankle2_r:Vector.<Number>;
		public var charAnim_20_head_x:Vector.<Number>;
		public var charAnim_20_head_y:Vector.<Number>;
		public var charAnim_20_head_r:Vector.<Number>;
		public var charAnim_20_body_x:Vector.<Number>;
		public var charAnim_20_body_y:Vector.<Number>;
		public var charAnim_20_body_r:Vector.<Number>;
		public var charAnim_20_foot1_x:Vector.<Number>;
		public var charAnim_20_foot1_y:Vector.<Number>;
		public var charAnim_20_foot1_r:Vector.<Number>;
		public var charAnim_20_foot2_x:Vector.<Number>;
		public var charAnim_20_foot2_y:Vector.<Number>;
		public var charAnim_20_foot2_r:Vector.<Number>;
		public var charAnim_20_ankle1_x:Vector.<Number>;
		public var charAnim_20_ankle1_y:Vector.<Number>;
		public var charAnim_20_ankle1_r:Vector.<Number>;
		public var charAnim_20_ankle2_x:Vector.<Number>;
		public var charAnim_20_ankle2_y:Vector.<Number>;
		public var charAnim_20_ankle2_r:Vector.<Number>;
		public var charAnim_21_head_x:Vector.<Number>;
		public var charAnim_21_head_y:Vector.<Number>;
		public var charAnim_21_head_r:Vector.<Number>;
		public var charAnim_21_body_x:Vector.<Number>;
		public var charAnim_21_body_y:Vector.<Number>;
		public var charAnim_21_body_r:Vector.<Number>;
		public var charAnim_21_foot1_x:Vector.<Number>;
		public var charAnim_21_foot1_y:Vector.<Number>;
		public var charAnim_21_foot1_r:Vector.<Number>;
		public var charAnim_21_foot2_x:Vector.<Number>;
		public var charAnim_21_foot2_y:Vector.<Number>;
		public var charAnim_21_foot2_r:Vector.<Number>;
		public var charAnim_21_ankle1_x:Vector.<Number>;
		public var charAnim_21_ankle1_y:Vector.<Number>;
		public var charAnim_21_ankle1_r:Vector.<Number>;
		public var charAnim_21_ankle2_x:Vector.<Number>;
		public var charAnim_21_ankle2_y:Vector.<Number>;
		public var charAnim_21_ankle2_r:Vector.<Number>;
		public var charAnim_22_head_x:Vector.<Number>;
		public var charAnim_22_head_y:Vector.<Number>;
		public var charAnim_22_head_r:Vector.<Number>;
		public var charAnim_22_body_x:Vector.<Number>;
		public var charAnim_22_body_y:Vector.<Number>;
		public var charAnim_22_body_r:Vector.<Number>;
		public var charAnim_22_foot1_x:Vector.<Number>;
		public var charAnim_22_foot1_y:Vector.<Number>;
		public var charAnim_22_foot1_r:Vector.<Number>;
		public var charAnim_22_foot2_x:Vector.<Number>;
		public var charAnim_22_foot2_y:Vector.<Number>;
		public var charAnim_22_foot2_r:Vector.<Number>;
		public var charAnim_22_ankle1_x:Vector.<Number>;
		public var charAnim_22_ankle1_y:Vector.<Number>;
		public var charAnim_22_ankle1_r:Vector.<Number>;
		public var charAnim_22_ankle2_x:Vector.<Number>;
		public var charAnim_22_ankle2_y:Vector.<Number>;
		public var charAnim_22_ankle2_r:Vector.<Number>;
		public var charAnim_23_head_x:Vector.<Number>;
		public var charAnim_23_head_y:Vector.<Number>;
		public var charAnim_23_head_r:Vector.<Number>;
		public var charAnim_23_body_x:Vector.<Number>;
		public var charAnim_23_body_y:Vector.<Number>;
		public var charAnim_23_body_r:Vector.<Number>;
		public var charAnim_23_foot1_x:Vector.<Number>;
		public var charAnim_23_foot1_y:Vector.<Number>;
		public var charAnim_23_foot1_r:Vector.<Number>;
		public var charAnim_23_foot2_x:Vector.<Number>;
		public var charAnim_23_foot2_y:Vector.<Number>;
		public var charAnim_23_foot2_r:Vector.<Number>;
		public var charAnim_23_ankle1_x:Vector.<Number>;
		public var charAnim_23_ankle1_y:Vector.<Number>;
		public var charAnim_23_ankle1_r:Vector.<Number>;
		public var charAnim_23_ankle2_x:Vector.<Number>;
		public var charAnim_23_ankle2_y:Vector.<Number>;
		public var charAnim_23_ankle2_r:Vector.<Number>;
		public var charAnim_24_head_x:Vector.<Number>;
		public var charAnim_24_head_y:Vector.<Number>;
		public var charAnim_24_head_r:Vector.<Number>;
		public var charAnim_24_body_x:Vector.<Number>;
		public var charAnim_24_body_y:Vector.<Number>;
		public var charAnim_24_body_r:Vector.<Number>;
		public var charAnim_24_foot1_x:Vector.<Number>;
		public var charAnim_24_foot1_y:Vector.<Number>;
		public var charAnim_24_foot1_r:Vector.<Number>;
		public var charAnim_24_foot2_x:Vector.<Number>;
		public var charAnim_24_foot2_y:Vector.<Number>;
		public var charAnim_24_foot2_r:Vector.<Number>;
		public var charAnim_24_ankle1_x:Vector.<Number>;
		public var charAnim_24_ankle1_y:Vector.<Number>;
		public var charAnim_24_ankle1_r:Vector.<Number>;
		public var charAnim_24_ankle2_x:Vector.<Number>;
		public var charAnim_24_ankle2_y:Vector.<Number>;
		public var charAnim_24_ankle2_r:Vector.<Number>;
		public var charAnim_24_hand1_x:Vector.<Number>;
		public var charAnim_24_hand1_y:Vector.<Number>;
		public var charAnim_24_hand1_r:Vector.<Number>;
		public var charAnim_24_hand2_x:Vector.<Number>;
		public var charAnim_24_hand2_y:Vector.<Number>;
		public var charAnim_24_hand2_r:Vector.<Number>;
		public var charAnim_25_head_x:Vector.<Number>;
		public var charAnim_25_head_y:Vector.<Number>;
		public var charAnim_25_head_r:Vector.<Number>;
		public var charAnim_25_body_x:Vector.<Number>;
		public var charAnim_25_body_y:Vector.<Number>;
		public var charAnim_25_body_r:Vector.<Number>;
		public var charAnim_25_foot1_x:Vector.<Number>;
		public var charAnim_25_foot1_y:Vector.<Number>;
		public var charAnim_25_foot1_r:Vector.<Number>;
		public var charAnim_25_foot2_x:Vector.<Number>;
		public var charAnim_25_foot2_y:Vector.<Number>;
		public var charAnim_25_foot2_r:Vector.<Number>;
		public var charAnim_25_ankle1_x:Vector.<Number>;
		public var charAnim_25_ankle1_y:Vector.<Number>;
		public var charAnim_25_ankle1_r:Vector.<Number>;
		public var charAnim_25_ankle2_x:Vector.<Number>;
		public var charAnim_25_ankle2_y:Vector.<Number>;
		public var charAnim_25_ankle2_r:Vector.<Number>;
		public var charAnim_25_hand1_x:Vector.<Number>;
		public var charAnim_25_hand1_y:Vector.<Number>;
		public var charAnim_25_hand1_r:Vector.<Number>;
		public var charAnim_25_hand2_x:Vector.<Number>;
		public var charAnim_25_hand2_y:Vector.<Number>;
		public var charAnim_25_hand2_r:Vector.<Number>;
		public var charAnim_26_head_x:Vector.<Number>;
		public var charAnim_26_head_y:Vector.<Number>;
		public var charAnim_26_head_r:Vector.<Number>;
		public var charAnim_26_body_x:Vector.<Number>;
		public var charAnim_26_body_y:Vector.<Number>;
		public var charAnim_26_body_r:Vector.<Number>;
		public var charAnim_26_foot1_x:Vector.<Number>;
		public var charAnim_26_foot1_y:Vector.<Number>;
		public var charAnim_26_foot1_r:Vector.<Number>;
		public var charAnim_26_foot2_x:Vector.<Number>;
		public var charAnim_26_foot2_y:Vector.<Number>;
		public var charAnim_26_foot2_r:Vector.<Number>;
		public var charAnim_26_ankle1_x:Vector.<Number>;
		public var charAnim_26_ankle1_y:Vector.<Number>;
		public var charAnim_26_ankle1_r:Vector.<Number>;
		public var charAnim_26_ankle2_x:Vector.<Number>;
		public var charAnim_26_ankle2_y:Vector.<Number>;
		public var charAnim_26_ankle2_r:Vector.<Number>;
		public var charAnim_26_hand1_x:Vector.<Number>;
		public var charAnim_26_hand1_y:Vector.<Number>;
		public var charAnim_26_hand1_r:Vector.<Number>;
		public var charAnim_26_hand2_x:Vector.<Number>;
		public var charAnim_26_hand2_y:Vector.<Number>;
		public var charAnim_26_hand2_r:Vector.<Number>;
		public var charAnim_27_head_x:Vector.<Number>;
		public var charAnim_27_head_y:Vector.<Number>;
		public var charAnim_27_head_r:Vector.<Number>;
		public var charAnim_27_body_x:Vector.<Number>;
		public var charAnim_27_body_y:Vector.<Number>;
		public var charAnim_27_body_r:Vector.<Number>;
		public var charAnim_27_foot1_x:Vector.<Number>;
		public var charAnim_27_foot1_y:Vector.<Number>;
		public var charAnim_27_foot1_r:Vector.<Number>;
		public var charAnim_27_foot2_x:Vector.<Number>;
		public var charAnim_27_foot2_y:Vector.<Number>;
		public var charAnim_27_foot2_r:Vector.<Number>;
		public var charAnim_27_ankle1_x:Vector.<Number>;
		public var charAnim_27_ankle1_y:Vector.<Number>;
		public var charAnim_27_ankle1_r:Vector.<Number>;
		public var charAnim_27_ankle2_x:Vector.<Number>;
		public var charAnim_27_ankle2_y:Vector.<Number>;
		public var charAnim_27_ankle2_r:Vector.<Number>;
		public var charAnim_27_hand1_x:Vector.<Number>;
		public var charAnim_27_hand1_y:Vector.<Number>;
		public var charAnim_27_hand1_r:Vector.<Number>;
		public var charAnim_27_hand2_x:Vector.<Number>;
		public var charAnim_27_hand2_y:Vector.<Number>;
		public var charAnim_27_hand2_r:Vector.<Number>;
		public var charAnim_28_head_x:Vector.<Number>;
		public var charAnim_28_head_y:Vector.<Number>;
		public var charAnim_28_head_r:Vector.<Number>;
		public var charAnim_28_body_x:Vector.<Number>;
		public var charAnim_28_body_y:Vector.<Number>;
		public var charAnim_28_body_r:Vector.<Number>;
		public var charAnim_28_foot1_x:Vector.<Number>;
		public var charAnim_28_foot1_y:Vector.<Number>;
		public var charAnim_28_foot1_r:Vector.<Number>;
		public var charAnim_28_foot2_x:Vector.<Number>;
		public var charAnim_28_foot2_y:Vector.<Number>;
		public var charAnim_28_foot2_r:Vector.<Number>;
		public var charAnim_28_ankle1_x:Vector.<Number>;
		public var charAnim_28_ankle1_y:Vector.<Number>;
		public var charAnim_28_ankle1_r:Vector.<Number>;
		public var charAnim_28_ankle2_x:Vector.<Number>;
		public var charAnim_28_ankle2_y:Vector.<Number>;
		public var charAnim_28_ankle2_r:Vector.<Number>;
		public var charAnim_28_hand1_x:Vector.<Number>;
		public var charAnim_28_hand1_y:Vector.<Number>;
		public var charAnim_28_hand1_r:Vector.<Number>;
		public var charAnim_28_hand2_x:Vector.<Number>;
		public var charAnim_28_hand2_y:Vector.<Number>;
		public var charAnim_28_hand2_r:Vector.<Number>;
		public var charAnim_29_head_x:Vector.<Number>;
		public var charAnim_29_head_y:Vector.<Number>;
		public var charAnim_29_head_r:Vector.<Number>;
		public var charAnim_29_body_x:Vector.<Number>;
		public var charAnim_29_body_y:Vector.<Number>;
		public var charAnim_29_body_r:Vector.<Number>;
		public var charAnim_29_foot1_x:Vector.<Number>;
		public var charAnim_29_foot1_y:Vector.<Number>;
		public var charAnim_29_foot1_r:Vector.<Number>;
		public var charAnim_29_foot2_x:Vector.<Number>;
		public var charAnim_29_foot2_y:Vector.<Number>;
		public var charAnim_29_foot2_r:Vector.<Number>;
		public var charAnim_29_ankle1_x:Vector.<Number>;
		public var charAnim_29_ankle1_y:Vector.<Number>;
		public var charAnim_29_ankle1_r:Vector.<Number>;
		public var charAnim_29_ankle2_x:Vector.<Number>;
		public var charAnim_29_ankle2_y:Vector.<Number>;
		public var charAnim_29_ankle2_r:Vector.<Number>;
		public var charAnim_29_hand1_x:Vector.<Number>;
		public var charAnim_29_hand1_y:Vector.<Number>;
		public var charAnim_29_hand1_r:Vector.<Number>;
		public var charAnim_29_hand2_x:Vector.<Number>;
		public var charAnim_29_hand2_y:Vector.<Number>;
		public var charAnim_29_hand2_r:Vector.<Number>;
		public var maxFrames:Array;
		public var charAnim_headRot:Array;
		public var charAnim_hasHands:Array;
		public var char_head_0:Sprite;
		public var char_head_0_bm:BitmapData;
		public var char_body_0:Sprite;
		public var char_body_0_bm:BitmapData;
		public var char_foot_0:Sprite;
		public var char_foot_0_bm:BitmapData;
		public var char_ankle_0:Sprite;
		public var char_ankle_0_bm:BitmapData;
		public var char_hand1_0:Sprite;
		public var char_hand1_0_bm:BitmapData;
		public var char_hand2_0:Sprite;
		public var char_hand2_0_bm:BitmapData;
		public var character_appearance_0:Array;
		public var character_colors_0:Array;
		public var char_head_1:Sprite;
		public var char_head_1_bm:BitmapData;
		public var char_body_1:Sprite;
		public var char_body_1_bm:BitmapData;
		public var char_foot_1:Sprite;
		public var char_foot_1_bm:BitmapData;
		public var char_ankle_1:Sprite;
		public var char_ankle_1_bm:BitmapData;
		public var char_hand1_1:Sprite;
		public var char_hand1_1_bm:BitmapData;
		public var char_hand2_1:Sprite;
		public var char_hand2_1_bm:BitmapData;
		public var character_appearance_1:Array;
		public var character_colors_1:Array;
		public var char_head_2:Sprite;
		public var char_head_2_bm:BitmapData;
		public var char_body_2:Sprite;
		public var char_body_2_bm:BitmapData;
		public var char_foot_2:Sprite;
		public var char_foot_2_bm:BitmapData;
		public var char_ankle_2:Sprite;
		public var char_ankle_2_bm:BitmapData;
		public var char_hand1_2:Sprite;
		public var char_hand1_2_bm:BitmapData;
		public var char_hand2_2:Sprite;
		public var char_hand2_2_bm:BitmapData;
		public var character_appearance_2:Array;
		public var character_colors_2:Array;
		public var char_head_3:Sprite;
		public var char_head_3_bm:BitmapData;
		public var char_body_3:Sprite;
		public var char_body_3_bm:BitmapData;
		public var char_foot_3:Sprite;
		public var char_foot_3_bm:BitmapData;
		public var char_ankle_3:Sprite;
		public var char_ankle_3_bm:BitmapData;
		public var char_hand1_3:Sprite;
		public var char_hand1_3_bm:BitmapData;
		public var char_hand2_3:Sprite;
		public var char_hand2_3_bm:BitmapData;
		public var character_appearance_3:Array;
		public var character_colors_3:Array;
		public var char_head_4:Sprite;
		public var char_head_4_bm:BitmapData;
		public var char_body_4:Sprite;
		public var char_body_4_bm:BitmapData;
		public var char_foot_4:Sprite;
		public var char_foot_4_bm:BitmapData;
		public var char_ankle_4:Sprite;
		public var char_ankle_4_bm:BitmapData;
		public var char_hand1_4:Sprite;
		public var char_hand1_4_bm:BitmapData;
		public var char_hand2_4:Sprite;
		public var char_hand2_4_bm:BitmapData;
		public var character_appearance_4:Array;
		public var character_colors_4:Array;
		public var char_head_5:Sprite;
		public var char_head_5_bm:BitmapData;
		public var char_body_5:Sprite;
		public var char_body_5_bm:BitmapData;
		public var char_foot_5:Sprite;
		public var char_foot_5_bm:BitmapData;
		public var char_ankle_5:Sprite;
		public var char_ankle_5_bm:BitmapData;
		public var char_hand1_5:Sprite;
		public var char_hand1_5_bm:BitmapData;
		public var char_hand2_5:Sprite;
		public var char_hand2_5_bm:BitmapData;
		public var character_appearance_5:Array;
		public var character_colors_5:Array;
		public var levelColorFilter:AdjustColor;
		public var smoothPlayer:Boolean;
		public var smoothEnemies:Boolean;
		public var enemy_large1_anim1_head_x:Vector.<Number>;
		public var enemy_large1_anim1_head_y:Vector.<Number>;
		public var enemy_large1_anim1_head_r:Vector.<Number>;
		public var enemy_large1_anim1_body_x:Vector.<Number>;
		public var enemy_large1_anim1_body_y:Vector.<Number>;
		public var enemy_large1_anim1_body_r:Vector.<Number>;
		public var enemy_large1_anim1_foot1_x:Vector.<Number>;
		public var enemy_large1_anim1_foot1_y:Vector.<Number>;
		public var enemy_large1_anim1_foot1_r:Vector.<Number>;
		public var enemy_large1_anim1_foot2_x:Vector.<Number>;
		public var enemy_large1_anim1_foot2_y:Vector.<Number>;
		public var enemy_large1_anim1_foot2_r:Vector.<Number>;
		public var enemy_large1_anim1_ankle1_x:Vector.<Number>;
		public var enemy_large1_anim1_ankle1_y:Vector.<Number>;
		public var enemy_large1_anim1_ankle1_r:Vector.<Number>;
		public var enemy_large1_anim1_ankle2_x:Vector.<Number>;
		public var enemy_large1_anim1_ankle2_y:Vector.<Number>;
		public var enemy_large1_anim1_ankle2_r:Vector.<Number>;
		public var enemy_large1_anim1_gun_x:Vector.<Number>;
		public var enemy_large1_anim1_gun_y:Vector.<Number>;
		public var enemy_large1_anim1_gun_r:Vector.<Number>;
		public var enemy_large1_anim1_sword_x:Vector.<Number>;
		public var enemy_large1_anim1_sword_y:Vector.<Number>;
		public var enemy_large1_anim1_sword_r:Vector.<Number>;
		public var enemy_large1_anim1_shoulder_x:Vector.<Number>;
		public var enemy_large1_anim1_shoulder_y:Vector.<Number>;
		public var enemy_large1_anim1_shoulder_r:Vector.<Number>;
		public var enemy_large1_anim1_pad1_x:Vector.<Number>;
		public var enemy_large1_anim1_pad1_y:Vector.<Number>;
		public var enemy_large1_anim1_pad1_r:Vector.<Number>;
		public var enemy_large1_anim1_pad2_x:Vector.<Number>;
		public var enemy_large1_anim1_pad2_y:Vector.<Number>;
		public var enemy_large1_anim1_pad2_r:Vector.<Number>;
		public var enemy_large1_anim2_head_x:Vector.<Number>;
		public var enemy_large1_anim2_head_y:Vector.<Number>;
		public var enemy_large1_anim2_head_r:Vector.<Number>;
		public var enemy_large1_anim2_body_x:Vector.<Number>;
		public var enemy_large1_anim2_body_y:Vector.<Number>;
		public var enemy_large1_anim2_body_r:Vector.<Number>;
		public var enemy_large1_anim2_foot1_x:Vector.<Number>;
		public var enemy_large1_anim2_foot1_y:Vector.<Number>;
		public var enemy_large1_anim2_foot1_r:Vector.<Number>;
		public var enemy_large1_anim2_foot2_x:Vector.<Number>;
		public var enemy_large1_anim2_foot2_y:Vector.<Number>;
		public var enemy_large1_anim2_foot2_r:Vector.<Number>;
		public var enemy_large1_anim2_ankle1_x:Vector.<Number>;
		public var enemy_large1_anim2_ankle1_y:Vector.<Number>;
		public var enemy_large1_anim2_ankle1_r:Vector.<Number>;
		public var enemy_large1_anim2_ankle2_x:Vector.<Number>;
		public var enemy_large1_anim2_ankle2_y:Vector.<Number>;
		public var enemy_large1_anim2_ankle2_r:Vector.<Number>;
		public var enemy_large1_anim2_gun_x:Vector.<Number>;
		public var enemy_large1_anim2_gun_y:Vector.<Number>;
		public var enemy_large1_anim2_gun_r:Vector.<Number>;
		public var enemy_large1_anim2_sword_x:Vector.<Number>;
		public var enemy_large1_anim2_sword_y:Vector.<Number>;
		public var enemy_large1_anim2_sword_r:Vector.<Number>;
		public var enemy_large1_anim2_shoulder_x:Vector.<Number>;
		public var enemy_large1_anim2_shoulder_y:Vector.<Number>;
		public var enemy_large1_anim2_shoulder_r:Vector.<Number>;
		public var enemy_large1_anim2_pad1_x:Vector.<Number>;
		public var enemy_large1_anim2_pad1_y:Vector.<Number>;
		public var enemy_large1_anim2_pad1_r:Vector.<Number>;
		public var enemy_large1_anim2_pad2_x:Vector.<Number>;
		public var enemy_large1_anim2_pad2_y:Vector.<Number>;
		public var enemy_large1_anim2_pad2_r:Vector.<Number>;
		public var enemy_large1_anim3_head_x:Vector.<Number>;
		public var enemy_large1_anim3_head_y:Vector.<Number>;
		public var enemy_large1_anim3_head_r:Vector.<Number>;
		public var enemy_large1_anim3_body_x:Vector.<Number>;
		public var enemy_large1_anim3_body_y:Vector.<Number>;
		public var enemy_large1_anim3_body_r:Vector.<Number>;
		public var enemy_large1_anim3_foot1_x:Vector.<Number>;
		public var enemy_large1_anim3_foot1_y:Vector.<Number>;
		public var enemy_large1_anim3_foot1_r:Vector.<Number>;
		public var enemy_large1_anim3_foot2_x:Vector.<Number>;
		public var enemy_large1_anim3_foot2_y:Vector.<Number>;
		public var enemy_large1_anim3_foot2_r:Vector.<Number>;
		public var enemy_large1_anim3_ankle1_x:Vector.<Number>;
		public var enemy_large1_anim3_ankle1_y:Vector.<Number>;
		public var enemy_large1_anim3_ankle1_r:Vector.<Number>;
		public var enemy_large1_anim3_ankle2_x:Vector.<Number>;
		public var enemy_large1_anim3_ankle2_y:Vector.<Number>;
		public var enemy_large1_anim3_ankle2_r:Vector.<Number>;
		public var enemy_large1_anim3_gun_x:Vector.<Number>;
		public var enemy_large1_anim3_gun_y:Vector.<Number>;
		public var enemy_large1_anim3_gun_r:Vector.<Number>;
		public var enemy_large1_anim3_sword_x:Vector.<Number>;
		public var enemy_large1_anim3_sword_y:Vector.<Number>;
		public var enemy_large1_anim3_sword_r:Vector.<Number>;
		public var enemy_large1_anim3_shoulder_x:Vector.<Number>;
		public var enemy_large1_anim3_shoulder_y:Vector.<Number>;
		public var enemy_large1_anim3_shoulder_r:Vector.<Number>;
		public var enemy_large1_anim3_pad1_x:Vector.<Number>;
		public var enemy_large1_anim3_pad1_y:Vector.<Number>;
		public var enemy_large1_anim3_pad1_r:Vector.<Number>;
		public var enemy_large1_anim3_pad2_x:Vector.<Number>;
		public var enemy_large1_anim3_pad2_y:Vector.<Number>;
		public var enemy_large1_anim3_pad2_r:Vector.<Number>;
		public var enemy_large1_anim4_head_x:Vector.<Number>;
		public var enemy_large1_anim4_head_y:Vector.<Number>;
		public var enemy_large1_anim4_head_r:Vector.<Number>;
		public var enemy_large1_anim4_body_x:Vector.<Number>;
		public var enemy_large1_anim4_body_y:Vector.<Number>;
		public var enemy_large1_anim4_body_r:Vector.<Number>;
		public var enemy_large1_anim4_foot1_x:Vector.<Number>;
		public var enemy_large1_anim4_foot1_y:Vector.<Number>;
		public var enemy_large1_anim4_foot1_r:Vector.<Number>;
		public var enemy_large1_anim4_foot2_x:Vector.<Number>;
		public var enemy_large1_anim4_foot2_y:Vector.<Number>;
		public var enemy_large1_anim4_foot2_r:Vector.<Number>;
		public var enemy_large1_anim4_ankle1_x:Vector.<Number>;
		public var enemy_large1_anim4_ankle1_y:Vector.<Number>;
		public var enemy_large1_anim4_ankle1_r:Vector.<Number>;
		public var enemy_large1_anim4_ankle2_x:Vector.<Number>;
		public var enemy_large1_anim4_ankle2_y:Vector.<Number>;
		public var enemy_large1_anim4_ankle2_r:Vector.<Number>;
		public var enemy_large1_anim4_gun_x:Vector.<Number>;
		public var enemy_large1_anim4_gun_y:Vector.<Number>;
		public var enemy_large1_anim4_gun_r:Vector.<Number>;
		public var enemy_large1_anim4_sword_x:Vector.<Number>;
		public var enemy_large1_anim4_sword_y:Vector.<Number>;
		public var enemy_large1_anim4_sword_r:Vector.<Number>;
		public var enemy_large1_anim4_shoulder_x:Vector.<Number>;
		public var enemy_large1_anim4_shoulder_y:Vector.<Number>;
		public var enemy_large1_anim4_shoulder_r:Vector.<Number>;
		public var enemy_large1_anim4_pad1_x:Vector.<Number>;
		public var enemy_large1_anim4_pad1_y:Vector.<Number>;
		public var enemy_large1_anim4_pad1_r:Vector.<Number>;
		public var enemy_large1_anim4_pad2_x:Vector.<Number>;
		public var enemy_large1_anim4_pad2_y:Vector.<Number>;
		public var enemy_large1_anim4_pad2_r:Vector.<Number>;
		public var enemy_large1_anim5_head_x:Vector.<Number>;
		public var enemy_large1_anim5_head_y:Vector.<Number>;
		public var enemy_large1_anim5_head_r:Vector.<Number>;
		public var enemy_large1_anim5_body_x:Vector.<Number>;
		public var enemy_large1_anim5_body_y:Vector.<Number>;
		public var enemy_large1_anim5_body_r:Vector.<Number>;
		public var enemy_large1_anim5_foot1_x:Vector.<Number>;
		public var enemy_large1_anim5_foot1_y:Vector.<Number>;
		public var enemy_large1_anim5_foot1_r:Vector.<Number>;
		public var enemy_large1_anim5_foot2_x:Vector.<Number>;
		public var enemy_large1_anim5_foot2_y:Vector.<Number>;
		public var enemy_large1_anim5_foot2_r:Vector.<Number>;
		public var enemy_large1_anim5_ankle1_x:Vector.<Number>;
		public var enemy_large1_anim5_ankle1_y:Vector.<Number>;
		public var enemy_large1_anim5_ankle1_r:Vector.<Number>;
		public var enemy_large1_anim5_ankle2_x:Vector.<Number>;
		public var enemy_large1_anim5_ankle2_y:Vector.<Number>;
		public var enemy_large1_anim5_ankle2_r:Vector.<Number>;
		public var enemy_large1_anim5_gun_x:Vector.<Number>;
		public var enemy_large1_anim5_gun_y:Vector.<Number>;
		public var enemy_large1_anim5_gun_r:Vector.<Number>;
		public var enemy_large1_anim5_sword_x:Vector.<Number>;
		public var enemy_large1_anim5_sword_y:Vector.<Number>;
		public var enemy_large1_anim5_sword_r:Vector.<Number>;
		public var enemy_large1_anim5_shoulder_x:Vector.<Number>;
		public var enemy_large1_anim5_shoulder_y:Vector.<Number>;
		public var enemy_large1_anim5_shoulder_r:Vector.<Number>;
		public var enemy_large1_anim5_pad1_x:Vector.<Number>;
		public var enemy_large1_anim5_pad1_y:Vector.<Number>;
		public var enemy_large1_anim5_pad1_r:Vector.<Number>;
		public var enemy_large1_anim5_pad2_x:Vector.<Number>;
		public var enemy_large1_anim5_pad2_y:Vector.<Number>;
		public var enemy_large1_anim5_pad2_r:Vector.<Number>;
		public var enemy_large1_anim6_head_x:Vector.<Number>;
		public var enemy_large1_anim6_head_y:Vector.<Number>;
		public var enemy_large1_anim6_head_r:Vector.<Number>;
		public var enemy_large1_anim6_body_x:Vector.<Number>;
		public var enemy_large1_anim6_body_y:Vector.<Number>;
		public var enemy_large1_anim6_body_r:Vector.<Number>;
		public var enemy_large1_anim6_foot1_x:Vector.<Number>;
		public var enemy_large1_anim6_foot1_y:Vector.<Number>;
		public var enemy_large1_anim6_foot1_r:Vector.<Number>;
		public var enemy_large1_anim6_foot2_x:Vector.<Number>;
		public var enemy_large1_anim6_foot2_y:Vector.<Number>;
		public var enemy_large1_anim6_foot2_r:Vector.<Number>;
		public var enemy_large1_anim6_ankle1_x:Vector.<Number>;
		public var enemy_large1_anim6_ankle1_y:Vector.<Number>;
		public var enemy_large1_anim6_ankle1_r:Vector.<Number>;
		public var enemy_large1_anim6_ankle2_x:Vector.<Number>;
		public var enemy_large1_anim6_ankle2_y:Vector.<Number>;
		public var enemy_large1_anim6_ankle2_r:Vector.<Number>;
		public var enemy_large1_anim6_gun_x:Vector.<Number>;
		public var enemy_large1_anim6_gun_y:Vector.<Number>;
		public var enemy_large1_anim6_gun_r:Vector.<Number>;
		public var enemy_large1_anim6_sword_x:Vector.<Number>;
		public var enemy_large1_anim6_sword_y:Vector.<Number>;
		public var enemy_large1_anim6_sword_r:Vector.<Number>;
		public var enemy_large1_anim6_shoulder_x:Vector.<Number>;
		public var enemy_large1_anim6_shoulder_y:Vector.<Number>;
		public var enemy_large1_anim6_shoulder_r:Vector.<Number>;
		public var enemy_large1_anim6_pad1_x:Vector.<Number>;
		public var enemy_large1_anim6_pad1_y:Vector.<Number>;
		public var enemy_large1_anim6_pad1_r:Vector.<Number>;
		public var enemy_large1_anim6_pad2_x:Vector.<Number>;
		public var enemy_large1_anim6_pad2_y:Vector.<Number>;
		public var enemy_large1_anim6_pad2_r:Vector.<Number>;
		public var enemy_large1_anim7_head_x:Vector.<Number>;
		public var enemy_large1_anim7_head_y:Vector.<Number>;
		public var enemy_large1_anim7_head_r:Vector.<Number>;
		public var enemy_large1_anim7_body_x:Vector.<Number>;
		public var enemy_large1_anim7_body_y:Vector.<Number>;
		public var enemy_large1_anim7_body_r:Vector.<Number>;
		public var enemy_large1_anim7_foot1_x:Vector.<Number>;
		public var enemy_large1_anim7_foot1_y:Vector.<Number>;
		public var enemy_large1_anim7_foot1_r:Vector.<Number>;
		public var enemy_large1_anim7_foot2_x:Vector.<Number>;
		public var enemy_large1_anim7_foot2_y:Vector.<Number>;
		public var enemy_large1_anim7_foot2_r:Vector.<Number>;
		public var enemy_large1_anim7_ankle1_x:Vector.<Number>;
		public var enemy_large1_anim7_ankle1_y:Vector.<Number>;
		public var enemy_large1_anim7_ankle1_r:Vector.<Number>;
		public var enemy_large1_anim7_ankle2_x:Vector.<Number>;
		public var enemy_large1_anim7_ankle2_y:Vector.<Number>;
		public var enemy_large1_anim7_ankle2_r:Vector.<Number>;
		public var enemy_large1_anim7_gun_x:Vector.<Number>;
		public var enemy_large1_anim7_gun_y:Vector.<Number>;
		public var enemy_large1_anim7_gun_r:Vector.<Number>;
		public var enemy_large1_anim7_sword_x:Vector.<Number>;
		public var enemy_large1_anim7_sword_y:Vector.<Number>;
		public var enemy_large1_anim7_sword_r:Vector.<Number>;
		public var enemy_large1_anim7_shoulder_x:Vector.<Number>;
		public var enemy_large1_anim7_shoulder_y:Vector.<Number>;
		public var enemy_large1_anim7_shoulder_r:Vector.<Number>;
		public var enemy_large1_anim7_pad1_x:Vector.<Number>;
		public var enemy_large1_anim7_pad1_y:Vector.<Number>;
		public var enemy_large1_anim7_pad1_r:Vector.<Number>;
		public var enemy_large1_anim7_pad2_x:Vector.<Number>;
		public var enemy_large1_anim7_pad2_y:Vector.<Number>;
		public var enemy_large1_anim7_pad2_r:Vector.<Number>;
		public var enemy_large1_anim8_head_x:Vector.<Number>;
		public var enemy_large1_anim8_head_y:Vector.<Number>;
		public var enemy_large1_anim8_head_r:Vector.<Number>;
		public var enemy_large1_anim8_body_x:Vector.<Number>;
		public var enemy_large1_anim8_body_y:Vector.<Number>;
		public var enemy_large1_anim8_body_r:Vector.<Number>;
		public var enemy_large1_anim8_foot1_x:Vector.<Number>;
		public var enemy_large1_anim8_foot1_y:Vector.<Number>;
		public var enemy_large1_anim8_foot1_r:Vector.<Number>;
		public var enemy_large1_anim8_foot2_x:Vector.<Number>;
		public var enemy_large1_anim8_foot2_y:Vector.<Number>;
		public var enemy_large1_anim8_foot2_r:Vector.<Number>;
		public var enemy_large1_anim8_ankle1_x:Vector.<Number>;
		public var enemy_large1_anim8_ankle1_y:Vector.<Number>;
		public var enemy_large1_anim8_ankle1_r:Vector.<Number>;
		public var enemy_large1_anim8_ankle2_x:Vector.<Number>;
		public var enemy_large1_anim8_ankle2_y:Vector.<Number>;
		public var enemy_large1_anim8_ankle2_r:Vector.<Number>;
		public var enemy_large1_anim8_gun_x:Vector.<Number>;
		public var enemy_large1_anim8_gun_y:Vector.<Number>;
		public var enemy_large1_anim8_gun_r:Vector.<Number>;
		public var enemy_large1_anim8_sword_x:Vector.<Number>;
		public var enemy_large1_anim8_sword_y:Vector.<Number>;
		public var enemy_large1_anim8_sword_r:Vector.<Number>;
		public var enemy_large1_anim8_shoulder_x:Vector.<Number>;
		public var enemy_large1_anim8_shoulder_y:Vector.<Number>;
		public var enemy_large1_anim8_shoulder_r:Vector.<Number>;
		public var enemy_large1_anim8_pad1_x:Vector.<Number>;
		public var enemy_large1_anim8_pad1_y:Vector.<Number>;
		public var enemy_large1_anim8_pad1_r:Vector.<Number>;
		public var enemy_large1_anim8_pad2_x:Vector.<Number>;
		public var enemy_large1_anim8_pad2_y:Vector.<Number>;
		public var enemy_large1_anim8_pad2_r:Vector.<Number>;
		public var enemy_large1_maxFrames:Array;
		public var enemy_large1_head:Sprite;
		public var enemy_large1_head_bm:BitmapData;
		public var enemy_large1_body:Sprite;
		public var enemy_large1_body_bm:BitmapData;
		public var enemy_large1_foot:Sprite;
		public var enemy_large1_foot_bm:BitmapData;
		public var enemy_large1_ankle:Sprite;
		public var enemy_large1_ankle_bm:BitmapData;
		public var enemy_large1_gun:Sprite;
		public var enemy_large1_gun_bm:BitmapData;
		public var enemy_large1_sword:Sprite;
		public var enemy_large1_sword_bm:BitmapData;
		public var enemy_large1_shoulder:Sprite;
		public var enemy_large1_shoulder_bm:BitmapData;
		public var enemy_large1_pad1:Sprite;
		public var enemy_large1_pad1_bm:BitmapData;
		public var enemy_large1_pad2:Sprite;
		public var enemy_large1_pad2_bm:BitmapData;
		public var tempParts:Array;
		public var tempPartToRender:String;
		public var tempPartSprite:String;
		public var enemy_large1_renderOrder:Array;
		public var enemy_large1_spriteOrder:Array;
		public var enemy_large1_frame:Number;
		public var beanAnimWidth:Array;
		public var beanAnimHeight:Array;
		public var beanAnimOrigin_x:Array;
		public var beanAnimOrigin_y:Array;
		public var beanAnimFrMax:Array;
		public var teenieAnimWidth:Array;
		public var teenieAnimHeight:Array;
		public var teenieAnimOrigin_x:Array;
		public var teenieAnimOrigin_y:Array;
		public var teenieAnimFrMax:Array;
		public var bean_anim0_0:BitmapData;
		public var bean_anim1_0:BitmapData;
		public var bean_anim2_0:BitmapData;
		public var bean_anim3_0:BitmapData;
		public var bean_anim4_0:BitmapData;
		public var bean_anim5_0:BitmapData;
		public var bean_anim6_0:BitmapData;
		public var bean_anim0_1:BitmapData;
		public var bean_anim1_1:BitmapData;
		public var bean_anim2_1:BitmapData;
		public var bean_anim3_1:BitmapData;
		public var bean_anim4_1:BitmapData;
		public var bean_anim5_1:BitmapData;
		public var bean_anim6_1:BitmapData;
		public var teenie_anim0_0:BitmapData;
		public var teenie_anim1_0:BitmapData;
		public var teenie_anim2_0:BitmapData;
		public var teenie_anim3_0:BitmapData;
		public var teenie_anim4_0:BitmapData;
		public var teenie_anim5_0:BitmapData;
		public var teenie_anim0_1:BitmapData;
		public var teenie_anim1_1:BitmapData;
		public var teenie_anim2_1:BitmapData;
		public var teenie_anim3_1:BitmapData;
		public var teenie_anim4_1:BitmapData;
		public var teenie_anim5_1:BitmapData;
		public var zombieAnim_1_head_x:Vector.<Number>;
		public var zombieAnim_1_head_y:Vector.<Number>;
		public var zombieAnim_1_head_r:Vector.<Number>;
		public var zombieAnim_1_body_x:Vector.<Number>;
		public var zombieAnim_1_body_y:Vector.<Number>;
		public var zombieAnim_1_body_r:Vector.<Number>;
		public var zombieAnim_1_foot1_x:Vector.<Number>;
		public var zombieAnim_1_foot1_y:Vector.<Number>;
		public var zombieAnim_1_foot1_r:Vector.<Number>;
		public var zombieAnim_1_foot2_x:Vector.<Number>;
		public var zombieAnim_1_foot2_y:Vector.<Number>;
		public var zombieAnim_1_foot2_r:Vector.<Number>;
		public var zombieAnim_1_ankle1_x:Vector.<Number>;
		public var zombieAnim_1_ankle1_y:Vector.<Number>;
		public var zombieAnim_1_ankle1_r:Vector.<Number>;
		public var zombieAnim_1_ankle2_x:Vector.<Number>;
		public var zombieAnim_1_ankle2_y:Vector.<Number>;
		public var zombieAnim_1_ankle2_r:Vector.<Number>;
		public var zombieAnim_1_hand1_x:Vector.<Number>;
		public var zombieAnim_1_hand1_y:Vector.<Number>;
		public var zombieAnim_1_hand1_r:Vector.<Number>;
		public var zombieAnim_1_hand2_x:Vector.<Number>;
		public var zombieAnim_1_hand2_y:Vector.<Number>;
		public var zombieAnim_1_hand2_r:Vector.<Number>;
		public var zombieAnim_2_head_x:Vector.<Number>;
		public var zombieAnim_2_head_y:Vector.<Number>;
		public var zombieAnim_2_head_r:Vector.<Number>;
		public var zombieAnim_2_body_x:Vector.<Number>;
		public var zombieAnim_2_body_y:Vector.<Number>;
		public var zombieAnim_2_body_r:Vector.<Number>;
		public var zombieAnim_2_foot1_x:Vector.<Number>;
		public var zombieAnim_2_foot1_y:Vector.<Number>;
		public var zombieAnim_2_foot1_r:Vector.<Number>;
		public var zombieAnim_2_foot2_x:Vector.<Number>;
		public var zombieAnim_2_foot2_y:Vector.<Number>;
		public var zombieAnim_2_foot2_r:Vector.<Number>;
		public var zombieAnim_2_ankle1_x:Vector.<Number>;
		public var zombieAnim_2_ankle1_y:Vector.<Number>;
		public var zombieAnim_2_ankle1_r:Vector.<Number>;
		public var zombieAnim_2_ankle2_x:Vector.<Number>;
		public var zombieAnim_2_ankle2_y:Vector.<Number>;
		public var zombieAnim_2_ankle2_r:Vector.<Number>;
		public var zombieAnim_2_hand1_x:Vector.<Number>;
		public var zombieAnim_2_hand1_y:Vector.<Number>;
		public var zombieAnim_2_hand1_r:Vector.<Number>;
		public var zombieAnim_2_hand2_x:Vector.<Number>;
		public var zombieAnim_2_hand2_y:Vector.<Number>;
		public var zombieAnim_2_hand2_r:Vector.<Number>;
		public var zombieAnim_3_head_x:Vector.<Number>;
		public var zombieAnim_3_head_y:Vector.<Number>;
		public var zombieAnim_3_head_r:Vector.<Number>;
		public var zombieAnim_3_body_x:Vector.<Number>;
		public var zombieAnim_3_body_y:Vector.<Number>;
		public var zombieAnim_3_body_r:Vector.<Number>;
		public var zombieAnim_3_foot1_x:Vector.<Number>;
		public var zombieAnim_3_foot1_y:Vector.<Number>;
		public var zombieAnim_3_foot1_r:Vector.<Number>;
		public var zombieAnim_3_foot2_x:Vector.<Number>;
		public var zombieAnim_3_foot2_y:Vector.<Number>;
		public var zombieAnim_3_foot2_r:Vector.<Number>;
		public var zombieAnim_3_ankle1_x:Vector.<Number>;
		public var zombieAnim_3_ankle1_y:Vector.<Number>;
		public var zombieAnim_3_ankle1_r:Vector.<Number>;
		public var zombieAnim_3_ankle2_x:Vector.<Number>;
		public var zombieAnim_3_ankle2_y:Vector.<Number>;
		public var zombieAnim_3_ankle2_r:Vector.<Number>;
		public var zombieAnim_3_hand1_x:Vector.<Number>;
		public var zombieAnim_3_hand1_y:Vector.<Number>;
		public var zombieAnim_3_hand1_r:Vector.<Number>;
		public var zombieAnim_3_hand2_x:Vector.<Number>;
		public var zombieAnim_3_hand2_y:Vector.<Number>;
		public var zombieAnim_3_hand2_r:Vector.<Number>;
		public var zombieAnim_4_head_x:Vector.<Number>;
		public var zombieAnim_4_head_y:Vector.<Number>;
		public var zombieAnim_4_head_r:Vector.<Number>;
		public var zombieAnim_4_body_x:Vector.<Number>;
		public var zombieAnim_4_body_y:Vector.<Number>;
		public var zombieAnim_4_body_r:Vector.<Number>;
		public var zombieAnim_4_foot1_x:Vector.<Number>;
		public var zombieAnim_4_foot1_y:Vector.<Number>;
		public var zombieAnim_4_foot1_r:Vector.<Number>;
		public var zombieAnim_4_foot2_x:Vector.<Number>;
		public var zombieAnim_4_foot2_y:Vector.<Number>;
		public var zombieAnim_4_foot2_r:Vector.<Number>;
		public var zombieAnim_4_ankle1_x:Vector.<Number>;
		public var zombieAnim_4_ankle1_y:Vector.<Number>;
		public var zombieAnim_4_ankle1_r:Vector.<Number>;
		public var zombieAnim_4_ankle2_x:Vector.<Number>;
		public var zombieAnim_4_ankle2_y:Vector.<Number>;
		public var zombieAnim_4_ankle2_r:Vector.<Number>;
		public var zombieAnim_4_hand1_x:Vector.<Number>;
		public var zombieAnim_4_hand1_y:Vector.<Number>;
		public var zombieAnim_4_hand1_r:Vector.<Number>;
		public var zombieAnim_4_hand2_x:Vector.<Number>;
		public var zombieAnim_4_hand2_y:Vector.<Number>;
		public var zombieAnim_4_hand2_r:Vector.<Number>;
		public var zombieAnim_5_head_x:Vector.<Number>;
		public var zombieAnim_5_head_y:Vector.<Number>;
		public var zombieAnim_5_head_r:Vector.<Number>;
		public var zombieAnim_5_body_x:Vector.<Number>;
		public var zombieAnim_5_body_y:Vector.<Number>;
		public var zombieAnim_5_body_r:Vector.<Number>;
		public var zombieAnim_5_foot1_x:Vector.<Number>;
		public var zombieAnim_5_foot1_y:Vector.<Number>;
		public var zombieAnim_5_foot1_r:Vector.<Number>;
		public var zombieAnim_5_foot2_x:Vector.<Number>;
		public var zombieAnim_5_foot2_y:Vector.<Number>;
		public var zombieAnim_5_foot2_r:Vector.<Number>;
		public var zombieAnim_5_ankle1_x:Vector.<Number>;
		public var zombieAnim_5_ankle1_y:Vector.<Number>;
		public var zombieAnim_5_ankle1_r:Vector.<Number>;
		public var zombieAnim_5_ankle2_x:Vector.<Number>;
		public var zombieAnim_5_ankle2_y:Vector.<Number>;
		public var zombieAnim_5_ankle2_r:Vector.<Number>;
		public var zombieAnim_5_hand1_x:Vector.<Number>;
		public var zombieAnim_5_hand1_y:Vector.<Number>;
		public var zombieAnim_5_hand1_r:Vector.<Number>;
		public var zombieAnim_5_hand2_x:Vector.<Number>;
		public var zombieAnim_5_hand2_y:Vector.<Number>;
		public var zombieAnim_5_hand2_r:Vector.<Number>;
		public var zombieAnim_6_head_x:Vector.<Number>;
		public var zombieAnim_6_head_y:Vector.<Number>;
		public var zombieAnim_6_head_r:Vector.<Number>;
		public var zombieAnim_6_body_x:Vector.<Number>;
		public var zombieAnim_6_body_y:Vector.<Number>;
		public var zombieAnim_6_body_r:Vector.<Number>;
		public var zombieAnim_6_foot1_x:Vector.<Number>;
		public var zombieAnim_6_foot1_y:Vector.<Number>;
		public var zombieAnim_6_foot1_r:Vector.<Number>;
		public var zombieAnim_6_foot2_x:Vector.<Number>;
		public var zombieAnim_6_foot2_y:Vector.<Number>;
		public var zombieAnim_6_foot2_r:Vector.<Number>;
		public var zombieAnim_6_ankle1_x:Vector.<Number>;
		public var zombieAnim_6_ankle1_y:Vector.<Number>;
		public var zombieAnim_6_ankle1_r:Vector.<Number>;
		public var zombieAnim_6_ankle2_x:Vector.<Number>;
		public var zombieAnim_6_ankle2_y:Vector.<Number>;
		public var zombieAnim_6_ankle2_r:Vector.<Number>;
		public var zombieAnim_6_hand1_x:Vector.<Number>;
		public var zombieAnim_6_hand1_y:Vector.<Number>;
		public var zombieAnim_6_hand1_r:Vector.<Number>;
		public var zombieAnim_6_hand2_x:Vector.<Number>;
		public var zombieAnim_6_hand2_y:Vector.<Number>;
		public var zombieAnim_6_hand2_r:Vector.<Number>;
		public var zombieAnim_7_head_x:Vector.<Number>;
		public var zombieAnim_7_head_y:Vector.<Number>;
		public var zombieAnim_7_head_r:Vector.<Number>;
		public var zombieAnim_7_body_x:Vector.<Number>;
		public var zombieAnim_7_body_y:Vector.<Number>;
		public var zombieAnim_7_body_r:Vector.<Number>;
		public var zombieAnim_7_foot1_x:Vector.<Number>;
		public var zombieAnim_7_foot1_y:Vector.<Number>;
		public var zombieAnim_7_foot1_r:Vector.<Number>;
		public var zombieAnim_7_foot2_x:Vector.<Number>;
		public var zombieAnim_7_foot2_y:Vector.<Number>;
		public var zombieAnim_7_foot2_r:Vector.<Number>;
		public var zombieAnim_7_ankle1_x:Vector.<Number>;
		public var zombieAnim_7_ankle1_y:Vector.<Number>;
		public var zombieAnim_7_ankle1_r:Vector.<Number>;
		public var zombieAnim_7_ankle2_x:Vector.<Number>;
		public var zombieAnim_7_ankle2_y:Vector.<Number>;
		public var zombieAnim_7_ankle2_r:Vector.<Number>;
		public var zombieAnim_7_hand1_x:Vector.<Number>;
		public var zombieAnim_7_hand1_y:Vector.<Number>;
		public var zombieAnim_7_hand1_r:Vector.<Number>;
		public var zombieAnim_7_hand2_x:Vector.<Number>;
		public var zombieAnim_7_hand2_y:Vector.<Number>;
		public var zombieAnim_7_hand2_r:Vector.<Number>;
		public var zombieAnim_8_head_x:Vector.<Number>;
		public var zombieAnim_8_head_y:Vector.<Number>;
		public var zombieAnim_8_head_r:Vector.<Number>;
		public var zombieAnim_8_body_x:Vector.<Number>;
		public var zombieAnim_8_body_y:Vector.<Number>;
		public var zombieAnim_8_body_r:Vector.<Number>;
		public var zombieAnim_8_foot1_x:Vector.<Number>;
		public var zombieAnim_8_foot1_y:Vector.<Number>;
		public var zombieAnim_8_foot1_r:Vector.<Number>;
		public var zombieAnim_8_foot2_x:Vector.<Number>;
		public var zombieAnim_8_foot2_y:Vector.<Number>;
		public var zombieAnim_8_foot2_r:Vector.<Number>;
		public var zombieAnim_8_ankle1_x:Vector.<Number>;
		public var zombieAnim_8_ankle1_y:Vector.<Number>;
		public var zombieAnim_8_ankle1_r:Vector.<Number>;
		public var zombieAnim_8_ankle2_x:Vector.<Number>;
		public var zombieAnim_8_ankle2_y:Vector.<Number>;
		public var zombieAnim_8_ankle2_r:Vector.<Number>;
		public var zombieAnim_8_hand1_x:Vector.<Number>;
		public var zombieAnim_8_hand1_y:Vector.<Number>;
		public var zombieAnim_8_hand1_r:Vector.<Number>;
		public var zombieAnim_8_hand2_x:Vector.<Number>;
		public var zombieAnim_8_hand2_y:Vector.<Number>;
		public var zombieAnim_8_hand2_r:Vector.<Number>;
		public var zombieAnim_9_head_x:Vector.<Number>;
		public var zombieAnim_9_head_y:Vector.<Number>;
		public var zombieAnim_9_head_r:Vector.<Number>;
		public var zombieAnim_9_body_x:Vector.<Number>;
		public var zombieAnim_9_body_y:Vector.<Number>;
		public var zombieAnim_9_body_r:Vector.<Number>;
		public var zombieAnim_9_foot1_x:Vector.<Number>;
		public var zombieAnim_9_foot1_y:Vector.<Number>;
		public var zombieAnim_9_foot1_r:Vector.<Number>;
		public var zombieAnim_9_foot2_x:Vector.<Number>;
		public var zombieAnim_9_foot2_y:Vector.<Number>;
		public var zombieAnim_9_foot2_r:Vector.<Number>;
		public var zombieAnim_9_ankle1_x:Vector.<Number>;
		public var zombieAnim_9_ankle1_y:Vector.<Number>;
		public var zombieAnim_9_ankle1_r:Vector.<Number>;
		public var zombieAnim_9_ankle2_x:Vector.<Number>;
		public var zombieAnim_9_ankle2_y:Vector.<Number>;
		public var zombieAnim_9_ankle2_r:Vector.<Number>;
		public var zombieAnim_9_hand1_x:Vector.<Number>;
		public var zombieAnim_9_hand1_y:Vector.<Number>;
		public var zombieAnim_9_hand1_r:Vector.<Number>;
		public var zombieAnim_9_hand2_x:Vector.<Number>;
		public var zombieAnim_9_hand2_y:Vector.<Number>;
		public var zombieAnim_9_hand2_r:Vector.<Number>;
		public var zombieAnim_10_head_x:Vector.<Number>;
		public var zombieAnim_10_head_y:Vector.<Number>;
		public var zombieAnim_10_head_r:Vector.<Number>;
		public var zombieAnim_10_body_x:Vector.<Number>;
		public var zombieAnim_10_body_y:Vector.<Number>;
		public var zombieAnim_10_body_r:Vector.<Number>;
		public var zombieAnim_10_foot1_x:Vector.<Number>;
		public var zombieAnim_10_foot1_y:Vector.<Number>;
		public var zombieAnim_10_foot1_r:Vector.<Number>;
		public var zombieAnim_10_foot2_x:Vector.<Number>;
		public var zombieAnim_10_foot2_y:Vector.<Number>;
		public var zombieAnim_10_foot2_r:Vector.<Number>;
		public var zombieAnim_10_ankle1_x:Vector.<Number>;
		public var zombieAnim_10_ankle1_y:Vector.<Number>;
		public var zombieAnim_10_ankle1_r:Vector.<Number>;
		public var zombieAnim_10_ankle2_x:Vector.<Number>;
		public var zombieAnim_10_ankle2_y:Vector.<Number>;
		public var zombieAnim_10_ankle2_r:Vector.<Number>;
		public var zombieAnim_10_hand1_x:Vector.<Number>;
		public var zombieAnim_10_hand1_y:Vector.<Number>;
		public var zombieAnim_10_hand1_r:Vector.<Number>;
		public var zombieAnim_10_hand2_x:Vector.<Number>;
		public var zombieAnim_10_hand2_y:Vector.<Number>;
		public var zombieAnim_10_hand2_r:Vector.<Number>;
		public var zombieAnim_11_head_x:Vector.<Number>;
		public var zombieAnim_11_head_y:Vector.<Number>;
		public var zombieAnim_11_head_r:Vector.<Number>;
		public var zombieAnim_11_body_x:Vector.<Number>;
		public var zombieAnim_11_body_y:Vector.<Number>;
		public var zombieAnim_11_body_r:Vector.<Number>;
		public var zombieAnim_11_foot1_x:Vector.<Number>;
		public var zombieAnim_11_foot1_y:Vector.<Number>;
		public var zombieAnim_11_foot1_r:Vector.<Number>;
		public var zombieAnim_11_foot2_x:Vector.<Number>;
		public var zombieAnim_11_foot2_y:Vector.<Number>;
		public var zombieAnim_11_foot2_r:Vector.<Number>;
		public var zombieAnim_11_ankle1_x:Vector.<Number>;
		public var zombieAnim_11_ankle1_y:Vector.<Number>;
		public var zombieAnim_11_ankle1_r:Vector.<Number>;
		public var zombieAnim_11_ankle2_x:Vector.<Number>;
		public var zombieAnim_11_ankle2_y:Vector.<Number>;
		public var zombieAnim_11_ankle2_r:Vector.<Number>;
		public var zombieAnim_11_hand1_x:Vector.<Number>;
		public var zombieAnim_11_hand1_y:Vector.<Number>;
		public var zombieAnim_11_hand1_r:Vector.<Number>;
		public var zombieAnim_11_hand2_x:Vector.<Number>;
		public var zombieAnim_11_hand2_y:Vector.<Number>;
		public var zombieAnim_11_hand2_r:Vector.<Number>;
		public var zombieAnim_12_head_x:Vector.<Number>;
		public var zombieAnim_12_head_y:Vector.<Number>;
		public var zombieAnim_12_head_r:Vector.<Number>;
		public var zombieAnim_12_body_x:Vector.<Number>;
		public var zombieAnim_12_body_y:Vector.<Number>;
		public var zombieAnim_12_body_r:Vector.<Number>;
		public var zombieAnim_12_foot1_x:Vector.<Number>;
		public var zombieAnim_12_foot1_y:Vector.<Number>;
		public var zombieAnim_12_foot1_r:Vector.<Number>;
		public var zombieAnim_12_foot2_x:Vector.<Number>;
		public var zombieAnim_12_foot2_y:Vector.<Number>;
		public var zombieAnim_12_foot2_r:Vector.<Number>;
		public var zombieAnim_12_ankle1_x:Vector.<Number>;
		public var zombieAnim_12_ankle1_y:Vector.<Number>;
		public var zombieAnim_12_ankle1_r:Vector.<Number>;
		public var zombieAnim_12_ankle2_x:Vector.<Number>;
		public var zombieAnim_12_ankle2_y:Vector.<Number>;
		public var zombieAnim_12_ankle2_r:Vector.<Number>;
		public var zombieAnim_12_hand1_x:Vector.<Number>;
		public var zombieAnim_12_hand1_y:Vector.<Number>;
		public var zombieAnim_12_hand1_r:Vector.<Number>;
		public var zombieAnim_12_hand2_x:Vector.<Number>;
		public var zombieAnim_12_hand2_y:Vector.<Number>;
		public var zombieAnim_12_hand2_r:Vector.<Number>;
		public var zombieAnim_13_head_x:Vector.<Number>;
		public var zombieAnim_13_head_y:Vector.<Number>;
		public var zombieAnim_13_head_r:Vector.<Number>;
		public var zombieAnim_13_body_x:Vector.<Number>;
		public var zombieAnim_13_body_y:Vector.<Number>;
		public var zombieAnim_13_body_r:Vector.<Number>;
		public var zombieAnim_13_foot1_x:Vector.<Number>;
		public var zombieAnim_13_foot1_y:Vector.<Number>;
		public var zombieAnim_13_foot1_r:Vector.<Number>;
		public var zombieAnim_13_foot2_x:Vector.<Number>;
		public var zombieAnim_13_foot2_y:Vector.<Number>;
		public var zombieAnim_13_foot2_r:Vector.<Number>;
		public var zombieAnim_13_ankle1_x:Vector.<Number>;
		public var zombieAnim_13_ankle1_y:Vector.<Number>;
		public var zombieAnim_13_ankle1_r:Vector.<Number>;
		public var zombieAnim_13_ankle2_x:Vector.<Number>;
		public var zombieAnim_13_ankle2_y:Vector.<Number>;
		public var zombieAnim_13_ankle2_r:Vector.<Number>;
		public var zombieAnim_13_hand1_x:Vector.<Number>;
		public var zombieAnim_13_hand1_y:Vector.<Number>;
		public var zombieAnim_13_hand1_r:Vector.<Number>;
		public var zombieAnim_13_hand2_x:Vector.<Number>;
		public var zombieAnim_13_hand2_y:Vector.<Number>;
		public var zombieAnim_13_hand2_r:Vector.<Number>;
		public var zombieAnim_14_head_x:Vector.<Number>;
		public var zombieAnim_14_head_y:Vector.<Number>;
		public var zombieAnim_14_head_r:Vector.<Number>;
		public var zombieAnim_14_body_x:Vector.<Number>;
		public var zombieAnim_14_body_y:Vector.<Number>;
		public var zombieAnim_14_body_r:Vector.<Number>;
		public var zombieAnim_14_foot1_x:Vector.<Number>;
		public var zombieAnim_14_foot1_y:Vector.<Number>;
		public var zombieAnim_14_foot1_r:Vector.<Number>;
		public var zombieAnim_14_foot2_x:Vector.<Number>;
		public var zombieAnim_14_foot2_y:Vector.<Number>;
		public var zombieAnim_14_foot2_r:Vector.<Number>;
		public var zombieAnim_14_ankle1_x:Vector.<Number>;
		public var zombieAnim_14_ankle1_y:Vector.<Number>;
		public var zombieAnim_14_ankle1_r:Vector.<Number>;
		public var zombieAnim_14_ankle2_x:Vector.<Number>;
		public var zombieAnim_14_ankle2_y:Vector.<Number>;
		public var zombieAnim_14_ankle2_r:Vector.<Number>;
		public var zombieAnim_14_hand1_x:Vector.<Number>;
		public var zombieAnim_14_hand1_y:Vector.<Number>;
		public var zombieAnim_14_hand1_r:Vector.<Number>;
		public var zombieAnim_14_hand2_x:Vector.<Number>;
		public var zombieAnim_14_hand2_y:Vector.<Number>;
		public var zombieAnim_14_hand2_r:Vector.<Number>;
		public var zombieAnim_15_head_x:Vector.<Number>;
		public var zombieAnim_15_head_y:Vector.<Number>;
		public var zombieAnim_15_head_r:Vector.<Number>;
		public var zombieAnim_15_body_x:Vector.<Number>;
		public var zombieAnim_15_body_y:Vector.<Number>;
		public var zombieAnim_15_body_r:Vector.<Number>;
		public var zombieAnim_15_foot1_x:Vector.<Number>;
		public var zombieAnim_15_foot1_y:Vector.<Number>;
		public var zombieAnim_15_foot1_r:Vector.<Number>;
		public var zombieAnim_15_foot2_x:Vector.<Number>;
		public var zombieAnim_15_foot2_y:Vector.<Number>;
		public var zombieAnim_15_foot2_r:Vector.<Number>;
		public var zombieAnim_15_ankle1_x:Vector.<Number>;
		public var zombieAnim_15_ankle1_y:Vector.<Number>;
		public var zombieAnim_15_ankle1_r:Vector.<Number>;
		public var zombieAnim_15_ankle2_x:Vector.<Number>;
		public var zombieAnim_15_ankle2_y:Vector.<Number>;
		public var zombieAnim_15_ankle2_r:Vector.<Number>;
		public var zombieAnim_15_hand1_x:Vector.<Number>;
		public var zombieAnim_15_hand1_y:Vector.<Number>;
		public var zombieAnim_15_hand1_r:Vector.<Number>;
		public var zombieAnim_15_hand2_x:Vector.<Number>;
		public var zombieAnim_15_hand2_y:Vector.<Number>;
		public var zombieAnim_15_hand2_r:Vector.<Number>;
		public var zombieAnim_16_head_x:Vector.<Number>;
		public var zombieAnim_16_head_y:Vector.<Number>;
		public var zombieAnim_16_head_r:Vector.<Number>;
		public var zombieAnim_16_body_x:Vector.<Number>;
		public var zombieAnim_16_body_y:Vector.<Number>;
		public var zombieAnim_16_body_r:Vector.<Number>;
		public var zombieAnim_16_foot1_x:Vector.<Number>;
		public var zombieAnim_16_foot1_y:Vector.<Number>;
		public var zombieAnim_16_foot1_r:Vector.<Number>;
		public var zombieAnim_16_foot2_x:Vector.<Number>;
		public var zombieAnim_16_foot2_y:Vector.<Number>;
		public var zombieAnim_16_foot2_r:Vector.<Number>;
		public var zombieAnim_16_ankle1_x:Vector.<Number>;
		public var zombieAnim_16_ankle1_y:Vector.<Number>;
		public var zombieAnim_16_ankle1_r:Vector.<Number>;
		public var zombieAnim_16_ankle2_x:Vector.<Number>;
		public var zombieAnim_16_ankle2_y:Vector.<Number>;
		public var zombieAnim_16_ankle2_r:Vector.<Number>;
		public var zombieAnim_16_hand1_x:Vector.<Number>;
		public var zombieAnim_16_hand1_y:Vector.<Number>;
		public var zombieAnim_16_hand1_r:Vector.<Number>;
		public var zombieAnim_16_hand2_x:Vector.<Number>;
		public var zombieAnim_16_hand2_y:Vector.<Number>;
		public var zombieAnim_16_hand2_r:Vector.<Number>;
		public var zombieAnim_17_head_x:Vector.<Number>;
		public var zombieAnim_17_head_y:Vector.<Number>;
		public var zombieAnim_17_head_r:Vector.<Number>;
		public var zombieAnim_17_body_x:Vector.<Number>;
		public var zombieAnim_17_body_y:Vector.<Number>;
		public var zombieAnim_17_body_r:Vector.<Number>;
		public var zombieAnim_17_foot1_x:Vector.<Number>;
		public var zombieAnim_17_foot1_y:Vector.<Number>;
		public var zombieAnim_17_foot1_r:Vector.<Number>;
		public var zombieAnim_17_foot2_x:Vector.<Number>;
		public var zombieAnim_17_foot2_y:Vector.<Number>;
		public var zombieAnim_17_foot2_r:Vector.<Number>;
		public var zombieAnim_17_ankle1_x:Vector.<Number>;
		public var zombieAnim_17_ankle1_y:Vector.<Number>;
		public var zombieAnim_17_ankle1_r:Vector.<Number>;
		public var zombieAnim_17_ankle2_x:Vector.<Number>;
		public var zombieAnim_17_ankle2_y:Vector.<Number>;
		public var zombieAnim_17_ankle2_r:Vector.<Number>;
		public var zombieAnim_17_hand1_x:Vector.<Number>;
		public var zombieAnim_17_hand1_y:Vector.<Number>;
		public var zombieAnim_17_hand1_r:Vector.<Number>;
		public var zombieAnim_17_hand2_x:Vector.<Number>;
		public var zombieAnim_17_hand2_y:Vector.<Number>;
		public var zombieAnim_17_hand2_r:Vector.<Number>;
		public var zombieAnim_18_head_x:Vector.<Number>;
		public var zombieAnim_18_head_y:Vector.<Number>;
		public var zombieAnim_18_head_r:Vector.<Number>;
		public var zombieAnim_18_body_x:Vector.<Number>;
		public var zombieAnim_18_body_y:Vector.<Number>;
		public var zombieAnim_18_body_r:Vector.<Number>;
		public var zombieAnim_18_foot1_x:Vector.<Number>;
		public var zombieAnim_18_foot1_y:Vector.<Number>;
		public var zombieAnim_18_foot1_r:Vector.<Number>;
		public var zombieAnim_18_foot2_x:Vector.<Number>;
		public var zombieAnim_18_foot2_y:Vector.<Number>;
		public var zombieAnim_18_foot2_r:Vector.<Number>;
		public var zombieAnim_18_ankle1_x:Vector.<Number>;
		public var zombieAnim_18_ankle1_y:Vector.<Number>;
		public var zombieAnim_18_ankle1_r:Vector.<Number>;
		public var zombieAnim_18_ankle2_x:Vector.<Number>;
		public var zombieAnim_18_ankle2_y:Vector.<Number>;
		public var zombieAnim_18_ankle2_r:Vector.<Number>;
		public var zombieAnim_18_hand1_x:Vector.<Number>;
		public var zombieAnim_18_hand1_y:Vector.<Number>;
		public var zombieAnim_18_hand1_r:Vector.<Number>;
		public var zombieAnim_18_hand2_x:Vector.<Number>;
		public var zombieAnim_18_hand2_y:Vector.<Number>;
		public var zombieAnim_18_hand2_r:Vector.<Number>;
		public var zombieAnim_19_head_x:Vector.<Number>;
		public var zombieAnim_19_head_y:Vector.<Number>;
		public var zombieAnim_19_head_r:Vector.<Number>;
		public var zombieAnim_19_body_x:Vector.<Number>;
		public var zombieAnim_19_body_y:Vector.<Number>;
		public var zombieAnim_19_body_r:Vector.<Number>;
		public var zombieAnim_19_foot1_x:Vector.<Number>;
		public var zombieAnim_19_foot1_y:Vector.<Number>;
		public var zombieAnim_19_foot1_r:Vector.<Number>;
		public var zombieAnim_19_foot2_x:Vector.<Number>;
		public var zombieAnim_19_foot2_y:Vector.<Number>;
		public var zombieAnim_19_foot2_r:Vector.<Number>;
		public var zombieAnim_19_ankle1_x:Vector.<Number>;
		public var zombieAnim_19_ankle1_y:Vector.<Number>;
		public var zombieAnim_19_ankle1_r:Vector.<Number>;
		public var zombieAnim_19_ankle2_x:Vector.<Number>;
		public var zombieAnim_19_ankle2_y:Vector.<Number>;
		public var zombieAnim_19_ankle2_r:Vector.<Number>;
		public var zombieAnim_19_hand1_x:Vector.<Number>;
		public var zombieAnim_19_hand1_y:Vector.<Number>;
		public var zombieAnim_19_hand1_r:Vector.<Number>;
		public var zombieAnim_19_hand2_x:Vector.<Number>;
		public var zombieAnim_19_hand2_y:Vector.<Number>;
		public var zombieAnim_19_hand2_r:Vector.<Number>;
		public var zombieAnim_20_head_x:Vector.<Number>;
		public var zombieAnim_20_head_y:Vector.<Number>;
		public var zombieAnim_20_head_r:Vector.<Number>;
		public var zombieAnim_20_body_x:Vector.<Number>;
		public var zombieAnim_20_body_y:Vector.<Number>;
		public var zombieAnim_20_body_r:Vector.<Number>;
		public var zombieAnim_20_foot1_x:Vector.<Number>;
		public var zombieAnim_20_foot1_y:Vector.<Number>;
		public var zombieAnim_20_foot1_r:Vector.<Number>;
		public var zombieAnim_20_foot2_x:Vector.<Number>;
		public var zombieAnim_20_foot2_y:Vector.<Number>;
		public var zombieAnim_20_foot2_r:Vector.<Number>;
		public var zombieAnim_20_ankle1_x:Vector.<Number>;
		public var zombieAnim_20_ankle1_y:Vector.<Number>;
		public var zombieAnim_20_ankle1_r:Vector.<Number>;
		public var zombieAnim_20_ankle2_x:Vector.<Number>;
		public var zombieAnim_20_ankle2_y:Vector.<Number>;
		public var zombieAnim_20_ankle2_r:Vector.<Number>;
		public var zombieAnim_20_hand1_x:Vector.<Number>;
		public var zombieAnim_20_hand1_y:Vector.<Number>;
		public var zombieAnim_20_hand1_r:Vector.<Number>;
		public var zombieAnim_20_hand2_x:Vector.<Number>;
		public var zombieAnim_20_hand2_y:Vector.<Number>;
		public var zombieAnim_20_hand2_r:Vector.<Number>;
		public var zombieAnim_21_head_x:Vector.<Number>;
		public var zombieAnim_21_head_y:Vector.<Number>;
		public var zombieAnim_21_head_r:Vector.<Number>;
		public var zombieAnim_21_body_x:Vector.<Number>;
		public var zombieAnim_21_body_y:Vector.<Number>;
		public var zombieAnim_21_body_r:Vector.<Number>;
		public var zombieAnim_21_foot1_x:Vector.<Number>;
		public var zombieAnim_21_foot1_y:Vector.<Number>;
		public var zombieAnim_21_foot1_r:Vector.<Number>;
		public var zombieAnim_21_foot2_x:Vector.<Number>;
		public var zombieAnim_21_foot2_y:Vector.<Number>;
		public var zombieAnim_21_foot2_r:Vector.<Number>;
		public var zombieAnim_21_ankle1_x:Vector.<Number>;
		public var zombieAnim_21_ankle1_y:Vector.<Number>;
		public var zombieAnim_21_ankle1_r:Vector.<Number>;
		public var zombieAnim_21_ankle2_x:Vector.<Number>;
		public var zombieAnim_21_ankle2_y:Vector.<Number>;
		public var zombieAnim_21_ankle2_r:Vector.<Number>;
		public var zombieAnim_21_hand1_x:Vector.<Number>;
		public var zombieAnim_21_hand1_y:Vector.<Number>;
		public var zombieAnim_21_hand1_r:Vector.<Number>;
		public var zombieAnim_21_hand2_x:Vector.<Number>;
		public var zombieAnim_21_hand2_y:Vector.<Number>;
		public var zombieAnim_21_hand2_r:Vector.<Number>;
		public var zombieAnim_22_head_x:Vector.<Number>;
		public var zombieAnim_22_head_y:Vector.<Number>;
		public var zombieAnim_22_head_r:Vector.<Number>;
		public var zombieAnim_22_body_x:Vector.<Number>;
		public var zombieAnim_22_body_y:Vector.<Number>;
		public var zombieAnim_22_body_r:Vector.<Number>;
		public var zombieAnim_22_foot1_x:Vector.<Number>;
		public var zombieAnim_22_foot1_y:Vector.<Number>;
		public var zombieAnim_22_foot1_r:Vector.<Number>;
		public var zombieAnim_22_foot2_x:Vector.<Number>;
		public var zombieAnim_22_foot2_y:Vector.<Number>;
		public var zombieAnim_22_foot2_r:Vector.<Number>;
		public var zombieAnim_22_ankle1_x:Vector.<Number>;
		public var zombieAnim_22_ankle1_y:Vector.<Number>;
		public var zombieAnim_22_ankle1_r:Vector.<Number>;
		public var zombieAnim_22_ankle2_x:Vector.<Number>;
		public var zombieAnim_22_ankle2_y:Vector.<Number>;
		public var zombieAnim_22_ankle2_r:Vector.<Number>;
		public var zombieAnim_22_hand1_x:Vector.<Number>;
		public var zombieAnim_22_hand1_y:Vector.<Number>;
		public var zombieAnim_22_hand1_r:Vector.<Number>;
		public var zombieAnim_22_hand2_x:Vector.<Number>;
		public var zombieAnim_22_hand2_y:Vector.<Number>;
		public var zombieAnim_22_hand2_r:Vector.<Number>;
		public var zombieAnim_23_head_x:Vector.<Number>;
		public var zombieAnim_23_head_y:Vector.<Number>;
		public var zombieAnim_23_head_r:Vector.<Number>;
		public var zombieAnim_23_body_x:Vector.<Number>;
		public var zombieAnim_23_body_y:Vector.<Number>;
		public var zombieAnim_23_body_r:Vector.<Number>;
		public var zombieAnim_23_foot1_x:Vector.<Number>;
		public var zombieAnim_23_foot1_y:Vector.<Number>;
		public var zombieAnim_23_foot1_r:Vector.<Number>;
		public var zombieAnim_23_foot2_x:Vector.<Number>;
		public var zombieAnim_23_foot2_y:Vector.<Number>;
		public var zombieAnim_23_foot2_r:Vector.<Number>;
		public var zombieAnim_23_ankle1_x:Vector.<Number>;
		public var zombieAnim_23_ankle1_y:Vector.<Number>;
		public var zombieAnim_23_ankle1_r:Vector.<Number>;
		public var zombieAnim_23_ankle2_x:Vector.<Number>;
		public var zombieAnim_23_ankle2_y:Vector.<Number>;
		public var zombieAnim_23_ankle2_r:Vector.<Number>;
		public var zombieAnim_23_hand1_x:Vector.<Number>;
		public var zombieAnim_23_hand1_y:Vector.<Number>;
		public var zombieAnim_23_hand1_r:Vector.<Number>;
		public var zombieAnim_23_hand2_x:Vector.<Number>;
		public var zombieAnim_23_hand2_y:Vector.<Number>;
		public var zombieAnim_23_hand2_r:Vector.<Number>;
		public var zombieAnim_24_head_x:Vector.<Number>;
		public var zombieAnim_24_head_y:Vector.<Number>;
		public var zombieAnim_24_head_r:Vector.<Number>;
		public var zombieAnim_24_body_x:Vector.<Number>;
		public var zombieAnim_24_body_y:Vector.<Number>;
		public var zombieAnim_24_body_r:Vector.<Number>;
		public var zombieAnim_24_foot1_x:Vector.<Number>;
		public var zombieAnim_24_foot1_y:Vector.<Number>;
		public var zombieAnim_24_foot1_r:Vector.<Number>;
		public var zombieAnim_24_foot2_x:Vector.<Number>;
		public var zombieAnim_24_foot2_y:Vector.<Number>;
		public var zombieAnim_24_foot2_r:Vector.<Number>;
		public var zombieAnim_24_ankle1_x:Vector.<Number>;
		public var zombieAnim_24_ankle1_y:Vector.<Number>;
		public var zombieAnim_24_ankle1_r:Vector.<Number>;
		public var zombieAnim_24_ankle2_x:Vector.<Number>;
		public var zombieAnim_24_ankle2_y:Vector.<Number>;
		public var zombieAnim_24_ankle2_r:Vector.<Number>;
		public var zombieAnim_24_hand1_x:Vector.<Number>;
		public var zombieAnim_24_hand1_y:Vector.<Number>;
		public var zombieAnim_24_hand1_r:Vector.<Number>;
		public var zombieAnim_24_hand2_x:Vector.<Number>;
		public var zombieAnim_24_hand2_y:Vector.<Number>;
		public var zombieAnim_24_hand2_r:Vector.<Number>;
		public var zombie_maxFrames:Array;
		public var zombie_head_0:Sprite;
		public var zombie_head_0_bm:BitmapData;
		public var zombie_body_0:Sprite;
		public var zombie_body_0_bm:BitmapData;
		public var zombie_foot_0:Sprite;
		public var zombie_foot_0_bm:BitmapData;
		public var zombie_ankle_0:Sprite;
		public var zombie_ankle_0_bm:BitmapData;
		public var zombie_hand1_0:Sprite;
		public var zombie_hand1_0_bm:BitmapData;
		public var zombie_hand2_0:Sprite;
		public var zombie_hand2_0_bm:BitmapData;
		public var zombie_head_1:Sprite;
		public var zombie_head_1_bm:BitmapData;
		public var zombie_body_1:Sprite;
		public var zombie_body_1_bm:BitmapData;
		public var zombie_foot_1:Sprite;
		public var zombie_foot_1_bm:BitmapData;
		public var zombie_ankle_1:Sprite;
		public var zombie_ankle_1_bm:BitmapData;
		public var zombie_hand1_1:Sprite;
		public var zombie_hand1_1_bm:BitmapData;
		public var zombie_hand2_1:Sprite;
		public var zombie_hand2_1_bm:BitmapData;
		public var zombie_head_2:Sprite;
		public var zombie_head_2_bm:BitmapData;
		public var zombie_body_2:Sprite;
		public var zombie_body_2_bm:BitmapData;
		public var zombie_foot_2:Sprite;
		public var zombie_foot_2_bm:BitmapData;
		public var zombie_ankle_2:Sprite;
		public var zombie_ankle_2_bm:BitmapData;
		public var zombie_hand1_2:Sprite;
		public var zombie_hand1_2_bm:BitmapData;
		public var zombie_hand2_2:Sprite;
		public var zombie_hand2_2_bm:BitmapData;
		public var zombie_head_3:Sprite;
		public var zombie_head_3_bm:BitmapData;
		public var zombie_body_3:Sprite;
		public var zombie_body_3_bm:BitmapData;
		public var zombie_foot_3:Sprite;
		public var zombie_foot_3_bm:BitmapData;
		public var zombie_ankle_3:Sprite;
		public var zombie_ankle_3_bm:BitmapData;
		public var zombie_hand1_3:Sprite;
		public var zombie_hand1_3_bm:BitmapData;
		public var zombie_hand2_3:Sprite;
		public var zombie_hand2_3_bm:BitmapData;
		public var zombie_head_4:Sprite;
		public var zombie_head_4_bm:BitmapData;
		public var zombie_body_4:Sprite;
		public var zombie_body_4_bm:BitmapData;
		public var zombie_foot_4:Sprite;
		public var zombie_foot_4_bm:BitmapData;
		public var zombie_ankle_4:Sprite;
		public var zombie_ankle_4_bm:BitmapData;
		public var zombie_hand1_4:Sprite;
		public var zombie_hand1_4_bm:BitmapData;
		public var zombie_hand2_4:Sprite;
		public var zombie_hand2_4_bm:BitmapData;
		public var zombie_head_5:Sprite;
		public var zombie_head_5_bm:BitmapData;
		public var zombie_body_5:Sprite;
		public var zombie_body_5_bm:BitmapData;
		public var zombie_foot_5:Sprite;
		public var zombie_foot_5_bm:BitmapData;
		public var zombie_ankle_5:Sprite;
		public var zombie_ankle_5_bm:BitmapData;
		public var zombie_hand1_5:Sprite;
		public var zombie_hand1_5_bm:BitmapData;
		public var zombie_hand2_5:Sprite;
		public var zombie_hand2_5_bm:BitmapData;
		public var gun_flash_0:Sprite;
		public var gun_flash_1:Sprite;
		public var gun_flash_2:Sprite;
		public var gun_flash_3:Sprite;
		public var gun_flash_4:Sprite;
		public var gun_flash_bm:BitmapData;
		public var smokeWidth:int;
		public var gun_flash_smoke_bm:BitmapData;
		public var boolitWidth:int;
		public var gun_boolit:BitmapData;
		public var gun_rocket:Sprite;
		public var rocket_bm:BitmapData;
		public var gun_acidBomb:BitmapData;
		public var gun_acidBomb_drip:BitmapData;
		public var airsoftPellet:BitmapData;
		public var gun_blackhole_bm:BitmapData;
		public var gun_blackhole_fx_bm:BitmapData;
		public var gaussTrail:MovieClip;
		public var gun_incindary_impact_bm:BitmapData;
		public var explosion:BitmapData;
		public var gun_blood_impact_bm1:BitmapData;
		public var gun_blood_impact_bm2:BitmapData;
		public var gun_blood_impact3_fr0:Sprite;
		public var gun_blood_impact3_fr1:Sprite;
		public var gun_blood_impact3_fr2:Sprite;
		public var gun_blood_impact3_fr3:Sprite;
		public var gun_blood_impact3_fr4:Sprite;
		public var gun_blood_impact3_fr5:Sprite;
		public var gun_blood_impact3_fr6:Sprite;
		public var gun_blood_impact3_fr7:Sprite;
		public var gun_blood_impact3_fr8:Sprite;
		public var gun_blood_impact3_fr9:Sprite;
		public var gun_blood_impact3_fr10:Sprite;
		public var gun_blood_impact3_fr11:Sprite;
		public var gun_blood_impact3_fr12:Sprite;
		public var gun_blood_impact3_fr13:Sprite;
		public var gun_blood_impact3_fr14:Sprite;
		public var gun_blood_impact_bm3:BitmapData;
		public var gun_blood_impact4_fr0:Sprite;
		public var gun_blood_impact4_fr1:Sprite;
		public var gun_blood_impact4_fr2:Sprite;
		public var gun_blood_impact4_fr3:Sprite;
		public var gun_blood_impact4_fr4:Sprite;
		public var gun_blood_impact4_fr5:Sprite;
		public var gun_blood_impact4_fr6:Sprite;
		public var gun_blood_impact4_fr7:Sprite;
		public var gun_blood_impact4_fr8:Sprite;
		public var gun_blood_impact_bm4:BitmapData;
		public var gun_blood_impact_bm5:BitmapData;
		public var gun_blood_impact_bm6:BitmapData;
		public var giblets_human_sprite0:Sprite;
		public var giblets_human_sprite1:Sprite;
		public var giblets_human_sprite2:Sprite;
		public var giblets_human_sprite3:Sprite;
		public var giblets_human_sprite4:Sprite;
		public var giblets_human_sprite5:Sprite;
		public var giblets_human_sprite6:Sprite;
		public var giblets_human_sprite7:Sprite;
		public var giblets_human_sprite8:Sprite;
		public var giblets_human_sprite9:Sprite;
		public var giblets_bm:BitmapData;
		public var giblet_height:Array;
		public var giblet_posX:Array;
		public var giblet_posY:Array;
		public var giblets_small_bm:BitmapData;
		public var gun_casing0:BitmapData;
		public var gun_casing1:BitmapData;
		public var gun_casing2:BitmapData;
		public var gun_casing3:BitmapData;
		public var gun_casing4:BitmapData;
		public var gun_casing5:BitmapData;
		public var gun_casing6:BitmapData;
		public var gun_casing7:BitmapData;
		public var gun_casing8:BitmapData;
		public var gunCasingWidth:Array;
		public var casingFrames:int;
		public var spark_bm:BitmapData;
		public var bean_gib_eye:BitmapData;
		public var tempGunBM:BitmapData;
		public var gunShoulder_x:Vector.<int>;
		public var gunShoulder_y:Vector.<int>;
		public var gun_barrel_x:Vector.<Number>;
		public var gun_barrel_y:Vector.<Number>;
		public var gun_eject_x:Vector.<int>;
		public var gun_eject_y:Vector.<int>;
		public var gun_dist:Array;
		public var gun_coolDown:Array;
		public var gun_auto:Array;
		public var gun_casingType:Array;
		public var gun_bulletType:Array;
		public var gun_isIncindiary:Array;
		public var gun_frameToEjectShellOn:Array;
		public var gun_names:Array;
		public var gun_sfx:Array;
		public var gun_atp:Array;
		public var gun_atp_enemy:Array;
		public var gun_mag_size:Array;
		public var gun_ammo:Array;
		public var gun_total_ammo:Array;
		public var gun_reload_time:Array;
		public var gun_recoil_x:Array;
		public var gun_recoil_rot:Array;
		public var gun_recoil_dampening:Array;
		public var gun_recoil_xRecover:Array;
		public var gun_hasReloadAnim:Array;
		public var gun_magDropFrame:Array;
		public var gun_magType:Array;
		public var gun_reload_x:Array;
		public var gun_reload_y:Array;
		public var gun_reload_w:Array;
		public var gun_reload_mag_x:Array;
		public var gun_reload_mag_y:Array;
		public var shellHeight:Array;
		public var gunFrames_0:Array;
		public var gunFrames_1:Array;
		public var gunFrames_2:Array;
		public var gunFrames_3:Array;
		public var gunFrames_4:Array;
		public var gunFrames_5:Array;
		public var gunFrames_6:Array;
		public var gunFrames_7:Array;
		public var gunFrames_8:Array;
		public var gunFrames_9:Array;
		public var gunFrames_10:Array;
		public var gunFrames_11:Array;
		public var gunFrames_12:Array;
		public var gunFrames_13:Array;
		public var gunFrames_14:Array;
		public var gunFrames_15:Array;
		public var gunFrames_16:Array;
		public var gunFrames_17:Array;
		public var gunFrames_18:Array;
		public var gunFrames_19:Array;
		public var gunFrames_20:Array;
		public var gun_0_right_0:Sprite;
		public var gun_0_right_1:Sprite;
		public var gun_0_right_2:Sprite;
		public var gun_0_right_3:Sprite;
		public var gun_0_right_4:Sprite;
		public var gun_0_left_0:Sprite;
		public var gun_0_left_1:Sprite;
		public var gun_0_left_2:Sprite;
		public var gun_0_left_3:Sprite;
		public var gun_0_left_4:Sprite;
		public var gun_0_reload_right:BitmapData;
		public var gun_0_reload_left:BitmapData;
		public var gun_1_right_0:Sprite;
		public var gun_1_right_1:Sprite;
		public var gun_1_right_2:Sprite;
		public var gun_1_right_3:Sprite;
		public var gun_1_right_4:Sprite;
		public var gun_1_left_0:Sprite;
		public var gun_1_left_1:Sprite;
		public var gun_1_left_2:Sprite;
		public var gun_1_left_3:Sprite;
		public var gun_1_left_4:Sprite;
		public var gun_1_reload_right:BitmapData;
		public var gun_1_reload_left:BitmapData;
		public var gun_2_right_0:Sprite;
		public var gun_2_right_1:Sprite;
		public var gun_2_right_2:Sprite;
		public var gun_2_right_3:Sprite;
		public var gun_2_right_4:Sprite;
		public var gun_2_left_0:Sprite;
		public var gun_2_left_1:Sprite;
		public var gun_2_left_2:Sprite;
		public var gun_2_left_3:Sprite;
		public var gun_2_left_4:Sprite;
		public var gun_2_reload_right:BitmapData;
		public var gun_2_reload_left:BitmapData;
		public var gun_3_right_0:Sprite;
		public var gun_3_right_1:Sprite;
		public var gun_3_right_2:Sprite;
		public var gun_3_right_3:Sprite;
		public var gun_3_right_4:Sprite;
		public var gun_3_right_5:Sprite;
		public var gun_3_right_6:Sprite;
		public var gun_3_right_7:Sprite;
		public var gun_3_left_0:Sprite;
		public var gun_3_left_1:Sprite;
		public var gun_3_left_2:Sprite;
		public var gun_3_left_3:Sprite;
		public var gun_3_left_4:Sprite;
		public var gun_3_left_5:Sprite;
		public var gun_3_left_6:Sprite;
		public var gun_3_left_7:Sprite;
		public var gun_3_reload_right:BitmapData;
		public var gun_3_reload_left:BitmapData;
		public var gun_4_right_0:Sprite;
		public var gun_4_right_1:Sprite;
		public var gun_4_right_2:Sprite;
		public var gun_4_right_3:Sprite;
		public var gun_4_right_4:Sprite;
		public var gun_4_left_0:Sprite;
		public var gun_4_left_1:Sprite;
		public var gun_4_left_2:Sprite;
		public var gun_4_left_3:Sprite;
		public var gun_4_left_4:Sprite;
		public var gun_4_reload_right:BitmapData;
		public var gun_4_reload_left:BitmapData;
		public var gun_5_right_0:Sprite;
		public var gun_5_right_1:Sprite;
		public var gun_5_right_2:Sprite;
		public var gun_5_right_3:Sprite;
		public var gun_5_right_4:Sprite;
		public var gun_5_left_0:Sprite;
		public var gun_5_left_1:Sprite;
		public var gun_5_left_2:Sprite;
		public var gun_5_left_3:Sprite;
		public var gun_5_left_4:Sprite;
		public var gun_5_reload_right:BitmapData;
		public var gun_5_reload_left:BitmapData;
		public var gun_6_right_0:Sprite;
		public var gun_6_right_1:Sprite;
		public var gun_6_right_2:Sprite;
		public var gun_6_right_3:Sprite;
		public var gun_6_right_4:Sprite;
		public var gun_6_left_0:Sprite;
		public var gun_6_left_1:Sprite;
		public var gun_6_left_2:Sprite;
		public var gun_6_left_3:Sprite;
		public var gun_6_left_4:Sprite;
		public var gun_6_reload_right:BitmapData;
		public var gun_6_reload_left:BitmapData;
		public var gun_7_right_0:Sprite;
		public var gun_7_right_1:Sprite;
		public var gun_7_right_2:Sprite;
		public var gun_7_right_3:Sprite;
		public var gun_7_right_4:Sprite;
		public var gun_7_left_0:Sprite;
		public var gun_7_left_1:Sprite;
		public var gun_7_left_2:Sprite;
		public var gun_7_left_3:Sprite;
		public var gun_7_left_4:Sprite;
		public var gun_7_reload_right:BitmapData;
		public var gun_7_reload_left:BitmapData;
		public var gun_8_right_0:Sprite;
		public var gun_8_left_0:Sprite;
		public var gun_8_reload_right:BitmapData;
		public var gun_8_reload_left:BitmapData;
		public var gun_9_right_0:Sprite;
		public var gun_9_left_0:Sprite;
		public var gun_9_reload_right:BitmapData;
		public var gun_9_reload_left:BitmapData;
		public var gun_10_right_0:Sprite;
		public var gun_10_left_0:Sprite;
		public var gun_10_reload_right:BitmapData;
		public var gun_10_reload_left:BitmapData;
		public var gun_11_right_0:Sprite;
		public var gun_11_right_1:Sprite;
		public var gun_11_right_2:Sprite;
		public var gun_11_right_3:Sprite;
		public var gun_11_left_0:Sprite;
		public var gun_11_left_1:Sprite;
		public var gun_11_left_2:Sprite;
		public var gun_11_left_3:Sprite;
		public var gun_11_reload_right:BitmapData;
		public var gun_11_reload_left:BitmapData;
		public var gun_12_right_0:Sprite;
		public var gun_12_right_1:Sprite;
		public var gun_12_right_2:Sprite;
		public var gun_12_right_3:Sprite;
		public var gun_12_right_4:Sprite;
		public var gun_12_right_5:Sprite;
		public var gun_12_right_6:Sprite;
		public var gun_12_right_7:Sprite;
		public var gun_12_right_8:Sprite;
		public var gun_12_right_9:Sprite;
		public var gun_12_left_0:Sprite;
		public var gun_12_left_1:Sprite;
		public var gun_12_left_2:Sprite;
		public var gun_12_left_3:Sprite;
		public var gun_12_left_4:Sprite;
		public var gun_12_left_5:Sprite;
		public var gun_12_left_6:Sprite;
		public var gun_12_left_7:Sprite;
		public var gun_12_left_8:Sprite;
		public var gun_12_left_9:Sprite;
		public var gun_12_reload_right:BitmapData;
		public var gun_12_reload_left:BitmapData;
		public var gun_13_right_0:Sprite;
		public var gun_13_right_1:Sprite;
		public var gun_13_right_2:Sprite;
		public var gun_13_right_3:Sprite;
		public var gun_13_right_4:Sprite;
		public var gun_13_right_5:Sprite;
		public var gun_13_left_0:Sprite;
		public var gun_13_left_1:Sprite;
		public var gun_13_left_2:Sprite;
		public var gun_13_left_3:Sprite;
		public var gun_13_left_4:Sprite;
		public var gun_13_left_5:Sprite;
		public var gun_13_reload_right:BitmapData;
		public var gun_13_reload_left:BitmapData;
		public var gun_14_right_0:Sprite;
		public var gun_14_right_1:Sprite;
		public var gun_14_right_2:Sprite;
		public var gun_14_right_3:Sprite;
		public var gun_14_right_4:Sprite;
		public var gun_14_right_5:Sprite;
		public var gun_14_left_0:Sprite;
		public var gun_14_left_1:Sprite;
		public var gun_14_left_2:Sprite;
		public var gun_14_left_3:Sprite;
		public var gun_14_left_4:Sprite;
		public var gun_14_left_5:Sprite;
		public var gun_14_reload_right:BitmapData;
		public var gun_14_reload_left:BitmapData;
		public var gun_15_right_0:Sprite;
		public var gun_15_left_0:Sprite;
		public var gun_15_reload_right:BitmapData;
		public var gun_15_reload_left:BitmapData;
		public var gun_16_right_0:Sprite;
		public var gun_16_right_1:Sprite;
		public var gun_16_left_0:Sprite;
		public var gun_16_left_1:Sprite;
		public var gun_16_reload_right:BitmapData;
		public var gun_16_reload_left:BitmapData;
		public var gun_17_right_0:Sprite;
		public var gun_17_right_1:Sprite;
		public var gun_17_right_2:Sprite;
		public var gun_17_right_3:Sprite;
		public var gun_17_left_0:Sprite;
		public var gun_17_left_1:Sprite;
		public var gun_17_left_2:Sprite;
		public var gun_17_left_3:Sprite;
		public var gun_17_reload_right:BitmapData;
		public var gun_17_reload_left:BitmapData;
		public var gun_18_right_0:Sprite;
		public var gun_18_right_1:Sprite;
		public var gun_18_right_2:Sprite;
		public var gun_18_right_3:Sprite;
		public var gun_18_left_0:Sprite;
		public var gun_18_left_1:Sprite;
		public var gun_18_left_2:Sprite;
		public var gun_18_left_3:Sprite;
		public var gun_18_reload_right:BitmapData;
		public var gun_18_reload_left:BitmapData;
		public var gun_19_right_0:Sprite;
		public var gun_19_left_0:Sprite;
		public var gun_19_reload_right:BitmapData;
		public var gun_19_reload_left:BitmapData;
		public var gun_20_right_0:Sprite;
		public var gun_20_left_0:Sprite;
		public var gun_20_reload_right:BitmapData;
		public var gun_20_reload_left:BitmapData;
		public var numberOfGuns:int;
		public var enemy_gun_0_right_0:Sprite;
		public var enemy_gun_0_right_1:Sprite;
		public var enemy_gun_0_right_2:Sprite;
		public var enemy_gun_0_right_3:Sprite;
		public var enemy_gun_0_right_4:Sprite;
		public var enemy_gun_0_right_5:Sprite;
		public var enemy_gun_0_right_6:Sprite;
		public var enemy_gun_0_right_7:Sprite;
		public var enemy_gun_0_left_0:Sprite;
		public var enemy_gun_0_left_1:Sprite;
		public var enemy_gun_0_left_2:Sprite;
		public var enemy_gun_0_left_3:Sprite;
		public var enemy_gun_0_left_4:Sprite;
		public var enemy_gun_0_left_5:Sprite;
		public var enemy_gun_0_left_6:Sprite;
		public var enemy_gun_0_left_7:Sprite;
		public var enemy_gun_1_right_0:Sprite;
		public var enemy_gun_1_right_1:Sprite;
		public var enemy_gun_1_right_2:Sprite;
		public var enemy_gun_1_right_3:Sprite;
		public var enemy_gun_1_right_4:Sprite;
		public var enemy_gun_1_right_5:Sprite;
		public var enemy_gun_1_right_6:Sprite;
		public var enemy_gun_1_right_7:Sprite;
		public var enemy_gun_1_left_0:Sprite;
		public var enemy_gun_1_left_1:Sprite;
		public var enemy_gun_1_left_2:Sprite;
		public var enemy_gun_1_left_3:Sprite;
		public var enemy_gun_1_left_4:Sprite;
		public var enemy_gun_1_left_5:Sprite;
		public var enemy_gun_1_left_6:Sprite;
		public var enemy_gun_1_left_7:Sprite;
		public var enemy_gun_2_right_0:Sprite;
		public var enemy_gun_2_right_1:Sprite;
		public var enemy_gun_2_right_2:Sprite;
		public var enemy_gun_2_right_3:Sprite;
		public var enemy_gun_2_right_4:Sprite;
		public var enemy_gun_2_right_5:Sprite;
		public var enemy_gun_2_right_6:Sprite;
		public var enemy_gun_2_right_7:Sprite;
		public var enemy_gun_2_left_0:Sprite;
		public var enemy_gun_2_left_1:Sprite;
		public var enemy_gun_2_left_2:Sprite;
		public var enemy_gun_2_left_3:Sprite;
		public var enemy_gun_2_left_4:Sprite;
		public var enemy_gun_2_left_5:Sprite;
		public var enemy_gun_2_left_6:Sprite;
		public var enemy_gun_2_left_7:Sprite;
		public var enemy_gun_3_right_0:Sprite;
		public var enemy_gun_3_right_1:Sprite;
		public var enemy_gun_3_right_2:Sprite;
		public var enemy_gun_3_right_3:Sprite;
		public var enemy_gun_3_right_4:Sprite;
		public var enemy_gun_3_right_5:Sprite;
		public var enemy_gun_3_right_6:Sprite;
		public var enemy_gun_3_right_7:Sprite;
		public var enemy_gun_3_left_0:Sprite;
		public var enemy_gun_3_left_1:Sprite;
		public var enemy_gun_3_left_2:Sprite;
		public var enemy_gun_3_left_3:Sprite;
		public var enemy_gun_3_left_4:Sprite;
		public var enemy_gun_3_left_5:Sprite;
		public var enemy_gun_3_left_6:Sprite;
		public var enemy_gun_3_left_7:Sprite;
		public var enemy_gun_4_right_0:Sprite;
		public var enemy_gun_4_right_1:Sprite;
		public var enemy_gun_4_right_2:Sprite;
		public var enemy_gun_4_right_3:Sprite;
		public var enemy_gun_4_right_4:Sprite;
		public var enemy_gun_4_right_5:Sprite;
		public var enemy_gun_4_right_6:Sprite;
		public var enemy_gun_4_right_7:Sprite;
		public var enemy_gun_4_left_0:Sprite;
		public var enemy_gun_4_left_1:Sprite;
		public var enemy_gun_4_left_2:Sprite;
		public var enemy_gun_4_left_3:Sprite;
		public var enemy_gun_4_left_4:Sprite;
		public var enemy_gun_4_left_5:Sprite;
		public var enemy_gun_4_left_6:Sprite;
		public var enemy_gun_4_left_7:Sprite;
		public var enemy_gun_5_right_0:Sprite;
		public var enemy_gun_5_right_1:Sprite;
		public var enemy_gun_5_right_2:Sprite;
		public var enemy_gun_5_right_3:Sprite;
		public var enemy_gun_5_right_4:Sprite;
		public var enemy_gun_5_right_5:Sprite;
		public var enemy_gun_5_right_6:Sprite;
		public var enemy_gun_5_right_7:Sprite;
		public var enemy_gun_5_left_0:Sprite;
		public var enemy_gun_5_left_1:Sprite;
		public var enemy_gun_5_left_2:Sprite;
		public var enemy_gun_5_left_3:Sprite;
		public var enemy_gun_5_left_4:Sprite;
		public var enemy_gun_5_left_5:Sprite;
		public var enemy_gun_5_left_6:Sprite;
		public var enemy_gun_5_left_7:Sprite;
		public var enemyWeapons:Array;
		public var mouseDown:Boolean;
		public var gun16time:int;
		public var noRecoil:Boolean;
		public var score:int;
		public var multiplier:Number;
		public var multiplier_countdown:Number;
		public var max_multiplier_countdown:int;
		public var character_health:int;
		public var character_maxHealth:int;
		public var character_hurtTime:int;
		public var character_invincibleTime:int;
		public var character_x:Number;
		public var character_y:Number;
		public var character_xOld:Number;
		public var character_yOld:Number;
		public var character_gunX:Number;
		public var character_gunY:Number;
		public var character_gunXOld:Number;
		public var character_gunYOld:Number;
		public var character_gunRot:Number;
		public var character_gunRotOld:Number;
		public var character_gunDX:Number;
		public var character_gunDY:Number;
		public var character_headRot:Number;
		public var character_gunEquipped:int;
		public var character_recoil_rot:Number;
		public var character_recoil_x:Number;
		public var character_recoil_y:Number;
		public var character_gunCoolDown:int;
		public var character_gunFrame:int;
		public var character_burstLength:int;
		public var character_reloadTime:int;
		public var character_velX:Number;
		public var character_velY:Number;
		public var runSpeed:int;
		public var jump:Boolean;
		public var releaseJump:Boolean;
		public var character_face:int;
		public var character_keycards:int;
		public var radTo:Number;
		public var pi_halved:Number;
		public var pi_180:Number;
		public var gunFlash_pt:Point;
		public var gunFlash_pt2:Point;
		public var gunTempRand:Number;
		public var gunTempSpd:Number;
		public var anim:int;
		public var fr:Number;
		public var frOld:Number;
		public var aimPan:Number;
		public var aimPanOld:Number;
		public var hasDroppedMag:Boolean;
		public var idleTime:int;
		public var idle_x:Number;
		public var idle_x_last:Number;
		public var idle_change_x:Number;
		public var idle_movement:Number;
		public var idle_timePlus:Number;
		public var recoilRotVel:Number;
		public var enemyRunSpeed:int;
		public var enemy_type:Vector.<int>;
		public var enemy_health_head:Vector.<Number>;
		public var enemy_health_body:Vector.<Number>;
		public var enemy_health_foot:Vector.<Number>;
		public var enemy_health_headMax:Vector.<Number>;
		public var enemy_health_bodyMax:Vector.<Number>;
		public var enemy_health_footMax:Vector.<Number>;
		public var enemy_health_headOld:Vector.<Number>;
		public var enemy_health_bodyOld:Vector.<Number>;
		public var enemy_health_footOld:Vector.<Number>;
		public var enemy_damagedBy:Vector.<int>;
		public var enemy_spriteSet:Vector.<Number>;
		public var enemy_face:Vector.<Number>;
		public var enemy_anim:Vector.<Number>;
		public var enemy_fr:Vector.<Number>;
		public var enemy_frOld:Vector.<Number>;
		public var enemy_x:Vector.<Number>;
		public var enemy_y:Vector.<Number>;
		public var enemy_xOld:Vector.<Number>;
		public var enemy_yOld:Vector.<Number>;
		public var enemy_velX:Vector.<Number>;
		public var enemy_velY:Vector.<Number>;
		public var enemy_jump:Vector.<Boolean>;
		public var enemy_gunX:Vector.<Number>;
		public var enemy_gunY:Vector.<Number>;
		public var enemy_gunXOld:Vector.<Number>;
		public var enemy_gunYOld:Vector.<Number>;
		public var enemy_gunRot:Vector.<Number>;
		public var enemy_gunRotOld:Vector.<Number>;
		public var enemy_headRot:Vector.<Number>;
		public var enemy_radTo:Vector.<Number>;
		public var enemy_gunEquipped:Vector.<Number>;
		public var enemy_recoil_rot:Vector.<Number>;
		public var enemy_recoil_rotVel:Vector.<Number>;
		public var enemy_recoil_x:Vector.<Number>;
		public var enemy_recoil_y:Vector.<Number>;
		public var enemy_gunCoolDown:Vector.<Number>;
		public var enemy_gunFrame:Vector.<Number>;
		public var enemy_burstLength:Vector.<Number>;
		public var enemy_engagementDistance:Vector.<Number>;
		public var enemy_lineOfSightTimer:Vector.<int>;
		public var enemy_nextNode:Vector.<int>;
		public var enemy_aiState:Vector.<int>;
		public var enemy_maxJumpHeight:Vector.<int>;
		public var enemy_hasLineOfSight:Vector.<Boolean>;
		public var enemy_lineOfSightCountdown:Vector.<int>;
		public var enemy_markedForRemoval:Vector.<Boolean>;
		public var enemy_isHeadless:Vector.<Boolean>;
		public var enemy_statusEffect:Vector.<int>;
		public var enemy_statusEffect_atp:Vector.<Number>;
		public var enemy_inacc_x:Vector.<Number>;
		public var enemy_inacc_y:Vector.<Number>;
		public var enemy_inacc_x_target:Vector.<Number>;
		public var enemy_inacc_y_target:Vector.<Number>;
		public var enemy_initialized:Vector.<Number>;
		public var multiKillCount:int;
		public var multiKillTime:int;
		public var tempNumOfEnemies:int;
		public var timePassed:int;
		public var maxNumOfEnemies:int;
		public var maxNumOfEnemies_forReal:int;
		public var has_line_of_sight:Boolean;
		public var enemy_dX:Number;
		public var enemy_dY:Number;
		public var enemy_tempRise:Number;
		public var enemy_tempRun:Number;
		public var enemy_dist:Number;
		public var enemy_isMoving:Boolean;
		public var tempScoreQue:String;
		public var enemy_tempPos_x:int;
		public var enemy_tempPos_y:int;
		public var enemy_tempPos_face:int;
		public var enemy_tempVel_x:Number;
		public var enemy_tempVel_y:Number;
		public var enemy_ragdoll_type:Vector.<int>;
		public var enemy_ragdoll_outfit:Vector.<int>;
		public var enemy_ragdoll_face:Vector.<int>;
		public var enemy_head_x:Vector.<Number>;
		public var enemy_head_y:Vector.<Number>;
		public var enemy_head_r:Vector.<Number>;
		public var enemy_head_xOld:Vector.<Number>;
		public var enemy_head_yOld:Vector.<Number>;
		public var enemy_head_rOld:Vector.<Number>;
		public var enemy_head_velX:Vector.<Number>;
		public var enemy_head_velY:Vector.<Number>;
		public var enemy_body_x:Vector.<Number>;
		public var enemy_body_y:Vector.<Number>;
		public var enemy_body_r:Vector.<Number>;
		public var enemy_body_xOld:Vector.<Number>;
		public var enemy_body_yOld:Vector.<Number>;
		public var enemy_body_rOld:Vector.<Number>;
		public var enemy_body_velX:Vector.<Number>;
		public var enemy_body_velY:Vector.<Number>;
		public var enemy_body2_x:Vector.<Number>;
		public var enemy_body2_y:Vector.<Number>;
		public var enemy_body2_r:Vector.<Number>;
		public var enemy_body2_xOld:Vector.<Number>;
		public var enemy_body2_yOld:Vector.<Number>;
		public var enemy_body2_rOld:Vector.<Number>;
		public var enemy_body2_velX:Vector.<Number>;
		public var enemy_body2_velY:Vector.<Number>;
		public var enemy_foot1_x:Vector.<Number>;
		public var enemy_foot1_y:Vector.<Number>;
		public var enemy_foot1_r:Vector.<Number>;
		public var enemy_foot1_xOld:Vector.<Number>;
		public var enemy_foot1_yOld:Vector.<Number>;
		public var enemy_foot1_rOld:Vector.<Number>;
		public var enemy_foot1_velX:Vector.<Number>;
		public var enemy_foot1_velY:Vector.<Number>;
		public var enemy_foot2_x:Vector.<Number>;
		public var enemy_foot2_y:Vector.<Number>;
		public var enemy_foot2_r:Vector.<Number>;
		public var enemy_foot2_xOld:Vector.<Number>;
		public var enemy_foot2_yOld:Vector.<Number>;
		public var enemy_foot2_rOld:Vector.<Number>;
		public var enemy_foot2_velX:Vector.<Number>;
		public var enemy_foot2_velY:Vector.<Number>;
		public var tempRad:Number;
		public var wasGibbed:Boolean;
		public var timeBeforeRoundBegins:int;
		public var timeRemaining:int;
		public var time_min:int;
		public var time_sec:int;
		public var intro_countdown:int;
		public var intro_cameraX:Number;
		public var intro_cameraY:Number;
		public var intro_cameraXOld:Number;
		public var intro_cameraYOld:Number;
		public var intro_cameraVelX:Number;
		public var intro_cameraVelY:Number;
		public var objective_visibleLetters:int;
		public var objectiveOn:int;
		public var objectiveOn_sub:int;
		public var objectiveTime:int;
		public var discsDestroyed:int;
		public var lightMask:Shape;
		public var globalIllumination:Number;
		public var shadowColor:uint;
		public var tempSlope:Number;
		public var tempRise:Number;
		public var tempRun:Number;
		public var tempDist:Number;
		public var lineLength:Number;
		public var endPoint:Point;
		public var endPoint2:Point;
		public var lightMatrix:Matrix;
		public var lightTransform:ColorTransform;
		public var lightMatrix2:Matrix;
		public var shadowMapScale:int;
		public var shadowBuffer:BitmapData;
		public var lightTexture:BitmapData;
		public var tempRect_x:Number;
		public var tempRect_y:Number;
		public var tempRect_width:Number;
		public var tempRect_height:Number;
		public var tempRect_x_width:Number;
		public var tempRect_y_height:Number;
		public var tempLight:Point;
		public var lightSizeHalf:Number;
		public var cursorFrame:int;
		public var cameraX:Number;
		public var cameraY:Number;
		public var tempLightPoint:Point;
		public var tempHeadRot:Number;
		public var rotInterp:Number;
		public var enemiesOnScreen:int;
		public var tempInterpPoint:Point;
		public var tempInterpPointOld:Point;
		public var interpFinal:Point;
		public var interpFrame:Number;
		public var displayMiniMap:Boolean;
		public var shadowBuffer_bm:Bitmap;
		public var bf:Object;
		public var light_num:int;
		public var finished_lights:Boolean;
		public var doLights:Boolean;
		public var cameraShakeX:Number;
		public var cameraShakeY:Number;
		public var cameraShakeXOld:Number;
		public var cameraShakeYOld:Number;
		public var messageTime:int;
		public var messageText:String;
		public var messageTime2:int;
		public var messageText2:String;
		public var scoreQue:Array;
		public var scoreNames:Array;
		public var scoreTimesEarned:Array;
		public var weaponProficiencyKills:Array;
		public var scoreTally:int;
		public var scoreQueTime:int;
		public var healthFrame:Number;
		public var healthPixels:int;
		public var keyHeadsUp_frame:int;
		public var keyHeadsUp_visible:Boolean;
		public var tempText:String;
		public var tempTextNum:int;
		public var newTime:Number;
		public var frameTime:Number;
		public var currentTime:Number;
		public var accumulator:Number;
		public var framesPerSecond:Number;
		public var interpAmount:Number;
		public var pauseState:int;
		public var didLastRender:Boolean;
		public var tempObjectivesCompleted:int;
		public var deathScreenBuffer:BitmapData;
		public var fpsCounterT:Number;
		public var fpsCounterFps:Number;
		public var fpsCounter_count:int;
		public var avgFPS:Number;
		public var renderRepeats:int;
		public var hasSubmitted:Boolean;
		public var hax:Boolean;
		public var tempURL:Object;
		public var disallowedURLs:Array;
		
		public function MainTimeline()
		{
			mc=new MainMC1();
			mc.addFrameScript(0, this.frame1, 1, this.frame2, 3, this.frame4, 4, this.frame5, 5, this.frame6, 9, this.frame10, 14, this.frame15, 15, this.frame16);
			return;
		}// end function
		
		private function onFrame(evt:Event):void
		{
			trace(this.mc.currentFrame+"\t"+this.mc.screenMask);
		}
		
		public function toggleSFX_mute()
		{
			if (this.sfxOn == true)
			{
				this.sfxOn = false;
				this.sfx_a = 0;
				while (this.sfx_a < 10)
				{
					
					this["sfxChannel_" + this.sfx_a].stop();
					this["sfxTransform_" + this.sfx_a].volume = 0;
					this["sfxChannel_" + this.sfx_a].soundTransform = this["sfxTransform_" + this.sfx_a];
					this["sfxChannel_" + this.sfx_a + "_playing"] = false;
					
					this.sfx_a  ++ ;
					
				}
				this.soundToggle[1] = 1;
			}
			else
			{
				this.sfxOn = true;
				this.soundToggle[1] = 0;
				this.playSoundEffect(55, 1, 0);
			}
			this.gameData = SharedObject.getLocal("userData");
			this.gameData.data.soundToggle = this.soundToggle;
			this.gameData = null;
			return;
		}// end function
		
		public function getVolume(param1, param2)
		{
			this.tempVol = Math.abs(Math.sqrt((this.cameraX - param1 + 400) * (this.cameraX - param1 + 400) + (this.cameraY - param2 + 300) * (this.cameraY - param2 + 300)));
			if (this.tempVol < 300)
			{
				this.tempVol = 1;
			}
			else
			{
				this.tempVol = this.tempVol - 300;
				this.tempVol = 600 - Math.abs(this.tempVol);
				this.tempVol = this.tempVol / 600;
				if (this.tempVol < 0.1)
				{
					this.tempVol = 0;
				}
			}
			return;
		}// end function
		
		public function playSoundEffect(param1, param2, param3)
		{
			if (this.sfxOn == true)
			{
				this.sfx_b = 100;
				this.sfx_a = 0;
				while (this.sfx_a < 10)
				{
					
					if (this["sfxChannel_" + this.sfx_a + "_playing"] == false)
					{
						this.sfx_b = this.sfx_a;
						this.sfx_a = 100;
					}
					
					this.sfx_a  ++ ;
					
				}
				if (this.sfx_b != 100)
				{
					this["sfxChannel_" + this.sfx_b] = this["sfx_" + param1].play();
					this["sfxTransform_" + this.sfx_b].volume = this.sfxVolume * param2;
					this["sfxTransform_" + this.sfx_b].pan = param3;
					this["sfxChannel_" + this.sfx_b].soundTransform = this["sfxTransform_" + this.sfx_b];
					this["sfxChannel_" + this.sfx_b + "_playing"] = true;
					this["sfxChannel_" + this.sfx_b].addEventListener(Event.SOUND_COMPLETE, this["endSoundChannel" + this.sfx_b]);
				}
			}
			return;
		}// end function
		
		public function endSoundChannel0(event:Event)
		{
			this.sfxChannel_0_playing = false;
			this.sfxChannel_0.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel0);
			return;
		}// end function
		
		public function endSoundChannel1(event:Event)
		{
			this.sfxChannel_1_playing = false;
			this.sfxChannel_1.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel1);
			return;
		}// end function
		
		public function endSoundChannel2(event:Event)
		{
			this.sfxChannel_2_playing = false;
			this.sfxChannel_2.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel2);
			return;
		}// end function
		
		public function endSoundChannel3(event:Event)
		{
			this.sfxChannel_3_playing = false;
			this.sfxChannel_3.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel3);
			return;
		}// end function
		
		public function endSoundChannel4(event:Event)
		{
			this.sfxChannel_4_playing = false;
			this.sfxChannel_4.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel4);
			return;
		}// end function
		
		public function endSoundChannel5(event:Event)
		{
			this.sfxChannel_5_playing = false;
			this.sfxChannel_5.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel5);
			return;
		}// end function
		
		public function endSoundChannel6(event:Event)
		{
			this.sfxChannel_6_playing = false;
			this.sfxChannel_6.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel6);
			return;
		}// end function
		
		public function endSoundChannel7(event:Event)
		{
			this.sfxChannel_7_playing = false;
			this.sfxChannel_7.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel7);
			return;
		}// end function
		
		public function endSoundChannel8(event:Event)
		{
			this.sfxChannel_8_playing = false;
			this.sfxChannel_8.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel8);
			return;
		}// end function
		
		public function endSoundChannel9(event:Event)
		{
			this.sfxChannel_9_playing = false;
			this.sfxChannel_9.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel9);
			return;
		}// end function
		
		public function endSoundChannel10(event:Event)
		{
			this.sfxChannel_10_playing = false;
			this.sfxChannel_10.removeEventListener(Event.SOUND_COMPLETE, this.endSoundChannel10);
			return;
		}// end function
		
		public function check_domain_for_cmg(param1)
		{
			if (this.gameVersion == 0)
			{
				switch(param1)
				{
					case 0:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://crazymonkeygames.com"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://crazymonkeygames.com?ref=ttap"), "_blank");
						}
						break;
					}
					case 1:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/series/Thing-Thing-Series.php"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/series/Thing-Thing-Series.php?ref=ttap"), "_blank");
						}
						break;
					}
					case 2:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html?ref=ttap"), "_blank");
						}
						break;
					}
					case 3:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html?ref=ttap"), "_blank");
						}
						break;
					}
					case 4:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/guide/Thing-Thing-Arena-Pro/"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/guide/Thing-Thing-Arena-Pro/?ref=ttap"), "_blank");
						}
						break;
					}
					case 5:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAC-HAX.html"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAC-HAX.html?ref=ttac"), "_blank");
						}
						break;
					}
					default:
					{
						break;
					}
				}
			}
			else
			{
				switch(param1)
				{
					case 0:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://crazymonkeygames.com"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://crazymonkeygames.com?ref=ttac"), "_blank");
						}
						break;
					}
					case 1:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/series/Thing-Thing-Series.php"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/series/Thing-Thing-Series.php?ref=ttac"), "_blank");
						}
						break;
					}
					case 2:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html?ref=ttac"), "_blank");
						}
						break;
					}
					case 3:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html?ref=ttac"), "_blank");
						}
						break;
					}
					case 4:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://crazymonkeygames.com/guide/Thing-Thing-Arena-Classic/"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://crazymonkeygames.com/guide/Thing-Thing-Arena-Classic/?ref=ttac"), "_blank");
						}
						break;
					}
					case 5:
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAC-HAX.html"), "_blank");
						}
						else
						{
							navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAC-HAX.html?ref=ttac"), "_blank");
						}
						break;
					}
					default:
					{
						break;
					}
				}
			}
			trace("hurr");
			return;
		}// end function
		
		public function toggleMusic_mute_preloader()
		{
			if (this.musicOn == true)
			{
				this.musicOn = false;
				this.soundToggle[0] = 1;
			}
			else
			{
				this.musicOn = true;
				this.soundToggle[0] = 0;
			}
			this.gameData = SharedObject.getLocal("userData");
			this.gameData.data.soundToggle = this.soundToggle;
			this.gameData = null;
			return;
		}// end function
		
		public function cmg_keyPressed(event:KeyboardEvent)
		{
			if (event.keyCode == 192)
			{
				trace("hurr");
				this.gameData = SharedObject.getLocal("userData");
				this.gameData.data.dataExists = false;
				this.gameData.flush();
				this.gameData = null;
				mc.prevFrame();
			}
			return;
		}// end function
		
		public function cmgLogo(event:Event)
		{
			if (this.preloadComplete == true)
			{
				if (this.mc.loadingText.alpha > 0)
				{
					this.mc.loadingText.alpha = this.mc.loadingText.alpha - 0.1;
				}
				else
				{
					this.mc.loadingText.visible = false;
					if (this.isHackedVersion == true)
					{
						if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
						{
							this.mc.btn_play.visible = true;
							this.mc.btn_onlyOn.visible = false;
						}
						else
						{
							this.mc.btn_play.visible = false;
							this.mc.btn_onlyOn.visible = true;
							this.mc.btn_onlyOn.y = 465;
						}
					}
					else
					{
						this.mc.btn_play.visible = true;
					}
				}
			}
			else
			{
				this.mc.btn_play.visible = false;
			}
			return;
		}// end function
		
		public function loadComplete(event:Event)
		{
			this.preloadComplete = true;
			this.mc.loaderInfo.removeEventListener(Event.COMPLETE, this.loadComplete);
			this.mc.loaderInfo.removeEventListener(ProgressEvent.PROGRESS, this.loadProgress);
			return;
		}// end function
		
		public function loadProgress(event:ProgressEvent) : void
		{
			this.preLoaderPercent = int(event.bytesLoaded / event.bytesTotal * 100);
			if (event.bytesTotal > 0)
			{
				this.mc.loadingText.text = "";
				this.mc.loadingText.appendText("Loading: ");
				this.mc.loadingText.appendText(this.preLoaderPercent.toString());
				this.mc.loadingText.appendText("%");
			}
			else
			{
				this.mc.loadingText.text = "";
				this.mc.loadingText.appendText("Loading");
			}
			return;
		}// end function
		
		public function clickCMG(event:MouseEvent) : void
		{
			this.mc.btn_play.removeEventListener(MouseEvent.CLICK, this.clickCMG);
			mc.removeEventListener(Event.ENTER_FRAME, this.cmgLogo);
			mc.stage.removeEventListener(KeyboardEvent.KEY_DOWN, this.cmg_keyPressed);
			//this.cmg_logo.btn.removeEventListener(MouseEvent.CLICK, this.cmgLinkFun);
			this.mc.preloader_sfxToggle.removeEventListener(MouseEvent.CLICK, this.preloader_sfxFun);
			this.mc.preloader_musicToggle.removeEventListener(MouseEvent.CLICK, this.preloader_musicFun);
			this.mc.btn_onlyOn.removeEventListener(MouseEvent.CLICK, this.onlyOnFun);
			mc.gotoAndStop(2);
			return;
		}// end function
		
		public function cmgLinkFun(event:MouseEvent) : void
		{
			this.check_domain_for_cmg(0);
			return;
		}// end function
		
		public function preloader_sfxFun(event:MouseEvent)
		{
			this.toggleSFX_mute();
			if (this.soundToggle[1] == 0)
			{
				this.mc.preloader_sfxToggle.gotoAndStop(1);
				this.sfxOn = true;
			}
			else
			{
				this.mc.preloader_sfxToggle.gotoAndStop(2);
				this.sfxOn = false;
			}
			return;
		}// end function
		
		public function preloader_musicFun(event:MouseEvent)
		{
			this.toggleMusic_mute_preloader();
			if (this.soundToggle[0] == 0)
			{
				this.mc.preloader_musicToggle.gotoAndStop(1);
				this.musicOn = true;
			}
			else
			{
				this.mc.preloader_musicToggle.gotoAndStop(2);
				this.musicOn = false;
			}
			return;
		}// end function
		
		public function onlyOnFun(event:MouseEvent)
		{
			if (this.gameVersion == 0)
			{
				navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAP-HAX.html?ref=ttap"), "_blank");
			}
			else if (this.gameVersion == 1)
			{
				navigateToURL(new URLRequest("http://www.crazymonkeygames.com/TTAC-HAX.html?ref=ttac"), "_blank");
			}
			return;
		}// end function
		
		public function toggleMusic_mute()
		{
			if (this.musicOn == true)
			{
				this.musicOn = false;
				this.musicChannel.stop();
				this.musicTransform.volume = 0;
				this.musicChannel.soundTransform = this.musicTransform;
				this.musicTrackPlaying = -1;
				this.soundToggle[0] = 1;
			}
			else
			{
				this.musicOn = true;
				this.soundToggle[0] = 0;
				if (mc.currentFrame == 5)
				{
					this.playMusic_title();
				}
				else if (mc.currentFrame == 10)
				{
					this.playMusic_whichGameTrack();
				}
			}
			this.gameData = SharedObject.getLocal("userData");
			this.gameData.data.soundToggle = this.soundToggle;
			this.gameData = null;
			return;
		}// end function
		
		public function playMusic_title()
		{
			if (this.musicOn == true)
			{
				this.musicChannel.stop();
				this.musicChannel = this.music0.play(0, 1);
				this.musicTransform.volume = this.musicVolume * this.musicFade;
				this.musicChannel.soundTransform = this.musicTransform;
				this.musicTrackPlaying = 0;
			}
			return;
		}// end function
		
		public function playMusic_levelComplete()
		{
			if (this.musicOn == true)
			{
				this.musicChannel.stop();
				this.musicFade = 0;
				this.musicChannel = this.music6.play(0, 1);
				this.musicTransform.volume = this.musicVolume * this.musicFade;
				this.musicChannel.soundTransform = this.musicTransform;
				this.musicTrackPlaying = 6;
			}
			return;
		}// end function
		
		public function playMusic_levelObjective()
		{
			if (this.musicOn == true)
			{
				this.musicChannel.stop();
				this.musicFade = 0;
				this.musicChannel = this.music7.play(0, 1);
				this.musicTransform.volume = this.musicVolume * this.musicFade;
				this.musicChannel.soundTransform = this.musicTransform;
				this.musicTrackPlaying = 7;
			}
			return;
		}// end function
		
		public function playMusic_whichGameTrack()
		{
			switch(this.levelToLoad)
			{
				case 0:
				{
					this.playMusic_game(3);
					break;
				}
				case 2:
				{
					this.playMusic_game(1);
					break;
				}
				case 3:
				{
					this.playMusic_game(4);
					break;
				}
				case 4:
				{
					this.playMusic_game(5);
					break;
				}
				case 5:
				{
					this.playMusic_game(2);
					break;
				}
				case 6:
				{
					this.playMusic_game(2);
					break;
				}
				case 7:
				{
					this.playMusic_game(4);
					break;
				}
				case 8:
				{
					this.playMusic_game(1);
					break;
				}
				case 9:
				{
					this.playMusic_game(2);
					break;
				}
				case 10:
				{
					this.playMusic_game(3);
					break;
				}
				case 11:
				{
					this.playMusic_game(4);
					break;
				}
				case 12:
				{
					this.playMusic_game(5);
					break;
				}
				case 13:
				{
					this.playMusic_game(3);
					break;
				}
				default:
				{
					break;
				}
			}
			return;
		}// end function
		
		public function playMusic_game(param1)
		{
			if (this.musicOn == true)
			{
				this.musicChannel.stop();
				this.musicChannel = this["music" + param1].play(this["music" + param1].length - 3000, 1);
				this.musicTransform.volume = this.musicVolume * this.musicFade;
				this.musicChannel.soundTransform = this.musicTransform;
				this.musicTrackPlaying = param1;
			}
			return;
		}// end function
		
		public function musicEnterframe(event:Event)
		{
			if (mc.currentFrame == 5)
			{
				if (this.musicTrackPlaying != 0)
				{
					this.musicChannel.stop();
					this.musicTrackPlaying = -1;
					this.playMusic_title();
				}
			}
			if (this.musicFade < 1)
			{
				this.musicFade = this.musicFade + 0.025;
				if (this.musicFade > 1)
				{
					this.musicFade = 1;
				}
				this.musicTransform.volume = this.musicVolume * this.musicFade;
				this.musicChannel.soundTransform = this.musicTransform;
			}
			switch(this.musicTrackPlaying)
			{
				case 0:
				{
					if (this.musicChannel.position > this.music0.length - 225)
					{
						this.playMusic_title();
					}
					break;
				}
				case 1:
				{
					if (this.musicChannel.position > this.music1.length - 225)
					{
						this.musicChannel = this[("music" + 1)].play(8400, 1);
						this.musicTransform.volume = this.musicVolume * this.musicFade;
						this.musicChannel.soundTransform = this.musicTransform;
						this.musicTrackPlaying = 1;
					}
					break;
				}
				case 2:
				{
					if (this.musicChannel.position > this.music2.length - 225)
					{
						this.musicChannel = this["music" + 2].play(13330, 1);
						this.musicTransform.volume = this.musicVolume * this.musicFade;
						this.musicChannel.soundTransform = this.musicTransform;
						this.musicTrackPlaying = 2;
					}
					break;
				}
				case 3:
				{
					if (this.musicChannel.position > this.music3.length - 225)
					{
						this.musicChannel = this["music" + 3].play(18000, 1);
						this.musicTransform.volume = this.musicVolume * this.musicFade;
						this.musicChannel.soundTransform = this.musicTransform;
						this.musicTrackPlaying = 3;
					}
					break;
				}
				case 4:
				{
					if (this.musicChannel.position > this.music4.length - 225)
					{
						this.musicChannel = this["music" + 4].play(14250, 1);
						this.musicTransform.volume = this.musicVolume * this.musicFade;
						this.musicChannel.soundTransform = this.musicTransform;
						this.musicTrackPlaying = 4;
					}
					break;
				}
				case 5:
				{
					if (this.musicChannel.position > this.music5.length - 225)
					{
						this.musicChannel = this["music" + 5].play(8750, 1);
						this.musicTransform.volume = this.musicVolume * this.musicFade;
						this.musicChannel.soundTransform = this.musicTransform;
						this.musicTrackPlaying = 5;
					}
					break;
				}
				case 6:
				{
					if (this.musicChannel.position > this.music6.length - 225)
					{
						this.musicFade = 1;
						this.musicChannel = this["music" + 6].play(4800, 1);
						this.musicTransform.volume = this.musicVolume * this.musicFade;
						this.musicChannel.soundTransform = this.musicTransform;
						this.musicTrackPlaying = 6;
					}
					break;
				}
				case 7:
				{
					if (this.musicChannel.position > this.music7.length - 225)
					{
						this.musicFade = 1;
						this.musicChannel = this["music" + 7].play(5330, 1);
						this.musicTransform.volume = this.musicVolume * this.musicFade;
						this.musicChannel.soundTransform = this.musicTransform;
						this.musicTrackPlaying = 7;
					}
					break;
				}
				default:
				{
					break;
				}
			}
			return;
		}// end function
		
		public function dpLogo(event:Event)
		{
			if (mc.currentFrame == 2)
			{
				
				this.dpTime  ++ ;
				
				if (this.dpTime < 120)
				{
					if (this.mc.dp_logo.alpha < 1)
					{
						this.mc.dp_logo.alpha = this.mc.dp_logo.alpha + 0.05;
					}
				}
				else
				{
					this.mc.dp_logo.alpha = this.mc.dp_logo.alpha - 0.1;
				}
				this.mc.dp_logo.blur.x = this.dpBlurStartX + (int(Math.random() * 10) - 5);
				this.mc.dp_logo.blur.y = this.dpBlurStartY + (int(Math.random() * 10) - 5);
				this.mc.dp_logo.logo2.x = this.dpBlurStartX2 + (int(Math.random() * 10) - 5);
				this.mc.dp_logo.logo2.y = this.dpBlurStartY2 + (int(Math.random() * 10) - 5);
				if (this.dpTime >= 130)
				{
					SoundMixer.stopAll();
					this.mc.dp_logo.btn.removeEventListener(MouseEvent.CLICK, this.goTo_DP);
					mc.removeEventListener(Event.ENTER_FRAME, this.dpLogo);
					mc.gotoAndStop(4);
				}
			}
			return;
		}// end function
		
		public function goTo_DP(event:MouseEvent) : void
		{
			navigateToURL(new URLRequest("http://www.diseasedproductions.net"), "_blank");
			return;
		}// end function
		
		public function goToTitleMenu(event:MouseEvent) : void
		{
			this.mc.btn_dp_title.removeEventListener(MouseEvent.CLICK, this.dpFun);
			mc.removeEventListener(MouseEvent.CLICK, this.goToTitleMenu);
			mc.gotoAndStop(5);
			return;
		}// end function
		
		public function dpFun(event:MouseEvent)
		{
			navigateToURL(new URLRequest("http://diseasedproductions.net/"), "_blank");
			return;
		}// end function
		
		public function charLogo_changeAppearance_intro()
		{
			this.mc.char_title2.head.gotoAndStop(this.character_appearance_intro[0]);
			this.mc.char_title2.head.eye.gotoAndStop(this.character_appearance_intro[1]);
			this.mc.char_title2.head.face.gotoAndStop(this.character_appearance_intro[5]);
			this.mc.char_title2.body.gotoAndStop(this.character_appearance_intro[2]);
			this.mc.char_title2.cc_gun.gotoAndStop((this.character_weapons_intro[0] + 1));
			this.mc.char_title2.cc_gun["g" + this.character_weapons_intro[0]].stop();
			this.mc.char_title2.cc_gun["g" + this.character_weapons_intro[0]].hand1.gotoAndStop(this.character_appearance_intro[3]);
			this.mc.char_title2.cc_gun["g" + this.character_weapons_intro[0]].hand2.gotoAndStop(this.character_appearance_intro[3]);
			this.mc.char_title2.foot1.gotoAndStop(this.character_appearance_intro[4]);
			this.mc.char_title2.foot2.gotoAndStop(this.character_appearance_intro[4]);
			this.mc.char_title2.ankle1.gotoAndStop(this.character_appearance_intro[4]);
			this.mc.char_title2.ankle2.gotoAndStop(this.character_appearance_intro[4]);
			this.mc.char_title2.head.box.visible = false;
			this.mc.char_title2.body.box.visible = false;
			this.mc.char_title2.foot1.box.visible = false;
			this.mc.char_title2.foot2.box.visible = false;
			this.mc.char_title2.ankle1.box.visible = false;
			this.mc.char_title2.ankle2.box.visible = false;
			this.mc.char_title3.head.gotoAndStop(this.character_appearance_intro[0]);
			this.mc.char_title3.head.eye.gotoAndStop(this.character_appearance_intro[1]);
			this.mc.char_title3.head.face.gotoAndStop(this.character_appearance_intro[5]);
			this.mc.char_title3.body.gotoAndStop(this.character_appearance_intro[2]);
			this.mc.char_title3.cc_gun.gotoAndStop((this.character_weapons_intro[0] + 1));
			this.mc.char_title3.cc_gun["g" + this.character_weapons_intro[0]].stop();
			this.mc.char_title3.cc_gun["g" + this.character_weapons_intro[0]].hand1.gotoAndStop(this.character_appearance_intro[3]);
			this.mc.char_title3.cc_gun["g" + this.character_weapons_intro[0]].hand2.gotoAndStop(this.character_appearance_intro[3]);
			this.mc.char_title3.foot1.gotoAndStop(this.character_appearance_intro[4]);
			this.mc.char_title3.foot2.gotoAndStop(this.character_appearance_intro[4]);
			this.mc.char_title3.ankle1.gotoAndStop(this.character_appearance_intro[4]);
			this.mc.char_title3.ankle2.gotoAndStop(this.character_appearance_intro[4]);
			this.mc.char_title3.head.box.visible = false;
			this.mc.char_title3.body.box.visible = false;
			this.mc.char_title3.foot1.box.visible = false;
			this.mc.char_title3.foot2.box.visible = false;
			this.mc.char_title3.ankle1.box.visible = false;
			this.mc.char_title3.ankle2.box.visible = false;
			this.mc.char_title2.visible = true;
			this.mc.char_title3.visible = true;
			return;
		}// end function
		
		public function title_keyPressed(event:KeyboardEvent)
		{
			this.a = 0;
			while (this.a < this.k.length)
			{
				
				if (event.keyCode == this.k[this.a])
				{
					this.kD[this.a] = true;
				}
				
				this.a  ++ ;
				
			}
			return;
		}// end function
		
		public function title_keyUnpressed(event:KeyboardEvent)
		{
			this.a = 0;
			while (this.a < this.k.length)
			{
				
				if (event.keyCode == this.k[this.a])
				{
					this.kD[this.a] = false;
				}
				
				this.a  ++ ;
				
			}
			return;
		}// end function
		
		public function title_moar_fun(event:MouseEvent)
		{
			this.check_domain_for_cmg(1);
			return;
		}// end function
		
		public function title_credits(event:MouseEvent)
		{
			this.mc.credits.gotoAndStop(1);
			return;
		}// end function
		
		public function playGame1(event:MouseEvent)
		{
			this.removeAllTheThings_title();
			this.levelToLoad = 2;
			mc.gotoAndStop(17);
			return;
		}// end function
		
		public function playGame2(event:MouseEvent)
		{
			this.tempTotalObjectivesComplete = 0;
			this.a = 0;
			while (this.a < 45)
			{
				
				if (this.objectives_complete_arr[this.a] == 1)
				{
					
					this.tempTotalObjectivesComplete  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			if (this.tempTotalObjectivesComplete >= 8)
			{
				this.removeAllTheThings_title();
				this.levelToLoad = 0;
				mc.gotoAndStop(17);
			}
			return;
		}// end function
		
		public function playGame3(event:MouseEvent)
		{
			this.tempTotalObjectivesComplete = 0;
			this.a = 0;
			while (this.a < 45)
			{
				
				if (this.objectives_complete_arr[this.a] == 1)
				{
					
					this.tempTotalObjectivesComplete  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			if (this.tempTotalObjectivesComplete > 12)
			{
				this.removeAllTheThings_title();
				this.levelToLoad = 3;
				mc.gotoAndStop(17);
			}
			return;
		}// end function
		
		public function playGame4(event:MouseEvent)
		{
			this.tempTotalObjectivesComplete = 0;
			this.a = 0;
			while (this.a < 45)
			{
				
				if (this.objectives_complete_arr[this.a] == 1)
				{
					
					this.tempTotalObjectivesComplete  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			if (this.tempTotalObjectivesComplete >= 36)
			{
				this.removeAllTheThings_title();
				this.levelToLoad = 4;
				mc.gotoAndStop(17);
			}
			return;
		}// end function
		
		public function playGame5(event:MouseEvent)
		{
			this.tempTotalObjectivesComplete = 0;
			this.a = 0;
			while (this.a < 45)
			{
				
				if (this.objectives_complete_arr[this.a] == 1)
				{
					
					this.tempTotalObjectivesComplete  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			if (this.tempTotalObjectivesComplete >= 4)
			{
				this.removeAllTheThings_title();
				this.levelToLoad = 5;
				mc.gotoAndStop(17);
			}
			return;
		}// end function
		
		public function play_ttac_hax(event:MouseEvent)
		{
			this.check_domain_for_cmg(5);
			return;
		}// end function
		
		public function cc_fun(event:MouseEvent)
		{
			this.removeAllTheThings_title();
			mc.gotoAndStop(6);
			return;
		}// end function
		
		public function saveData()
		{
			this.gameData = SharedObject.getLocal("userData");
			if (mc.currentFrame == 5)
			{
				this.playerName = this.mc.character_title_container.id.text;
				this.gameData.data.character_appearance = this.character_appearance;
				this.gameData.data.character_colors = this.character_colors;
				this.gameData.data.character_color_values = this.character_color_values;
				this.gameData.data.character_weapons = this.character_weapons;
				this.gameData.data.character_id = this.mc.character_title_container.id.text;
			}
			if (mc.currentFrame == 15)
			{
				this.gameData.data.character_id = this.playerName;
			}
			this.gameData.data.objectives_complete = this.objectives_complete_arr;
			this.gameData.data.soundToggle = this.soundToggle;
			this.gameData.data.mapToggled = this.mapToggled;
			this.gameData.data.weaponsUnlocked = this.weaponsUnlocked;
			this.gameData.data.weaponsNew = this.weaponsNew;
			this.gameData.data.bestScore = this.bestScore;
			this.gameData.data.bestScore_survival = this.bestScore_survival;
			this.gameData.flush();
			this.gameData = null;
			return;
		}// end function
		
		public function title_sfxFun(event:MouseEvent)
		{
			this.toggleSFX_mute();
			if (this.soundToggle[1] == 0)
			{
				this.mc.title_sfxToggle.gotoAndStop(1);
				this.sfxOn = true;
			}
			else
			{
				this.mc.title_sfxToggle.gotoAndStop(2);
				this.sfxOn = false;
			}
			return;
		}// end function
		
		public function title_musicFun(event:MouseEvent)
		{
			this.toggleMusic_mute();
			if (this.soundToggle[0] == 0)
			{
				this.mc.title_musicToggle.gotoAndStop(1);
				this.musicOn = true;
			}
			else
			{
				this.mc.title_musicToggle.gotoAndStop(2);
				this.musicOn = false;
			}
			return;
		}// end function
		
		public function moarGaemsFun(event:MouseEvent)
		{
			this.check_domain_for_cmg(0);
			return;
		}// end function
		
		public function gameGuideFun(event:MouseEvent)
		{
			this.check_domain_for_cmg(4);
			return;
		}// end function
		
		public function charLogo_changeAppearance()
		{
			this.mc.char_title2.head.gotoAndStop(this.character_appearance[0]);
			this.mc.char_title2.head.eye.gotoAndStop(this.character_appearance[1]);
			this.mc.char_title2.head.face.gotoAndStop(this.character_appearance[5]);
			this.mc.char_title2.body.gotoAndStop(this.character_appearance[2]);
			this.mc.char_title2.cc_gun.gotoAndStop((this.character_weapons[0] + 1));
			this.mc.char_title2.cc_gun["g" + this.character_weapons[0]].stop();
			this.mc.char_title2.cc_gun["g" + this.character_weapons[0]].hand1.gotoAndStop(this.character_appearance[3]);
			this.mc.char_title2.cc_gun["g" + this.character_weapons[0]].hand2.gotoAndStop(this.character_appearance[3]);
			this.mc.char_title2.foot1.gotoAndStop(this.character_appearance[4]);
			this.mc.char_title2.foot2.gotoAndStop(this.character_appearance[4]);
			this.mc.char_title2.ankle1.gotoAndStop(this.character_appearance[4]);
			this.mc.char_title2.ankle2.gotoAndStop(this.character_appearance[4]);
			this.mc.char_title2.head.box.visible = false;
			this.mc.char_title2.body.box.visible = false;
			this.mc.char_title2.foot1.box.visible = false;
			this.mc.char_title2.foot2.box.visible = false;
			this.mc.char_title2.ankle1.box.visible = false;
			this.mc.char_title2.ankle2.box.visible = false;
			this.mc.char_title3.head.gotoAndStop(this.character_appearance[0]);
			this.mc.char_title3.head.eye.gotoAndStop(this.character_appearance[1]);
			this.mc.char_title3.head.face.gotoAndStop(this.character_appearance[5]);
			this.mc.char_title3.body.gotoAndStop(this.character_appearance[2]);
			this.mc.char_title3.cc_gun.gotoAndStop((this.character_weapons[0] + 1));
			this.mc.char_title3.cc_gun["g" + this.character_weapons[0]].stop();
			this.mc.char_title3.cc_gun["g" + this.character_weapons[0]].hand1.gotoAndStop(this.character_appearance[3]);
			this.mc.char_title3.cc_gun["g" + this.character_weapons[0]].hand2.gotoAndStop(this.character_appearance[3]);
			this.mc.char_title3.foot1.gotoAndStop(this.character_appearance[4]);
			this.mc.char_title3.foot2.gotoAndStop(this.character_appearance[4]);
			this.mc.char_title3.ankle1.gotoAndStop(this.character_appearance[4]);
			this.mc.char_title3.ankle2.gotoAndStop(this.character_appearance[4]);
			this.mc.char_title3.head.box.visible = false;
			this.mc.char_title3.body.box.visible = false;
			this.mc.char_title3.foot1.box.visible = false;
			this.mc.char_title3.foot2.box.visible = false;
			this.mc.char_title3.ankle1.box.visible = false;
			this.mc.char_title3.ankle2.box.visible = false;
			this.mc.char_title2.visible = true;
			this.mc.char_title3.visible = true;
			return;
		}// end function
		
		public function charModel_changeAppearance_title()
		{
			this.mc.character_title_container.primary.text = this.title_gun_names[this.character_weapons[0]];
			this.mc.character_title_container.secondary.text = this.title_gun_names[this.character_weapons[1]];
			this.mc.character_title_container.weapon1.gotoAndStop((this.character_weapons[0] + 1));
			this.mc.character_title_container.weapon2.gotoAndStop((this.character_weapons[1] + 1));
			this.charModel_title.head.gotoAndStop(this.character_appearance[0]);
			this.charModel_title.head.eye.gotoAndStop(this.character_appearance[1]);
			this.charModel_title.head.face.gotoAndStop(this.character_appearance[5]);
			this.charModel_title.body.gotoAndStop(this.character_appearance[2]);
			this.charModel_title.cc_gun.gotoAndStop((this.character_weapons[0] + 1));
			this.charModel_title.cc_gun["g" + this.character_weapons[0]].stop();
			this.charModel_title.cc_gun["g" + this.character_weapons[0]].hand1.gotoAndStop(this.character_appearance[3]);
			this.charModel_title.cc_gun["g" + this.character_weapons[0]].hand2.gotoAndStop(this.character_appearance[3]);
			this.charModel_title.foot1.gotoAndStop(this.character_appearance[4]);
			this.charModel_title.foot2.gotoAndStop(this.character_appearance[4]);
			this.charModel_title.ankle1.gotoAndStop(this.character_appearance[4]);
			this.charModel_title.ankle2.gotoAndStop(this.character_appearance[4]);
			this.charModel_title.head.box.visible = false;
			this.charModel_title.body.box.visible = false;
			this.charModel_title.foot1.box.visible = false;
			this.charModel_title.foot2.box.visible = false;
			this.charModel_title.ankle1.box.visible = false;
			this.charModel_title.ankle2.box.visible = false;
			this.character_colorTransform = this.charModel_title.head.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[0]];
			this.charModel_title.head.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.head.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[1]];
			this.charModel_title.head.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.head.color3.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[0]];
			this.charModel_title.head.color3.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.head.eye.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[2]];
			this.charModel_title.head.eye.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.head.eye.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[3]];
			this.charModel_title.head.eye.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.body.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[4]];
			this.charModel_title.body.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.body.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[5]];
			this.charModel_title.body.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.cc_gun["g" + this.character_weapons[0]].hand1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
			this.charModel_title.cc_gun["g" + this.character_weapons[0]].hand1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.cc_gun["g" + this.character_weapons[0]].hand2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
			this.charModel_title.cc_gun["g" + this.character_weapons[0]].hand2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.foot1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.charModel_title.foot1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.ankle1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.charModel_title.ankle1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.foot1.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[9]];
			this.charModel_title.foot1.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.foot2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.charModel_title.foot2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.ankle2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.charModel_title.ankle2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel_title.foot2.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[9]];
			this.charModel_title.foot2.color2.transform.colorTransform = this.character_colorTransform;
			return;
		}// end function
		
		public function title_mouseDown2(event:MouseEvent)
		{
			this.title_mouseIsDown2 = true;
			return;
		}// end function
		
		public function title_mouseUp2(event:MouseEvent)
		{
			this.title_mouseIsDown2 = false;
			return;
		}// end function
		
		public function title_enterFrame2(event:Event)
		{
			var _loc_2:Array = null;
			this.mc.character_title_container.new_mc1.visible = false;
			this.mc.character_title_container.new_mc2.visible = false;
			this.f = 0;
			while (this.f < this.weaponsNew.length)
			{
				
				if (this.weaponsNew[this.f] == 1)
				{
				}
				if (this.weaponsUnlocked[this.f] == 1)
				{
					this.mc.character_title_container.new_mc1.visible = true;
					this.mc.character_title_container.new_mc2.visible = true;
				}
				
				this.f  ++ ;
				
			}
			this.noTooltip = true;
			if (this.gameVersion == 0)
			{
				this.mc.toolTip.gotoAndStop(1);
			}
			else
			{
				this.mc.toolTip.gotoAndStop(2);
			}
			if (this.gameVersion == 0)
			{
				this.f = 1;
				while (this.f < 6)
				{
					
					if (this.mc.level_select_mc.mouseX > this.mc.level_select_mc["btn_missionSelect" + this.f].x)
					{
					}
					if (this.mc.level_select_mc.mouseX < this.mc.level_select_mc["btn_missionSelect" + this.f].x + 277)
					{
						if (this.mc.level_select_mc.mouseY > this.mc.level_select_mc["btn_missionSelect" + this.f].y)
						{
						}
						if (this.mc.level_select_mc.mouseY < this.mc.level_select_mc["btn_missionSelect" + this.f].y + 29)
						{
							if (this.levelsLocked[(this.f - 1)] == 1)
							{
								this.mc.toolTip.visible = true;
								this.mc.toolTip.x = mc.mouseX + 10;
								this.mc.toolTip.y = mc.mouseY;
								this.mc.toolTip.score.text = "Best Score: " + this.bestScore[(this.f - 1)];
								this.mc.toolTip.wep.gotoAndStop(this.wepNeeded[(this.f - 1)]);
								this.noTooltip = false;
							}
						}
					}
					
					this.f  ++ ;
					
				}
			}
			else if (this.gameVersion == 1)
			{
				if (this.mc.level_select_mc.currentFrame == 3)
				{
					_loc_2 = new Array(0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 5, 6, 7, 2);
					this.f = 0;
					while (this.f < 3)
					{
						
						if (this.mc.level_select_mc.mouseX > this.mc.level_select_mc["btn_enemySelect" + this.f].x)
						{
						}
						if (this.mc.level_select_mc.mouseX < this.mc.level_select_mc["btn_enemySelect" + this.f].x + 138)
						{
							if (this.mc.level_select_mc.mouseY > this.mc.level_select_mc["btn_enemySelect" + this.f].y)
							{
							}
							if (this.mc.level_select_mc.mouseY < this.mc.level_select_mc["btn_enemySelect" + this.f].y + 29)
							{
								this.mc.toolTip.visible = true;
								this.mc.toolTip.x = mc.mouseX + 10;
								this.mc.toolTip.y = mc.mouseY;
								this.mc.toolTip.score.text = "Best Score: " + this.bestScore_survival[_loc_2[this.levelToLoad]][this.f];
								this.noTooltip = false;
							}
						}
						
						this.f  ++ ;
						
					}
				}
			}
			if (this.noTooltip == true)
			{
				this.mc.toolTip.visible = false;
				this.mc.toolTip.x = -1000;
				this.mc.toolTip.y = -1000;
			}
			this.f = 12;
			while (this.f < 16)
			{
				
				if (Math.abs(this.mc.character_title_container.mouseX - this.mc.character_title_container["btn_increment_" + this.f].x) < 15)
				{
					if (Math.abs(this.mc.character_title_container.mouseY - this.mc.character_title_container["btn_increment_" + this.f].y) < 15)
					{
						if (this.title_mouseIsDown2 == true)
						{
							switch(this.f)
							{
								case 12:
								{
									var _loc_3:* = this.character_weapons;
									var _loc_4:int = 0;
									var _loc_5:* = this.character_weapons[0] - 1;
									_loc_3[_loc_4] = _loc_5;
									if (this.character_weapons[0] < 0)
									{
										this.character_weapons[0] = this.charModel_title.cc_gun.totalFrames - 1;
									}
									do
									{
										
										var _loc_3:* = this.character_weapons;
										var _loc_4:int = 0;
										var _loc_5:* = this.character_weapons[0] - 1;
										_loc_3[_loc_4] = _loc_5;
										if (this.character_weapons[0] < 0)
										{
											this.character_weapons[0] = this.charModel_title.cc_gun.totalFrames - 1;
										}
										if (this.character_weapons[0] != this.character_weapons[1])
										{
										}
									}while (this.weaponsUnlocked[this.character_weapons[0]] == 0)
									this.mc.character_title_container.weapon1.gotoAndStop((this.character_weapons[0] + 1));
									if (this.weaponsNew[this.character_weapons[0]] == 0)
									{
										this.mc.character_title_container.weapon1.new_mc.visible = false;
									}
									else
									{
										this.mc.character_title_container.weapon1.new_mc.visible = true;
									}
									this.weaponsNew[this.character_weapons[0]] = 0;
									break;
								}
								case 13:
								{
									var _loc_3:* = this.character_weapons;
									var _loc_4:int = 0;
									var _loc_5:* = this.character_weapons[0] + 1;
									_loc_3[_loc_4] = _loc_5;
									if (this.character_weapons[0] > (this.charModel_title.cc_gun.totalFrames - 1))
									{
										this.character_weapons[0] = 0;
									}
									do
									{
										
										var _loc_3:* = this.character_weapons;
										var _loc_4:int = 0;
										var _loc_5:* = this.character_weapons[0] + 1;
										_loc_3[_loc_4] = _loc_5;
										if (this.character_weapons[0] > (this.charModel_title.cc_gun.totalFrames - 1))
										{
											this.character_weapons[0] = 0;
										}
										if (this.character_weapons[0] != this.character_weapons[1])
										{
										}
									}while (this.weaponsUnlocked[this.character_weapons[0]] == 0)
									this.mc.character_title_container.weapon1.gotoAndStop((this.character_weapons[0] + 1));
									if (this.weaponsNew[this.character_weapons[0]] == 0)
									{
										this.mc.character_title_container.weapon1.new_mc.visible = false;
									}
									else
									{
										this.mc.character_title_container.weapon1.new_mc.visible = true;
									}
									this.weaponsNew[this.character_weapons[0]] = 0;
									break;
								}
								case 14:
								{
									var _loc_3:* = this.character_weapons;
									var _loc_4:int = 1;
									var _loc_5:* = this.character_weapons[1] - 1;
									_loc_3[_loc_4] = _loc_5;
									if (this.character_weapons[1] < 0)
									{
										this.character_weapons[1] = this.charModel_title.cc_gun.totalFrames - 1;
									}
									do
									{
										
										var _loc_3:* = this.character_weapons;
										var _loc_4:int = 1;
										var _loc_5:* = this.character_weapons[1] - 1;
										_loc_3[_loc_4] = _loc_5;
										if (this.character_weapons[1] < 0)
										{
											this.character_weapons[1] = this.charModel_title.cc_gun.totalFrames - 1;
										}
										if (this.character_weapons[1] != this.character_weapons[0])
										{
										}
									}while (this.weaponsUnlocked[this.character_weapons[1]] == 0)
									this.mc.character_title_container.weapon2.gotoAndStop((this.character_weapons[1] + 1));
									if (this.weaponsNew[this.character_weapons[1]] == 0)
									{
										this.mc.character_title_container.weapon2.new_mc.visible = false;
									}
									else
									{
										this.mc.character_title_container.weapon2.new_mc.visible = true;
									}
									this.weaponsNew[this.character_weapons[1]] = 0;
									break;
								}
								case 15:
								{
									var _loc_3:* = this.character_weapons;
									var _loc_4:int = 1;
									var _loc_5:* = this.character_weapons[1] + 1;
									_loc_3[_loc_4] = _loc_5;
									if (this.character_weapons[1] > (this.charModel_title.cc_gun.totalFrames - 1))
									{
										this.character_weapons[1] = 0;
									}
									do
									{
										
										var _loc_3:* = this.character_weapons;
										var _loc_4:int = 1;
										var _loc_5:* = this.character_weapons[1] + 1;
										_loc_3[_loc_4] = _loc_5;
										if (this.character_weapons[1] > (this.charModel_title.cc_gun.totalFrames - 1))
										{
											this.character_weapons[1] = 0;
										}
										if (this.character_weapons[1] != this.character_weapons[0])
										{
										}
									}while (this.weaponsUnlocked[this.character_weapons[1]] == 0)
									this.mc.character_title_container.weapon2.gotoAndStop((this.character_weapons[1] + 1));
									if (this.weaponsNew[this.character_weapons[1]] == 0)
									{
										this.mc.character_title_container.weapon2.new_mc.visible = false;
									}
									else
									{
										this.mc.character_title_container.weapon2.new_mc.visible = true;
									}
									this.weaponsNew[this.character_weapons[1]] = 0;
									break;
								}
								default:
								{
									break;
								}
							}
							this.charModel_changeAppearance_title();
							this.title_mouseIsDown2 = false;
						}
					}
				}
				
				this.f  ++ ;
				
			}
			if (this.kD[9] == true)
			{
				trace("hurr");
				this.kD[9] = false;
				this.gameData = SharedObject.getLocal("userData");
				this.gameData.data.dataExists = false;
				this.gameData.flush();
				this.gameData = null;
				this.removeAllTheThings_title();
				mc.gotoAndStop(4);
			}
			return;
		}// end function
		
		public function removeAllTheThings_title()
		{
			this.saveData();
			mc.removeEventListener(MouseEvent.MOUSE_DOWN, this.title_mouseDown2);
			mc.removeEventListener(MouseEvent.MOUSE_UP, this.title_mouseUp2);
			mc.removeEventListener(Event.ENTER_FRAME, this.title_enterFrame2);
			if (this.gameVersion == 0)
			{
				this.mc.level_select_mc.btn_missionSelect1.removeEventListener(MouseEvent.CLICK, this.playGame1);
				this.mc.level_select_mc.btn_missionSelect2.removeEventListener(MouseEvent.CLICK, this.playGame2);
				this.mc.level_select_mc.btn_missionSelect3.removeEventListener(MouseEvent.CLICK, this.playGame3);
				this.mc.level_select_mc.btn_missionSelect4.removeEventListener(MouseEvent.CLICK, this.playGame4);
			}
			else if (this.gameVersion == 1)
			{
				if (this.isHackedVersion == false)
				{
					this.mc.btn_ttac_hax.removeEventListener(MouseEvent.CLICK, this.play_ttac_hax);
				}
			}
			this.mc.btn_cc.removeEventListener(MouseEvent.CLICK, this.cc_fun);
			mc.stage.removeEventListener(KeyboardEvent.KEY_DOWN, this.title_keyPressed);
			mc.stage.removeEventListener(KeyboardEvent.KEY_UP, this.title_keyUnpressed);
			this.mc.title_sfxToggle.removeEventListener(MouseEvent.CLICK, this.title_sfxFun);
			this.mc.title_musicToggle.removeEventListener(MouseEvent.CLICK, this.title_musicFun);
			this.mc.title_moar.removeEventListener(MouseEvent.CLICK, this.title_moar_fun);
			this.mc.btn_credits.removeEventListener(MouseEvent.CLICK, this.title_credits);
			this.mc.btn_moarGaems.removeEventListener(MouseEvent.CLICK, this.moarGaemsFun);
			this.mc.btn_gameGuide.removeEventListener(MouseEvent.CLICK, this.gameGuideFun);
			if (this.addedCheatMenu == true)
			{
				this.cheatMenu.gotoAndStop(1);
			}
			mc.stage.focus = mc.stage.stage;
			return;
		}// end function
		
		public function backToTitle(event:MouseEvent)
		{
			this.characterCreate_removeAllTheThings();
			mc.gotoAndStop(4);
			return;
		}// end function
		
		public function charModel_changeAppearance()
		{
			this.charModel.head.gotoAndStop(this.character_appearance[0]);
			this.charModel.head.eye.gotoAndStop(this.character_appearance[1]);
			this.charModel.head.face.gotoAndStop(this.character_appearance[5]);
			this.charModel.body.gotoAndStop(this.character_appearance[2]);
			this.charModel.cc_gun.gotoAndStop((this.character_weapons[0] + 1));
			this.charModel.cc_gun["g" + this.character_weapons[0]].stop();
			this.charModel.cc_gun["g" + this.character_weapons[0]].hand1.gotoAndStop(this.character_appearance[3]);
			this.charModel.cc_gun["g" + this.character_weapons[0]].hand2.gotoAndStop(this.character_appearance[3]);
			this.charModel.foot1.gotoAndStop(this.character_appearance[4]);
			this.charModel.foot2.gotoAndStop(this.character_appearance[4]);
			this.charModel.ankle1.gotoAndStop(this.character_appearance[4]);
			this.charModel.ankle2.gotoAndStop(this.character_appearance[4]);
			this.charModel.head.box.visible = false;
			this.charModel.body.box.visible = false;
			this.charModel.foot1.box.visible = false;
			this.charModel.foot2.box.visible = false;
			this.charModel.ankle1.box.visible = false;
			this.charModel.ankle2.box.visible = false;
			this.character_colorTransform = this.charModel.head.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[0]];
			this.charModel.head.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.head.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[1]];
			this.charModel.head.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.head.color3.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[0]];
			this.charModel.head.color3.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.head.eye.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[2]];
			this.charModel.head.eye.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.head.eye.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[3]];
			this.charModel.head.eye.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.body.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[4]];
			this.charModel.body.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.body.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[5]];
			this.charModel.body.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.cc_gun["g" + this.character_weapons[0]].hand1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
			this.charModel.cc_gun["g" + this.character_weapons[0]].hand1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.cc_gun["g" + this.character_weapons[0]].hand2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
			this.charModel.cc_gun["g" + this.character_weapons[0]].hand2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.foot1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.charModel.foot1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.ankle1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.charModel.ankle1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.foot1.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[9]];
			this.charModel.foot1.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.foot2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.charModel.foot2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.ankle2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.charModel.ankle2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.charModel.foot2.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[9]];
			this.charModel.foot2.color2.transform.colorTransform = this.character_colorTransform;
			return;
		}// end function
		
		public function saveData_cc()
		{
			this.playerName = this.mc.character_create_container.id.text;
			this.gameData = SharedObject.getLocal("userData");
			this.gameData.data.character_appearance = this.character_appearance;
			this.gameData.data.character_colors = this.character_colors;
			this.gameData.data.character_color_values = this.character_color_values;
			this.gameData.data.character_weapons = this.character_weapons;
			this.gameData.data.character_id = this.mc.character_create_container.id.text;
			this.gameData.flush();
			this.gameData = null;
			return;
		}// end function
		
		public function characterCreate_removeAllTheThings()
		{
			this.saveData_cc();
			this.mc.character_create_container.removeChild(this.charModel);
			while (this.btnArr.length > 0)
			{
				
				mc.removeChild(this.btnArr[0]);
				this.btnArr.splice(0, 1);
			}
			this.mc.character_create_container.btn_head.removeEventListener(MouseEvent.CLICK, this.characterCreate_click_head);
			this.mc.character_create_container.btn_eye.removeEventListener(MouseEvent.CLICK, this.characterCreate_click_eye);
			this.mc.character_create_container.btn_body.removeEventListener(MouseEvent.CLICK, this.characterCreate_click_body);
			this.mc.character_create_container.btn_foot.removeEventListener(MouseEvent.CLICK, this.characterCreate_click_foot);
			this.mc.character_create_container.btn_hands.removeEventListener(MouseEvent.CLICK, this.characterCreate_click_hand);
			mc.removeEventListener(Event.ENTER_FRAME, this.title_enterFrame);
			this.mc.colorPicker.r.removeEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_r_md);
			this.mc.colorPicker.g.removeEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_g_md);
			this.mc.colorPicker.b.removeEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_b_md);
			mc.removeEventListener(MouseEvent.MOUSE_UP, this.hsl_mu);
			this.btn_nextPage.removeEventListener(MouseEvent.CLICK, this.nextPageFun);
			this.btn_prevPage.removeEventListener(MouseEvent.CLICK, this.prevPageFun);
			mc.removeChild(this.btn_nextPage);
			mc.removeChild(this.btn_prevPage);
			this.mc.btn_backToTitle.removeEventListener(MouseEvent.CLICK, this.backToTitle);
			mc.stage.focus = mc.stage;
			return;
		}// end function
		
		public function removeAllTheButtons()
		{
			while (this.btnArr.length > 0)
			{
				
				mc.removeChild(this.btnArr[0]);
				this.btnArr.splice(0, 1);
			}
			return;
		}// end function
		
		public function characterCreate_setBodyParts()
		{
			this.tempBtn.char.head.gotoAndStop(this.character_appearance[0]);
			this.tempBtn.char.head.eye.gotoAndStop(this.character_appearance[1]);
			this.tempBtn.char.head.face.gotoAndStop(this.character_appearance[5]);
			this.tempBtn.char.body.gotoAndStop(this.character_appearance[2]);
			this.tempBtn.char.foot1.gotoAndStop(this.character_appearance[4]);
			this.tempBtn.char.foot2.gotoAndStop(this.character_appearance[4]);
			this.tempBtn.char.ankle1.gotoAndStop(this.character_appearance[4]);
			this.tempBtn.char.ankle2.gotoAndStop(this.character_appearance[4]);
			this.tempBtn.char.cc_gun.gotoAndStop((this.character_weapons[0] + 1));
			this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].stop();
			this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.gotoAndStop(this.character_appearance[3]);
			this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand2.gotoAndStop(this.character_appearance[3]);
			this.tempBtn.char.head.box.visible = false;
			this.tempBtn.char.body.box.visible = false;
			this.tempBtn.char.foot1.box.visible = false;
			this.tempBtn.char.foot2.box.visible = false;
			this.tempBtn.char.ankle1.box.visible = false;
			this.tempBtn.char.ankle2.box.visible = false;
			return;
		}// end function
		
		public function characterCreate_setColors()
		{
			this.character_colorTransform = this.tempBtn.char.head.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[0]];
			this.tempBtn.char.head.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.head.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[1]];
			this.tempBtn.char.head.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.head.color3.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[0]];
			this.tempBtn.char.head.color3.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.head.eye.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[2]];
			this.tempBtn.char.head.eye.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.head.eye.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[3]];
			this.tempBtn.char.head.eye.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.body.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[4]];
			this.tempBtn.char.body.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.body.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[5]];
			this.tempBtn.char.body.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
			this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
			this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.foot1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.tempBtn.char.foot1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.ankle1.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.tempBtn.char.ankle1.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.foot1.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[9]];
			this.tempBtn.char.foot1.color2.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.foot2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.tempBtn.char.foot2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.ankle2.color1.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[8]];
			this.tempBtn.char.ankle2.color1.transform.colorTransform = this.character_colorTransform;
			this.character_colorTransform = this.tempBtn.char.foot2.color2.transform.colorTransform;
			this.character_colorTransform.color = this.character_color_values[this.character_colors[9]];
			this.tempBtn.char.foot2.color2.transform.colorTransform = this.character_colorTransform;
			return;
		}// end function
		
		public function characterCreate_setButtonColors()
		{
			this.f = 0;
			while (this.f < 8)
			{
				
				if (this.f < 7)
				{
					this.character_colorTransform = this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform;
					this.character_colorTransform.color = this.character_color_values[this.f];
					this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform = this.character_colorTransform;
					this.character_colorTransform = this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform;
					this.character_colorTransform.color = this.character_color_values[this.f];
					this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform = this.character_colorTransform;
				}
				else
				{
					switch(this.characterCreate_partSelected)
					{
						case 0:
						{
							this.character_colorTransform = this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[7];
							this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							this.character_colorTransform = this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[8];
							this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							break;
						}
						case 1:
						{
							this.character_colorTransform = this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[9];
							this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							this.character_colorTransform = this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[10];
							this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							break;
						}
						case 2:
						{
							this.character_colorTransform = this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[11];
							this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							this.character_colorTransform = this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[12];
							this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							break;
						}
						case 3:
						{
							this.character_colorTransform = this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[13];
							this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							this.character_colorTransform = this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[14];
							this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							break;
						}
						case 4:
						{
							this.character_colorTransform = this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[15];
							this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							this.character_colorTransform = this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[16];
							this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							break;
						}
						case 5:
						{
							this.character_colorTransform = this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[17];
							this.mc.character_create_container["c1_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							this.character_colorTransform = this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[18];
							this.mc.character_create_container["c2_" + this.f].c.transform.colorTransform = this.character_colorTransform;
							break;
						}
						default:
						{
							break;
						}
					}
				}
				
				this.f  ++ ;
				
			}
			return;
		}// end function
		
		public function characterCreate_btns_uiBox()
		{
			this.mc.ui_box.x = this.characterCreate_rowOrigin_x - 31;
			this.mc.ui_box.y = this.characterCreate_rowOrigin_y - 31;
			if (this.g < this.characterCreate_rowLength)
			{
				this.mc.ui_box.center.width = ((this.g - 1) % this.characterCreate_rowLength + 1) * 62;
			}
			else
			{
				this.mc.ui_box.center.width = this.characterCreate_rowLength * 62;
			}
			this.mc.ui_box.center.height = (int((this.g - 1) / this.characterCreate_rowLength) + 1) * 62 + 30;
			this.mc.ui_box.c1.x = this.mc.ui_box.center.width;
			this.mc.ui_box.c2.x = this.mc.ui_box.center.width;
			this.mc.ui_box.c2.y = this.mc.ui_box.center.height;
			this.mc.ui_box.c3.y = this.mc.ui_box.center.height;
			this.mc.ui_box.e0.width = this.mc.ui_box.center.width;
			this.mc.ui_box.e1.x = this.mc.ui_box.center.width + 10;
			this.mc.ui_box.e1.height = this.mc.ui_box.center.height;
			this.mc.ui_box.e2.x = this.mc.ui_box.center.width;
			this.mc.ui_box.e2.y = this.mc.ui_box.center.height + 10;
			this.mc.ui_box.e2.width = this.mc.ui_box.center.width;
			this.mc.ui_box.e3.y = this.mc.ui_box.center.height;
			this.mc.ui_box.e3.height = this.mc.ui_box.center.height;
			this.btn_nextPage.visible = true;
			this.btn_prevPage.visible = true;
			this.mc.pageText.visible = true;
			switch(this.characterCreate_partSelected)
			{
				case 0:
				{
					if (this.tempBtn.char.head.totalFrames < 25)
					{
						this.btn_nextPage.visible = false;
						this.btn_prevPage.visible = false;
						this.mc.pageText.visible = false;
					}
					else
					{
						this.mc.pageText.text = "PAGE: " + (this.characterCreate_pageOn + 1) + "/" + (int(this.tempBtn.char.head.totalFrames / 24) + 1);
					}
					break;
				}
				case 1:
				{
					if (this.tempBtn.char.head.eye.totalFrames < 25)
					{
						this.btn_nextPage.visible = false;
						this.btn_prevPage.visible = false;
						this.mc.pageText.visible = false;
					}
					else
					{
						this.mc.pageText.text = "PAGE: " + (this.characterCreate_pageOn + 1) + "/" + (int(this.tempBtn.char.head.eye.totalFrames / 24) + 1);
					}
					break;
				}
				case 2:
				{
					if (this.tempBtn.char.body.totalFrames < 25)
					{
						this.btn_nextPage.visible = false;
						this.btn_prevPage.visible = false;
						this.mc.pageText.visible = false;
					}
					else
					{
						this.mc.pageText.text = "PAGE: " + (this.characterCreate_pageOn + 1) + "/" + (int(this.tempBtn.char.body.totalFrames / 24) + 1);
					}
					break;
				}
				case 3:
				{
					if (this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.totalFrames < 25)
					{
						this.btn_nextPage.visible = false;
						this.btn_prevPage.visible = false;
						this.mc.pageText.visible = false;
					}
					else
					{
						this.mc.pageText.text = "PAGE: " + (this.characterCreate_pageOn + 1) + "/" + (int(this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.totalFrames / 24) + 1);
					}
					break;
				}
				case 4:
				{
					if (this.tempBtn.char.foot1.totalFrames < 25)
					{
						this.btn_nextPage.visible = false;
						this.btn_prevPage.visible = false;
						this.mc.pageText.visible = false;
					}
					else
					{
						this.mc.pageText.text = "PAGE: " + (this.characterCreate_pageOn + 1) + "/" + (int(this.tempBtn.char.foot1.totalFrames / 24) + 1);
					}
					break;
				}
				case 5:
				{
					if (this.tempBtn.char.head.face.totalFrames < 25)
					{
						this.btn_nextPage.visible = false;
						this.btn_prevPage.visible = false;
						this.mc.pageText.visible = false;
					}
					else
					{
						this.mc.pageText.text = "PAGE: " + (this.characterCreate_pageOn + 1) + "/" + (int(this.tempBtn.char.head.face.totalFrames / 24) + 1);
					}
					break;
				}
				default:
				{
					break;
				}
			}
			this.btn_nextPage.y = this.mc.ui_box.y + this.mc.ui_box.center.height - 10;
			this.btn_nextPage.x = this.mc.ui_box.x + this.mc.ui_box.center.width - this.btn_nextPage.width * 0.5;
			this.btn_prevPage.y = this.mc.ui_box.y + this.mc.ui_box.center.height - 10;
			this.btn_prevPage.x = this.mc.ui_box.x + this.btn_prevPage.width * 0.5;
			if (this.btn_nextPage.visible == false)
			{
				this.mc.ui_box.center.height = this.mc.ui_box.center.height - 30;
				this.mc.ui_box.c2.y = this.mc.ui_box.center.height;
				this.mc.ui_box.c3.y = this.mc.ui_box.center.height;
				this.mc.ui_box.e1.height = this.mc.ui_box.center.height;
				this.mc.ui_box.e2.y = this.mc.ui_box.center.height + 10;
				this.mc.ui_box.e3.y = this.mc.ui_box.center.height;
				this.mc.ui_box.e3.height = this.mc.ui_box.center.height;
				this.btn_nextPage.y = -1000;
				this.btn_nextPage.x = -1000;
				this.btn_prevPage.y = -1000;
				this.btn_prevPage.x = -1000;
			}
			this.mc.pageText.x = this.mc.ui_box.x + this.mc.ui_box.center.width * 0.5 - this.mc.pageText.width * 0.5;
			this.mc.pageText.y = this.mc.ui_box.y + this.mc.ui_box.center.height - 22;
			return;
		}// end function
		
		public function characterCreate_btns_head()
		{
			this.characterCreate_partSelected = 0;
			this.toggleButtons();
			this.tempBtn = new character_create_btn();
			this.g = 0;
			this.f = 24 * this.characterCreate_pageOn;
			while (this.f < 24 * this.characterCreate_pageOn + 24)
			{
				
				if (this.f < this.tempBtn.char.head.totalFrames)
				{
					this.tempBtn = new character_create_btn();
					this.characterCreate_setBodyParts();
					this.tempBtn.char.head.gotoAndStop((this.f + 1));
					this.tempBtn.char.head.box.visible = false;
					this.characterCreate_setColors();
					this.tempBtn.cacheAsBitmap = true;
					this.btnArr.push(this.tempBtn);
					mc.addChild(this.tempBtn);
					this.btnArr[this.g].x = this.characterCreate_rowOrigin_x + this.g % this.characterCreate_rowLength * 62;
					this.btnArr[this.g].y = this.characterCreate_rowOrigin_y + int(this.g / this.characterCreate_rowLength) * 62;
					if (this.character_appearance[this.characterCreate_partSelected] == (this.f + 1))
					{
						this.btnArr[this.g].scaleX = 0.85;
						this.btnArr[this.g].scaleY = 0.85;
					}
					else
					{
						this.btnArr[this.g].scaleX = 0.95;
						this.btnArr[this.g].scaleY = 0.95;
					}
					this.btnArr[this.g].gotoAndStop(1);
					
					this.g  ++ ;
					
				}
				
				this.f  ++ ;
				
			}
			this.characterCreate_btns_uiBox();
			return;
		}// end function
		
		public function characterCreate_btns_eye()
		{
			this.characterCreate_partSelected = 1;
			this.toggleButtons();
			this.tempBtn = new character_create_btn();
			this.g = 0;
			this.f = 24 * this.characterCreate_pageOn;
			while (this.f < 24 * this.characterCreate_pageOn + 24)
			{
				
				if (this.f < this.tempBtn.char.head.eye.totalFrames)
				{
					this.tempBtn = new character_create_btn();
					this.characterCreate_setBodyParts();
					this.tempBtn.char.head.eye.gotoAndStop((this.f + 1));
					this.characterCreate_setColors();
					this.tempBtn.cacheAsBitmap = true;
					this.btnArr.push(this.tempBtn);
					mc.addChild(this.tempBtn);
					this.btnArr[this.g].x = this.characterCreate_rowOrigin_x + this.g % this.characterCreate_rowLength * 62;
					this.btnArr[this.g].y = this.characterCreate_rowOrigin_y + int(this.g / this.characterCreate_rowLength) * 62;
					if (this.character_appearance[this.characterCreate_partSelected] == (this.f + 1))
					{
						this.btnArr[this.g].scaleX = 0.85;
						this.btnArr[this.g].scaleY = 0.85;
					}
					else
					{
						this.btnArr[this.g].scaleX = 0.95;
						this.btnArr[this.g].scaleY = 0.95;
					}
					this.btnArr[this.g].gotoAndStop(2);
					
					this.g  ++ ;
					
				}
				
				this.f  ++ ;
				
			}
			this.characterCreate_btns_uiBox();
			return;
		}// end function
		
		public function characterCreate_btns_face()
		{
			this.characterCreate_partSelected = 5;
			this.toggleButtons();
			this.tempBtn = new character_create_btn();
			this.g = 0;
			this.f = 0;
			while (this.f < this.tempBtn.char.head.face.totalFrames)
			{
				
				this.tempBtn = new character_create_btn();
				this.characterCreate_setBodyParts();
				this.tempBtn.char.head.face.gotoAndStop((this.f + 1));
				this.characterCreate_setColors();
				this.tempBtn.cacheAsBitmap = true;
				this.btnArr.push(this.tempBtn);
				mc.addChild(this.tempBtn);
				this.btnArr[this.f].x = this.characterCreate_rowOrigin_x + this.f % this.characterCreate_rowLength * 62;
				this.btnArr[this.f].y = this.characterCreate_rowOrigin_y + int(this.f / this.characterCreate_rowLength) * 62;
				if (this.character_appearance[this.characterCreate_partSelected] == (this.f + 1))
				{
					this.btnArr[this.f].scaleX = 0.85;
					this.btnArr[this.f].scaleY = 0.85;
				}
				else
				{
					this.btnArr[this.f].scaleX = 0.95;
					this.btnArr[this.f].scaleY = 0.95;
				}
				this.btnArr[this.f].gotoAndStop(2);
				
				this.g  ++ ;
				
				
				this.f  ++ ;
				
			}
			this.characterCreate_btns_uiBox();
			return;
		}// end function
		
		public function characterCreate_btns_body()
		{
			this.characterCreate_partSelected = 2;
			this.toggleButtons();
			this.tempBtn = new character_create_btn();
			this.g = 0;
			this.f = 0;
			while (this.f < this.tempBtn.char.body.totalFrames)
			{
				
				this.tempBtn = new character_create_btn();
				this.characterCreate_setBodyParts();
				this.tempBtn.char.body.gotoAndStop((this.f + 1));
				this.tempBtn.char.body.box.visible = false;
				this.characterCreate_setColors();
				this.tempBtn.cacheAsBitmap = true;
				this.btnArr.push(this.tempBtn);
				mc.addChild(this.tempBtn);
				this.btnArr[this.f].x = this.characterCreate_rowOrigin_x + this.f % this.characterCreate_rowLength * 62;
				this.btnArr[this.f].y = this.characterCreate_rowOrigin_y + int(this.f / this.characterCreate_rowLength) * 62;
				if (this.character_appearance[this.characterCreate_partSelected] == (this.f + 1))
				{
					this.btnArr[this.f].scaleX = 0.85;
					this.btnArr[this.f].scaleY = 0.85;
				}
				else
				{
					this.btnArr[this.f].scaleX = 0.95;
					this.btnArr[this.f].scaleY = 0.95;
				}
				this.btnArr[this.f].gotoAndStop(3);
				
				this.g  ++ ;
				
				
				this.f  ++ ;
				
			}
			this.characterCreate_btns_uiBox();
			return;
		}// end function
		
		public function characterCreate_btns_foot()
		{
			this.characterCreate_partSelected = 4;
			this.toggleButtons();
			this.tempBtn = new character_create_btn();
			this.g = 0;
			this.f = 0;
			while (this.f < this.tempBtn.char.foot1.totalFrames)
			{
				
				this.tempBtn = new character_create_btn();
				this.characterCreate_setBodyParts();
				this.tempBtn.char.foot1.gotoAndStop((this.f + 1));
				this.tempBtn.char.foot2.gotoAndStop((this.f + 1));
				this.tempBtn.char.ankle1.gotoAndStop((this.f + 1));
				this.tempBtn.char.ankle2.gotoAndStop((this.f + 1));
				this.tempBtn.char.foot1.box.visible = false;
				this.tempBtn.char.foot2.box.visible = false;
				this.tempBtn.char.ankle1.box.visible = false;
				this.tempBtn.char.ankle2.box.visible = false;
				this.characterCreate_setColors();
				this.tempBtn.cacheAsBitmap = true;
				this.btnArr.push(this.tempBtn);
				mc.addChild(this.tempBtn)e;
				this.btnArr[this.f].x = this.characterCreate_rowOrigin_x + this.f % this.characterCreate_rowLength * 62;
				this.btnArr[this.f].y = this.characterCreate_rowOrigin_y + int(this.f / this.characterCreate_rowLength) * 62;
				if (this.character_appearance[this.characterCreate_partSelected] == (this.f + 1))
				{
					this.btnArr[this.f].scaleX = 0.85;
					this.btnArr[this.f].scaleY = 0.85;
				}
				else
				{
					this.btnArr[this.f].scaleX = 0.95;
					this.btnArr[this.f].scaleY = 0.95;
				}
				this.btnArr[this.f].gotoAndStop(4);
				
				this.g  ++ ;
				
				
				this.f  ++ ;
				
			}
			this.characterCreate_btns_uiBox();
			return;
		}// end function
		
		public function characterCreate_btns_hand()
		{
			this.characterCreate_partSelected = 3;
			this.toggleButtons();
			this.tempBtn = new character_create_btn();
			this.tempBtn.char.cc_gun.gotoAndStop((this.character_weapons[0] + 1));
			this.g = 0;
			this.f = 0;
			while (this.f < this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.totalFrames)
			{
				
				this.tempBtn = new character_create_btn();
				this.characterCreate_setBodyParts();
				this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].stop();
				this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.gotoAndStop((this.f + 1));
				this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand2.gotoAndStop((this.f + 1));
				this.characterCreate_setColors();
				this.tempBtn.cacheAsBitmap = true;
				this.btnArr.push(this.tempBtn);
				mc.addChild(this.tempBtn);
				this.btnArr[this.f].x = this.characterCreate_rowOrigin_x + this.f % this.characterCreate_rowLength * 62;
				this.btnArr[this.f].y = this.characterCreate_rowOrigin_y + int(this.f / this.characterCreate_rowLength) * 62;
				if (this.character_appearance[this.characterCreate_partSelected] == (this.f + 1))
				{
					this.btnArr[this.f].scaleX = 0.85;
					this.btnArr[this.f].scaleY = 0.85;
				}
				else
				{
					this.btnArr[this.f].scaleX = 0.95;
					this.btnArr[this.f].scaleY = 0.95;
				}
				this.btnArr[this.f].gotoAndStop(5);
				
				this.g  ++ ;
				
				
				this.f  ++ ;
				
			}
			this.characterCreate_btns_uiBox();
			return;
		}// end function
		
		public function characterCreate_click_head(event:MouseEvent)
		{
			this.characterCreate_pageOn = 0;
			this.removeAllTheButtons();
			this.mc.colorPicker.visible = false;
			this.colorPickerIsOn = false;
			this.characterCreate_btns_head();
			return;
		}// end function
		
		public function characterCreate_click_eye(event:MouseEvent)
		{
			this.characterCreate_pageOn = 0;
			this.removeAllTheButtons();
			this.mc.colorPicker.visible = false;
			this.colorPickerIsOn = false;
			this.characterCreate_btns_eye();
			return;
		}// end function
		
		public function characterCreate_click_face(event:MouseEvent)
		{
			this.characterCreate_pageOn = 0;
			this.removeAllTheButtons();
			this.mc.colorPicker.visible = false;
			this.colorPickerIsOn = false;
			this.characterCreate_btns_face();
			return;
		}// end function
		
		public function characterCreate_click_body(event:MouseEvent)
		{
			this.characterCreate_pageOn = 0;
			this.removeAllTheButtons();
			this.mc.colorPicker.visible = false;
			this.colorPickerIsOn = false;
			this.characterCreate_btns_body();
			return;
		}// end function
		
		public function characterCreate_click_foot(event:MouseEvent)
		{
			this.characterCreate_pageOn = 0;
			this.removeAllTheButtons();
			this.mc.colorPicker.visible = false;
			this.colorPickerIsOn = false;
			this.characterCreate_btns_foot();
			return;
		}// end function
		
		public function characterCreate_click_hand(event:MouseEvent)
		{
			this.characterCreate_pageOn = 0;
			this.removeAllTheButtons();
			this.mc.colorPicker.visible = false;
			this.colorPickerIsOn = false;
			this.characterCreate_btns_hand();
			return;
		}// end function
		
		public function characterCreate_charCode(event:MouseEvent)
		{
			trace("character_appearance = [" + this.character_appearance + "]");
			trace("character_colors_ = [" + "0x" + this.character_color_values[this.character_colors[0]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[1]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[2]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[3]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[4]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[5]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[6]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[7]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[8]].toString(16) + ", 0x" + this.character_color_values[this.character_colors[9]].toString(16) + "]");
			return;
		}// end function
		
		public function title_mouseDown(event:MouseEvent)
		{
			this.title_mouseIsDown = true;
			return;
		}// end function
		
		public function title_mouseUp(event:MouseEvent)
		{
			this.title_mouseIsDown = false;
			return;
		}// end function
		
		public function title_enterFrame(event:Event)
		{
			this.mc.character_create_container.new_mc1.visible = false;
			this.mc.character_create_container.new_mc2.visible = false;
			this.f = 0;
			while (this.f < this.weaponsNew.length)
			{
				
				if (this.weaponsNew[this.f] == 1)
				{
				}
				if (this.weaponsUnlocked[this.f] == 1)
				{
					this.mc.character_create_container.new_mc1.visible = true;
					this.mc.character_create_container.new_mc2.visible = true;
				}
				
				this.f  ++ ;
				
			}
			this.f = 0;
			while (this.f < this.btnArr.length)
			{
				
				if (this.character_appearance[this.characterCreate_partSelected] == (this.f + 1))
				{
					this.btnArr[this.f].scaleX = 0.85;
					this.btnArr[this.f].scaleY = 0.85;
				}
				else
				{
					this.btnArr[this.f].scaleX = 0.95;
					this.btnArr[this.f].scaleY = 0.95;
				}
				if (Math.abs(mc.mouseX - this.btnArr[this.f].x) < 30)
				{
					if (Math.abs(mc.mouseY - this.btnArr[this.f].y) < 30)
					{
						if (this.character_appearance[this.characterCreate_partSelected] != this.f + 24 * this.characterCreate_pageOn + 1)
						{
							this.btnArr[this.f].scaleX = 1;
							this.btnArr[this.f].scaleY = 1;
						}
						if (this.title_mouseIsDown == true)
						{
						}
						if (this.characterCreate_partSelected != -1)
						{
							this.character_appearance[this.characterCreate_partSelected] = this.f + 24 * this.characterCreate_pageOn + 1;
							this.charModel_changeAppearance();
							this.title_mouseIsDown = false;
						}
					}
				}
				
				this.f  ++ ;
				
			}
			this.f = 0;
			while (this.f < 16)
			{
				
				if (Math.abs(this.mc.character_create_container.mouseX - this.mc.character_create_container["btn_increment_" + this.f].x) < 15)
				{
					if (Math.abs(this.mc.character_create_container.mouseY - this.mc.character_create_container["btn_increment_" + this.f].y) < 15)
					{
						if (this.title_mouseIsDown == true)
						{
							switch(this.f)
							{
								case 0:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 0;
									var _loc_4:* = this.character_appearance[0] - 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[0] < 1)
									{
										this.character_appearance[0] = this.charModel.head.totalFrames;
									}
									this.characterCreate_pageOn = int(this.character_appearance[0] / 24);
									this.characterCreate_btns_head();
									break;
								}
								case 1:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 0;
									var _loc_4:* = this.character_appearance[0] + 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[0] > this.charModel.head.totalFrames)
									{
										this.character_appearance[0] = 1;
									}
									this.characterCreate_pageOn = int(this.character_appearance[0] / 24);
									this.characterCreate_btns_head();
									break;
								}
								case 2:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 1;
									var _loc_4:* = this.character_appearance[1] - 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[1] < 1)
									{
										this.character_appearance[1] = this.charModel.head.eye.totalFrames;
									}
									this.characterCreate_pageOn = int(this.character_appearance[1] / 24);
									this.characterCreate_btns_eye();
									break;
								}
								case 3:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 1;
									var _loc_4:* = this.character_appearance[1] + 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[1] > this.charModel.head.eye.totalFrames)
									{
										this.character_appearance[1] = 1;
									}
									this.characterCreate_pageOn = int(this.character_appearance[1] / 24);
									this.characterCreate_btns_eye();
									break;
								}
								case 4:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 5;
									var _loc_4:* = this.character_appearance[5] - 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[5] < 1)
									{
										this.character_appearance[5] = this.charModel.head.face.totalFrames;
									}
									this.characterCreate_pageOn = int(this.character_appearance[5] / 24);
									this.characterCreate_btns_face();
									break;
								}
								case 5:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 5;
									var _loc_4:* = this.character_appearance[5] + 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[5] > this.charModel.head.face.totalFrames)
									{
										this.character_appearance[5] = 1;
									}
									this.characterCreate_pageOn = int(this.character_appearance[5] / 24);
									this.characterCreate_btns_face();
									break;
								}
								case 6:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 2;
									var _loc_4:* = this.character_appearance[2] - 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[2] < 1)
									{
										this.character_appearance[2] = this.charModel.body.totalFrames;
									}
									this.characterCreate_pageOn = int(this.character_appearance[2] / 24);
									this.characterCreate_btns_body();
									break;
								}
								case 7:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 2;
									var _loc_4:* = this.character_appearance[2] + 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[2] > this.charModel.body.totalFrames)
									{
										this.character_appearance[2] = 1;
									}
									this.characterCreate_pageOn = int(this.character_appearance[2] / 24);
									this.characterCreate_btns_body();
									break;
								}
								case 8:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 3;
									var _loc_4:* = this.character_appearance[3] - 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[3] < 1)
									{
										this.character_appearance[3] = this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.totalFrames;
									}
									this.characterCreate_pageOn = int(this.character_appearance[3] / 24);
									this.characterCreate_btns_hand();
									break;
								}
								case 9:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 3;
									var _loc_4:* = this.character_appearance[3] + 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[3] > this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.totalFrames)
									{
										this.character_appearance[3] = 1;
									}
									this.characterCreate_pageOn = int(this.character_appearance[3] / 24);
									this.characterCreate_btns_hand();
									break;
								}
								case 10:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 4;
									var _loc_4:* = this.character_appearance[4] - 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[4] < 1)
									{
										this.character_appearance[4] = this.charModel.foot1.totalFrames;
									}
									this.characterCreate_pageOn = int(this.character_appearance[4] / 24);
									this.characterCreate_btns_foot();
									break;
								}
								case 11:
								{
									this.removeAllTheButtons();
									var _loc_2:* = this.character_appearance;
									var _loc_3:int = 4;
									var _loc_4:* = this.character_appearance[4] + 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_appearance[4] > this.charModel.foot1.totalFrames)
									{
										this.character_appearance[4] = 1;
									}
									this.characterCreate_pageOn = int(this.character_appearance[4] / 24);
									this.characterCreate_btns_foot();
									break;
								}
								case 12:
								{
									var _loc_2:* = this.character_weapons;
									var _loc_3:int = 0;
									var _loc_4:* = this.character_weapons[0] - 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_weapons[0] < 0)
									{
										this.character_weapons[0] = this.charModel.cc_gun.totalFrames - 1;
									}
									do
									{
										
										var _loc_2:* = this.character_weapons;
										var _loc_3:int = 0;
										var _loc_4:* = this.character_weapons[0] - 1;
										_loc_2[_loc_3] = _loc_4;
										if (this.character_weapons[0] < 0)
										{
											this.character_weapons[0] = this.charModel_title.cc_gun.totalFrames - 1;
										}
										if (this.character_weapons[0] != this.character_weapons[1])
										{
										}
									}while (this.weaponsUnlocked[this.character_weapons[0]] == 0)
									this.mc.character_create_container.weapon1.gotoAndStop((this.character_weapons[0] + 1));
									if (this.weaponsNew[this.character_weapons[0]] == 0)
									{
										this.mc.character_create_container.weapon1.new_mc.visible = false;
									}
									else
									{
										this.mc.character_create_container.weapon1.new_mc.visible = true;
									}
									this.weaponsNew[this.character_weapons[0]] = 0;
									break;
								}
								case 13:
								{
									var _loc_2:* = this.character_weapons;
									var _loc_3:int = 0;
									var _loc_4:* = this.character_weapons[0] + 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_weapons[0] > (this.charModel.cc_gun.totalFrames - 1))
									{
										this.character_weapons[0] = 0;
									}
									do
									{
										
										var _loc_2:* = this.character_weapons;
										var _loc_3:int = 0;
										var _loc_4:* = this.character_weapons[0] + 1;
										_loc_2[_loc_3] = _loc_4;
										if (this.character_weapons[0] > (this.charModel_title.cc_gun.totalFrames - 1))
										{
											this.character_weapons[0] = 0;
										}
										if (this.character_weapons[0] != this.character_weapons[1])
										{
										}
									}while (this.weaponsUnlocked[this.character_weapons[0]] == 0)
									this.mc.character_create_container.weapon1.gotoAndStop((this.character_weapons[0] + 1));
									if (this.weaponsNew[this.character_weapons[0]] == 0)
									{
										this.mc.character_create_container.weapon1.new_mc.visible = false;
									}
									else
									{
										this.mc.character_create_container.weapon1.new_mc.visible = true;
									}
									this.weaponsNew[this.character_weapons[0]] = 0;
									break;
								}
								case 14:
								{
									var _loc_2:* = this.character_weapons;
									var _loc_3:int = 1;
									var _loc_4:* = this.character_weapons[1] - 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_weapons[1] < 0)
									{
										this.character_weapons[1] = this.charModel.cc_gun.totalFrames - 1;
									}
									do
									{
										
										var _loc_2:* = this.character_weapons;
										var _loc_3:int = 1;
										var _loc_4:* = this.character_weapons[1] - 1;
										_loc_2[_loc_3] = _loc_4;
										if (this.character_weapons[1] < 0)
										{
											this.character_weapons[1] = this.charModel_title.cc_gun.totalFrames - 1;
										}
										if (this.character_weapons[1] != this.character_weapons[0])
										{
										}
									}while (this.weaponsUnlocked[this.character_weapons[1]] == 0)
									this.mc.character_create_container.weapon2.gotoAndStop((this.character_weapons[1] + 1));
									if (this.weaponsNew[this.character_weapons[1]] == 0)
									{
										this.mc.character_create_container.weapon2.new_mc.visible = false;
									}
									else
									{
										this.mc.character_create_container.weapon2.new_mc.visible = true;
									}
									this.weaponsNew[this.character_weapons[1]] = 0;
									break;
								}
								case 15:
								{
									var _loc_2:* = this.character_weapons;
									var _loc_3:int = 1;
									var _loc_4:* = this.character_weapons[1] + 1;
									_loc_2[_loc_3] = _loc_4;
									if (this.character_weapons[1] > (this.charModel.cc_gun.totalFrames - 1))
									{
										this.character_weapons[1] = 0;
									}
									do
									{
										
										var _loc_2:* = this.character_weapons;
										var _loc_3:int = 1;
										var _loc_4:* = this.character_weapons[1] + 1;
										_loc_2[_loc_3] = _loc_4;
										if (this.character_weapons[1] > (this.charModel_title.cc_gun.totalFrames - 1))
										{
											this.character_weapons[1] = 0;
										}
										if (this.character_weapons[1] != this.character_weapons[0])
										{
										}
									}while (this.weaponsUnlocked[this.character_weapons[1]] == 0)
									this.mc.character_create_container.weapon2.gotoAndStop((this.character_weapons[1] + 1));
									if (this.weaponsNew[this.character_weapons[1]] == 0)
									{
										this.mc.character_create_container.weapon2.new_mc.visible = false;
									}
									else
									{
										this.mc.character_create_container.weapon2.new_mc.visible = true;
									}
									this.weaponsNew[this.character_weapons[1]] = 0;
									break;
								}
								default:
								{
									break;
								}
							}
							this.mc.character_create_container.primary.text = this.title_gun_names[this.character_weapons[0]];
							this.mc.character_create_container.secondary.text = this.title_gun_names[this.character_weapons[1]];
							this.charModel_changeAppearance();
							this.title_mouseIsDown = false;
						}
					}
				}
				
				this.f  ++ ;
				
			}
			this.f = 0;
			while (this.f < 8)
			{
				
				this.mc.character_create_container["c1_" + this.f].scaleX = 1;
				this.mc.character_create_container["c1_" + this.f].scaleY = 1;
				this.mc.character_create_container["c2_" + this.f].scaleX = 1;
				this.mc.character_create_container["c2_" + this.f].scaleY = 1;
				if (Math.abs(this.mc.character_create_container.mouseX - this.mc.character_create_container["c1_" + this.f].x) < 15)
				{
					if (Math.abs(this.mc.character_create_container.mouseY - this.mc.character_create_container["c1_" + this.f].y) < 15)
					{
						this.mc.character_create_container["c1_" + this.f].scaleX = 1.1;
						this.mc.character_create_container["c1_" + this.f].scaleY = 1.1;
						if (this.title_mouseIsDown == true)
						{
						}
						if (this.mc.character_create_container["c1_" + this.f].visible == true)
						{
							this.removeAllTheButtons();
							if (this.f < 7)
							{
								switch(this.characterCreate_partSelected)
								{
									case 0:
									{
										this.character_colors[0] = this.f;
										this.characterCreate_btns_head();
										break;
									}
									case 1:
									{
										this.character_colors[2] = this.f;
										this.characterCreate_btns_eye();
										break;
									}
									case 2:
									{
										this.character_colors[4] = this.f;
										this.characterCreate_btns_body();
										break;
									}
									case 3:
									{
										this.character_colors[6] = this.f;
										this.characterCreate_btns_hand();
										break;
									}
									case 4:
									{
										this.character_colors[8] = this.f;
										this.characterCreate_btns_foot();
										break;
									}
									case 5:
									{
										this.character_colors[10] = this.f;
										this.characterCreate_btns_face();
										break;
									}
									default:
									{
										break;
									}
								}
							}
							else
							{
								switch(this.characterCreate_partSelected)
								{
									case 0:
									{
										this.character_colors[0] = 7;
										this.characterCreate_btns_head();
										break;
									}
									case 1:
									{
										this.character_colors[2] = 9;
										this.characterCreate_btns_eye();
										break;
									}
									case 2:
									{
										this.character_colors[4] = 11;
										this.characterCreate_btns_body();
										break;
									}
									case 3:
									{
										this.character_colors[6] = 13;
										this.characterCreate_btns_hand();
										break;
									}
									case 4:
									{
										this.character_colors[8] = 15;
										this.characterCreate_btns_foot();
										break;
									}
									case 5:
									{
										this.character_colors[10] = 17;
										this.characterCreate_btns_face();
										break;
									}
									default:
									{
										break;
									}
								}
							}
							this.f = 0;
							this.charModel_changeAppearance();
							this.title_mouseIsDown = false;
						}
					}
				}
				if (Math.abs(this.mc.character_create_container.mouseX - this.mc.character_create_container["c2_" + this.f].x) < 15)
				{
					if (Math.abs(this.mc.character_create_container.mouseY - this.mc.character_create_container["c2_" + this.f].y) < 15)
					{
						this.mc.character_create_container["c2_" + this.f].scaleX = 1.1;
						this.mc.character_create_container["c2_" + this.f].scaleY = 1.1;
						if (this.title_mouseIsDown == true)
						{
						}
						if (this.mc.character_create_container["c2_" + this.f].visible == true)
						{
							this.removeAllTheButtons();
							if (this.f < 7)
							{
								switch(this.characterCreate_partSelected)
								{
									case 0:
									{
										this.character_colors[1] = this.f;
										this.characterCreate_btns_head();
										break;
									}
									case 1:
									{
										this.character_colors[3] = this.f;
										this.characterCreate_btns_eye();
										break;
									}
									case 2:
									{
										this.character_colors[5] = this.f;
										this.characterCreate_btns_body();
										break;
									}
									case 3:
									{
										this.character_colors[7] = this.f;
										this.characterCreate_btns_hand();
										break;
									}
									case 4:
									{
										this.character_colors[9] = this.f;
										this.characterCreate_btns_foot();
										break;
									}
									case 5:
									{
										this.character_colors[11] = this.f;
										this.characterCreate_btns_face();
										break;
									}
									default:
									{
										break;
									}
								}
							}
							else
							{
								switch(this.characterCreate_partSelected)
								{
									case 0:
									{
										this.character_colors[1] = 8;
										this.characterCreate_btns_head();
										break;
									}
									case 1:
									{
										this.character_colors[3] = 10;
										this.characterCreate_btns_eye();
										break;
									}
									case 2:
									{
										this.character_colors[5] = 12;
										this.characterCreate_btns_body();
										break;
									}
									case 3:
									{
										this.character_colors[7] = 14;
										this.characterCreate_btns_hand();
										break;
									}
									case 4:
									{
										this.character_colors[9] = 16;
										this.characterCreate_btns_foot();
										break;
									}
									case 5:
									{
										this.character_colors[11] = 18;
										this.characterCreate_btns_face();
										break;
									}
									default:
									{
										break;
									}
								}
							}
							this.f = 0;
							this.charModel_changeAppearance();
							this.title_mouseIsDown = false;
						}
					}
				}
				
				this.f  ++ ;
				
			}
			this.f = 1;
			while (this.f < 3)
			{
				
				this.mc.character_create_container["define" + this.f].scaleX = 1;
				this.mc.character_create_container["define" + this.f].scaleY = 1;
				if (Math.abs(this.mc.character_create_container.mouseX - this.mc.character_create_container["define" + this.f].x) < 55)
				{
					if (Math.abs(this.mc.character_create_container.mouseY - this.mc.character_create_container["define" + this.f].y) < 15)
					{
						this.mc.character_create_container["define" + this.f].scaleX = 1.05;
						this.mc.character_create_container["define" + this.f].scaleY = 1.05;
						if (this.title_mouseIsDown == true)
						{
						}
						if (this.mc.character_create_container["define" + this.f].visible == true)
						{
							if (this.f == 1)
							{
								this.whichColorPicker = 1;
							}
							else
							{
								this.whichColorPicker = 2;
							}
							this.changeColor_hex = (this.mc.colorPicker.r.x - 150) * 0.005 * 255 << 16 | (this.mc.colorPicker.g.x - 150) * 0.005 * 255 << 8 | (this.mc.colorPicker.b.x - 150) * 0.005 * 255;
							switch(this.characterCreate_partSelected)
							{
								case 0:
								{
									if (this.whichColorPicker == 1)
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[7];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									else
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[8];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									break;
								}
								case 1:
								{
									if (this.whichColorPicker == 1)
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[9];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									else
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[10];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									break;
								}
								case 2:
								{
									if (this.whichColorPicker == 1)
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[11];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									else
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[12];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									break;
								}
								case 3:
								{
									if (this.whichColorPicker == 1)
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[13];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									else
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[14];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									break;
								}
								case 4:
								{
									if (this.whichColorPicker == 1)
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[15];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									else
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[16];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									break;
								}
								case 5:
								{
									if (this.whichColorPicker == 1)
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[17];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									else
									{
										this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
										this.character_colorTransform.color = this.character_color_values[18];
										this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
									}
									break;
								}
								default:
								{
									break;
								}
							}
							this.changeColor_r = this.character_colorTransform.redOffset;
							this.mc.colorPicker.hex_color.text = "0x";
							if (this.changeColor_r < 16)
							{
								this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + "0";
							}
							this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + this.changeColor_r.toString(16);
							this.changeColor_g = this.character_colorTransform.greenOffset;
							if (this.changeColor_g < 16)
							{
								this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + "0";
							}
							this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + this.changeColor_g.toString(16);
							this.changeColor_b = this.character_colorTransform.blueOffset;
							if (this.changeColor_b < 16)
							{
								this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + "0";
							}
							this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + this.changeColor_b.toString(16);
							this.mc.colorPicker.r.x = this.character_colorTransform.redOffset / 255 * 200 + 150;
							this.mc.colorPicker.g.x = this.character_colorTransform.greenOffset / 255 * 200 + 150;
							this.mc.colorPicker.b.x = this.character_colorTransform.blueOffset / 255 * 200 + 150;
							this.mc.character_create_container.color1.visible = false;
							this.mc.character_create_container.color2.visible = false;
							this.mc.character_create_container.define1.visible = false;
							this.mc.character_create_container.define2.visible = false;
							this.mc.character_create_container.back1.visible = false;
							this.mc.character_create_container.back2.visible = false;
							this.mc.character_create_container.shine1.visible = false;
							this.mc.character_create_container.shine2.visible = false;
							this.f = 0;
							while (this.f < 8)
							{
								
								this.mc.character_create_container["c1_" + this.f].visible = false;
								this.mc.character_create_container["c2_" + this.f].visible = false;
								
								this.f  ++ ;
								
							}
							this.mc.colorPicker.visible = true;
							this.colorPickerIsOn = true;
							this.title_mouseIsDown = false;
						}
					}
				}
				
				this.f  ++ ;
				
			}
			if (this.changeColor == true)
			{
				this.changeColor_r = (this.mc.colorPicker.r.x - 150) * 0.005 * 255;
				this.changeColor_g = (this.mc.colorPicker.g.x - 150) * 0.005 * 255;
				this.changeColor_b = (this.mc.colorPicker.b.x - 150) * 0.005 * 255;
				this.changeColor_hex = this.changeColor_r << 16 | this.changeColor_g << 8 | this.changeColor_b;
				this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
				this.character_colorTransform.color = this.changeColor_hex;
				this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
				this.mc.colorPicker.hex_color.text = "0x";
				if (this.changeColor_r < 16)
				{
					this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + "0";
				}
				this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + this.changeColor_r.toString(16);
				if (this.changeColor_g < 16)
				{
					this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + "0";
				}
				this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + this.changeColor_g.toString(16);
				if (this.changeColor_b < 16)
				{
					this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + "0";
				}
				this.mc.colorPicker.hex_color.text = this.mc.colorPicker.hex_color.text + this.changeColor_b.toString(16);
			}
			this.title_mouseIsDown = false;
			return;
		}// end function
		
		public function colorPicker_x(event:MouseEvent)
		{
			this.mc.colorPicker.visible = false;
			this.colorPickerIsOn = false;
			this.toggleButtons();
			return;
		}// end function
		
		public function colorPicker_r_md(event:MouseEvent)
		{
			this.mc.colorPicker.r.startDrag(true, new Rectangle(150, this.mc.colorPicker.r.y, 200, 0));
			this.changeColor = true;
			return;
		}// end function
		
		public function colorPicker_g_md(event:MouseEvent)
		{
			this.mc.colorPicker.g.startDrag(true, new Rectangle(150, this.mc.colorPicker.g.y, 200, 0));
			this.changeColor = true;
			return;
		}// end function
		
		public function colorPicker_b_md(event:MouseEvent)
		{
			this.mc.colorPicker.b.startDrag(true, new Rectangle(150, this.mc.colorPicker.b.y, 200, 0));
			this.changeColor = true;
			return;
		}// end function
		
		public function nextPageFun(event:MouseEvent)
		{
			
			this.characterCreate_pageOn  ++ ;
			
			switch(this.characterCreate_partSelected)
			{
				case 0:
				{
					if (this.characterCreate_pageOn > Math.floor(this.tempBtn.char.head.totalFrames / 24))
					{
						this.characterCreate_pageOn = 0;
					}
					this.removeAllTheButtons();
					this.characterCreate_btns_head();
					this.charModel_changeAppearance();
					break;
				}
				case 1:
				{
					if (this.characterCreate_pageOn > Math.floor(this.tempBtn.char.head.eye.totalFrames / 24))
					{
						this.characterCreate_pageOn = 0;
					}
					this.removeAllTheButtons();
					this.characterCreate_btns_eye();
					this.charModel_changeAppearance();
					break;
				}
				case 2:
				{
					if (this.characterCreate_pageOn > Math.floor(this.tempBtn.char.body.totalFrames / 24))
					{
						this.characterCreate_pageOn = 0;
					}
					this.removeAllTheButtons();
					this.characterCreate_btns_body();
					this.charModel_changeAppearance();
					break;
				}
				case 3:
				{
					if (this.characterCreate_pageOn > Math.floor(this.tempBtn.char.cc_gun["g" + this.character_weapons[0]].hand1.totalFrames / 24))
					{
						this.characterCreate_pageOn = 0;
					}
					this.removeAllTheButtons();
					this.characterCreate_btns_hand();
					this.charModel_changeAppearance();
					break;
				}
				case 4:
				{
					if (this.characterCreate_pageOn > Math.floor(this.tempBtn.char.foot1.totalFrames / 24))
					{
						this.characterCreate_pageOn = 0;
					}
					this.removeAllTheButtons();
					this.characterCreate_btns_foot();
					this.charModel_changeAppearance();
					break;
				}
				case 5:
				{
					if (this.characterCreate_pageOn > Math.floor(this.tempBtn.char.head.face.totalFrames / 24))
					{
						this.characterCreate_pageOn = 0;
					}
					this.removeAllTheButtons();
					this.characterCreate_btns_face();
					this.charModel_changeAppearance();
					break;
				}
				default:
				{
					break;
				}
			}
			return;
		}// end function
		
		public function prevPageFun(event:MouseEvent)
		{
			
			this.characterCreate_pageOn  -- ;
			
			if (this.characterCreate_pageOn < 0)
			{
				this.characterCreate_pageOn = 2;
			}
			this.removeAllTheButtons();
			switch(this.characterCreate_partSelected)
			{
				case 0:
				{
					this.characterCreate_btns_head();
					this.charModel_changeAppearance();
					break;
				}
				case 1:
				{
					this.characterCreate_btns_eye();
					this.charModel_changeAppearance();
					break;
				}
				case 2:
				{
					this.characterCreate_btns_body();
					this.charModel_changeAppearance();
					break;
				}
				case 3:
				{
					this.characterCreate_btns_hand();
					this.charModel_changeAppearance();
					break;
				}
				case 4:
				{
					this.characterCreate_btns_foot();
					this.charModel_changeAppearance();
					break;
				}
				case 5:
				{
					this.characterCreate_btns_face();
					this.charModel_changeAppearance();
					break;
				}
				default:
				{
					break;
				}
			}
			return;
		}// end function
		
		public function setRGB_fun(event:MouseEvent)
		{
			this.changeColor_hex = this.mc.colorPicker.hex_color.text;
			if (uint(this.changeColor_hex) > -1)
			{
			}
			if (uint(this.changeColor_hex) < 16777216)
			{
				trace("valid color");
				this.removeAllTheButtons();
				switch(this.characterCreate_partSelected)
				{
					case 0:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[0] = 7;
							this.character_color_values[7] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[1] = 8;
							this.character_color_values[8] = this.changeColor_hex;
						}
						this.characterCreate_btns_head();
						this.charModel_changeAppearance();
						break;
					}
					case 1:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[2] = 9;
							this.character_color_values[9] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[3] = 10;
							this.character_color_values[10] = this.changeColor_hex;
						}
						this.characterCreate_btns_eye();
						this.charModel_changeAppearance();
						break;
					}
					case 2:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[4] = 11;
							this.character_color_values[11] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[5] = 12;
							this.character_color_values[12] = this.changeColor_hex;
						}
						this.characterCreate_btns_body();
						this.charModel_changeAppearance();
						break;
					}
					case 3:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[6] = 13;
							this.character_color_values[13] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[7] = 14;
							this.character_color_values[14] = this.changeColor_hex;
						}
						this.characterCreate_btns_hand();
						this.charModel_changeAppearance();
						break;
					}
					case 4:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[8] = 15;
							this.character_color_values[15] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[9] = 16;
							this.character_color_values[16] = this.changeColor_hex;
						}
						this.characterCreate_btns_foot();
						this.charModel_changeAppearance();
						break;
					}
					case 5:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[10] = 17;
							this.character_color_values[17] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[11] = 18;
							this.character_color_values[18] = this.changeColor_hex;
						}
						this.characterCreate_btns_face();
						this.charModel_changeAppearance();
						break;
					}
					default:
					{
						break;
					}
				}
				this.character_colorTransform = this.mc.colorPicker.c.transform.colorTransform;
				this.character_colorTransform.color = this.changeColor_hex;
				this.mc.colorPicker.c.transform.colorTransform = this.character_colorTransform;
				this.mc.colorPicker.r.x = this.character_colorTransform.redOffset / 255 * 200 + 150;
				this.mc.colorPicker.g.x = this.character_colorTransform.greenOffset / 255 * 200 + 150;
				this.mc.colorPicker.b.x = this.character_colorTransform.blueOffset / 255 * 200 + 150;
			}
			return;
		}// end function
		
		public function hsl_mu(event:MouseEvent)
		{
			if (this.changeColor == true)
			{
				this.removeAllTheButtons();
				switch(this.characterCreate_partSelected)
				{
					case 0:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[0] = 7;
							this.character_color_values[7] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[1] = 8;
							this.character_color_values[8] = this.changeColor_hex;
						}
						this.characterCreate_btns_head();
						this.charModel_changeAppearance();
						break;
					}
					case 1:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[2] = 9;
							this.character_color_values[9] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[3] = 10;
							this.character_color_values[10] = this.changeColor_hex;
						}
						this.characterCreate_btns_eye();
						this.charModel_changeAppearance();
						break;
					}
					case 2:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[4] = 11;
							this.character_color_values[11] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[5] = 12;
							this.character_color_values[12] = this.changeColor_hex;
						}
						this.characterCreate_btns_body();
						this.charModel_changeAppearance();
						break;
					}
					case 3:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[6] = 13;
							this.character_color_values[13] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[7] = 14;
							this.character_color_values[14] = this.changeColor_hex;
						}
						this.characterCreate_btns_hand();
						this.charModel_changeAppearance();
						break;
					}
					case 4:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[8] = 15;
							this.character_color_values[15] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[9] = 16;
							this.character_color_values[16] = this.changeColor_hex;
						}
						this.characterCreate_btns_foot();
						this.charModel_changeAppearance();
						break;
					}
					case 5:
					{
						if (this.whichColorPicker == 1)
						{
							this.character_colors[10] = 17;
							this.character_color_values[17] = this.changeColor_hex;
						}
						else
						{
							this.character_colors[11] = 18;
							this.character_color_values[18] = this.changeColor_hex;
						}
						this.characterCreate_btns_face();
						this.charModel_changeAppearance();
						break;
					}
					default:
					{
						break;
					}
				}
			}
			this.mc.colorPicker.r.stopDrag();
			this.mc.colorPicker.g.stopDrag();
			this.mc.colorPicker.b.stopDrag();
			this.changeColor = false;
			return;
		}// end function
		
		public function toggleButtons()
		{
			if (this.colorPickerIsOn == false)
			{
				switch(this.characterCreate_partSelected)
				{
					case 0:
					{
						this.mc.character_create_container.color1.text = "HEAD COLOR 1:";
						this.mc.character_create_container.color2.text = "HEAD COLOR 2:";
						this.mc.character_create_container.color1.visible = true;
						this.mc.character_create_container.color2.visible = true;
						this.mc.character_create_container.define1.visible = true;
						this.mc.character_create_container.define2.visible = true;
						this.mc.character_create_container.back1.visible = true;
						this.mc.character_create_container.back2.visible = true;
						this.mc.character_create_container.shine1.visible = true;
						this.mc.character_create_container.shine2.visible = true;
						this.f = 0;
						while (this.f < 8)
						{
							
							this.mc.character_create_container["c1_" + this.f].visible = true;
							this.mc.character_create_container["c2_" + this.f].visible = true;
							
							this.f  ++ ;
							
						}
						this.characterCreate_setButtonColors();
						break;
					}
					case 1:
					{
						this.mc.character_create_container.color1.text = "EYE COLOR 1:";
						this.mc.character_create_container.color2.text = "EYE COLOR 2:";
						this.mc.character_create_container.color1.visible = true;
						this.mc.character_create_container.color2.visible = true;
						this.mc.character_create_container.define1.visible = true;
						this.mc.character_create_container.define2.visible = true;
						this.mc.character_create_container.back1.visible = true;
						this.mc.character_create_container.back2.visible = true;
						this.mc.character_create_container.shine1.visible = true;
						this.mc.character_create_container.shine2.visible = true;
						this.f = 0;
						while (this.f < 8)
						{
							
							this.mc.character_create_container["c1_" + this.f].visible = true;
							this.mc.character_create_container["c2_" + this.f].visible = true;
							
							this.f  ++ ;
							
						}
						this.characterCreate_setButtonColors();
						break;
					}
					case 2:
					{
						this.mc.character_create_container.color1.text = "BODY COLOR 1:";
						this.mc.character_create_container.color2.text = "BODY COLOR 2:";
						this.mc.character_create_container.color1.visible = true;
						this.mc.character_create_container.color2.visible = true;
						this.mc.character_create_container.define1.visible = true;
						this.mc.character_create_container.define2.visible = true;
						this.mc.character_create_container.back1.visible = true;
						this.mc.character_create_container.back2.visible = true;
						this.mc.character_create_container.shine1.visible = true;
						this.mc.character_create_container.shine2.visible = true;
						this.f = 0;
						while (this.f < 8)
						{
							
							this.mc.character_create_container["c1_" + this.f].visible = true;
							this.mc.character_create_container["c2_" + this.f].visible = true;
							
							this.f  ++ ;
							
						}
						this.characterCreate_setButtonColors();
						break;
					}
					case 3:
					{
						this.mc.character_create_container.color1.text = "HANDS COLOR 1:";
						this.mc.character_create_container.color2.text = "HANDS COLOR 2:";
						this.mc.character_create_container.color1.visible = true;
						this.mc.character_create_container.color2.visible = false;
						this.mc.character_create_container.define1.visible = true;
						this.mc.character_create_container.define2.visible = false;
						this.mc.character_create_container.back1.visible = true;
						this.mc.character_create_container.back2.visible = false;
						this.mc.character_create_container.shine1.visible = true;
						this.mc.character_create_container.shine2.visible = false;
						this.f = 0;
						while (this.f < 8)
						{
							
							this.mc.character_create_container["c1_" + this.f].visible = true;
							this.mc.character_create_container["c2_" + this.f].visible = false;
							
							this.f  ++ ;
							
						}
						this.characterCreate_setButtonColors();
						break;
					}
					case 4:
					{
						this.mc.character_create_container.color1.text = "SHOES COLOR 1:";
						this.mc.character_create_container.color2.text = "SHOES COLOR 2:";
						this.mc.character_create_container.color1.visible = true;
						this.mc.character_create_container.color2.visible = true;
						this.mc.character_create_container.define1.visible = true;
						this.mc.character_create_container.define2.visible = true;
						this.mc.character_create_container.back1.visible = true;
						this.mc.character_create_container.back2.visible = true;
						this.mc.character_create_container.shine1.visible = true;
						this.mc.character_create_container.shine2.visible = true;
						this.f = 0;
						while (this.f < 8)
						{
							
							this.mc.character_create_container["c1_" + this.f].visible = true;
							this.mc.character_create_container["c2_" + this.f].visible = true;
							
							this.f  ++ ;
							
						}
						this.characterCreate_setButtonColors();
						break;
					}
					case 5:
					{
						this.mc.character_create_container.color1.text = "FACE COLOR 1:";
						this.mc.character_create_container.color2.text = "FACE COLOR 2:";
						this.mc.character_create_container.color1.visible = false;
						this.mc.character_create_container.color2.visible = false;
						this.mc.character_create_container.define1.visible = false;
						this.mc.character_create_container.define2.visible = false;
						this.mc.character_create_container.back1.visible = false;
						this.mc.character_create_container.back2.visible = false;
						this.mc.character_create_container.shine1.visible = false;
						this.mc.character_create_container.shine2.visible = false;
						this.f = 0;
						while (this.f < 8)
						{
							
							this.mc.character_create_container["c1_" + this.f].visible = false;
							this.mc.character_create_container["c2_" + this.f].visible = false;
							
							this.f  ++ ;
							
						}
						this.characterCreate_setButtonColors();
						break;
					}
					default:
					{
						break;
					}
				}
			}
			return;
		}// end function
		
		public function addSimpleParticle(param1, param2, param3, param4, param5, param6)
		{
			this.simpleParticle_type.push(param1);
			this.simpleParticle_x.push(param2);
			this.simpleParticle_y.push(param3);
			this.simpleParticle_r.push(param4);
			this.simpleParticle_p1.push(param5);
			this.simpleParticle_p2.push(param6);
			return;
		}// end function
		
		public function removeSimpleParticle(param1)
		{
			this.simpleParticle_type.splice(param1, 1);
			this.simpleParticle_x.splice(param1, 1);
			this.simpleParticle_y.splice(param1, 1);
			this.simpleParticle_r.splice(param1, 1);
			this.simpleParticle_p1.splice(param1, 1);
			this.simpleParticle_p2.splice(param1, 1);
			
			this.a  -- ;
			
			return;
		}// end function
		
		public function addSimpleParticle_bg(param1, param2, param3, param4, param5, param6)
		{
			this.simpleParticle_bg_type.push(param1);
			this.simpleParticle_bg_x.push(param2);
			this.simpleParticle_bg_y.push(param3);
			this.simpleParticle_bg_r.push(param4);
			this.simpleParticle_bg_p1.push(param5);
			this.simpleParticle_bg_p2.push(param6);
			return;
		}// end function
		
		public function removeSimpleParticle_bg(param1)
		{
			this.simpleParticle_bg_type.splice(param1, 1);
			this.simpleParticle_bg_x.splice(param1, 1);
			this.simpleParticle_bg_y.splice(param1, 1);
			this.simpleParticle_bg_r.splice(param1, 1);
			this.simpleParticle_bg_p1.splice(param1, 1);
			this.simpleParticle_bg_p2.splice(param1, 1);
			
			this.a  -- ;
			
			return;
		}// end function
		
		public function addParticle(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15)
		{
			this.particle_type.push(param1);
			this.particle_x.push(param2);
			this.particle_y.push(param3);
			this.particle_r.push(param4);
			this.particle_xOld.push(param5);
			this.particle_yOld.push(param6);
			this.particle_rOld.push(param7);
			this.particle_velX.push(param8);
			this.particle_velY.push(param9);
			this.particle_frame.push(param10);
			this.particle_p1.push(param11);
			this.particle_p2.push(param12);
			this.particle_p3.push(param13);
			this.particle_p4.push(param14);
			this.particle_p5.push(param15);
			return;
		}// end function
		
		public function removeParticle(param1)
		{
			this.particle_type.splice(param1, 1);
			this.particle_x.splice(param1, 1);
			this.particle_y.splice(param1, 1);
			this.particle_r.splice(param1, 1);
			this.particle_xOld.splice(param1, 1);
			this.particle_yOld.splice(param1, 1);
			this.particle_rOld.splice(param1, 1);
			this.particle_velX.splice(param1, 1);
			this.particle_velY.splice(param1, 1);
			this.particle_frame.splice(param1, 1);
			this.particle_p1.splice(param1, 1);
			this.particle_p2.splice(param1, 1);
			this.particle_p3.splice(param1, 1);
			this.particle_p4.splice(param1, 1);
			this.particle_p5.splice(param1, 1);
			
			this.a  -- ;
			
			return;
		}// end function
		
		public function particleLogic()
		{
			this.numberOfBloodSplatSFX = 0;
			if (this.acidSfx > 0)
			{
				
				this.acidSfx  -- ;
				
			}
			this.closestArtifact_dist = 0;
			this.closestArtifact_num = -1;
			if (this.artifactSfx > 0)
			{
				
				this.artifactSfx  -- ;
				
			}
			this.keyHeadsUp_visible = false;
			this.a = 0;
			while (this.a < this.simpleParticle_bg_type.length)
			{
				
				switch(this.simpleParticle_bg_type[this.a])
				{
					case 0:
					{
						this.tileOn = int(this.simpleParticle_bg_y[this.a] / 50) * this.level_width + int(this.simpleParticle_bg_x[this.a] / 50);
						if (this.level[(this.tileOn + 1)] == 60)
						{
							this.simpleParticle_bg_p1[this.a] = this.simpleParticle_bg_p1[this.a] - this.simpleParticle_bg_p2[this.a];
							this.simpleParticle_bg_p2[this.a] = this.simpleParticle_bg_p2[this.a] + 0.35;
							if (this.simpleParticle_bg_p1[this.a] < -50)
							{
								if (this.tileSet == 1)
								{
									this.level[(this.tileOn + 1) + this.level_width * 2] = 20;
								}
								else if (this.tileSet == 2)
								{
									this.level[(this.tileOn + 1) + this.level_width * 2] = 1;
								}
								else if (this.tileSet == 3)
								{
									this.level[(this.tileOn + 1) + this.level_width * 2] = 1;
								}
								else if (this.tileSet == 4)
								{
									this.level[(this.tileOn + 1) + this.level_width * 2] = 1;
								}
								else if (this.tileSet == 5)
								{
									this.level[(this.tileOn + 1) + this.level_width * 2] = 1;
								}
							}
							if (this.simpleParticle_bg_p1[this.a] < -100)
							{
								if (this.tileSet == 1)
								{
									this.level[(this.tileOn + 1) + this.level_width] = 20;
									this.level[(this.tileOn + 1) + this.level_width * 2] = 20;
								}
								else if (this.tileSet == 2)
								{
									this.level[(this.tileOn + 1) + this.level_width] = 1;
									this.level[(this.tileOn + 1) + this.level_width * 2] = 1;
								}
								else if (this.tileSet == 3)
								{
									this.level[(this.tileOn + 1) + this.level_width] = 1;
									this.level[(this.tileOn + 1) + this.level_width * 2] = 1;
								}
								else if (this.tileSet == 4)
								{
									this.level[(this.tileOn + 1) + this.level_width] = 1;
									this.level[(this.tileOn + 1) + this.level_width * 2] = 1;
								}
								else if (this.tileSet == 5)
								{
									this.level[(this.tileOn + 1) + this.level_width] = 1;
									this.level[(this.tileOn + 1) + this.level_width * 2] = 1;
								}
							}
							if (this.simpleParticle_bg_p1[this.a] < -150)
							{
								if (this.tileSet == 1)
								{
									this.level[(this.tileOn + 1)] = 20;
								}
								else if (this.tileSet == 2)
								{
									this.level[(this.tileOn + 1)] = 1;
								}
								else if (this.tileSet == 3)
								{
									this.level[(this.tileOn + 1)] = 1;
								}
								else if (this.tileSet == 4)
								{
									this.level[(this.tileOn + 1)] = 1;
								}
								else if (this.tileSet == 5)
								{
									this.level[(this.tileOn + 1)] = 1;
								}
								this.removeSimpleParticle_bg(this.a);
							}
						}
						break;
					}
					case 1:
					{
						if (int(this.simpleParticle_bg_p1[this.a]) != 2)
						{
							this.simpleParticle_bg_p1[this.a] = 0;
							if (Math.abs(this.character_x - this.simpleParticle_bg_x[this.a]) < 75)
							{
								if (Math.abs(this.character_y - 50 - this.simpleParticle_bg_y[this.a]) < 75)
								{
									if (this.character_keycards > 0)
									{
										this.keyHeadsUp_visible = true;
										this.simpleParticle_bg_p1[this.a] = 1;
									}
								}
							}
							if (int(this.simpleParticle_bg_p1[this.a]) == 1)
							{
							}
							if (this.kD[5] == true)
							{
							}
							if (this.character_keycards > 0)
							{
								this.simpleParticle_bg_p1[this.a] = 2;
								
								this.character_keycards  -- ;
								
								this.playSoundEffect(81, 2, 0);
								this.tileOn = int(this.simpleParticle_bg_y[this.a] / 50) * this.level_width + int(this.simpleParticle_bg_x[this.a] / 50);
								this.level[(this.tileOn + 1)] = 60;
								this.level[(this.tileOn + 1) - this.level_width] = 60;
								this.level[(this.tileOn + 1) - this.level_width * 2] = 60;
								this.rect.width = 50;
								this.rect.height = 50;
								this.rect.x = 50 * int(this.simpleParticle_bg_p1[this.a]);
								this.rect.y = 0;
								this.tempPoint.x = this.simpleParticle_bg_x[this.a];
								this.tempPoint.y = this.simpleParticle_bg_y[this.a];
								this.level_bm.copyPixels(this.door_lock_bm, this.rect, this.tempPoint, null, null, false);
								this.removeSimpleParticle_bg(this.a);
							}
						}
						break;
					}
					case 2:
					{
						if (int(this.simpleParticle_bg_p1[this.a]) != 2)
						{
							this.simpleParticle_bg_p1[this.a] = 0;
							if (Math.abs(this.character_x - this.simpleParticle_bg_x[this.a]) < 75)
							{
								if (Math.abs(this.character_y - 50 - this.simpleParticle_bg_y[this.a]) < 75)
								{
									this.simpleParticle_bg_p1[this.a] = 1;
									this.keyHeadsUp_visible = true;
								}
							}
							if (int(this.simpleParticle_bg_p1[this.a]) == 1)
							{
							}
							if (this.kD[5] == true)
							{
								this.simpleParticle_bg_p1[this.a] = 2;
								this.playSoundEffect(81, 2, 0);
								this.tileOn = int(this.simpleParticle_bg_y[this.a] / 50) * this.level_width + int(this.simpleParticle_bg_x[this.a] / 50);
								this.level[(this.tileOn + 1)] = 60;
								this.level[(this.tileOn + 1) - this.level_width] = 60;
								this.level[(this.tileOn + 1) - this.level_width * 2] = 60;
								this.rect.width = 50;
								this.rect.height = 50;
								this.rect.x = 150 + 50 * int(this.simpleParticle_bg_p1[this.a]);
								this.rect.y = 0;
								this.tempPoint.x = this.simpleParticle_bg_x[this.a];
								this.tempPoint.y = this.simpleParticle_bg_y[this.a];
								this.level_bm.copyPixels(this.door_lock_bm, this.rect, this.tempPoint, null, null, false);
								this.removeSimpleParticle_bg(this.a);
							}
						}
						break;
					}
					case 3:
					{
						if (int(this.simpleParticle_bg_p1[this.a]) != 2)
						{
							this.simpleParticle_bg_p1[this.a] = 0;
							if (Math.abs(this.character_x - (this.simpleParticle_bg_x[this.a] + 50)) < 75)
							{
								if (Math.abs(this.character_y - 50 - this.simpleParticle_bg_y[this.a]) < 75)
								{
									if (this.character_keycards > 0)
									{
										this.simpleParticle_bg_p1[this.a] = 1;
										this.keyHeadsUp_visible = true;
									}
								}
							}
							if (int(this.simpleParticle_bg_p1[this.a]) == 1)
							{
							}
							if (this.kD[5] == true)
							{
							}
							if (this.character_keycards > 0)
							{
								this.simpleParticle_bg_p1[this.a] = 2;
								
								this.character_keycards  -- ;
								
								this.playSoundEffect(81, 2, 0);
								this.tileOn = int(this.simpleParticle_bg_y[this.a] / 50) * this.level_width + int(this.simpleParticle_bg_x[this.a] / 50);
								this.level[(this.tileOn - 1)] = 60;
								this.level[(this.tileOn - 1) - this.level_width] = 60;
								this.level[(this.tileOn - 1) - this.level_width * 2] = 60;
								this.rect.width = 50;
								this.rect.height = 50;
								this.rect.x = 300 + 50 * int(this.simpleParticle_bg_p1[this.a]);
								this.rect.y = 0;
								this.tempPoint.x = this.simpleParticle_bg_x[this.a];
								this.tempPoint.y = this.simpleParticle_bg_y[this.a];
								this.level_bm.copyPixels(this.door_lock_bm, this.rect, this.tempPoint, null, null, false);
								this.removeSimpleParticle_bg(this.a);
							}
						}
						break;
					}
					case 4:
					{
						if (int(this.simpleParticle_bg_p1[this.a]) != 2)
						{
							this.simpleParticle_bg_p1[this.a] = 0;
							if (Math.abs(this.character_x - (this.simpleParticle_bg_x[this.a] + 50)) < 75)
							{
								if (Math.abs(this.character_y - 50 - this.simpleParticle_bg_y[this.a]) < 75)
								{
									this.simpleParticle_bg_p1[this.a] = 1;
									this.keyHeadsUp_visible = true;
								}
							}
							if (int(this.simpleParticle_bg_p1[this.a]) == 1)
							{
							}
							if (this.kD[5] == true)
							{
								this.simpleParticle_bg_p1[this.a] = 2;
								this.playSoundEffect(81, 2, 0);
								this.tileOn = int(this.simpleParticle_bg_y[this.a] / 50) * this.level_width + int(this.simpleParticle_bg_x[this.a] / 50);
								this.level[(this.tileOn - 1)] = 60;
								this.level[(this.tileOn - 1) - this.level_width] = 60;
								this.level[(this.tileOn - 1) - this.level_width * 2] = 60;
								this.rect.width = 50;
								this.rect.height = 50;
								this.rect.x = 450 + 50 * int(this.simpleParticle_bg_p1[this.a]);
								this.rect.y = 0;
								this.tempPoint.x = this.simpleParticle_bg_x[this.a];
								this.tempPoint.y = this.simpleParticle_bg_y[this.a];
								this.level_bm.copyPixels(this.door_lock_bm, this.rect, this.tempPoint, null, null, false);
								this.removeSimpleParticle_bg(this.a);
							}
						}
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.simpleParticle_type.length)
			{
				
				switch(this.simpleParticle_type[this.a])
				{
					case 0:
					{
						var _loc_1:* = this.simpleParticle_p2;
						var _loc_2:* = this.a;
						var _loc_3:* = this.simpleParticle_p2[this.a] + 1;
						_loc_1[_loc_2] = _loc_3;
						if (this.simpleParticle_p2[this.a] > 1)
						{
							this.addParticle(3, this.simpleParticle_x[this.a] + Math.cos(this.simpleParticle_r[this.a]) * 20 - this.smokeWidth * 0.5 + Math.random() * 20 - 10, this.simpleParticle_y[this.a] + Math.sin(this.simpleParticle_r[this.a]) * 20 - this.gun_flash_smoke_bm.height * 0.5 + Math.random() * 20 - 10, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 0.9 + 0.2, 0, (Math.random() * 0.9 + 0.2) * 2, 0, 0, 0, 0);
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 1:
					{
						this.simpleParticle_y[this.a] = this.simpleParticle_y[this.a] - this.simpleParticle_p2[this.a] * 2;
						this.simpleParticle_p1[this.a] = this.simpleParticle_p1[this.a] + this.simpleParticle_p2[this.a] * 2;
						if (this.simpleParticle_p1[this.a] > 20)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 3:
					{
						var _loc_1:* = this.simpleParticle_p1;
						var _loc_2:* = this.a;
						var _loc_3:* = this.simpleParticle_p1[this.a] + 1;
						_loc_1[_loc_2] = _loc_3;
						this.b = 0;
						while (this.b < 3)
						{
							
							this.addParticle(2, this.simpleParticle_x[this.a] + 10 + Math.random() * 45, this.simpleParticle_y[this.a] + 10 + Math.random() * 45, 0, this.simpleParticle_x[(this.simpleParticle_x.length - 1)], this.simpleParticle_y[(this.simpleParticle_y.length - 1)] + 32, 0, (Math.random() * 20 - 10) * 0.5, (-Math.random()) * 8, 0, 0, 0, 0, 0, Math.random() + 0.5);
							
							this.b  ++ ;
							
						}
						if (int(this.simpleParticle_p1[this.a]) == 1)
						{
							this.b = 0;
							while (this.b < 8)
							{
								
								this.addParticle(3, this.simpleParticle_x[this.a] + 10 + Math.random() * 45 - this.smokeWidth * 0.5, this.simpleParticle_y[this.a] + 10 + Math.random() * 45 - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 0.9 + 0.2, 0, (Math.random() * 0.9 + 0.2) * 2, 0, 0, 0, 0);
								this.addParticle(2, this.simpleParticle_x[this.a] + 10 + Math.random() * 45, this.simpleParticle_y[this.a] + 10 + Math.random() * 45, 0, this.simpleParticle_x[(this.simpleParticle_x.length - 1)], this.simpleParticle_y[(this.simpleParticle_y.length - 1)] + 32, 0, (Math.random() * 20 - 10) * 2, (-Math.random()) * 8, 0, 0, 0, 0, 0, Math.random() + 0.5);
								this.addParticle(2, this.simpleParticle_x[this.a] + 10 + Math.random() * 45, this.simpleParticle_y[this.a] + 10 + Math.random() * 45, 0, this.simpleParticle_x[(this.simpleParticle_x.length - 1)], this.simpleParticle_y[(this.simpleParticle_y.length - 1)] + 32, 0, (Math.random() * 20 - 10) * 2, (-Math.random()) * 8, 0, 0, 0, 0, 0, Math.random() + 0.5);
								
								this.b  ++ ;
								
							}
						}
						if (this.simpleParticle_p1[this.a] > 6)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 4:
					{
						(this.simpleParticle_p1[this.a] + 1);
						if (this.simpleParticle_p1[this.a] > 11)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 5:
					{
						(this.simpleParticle_p1[this.a] + 1);
						if (this.simpleParticle_p1[this.a] > 12)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 6:
					{
						(this.simpleParticle_p1[this.a] + 1);
						if (this.simpleParticle_p1[this.a] > 14)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 7:
					{
						(this.simpleParticle_p1[this.a] + 1);
						if (this.simpleParticle_p1[this.a] > 7)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 8:
					{
						(this.simpleParticle_p1[this.a] + 1);
						if (this.simpleParticle_p1[this.a] > 7)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 9:
					{
						this.simpleParticle_p1[this.a] = this.simpleParticle_p1[this.a] + 0.5;
						if (this.simpleParticle_p1[this.a] > 10)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 10:
					{
						if (this.simpleParticle_p1[this.a] == 0)
						{
							this.getVolume(this.simpleParticle_x[this.a], this.simpleParticle_y[this.a]);
							this.playSoundEffect(87, this.tempVol * 3, 0);
						}
						(this.simpleParticle_p1[this.a] + 1);
						if (this.simpleParticle_p1[this.a] > 32)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 11:
					{
						this.simpleParticle_p1[this.a] = this.simpleParticle_p1[this.a] + 0.4;
						if (this.simpleParticle_p1[this.a] > 13)
						{
							this.removeSimpleParticle(this.a);
						}
						break;
					}
					case 12:
					{
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.particle_type.length)
			{
				
				switch(this.particle_type[this.a])
				{
					case 0:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
						this.particle_velX[this.a] = this.particle_velX[this.a] * 0.97;
						if (this.particle_velX[this.a] > 0)
						{
							this.tileOn = int((this.particle_y[this.a] - 1) / 50) * this.level_width + int((this.particle_x[this.a] + this.particle_velX[this.a]) / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_x[this.a] = int(this.particle_x[this.a] / 50) * 50 + 45;
								this.particle_velX[this.a] = this.particle_velX[this.a] * -0.5;
							}
						}
						else if (this.particle_velX[this.a] < 0)
						{
							this.tileOn = int((this.particle_y[this.a] - 1) / 50) * this.level_width + int((this.particle_x[this.a] + this.particle_velX[this.a]) / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_x[this.a] = int(this.particle_x[this.a] / 50) * 50 + 5;
								this.particle_velX[this.a] = this.particle_velX[this.a] * -0.5;
							}
						}
						if (Math.abs(this.particle_velX[this.a]) < 1)
						{
							this.particle_velX[this.a] = 0;
						}
						this.particle_p2[this.a] = this.particle_p2[this.a] - this.particle_velX[this.a] * this.particle_p3[this.a];
						if (this.particle_p2[this.a] > 16)
						{
							this.particle_p2[this.a] = this.particle_p2[this.a] - 16;
						}
						if (this.particle_p2[this.a] < 0)
						{
							this.particle_p2[this.a] = this.particle_p2[this.a] + 16;
						}
						this.particle_velY[this.a] = this.particle_velY[this.a] + 2;
						if (this.particle_velY[this.a] > 40)
						{
							this.particle_velY[this.a] = 40;
						}
						this.b = 0;
						while (this.b < 2)
						{
							
							this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a] * 0.5;
							if (this.particle_velY[this.a] < 0)
							{
								this.tileOn = int((this.particle_y[this.a] - 10) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_y[this.a] = this.particle_y[this.a] - this.particle_velY[this.a];
									this.particle_velY[this.a] = this.particle_velY[this.a] * -0.5;
								}
							}
							else if (this.particle_velY[this.a] > 0)
							{
								this.tileOn = int((this.particle_y[this.a] + this.shellHeight[this.particle_p1[this.a]]) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_y[this.a] = int((this.particle_y[this.a] + this.shellHeight[this.particle_p1[this.a]]) / 50) * 50 - this.shellHeight[this.particle_p1[this.a]];
									if (this.particle_velY[this.a] > 10)
									{
										this.particle_velY[this.a] = this.particle_velY[this.a] * -0.5;
										this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
										if (this.particle_p1[this.a] == 0)
										{
											this.playSoundEffect(int(Math.random() * 3) + 26, this.tempVol, 0);
										}
										else if (this.particle_p1[this.a] == 1)
										{
											this.playSoundEffect(int(Math.random() * 3) + 29, this.tempVol, 0);
										}
										else if (this.particle_p1[this.a] == 2)
										{
											this.playSoundEffect(int(Math.random() * 3) + 32, this.tempVol, 0);
										}
										else if (this.particle_p1[this.a] == 3)
										{
											this.playSoundEffect(int(Math.random() * 3) + 26, this.tempVol, 0);
										}
									}
									else
									{
										if (this.particle_p4[this.a] == 0)
										{
											this.particle_p4[this.a] = 1;
											this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
											if (this.particle_p1[this.a] == 0)
											{
												this.playSoundEffect(int(Math.random() * 3) + 26, this.tempVol, 0);
											}
											else if (this.particle_p1[this.a] == 1)
											{
												this.playSoundEffect(int(Math.random() * 3) + 29, this.tempVol, 0);
											}
											else if (this.particle_p1[this.a] == 2)
											{
												this.playSoundEffect(int(Math.random() * 3) + 32, this.tempVol, 0);
											}
											else if (this.particle_p1[this.a] == 3)
											{
												this.playSoundEffect(int(Math.random() * 3) + 26, this.tempVol, 0);
											}
										}
										this.particle_velY[this.a] = 0;
										this.particle_velX[this.a] = this.particle_velX[this.a] * 0.6;
									}
								}
							}
							
							this.b  ++ ;
							
						}
						if (Math.abs(this.particle_velX[this.a]) < 0.1)
						{
							if (Math.abs(this.particle_velY[this.a]) < 0.1)
							{
								var _loc_1:* = this.particle_p5;
								var _loc_2:* = this.a;
								var _loc_3:* = this.particle_p5[this.a] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.particle_p5[this.a] > 2)
								{
									this.tileOn = int((this.particle_y[this.a] - 1) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 0)
									{
										this.rect.width = this.gunCasingWidth[int(this.particle_p1[this.a])];
										this.rect.height = this.rect.width;
										this.rect.x = int(this.particle_p2[this.a]) * this.rect.width;
										this.rect.y = 0;
										this.tempPoint.x = this.particle_x[this.a] - this.rect.width * 0.5;
										this.tempPoint.y = this.particle_y[this.a] - this.rect.height * 0.5;
										this.level_bm.copyPixels(this["gun_casing" + int(this.particle_p1[this.a])], this.rect, this.tempPoint, null, null, false);
									}
									this.removeParticle(this.a);
								}
							}
							else
							{
								this.particle_p5[this.a] = 0;
							}
						}
						else
						{
							this.particle_p5[this.a] = 0;
						}
						break;
					}
					case 1:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.b = 0;
						while (this.b < 5)
						{
							
							this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
							this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a];
							if (this.particle_p4[this.a] == 0)
							{
								this.bulletCollisions();
							}
							else
							{
								this.bulletCollisions_enemy();
							}
							if (this.particle_frame[this.a] != 2)
							{
								this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_frame[this.a] = 1;
									this.b = 100;
								}
							}
							
							this.b  ++ ;
							
						}
						if (int(this.particle_frame[this.a]) == 1)
						{
							if (int(this.particle_p2[this.a]) == 0)
							{
								this.addParticle(3, this.particle_x[this.a] - this.smokeWidth * 0.5, this.particle_y[this.a] - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 0.9 + 0.2, 5, 1.5 + Math.random() * 0.5, 0, 0, 0, 0);
								this.b = 0;
								while (this.b < 6)
								{
									
									this.addParticle(2, this.particle_x[this.a] - 6, this.particle_y[this.a] - 6, 0, this.particle_x[this.a] - 6, this.particle_y[this.a] - 6, 0, (-this.particle_velX[this.a]) * Math.random(), (-Math.random()) * 8, 0, 0, 0, 0, 0, Math.random() + 0.5);
									
									this.b  ++ ;
									
								}
							}
							else
							{
								this.addSimpleParticle(3, this.particle_x[this.a] - 32, this.particle_y[this.a] - 32, 0, 0, 0);
							}
							this.c = Math.random() * 3;
							if (this.c == 0)
							{
								this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
								this.playSoundEffect(int(Math.random() * 3) + 35, this.tempVol, 0);
							}
							this.removeParticle(this.a);
						}
						else if (int(this.particle_frame[this.a]) == 2)
						{
							if (this.numberOfBloodSplatSFX < 1)
							{
								this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
								this.playSoundEffect(int(Math.random() * 4) + 45, this.tempVol * 2, 0);
								
								this.numberOfBloodSplatSFX  ++ ;
								
							}
							this.c = int(Math.random() * 5);
							if (this.c == 0)
							{
								if (this.particle_velX[this.a] > 0)
								{
									this.addSimpleParticle(4, this.particle_x[this.a] - 60, this.particle_y[this.a] - 50, 0, 0, 1);
								}
								else
								{
									this.addSimpleParticle(4, this.particle_x[this.a] - 215, this.particle_y[this.a] - 50, 0, 0, 0);
								}
								this.c = int(Math.random() * 3);
								if (this.c == 0)
								{
									if (this.particle_velX[this.a] > 0)
									{
										this.addSimpleParticle(9, this.particle_x[this.a] - 127, this.particle_y[this.a] - 25, 0, 0, 1);
									}
									else
									{
										this.addSimpleParticle(9, this.particle_x[this.a] - 5, this.particle_y[this.a] - 25, 0, 0, 0);
									}
								}
							}
							else if (this.c == 1)
							{
								this.addSimpleParticle(5, this.particle_x[this.a] - 135, this.particle_y[this.a] - 85, 0, 0, 0);
							}
							else if (this.c == 2)
							{
								if (this.particle_velX[this.a] < 0)
								{
									this.addSimpleParticle(6, this.particle_x[this.a], this.particle_y[this.a], 3.14 + Math.random() * -0.3925, 0, -1);
								}
								else
								{
									this.addSimpleParticle(6, this.particle_x[this.a], this.particle_y[this.a], Math.random() * 0.785 - 0.3925, 0, 1);
								}
								this.c = int(Math.random() * 3);
								if (this.c == 0)
								{
									if (this.particle_velX[this.a] > 0)
									{
										this.addSimpleParticle(9, this.particle_x[this.a] - 127, this.particle_y[this.a] - 25, 0, 0, 1);
									}
									else
									{
										this.addSimpleParticle(9, this.particle_x[this.a] - 5, this.particle_y[this.a] - 25, 0, 0, 0);
									}
								}
							}
							else if (this.c == 3)
							{
								this.addSimpleParticle(7, this.particle_x[this.a], this.particle_y[this.a], this.particle_r[this.a], 0, 0);
							}
							else if (this.c == 4)
							{
								this.addSimpleParticle(8, this.particle_x[this.a] - 110, this.particle_y[this.a] - 56, 0, 0, 0);
							}
							this.placeBloodSplatter(this.particle_x[this.a], this.particle_y[this.a], this.particle_p4[this.a]);
							if (this.particle_p3[this.a] != 10)
							{
								this.removeParticle(this.a);
							}
							else
							{
								this.particle_p5[this.a] = this.particle_p5[this.a] * 0.4;
								if (this.particle_p5[this.a] < 4)
								{
									this.removeParticle(this.a);
								}
								else
								{
									this.particle_frame[this.a] = 0;
								}
							}
						}
						break;
					}
					case 2:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a];
						this.particle_velX[this.a] = this.particle_velX[this.a] * 0.9;
						(this.particle_velY[this.a] + 1);
						this.particle_frame[this.a] = this.particle_frame[this.a] + this.particle_p5[this.a];
						if (this.particle_frame[this.a] > 15)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 3:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] - this.particle_velY[this.a];
						this.particle_frame[this.a] = this.particle_frame[this.a] + this.particle_p1[this.a];
						if (this.particle_frame[this.a] > 20)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 4:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] - this.particle_velY[this.a];
						if (this.particle_p1[this.a] == 0)
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] - 0.1;
							if (this.particle_velY[this.a] < -1.2)
							{
								this.particle_p1[this.a] = 1;
							}
						}
						else
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] + 0.1;
							if (this.particle_velY[this.a] > 1.2)
							{
								this.particle_p1[this.a] = 0;
							}
						}
						if (Math.abs(this.character_x - this.particle_x[this.a]) < 35)
						{
							if (Math.abs(this.character_y - (this.particle_y[this.a] + 30)) < 30)
							{
								this.playSoundEffect(88, 2, 0);
								this.messageTime = 60;
								this.messageText = "KEYCARD COLLECTED";
								
								this.character_keycards  ++ ;
								
								this.b = 0;
								while (this.b < 20)
								{
									
									this.addParticle(17, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_x[this.a], this.particle_y[this.a], 0, Math.random() * 10 - 5, Math.random() * -12, 0, Math.random() * 1 + 0.5, 0, 0, 0, 0);
									
									this.b  ++ ;
									
								}
								this.removeParticle(this.a);
							}
						}
						break;
					}
					case 5:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] - this.particle_velY[this.a];
						if (this.particle_p1[this.a] == 0)
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] - 0.1;
							if (this.particle_velY[this.a] < -1.2)
							{
								this.particle_p1[this.a] = 1;
							}
						}
						else
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] + 0.1;
							if (this.particle_velY[this.a] > 1.2)
							{
								this.particle_p1[this.a] = 0;
							}
						}
						if (Math.abs(this.character_x - this.particle_x[this.a]) < 30)
						{
							if (Math.abs(this.character_y - (this.particle_y[this.a] + 30)) < 30)
							{
								if (this.particle_frame[this.a] == 0)
								{
									this.messageTime = 60;
									this.messageText = "COLLECTED: GUN FRAME";
									this.objective_collectables_collected[0] = 1;
								}
								else if (this.particle_frame[this.a] == 1)
								{
									this.messageTime = 60;
									this.messageText = "COLLECTED: GUN BARREL";
									this.objective_collectables_collected[1] = 1;
								}
								else if (this.particle_frame[this.a] == 2)
								{
									this.messageTime = 60;
									this.messageText = "COLLECTED: GUN TRIGGER GROUP";
									this.objective_collectables_collected[2] = 1;
								}
								else if (this.particle_frame[this.a] == 3)
								{
									this.messageTime = 60;
									this.messageText = "COLLECTED: GUN ACTION";
									this.objective_collectables_collected[3] = 1;
								}
								if (this.objective_collectables_collected[0] == 1)
								{
								}
								if (this.objective_collectables_collected[1] == 1)
								{
								}
								if (this.objective_collectables_collected[2] == 1)
								{
								}
								if (this.objective_collectables_collected[3] == 1)
								{
									this.playSoundEffect(85, 2, 0);
									this.messageTime2 = 70;
									this.messageText2 = "OBJECTIVE COMPLETE: COLLECT 4 GUN PARTS";
									this.scoreTally = this.scoreTally + 100;
									this.tempScoreQue = "";
									this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
									this.scoreQue.push(this.tempScoreQue);
									if (this.scoreQue.length > 3)
									{
										this.scoreQue.splice(0, 1);
									}
									this.scoreQueTime = 60;
									this.multiplier_countdown = this.max_multiplier_countdown;
								}
								else
								{
									this.playSoundEffect(86, 2, 0);
								}
								this.b = 0;
								while (this.b < 20)
								{
									
									this.addParticle(17, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_x[this.a], this.particle_y[this.a], 0, Math.random() * 10 - 5, Math.random() * -12, 0, Math.random() * 1 + 0.5, 2, 0, 0, 0);
									
									this.b  ++ ;
									
								}
								this.removeParticle(this.a);
							}
						}
						break;
					}
					case 6:
					{
						this.particle_p1[this.a] = this.particle_p1[this.a] - 0.01;
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a];
						this.particle_velY[this.a] = this.particle_velY[this.a] * 0.99;
						this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int(this.particle_x[this.a] / 50);
						if (this.level_collidable[this.level[this.tileOn]] != 1)
						{
						}
						if (this.particle_velY[this.a] >= 0.1)
						{
						}
						if (this.particle_p1[this.a] < 0.01)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 7:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
						this.particle_velX[this.a] = this.particle_velX[this.a] * 0.98;
						if (int(this.particle_p2[this.a]) == 1)
						{
							this.particle_r[this.a] = this.particle_r[this.a] + this.particle_velX[this.a] * 0.05;
						}
						else
						{
							this.particle_r[this.a] = this.particle_r[this.a] - this.particle_velX[this.a] * 0.05;
						}
						if (this.particle_velX[this.a] < 0)
						{
							this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int((this.particle_x[this.a] - this.giblet_height[int(this.particle_p1[this.a])]) / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_velX[this.a] = this.particle_velX[this.a] * -1;
								this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
							}
						}
						else
						{
							this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int((this.particle_x[this.a] + this.giblet_height[int(this.particle_p1[this.a])]) / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_velX[this.a] = this.particle_velX[this.a] * -1;
								this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
							}
						}
						this.particle_velY[this.a] = this.particle_velY[this.a] + 1.5;
						this.b = 0;
						while (this.b < 2)
						{
							
							this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a] * 0.5;
							if (this.particle_velY[this.a] < 0)
							{
								this.tileOn = int((int(this.particle_y[this.a] / 50) * 50 - this.giblet_height[int(this.particle_p1[this.a])]) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_y[this.a] = int(this.particle_y[this.a] / 50) * 50 + this.giblet_height[int(this.particle_p1[this.a])];
									this.particle_xOld[this.a] = this.particle_x[this.a];
									this.particle_yOld[this.a] = this.particle_y[this.a];
									this.particle_velY[this.a] = 1;
								}
							}
							else
							{
								this.tileOn = int(int((this.particle_y[this.a] + this.giblet_height[int(this.particle_p1[this.a])]) / 50) * 50 / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_y[this.a] = int((this.particle_y[this.a] + this.giblet_height[int(this.particle_p1[this.a])]) / 50) * 50 - this.giblet_height[int(this.particle_p1[this.a])];
									this.particle_xOld[this.a] = this.particle_x[this.a];
									this.particle_yOld[this.a] = this.particle_y[this.a];
									if (this.particle_velY[this.a] > 6)
									{
										this.particle_velY[this.a] = this.particle_velY[this.a] * -0.5;
										this.c = Math.random() * 8;
										if (this.c == 0)
										{
											this.particle_velX[this.a] = this.particle_velX[this.a] * -1;
										}
									}
									else
									{
										this.tileOn = int((int(this.particle_y[this.a] / 50) * 50 + this.giblet_height[int(this.particle_p1[this.a])]) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
										if (this.level_collidable[this.level[this.tileOn]] == 0)
										{
											if (this.particle_p2[this.a] == 1)
											{
												this.particle_p2[this.a] = 1;
											}
											else
											{
												this.particle_p2[this.a] = -1;
											}
											this.trans.createBox(this.particle_p2[this.a], 1, this.particle_r[this.a], this.particle_x[this.a], this.particle_y[this.a]);
											this.level_bm.draw(this["giblets_human_sprite" + int(this.particle_p1[this.a])], this.trans);
										}
										this.particle_p3[this.a] = 1;
									}
								}
							}
							
							this.b  ++ ;
							
						}
						if (this.particle_p3[this.a] == 1)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 8:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] - this.particle_velY[this.a];
						if (this.particle_p1[this.a] == 0)
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] - 0.1;
							if (this.particle_velY[this.a] < -1.2)
							{
								this.particle_p1[this.a] = 1;
							}
						}
						else
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] + 0.1;
							if (this.particle_velY[this.a] > 1.2)
							{
								this.particle_p1[this.a] = 0;
							}
						}
						if (Math.abs(this.character_x - this.particle_x[this.a]) < 30)
						{
							if (Math.abs(this.character_y - (this.particle_y[this.a] + 25)) < 50)
							{
								this.playSoundEffect(85, 2, 0);
								this.messageTime2 = 70;
								this.messageText2 = "OBJECTIVE COMPLETE: FIND SECRET BRIEFCASE";
								this.objective_briefcase_collected = true;
								this.scoreTally = this.scoreTally + 100;
								this.tempScoreQue = "";
								this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
								this.scoreQue.push(this.tempScoreQue);
								if (this.scoreQue.length > 3)
								{
									this.scoreQue.splice(0, 1);
								}
								this.scoreQueTime = 60;
								this.multiplier_countdown = this.max_multiplier_countdown;
								this.b = 0;
								while (this.b < 20)
								{
									
									this.addParticle(17, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_x[this.a], this.particle_y[this.a], 0, Math.random() * 10 - 5, Math.random() * -12, 0, Math.random() * 1 + 0.5, 3, 0, 0, 0);
									
									this.b  ++ ;
									
								}
								this.removeParticle(this.a);
							}
						}
						break;
					}
					case 9:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_p2[this.a] = this.particle_p2[this.a] + this.particle_velX[this.a] * 0.1;
						if (this.particle_p2[this.a] > 7)
						{
							this.particle_p2[this.a] = 0;
						}
						if (this.particle_p2[this.a] < 0)
						{
							this.particle_p2[this.a] = 7;
						}
						this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
						this.particle_velX[this.a] = this.particle_velX[this.a] * 0.98;
						if (this.particle_velX[this.a] < 0)
						{
							this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int((this.particle_x[this.a] - 3) / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_velX[this.a] = this.particle_velX[this.a] * -1;
								this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
							}
						}
						else
						{
							this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int((this.particle_x[this.a] + 3) / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_velX[this.a] = this.particle_velX[this.a] * -1;
								this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
							}
						}
						this.particle_velY[this.a] = this.particle_velY[this.a] + 1.5;
						this.b = 0;
						while (this.b < 2)
						{
							
							this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a] * 0.5;
							this.tileOn = int((this.particle_y[this.a] - 10) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_velY[this.a] = this.particle_velY[this.a] * -0.5;
							}
							this.tileOn = int((this.particle_y[this.a] + 6) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_y[this.a] = int((this.particle_y[this.a] + 6) / 50) * 50 - 6;
								if (this.particle_velY[this.a] > 6)
								{
									this.particle_velY[this.a] = this.particle_velY[this.a] * -0.4;
								}
								else
								{
									this.tileOn = int((int(this.particle_y[this.a] / 50) * 50 + 3) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 0)
									{
										this.tempPoint.x = this.particle_x[this.a];
										this.tempPoint.y = this.particle_y[this.a];
										this.rect.x = 80 * int(this.particle_p1[this.a]) + 10 * int(this.particle_p2[this.a]);
										this.rect.y = 0;
										this.rect.width = 10;
										this.rect.height = 10;
										this.level_bm.copyPixels(this.giblets_small_bm, this.rect, this.tempPoint, null, null, true);
									}
									this.particle_p3[this.a] = 1;
								}
							}
							
							this.b  ++ ;
							
						}
						if (this.particle_p3[this.a] == 1)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 10:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] - this.particle_velY[this.a];
						if (this.particle_p1[this.a] == 0)
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] - 0.1;
							if (this.particle_velY[this.a] < -1.2)
							{
								this.particle_p1[this.a] = 1;
							}
						}
						else
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] + 0.1;
							if (this.particle_velY[this.a] > 1.2)
							{
								this.particle_p1[this.a] = 0;
							}
						}
						if (Math.abs(this.character_x - this.particle_x[this.a]) < 30)
						{
							if (Math.abs(this.character_y - (this.particle_y[this.a] + 30)) < 30)
							{
								if (this.character_health < this.character_maxHealth)
								{
									this.b = 0;
									while (this.b < 20)
									{
										
										this.addParticle(17, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_x[this.a], this.particle_y[this.a], 0, Math.random() * 10 - 5, Math.random() * -12, 0, Math.random() * 1 + 0.5, 1, 0, 0, 0);
										
										this.b  ++ ;
										
									}
									this.playSoundEffect(56, 1, 0);
									this.removeParticle(this.a);
									this.messageTime = 60;
									this.messageText = "FULL HEAL";
									this.character_health = this.character_maxHealth;
								}
							}
						}
						break;
					}
					case 11:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] - this.particle_velY[this.a];
						if (this.particle_p1[this.a] == 0)
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] - 0.1;
							if (this.particle_velY[this.a] < -1.2)
							{
								this.particle_p1[this.a] = 1;
							}
						}
						else
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] + 0.1;
							if (this.particle_velY[this.a] > 1.2)
							{
								this.particle_p1[this.a] = 0;
							}
						}
						if (Math.abs(this.character_x - (this.particle_x[this.a] + 25)) < 30)
						{
							if (Math.abs(this.character_y - (this.particle_y[this.a] + 25)) < 75)
							{
								this.playSoundEffect(89, 2, 0);
								this.b = 0;
								while (this.b < 20)
								{
									
									this.addParticle(17, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_x[this.a], this.particle_y[this.a], 0, Math.random() * 10 - 5, Math.random() * -12, 0, Math.random() * 1 + 0.5, 0, 0, 0, 0);
									
									this.b  ++ ;
									
								}
								this.removeParticle(this.a);
								this.messageTime = 60;
								this.messageText = "TIME INCREASE: @1:00";
								this.timeRemaining = this.timeRemaining + 1800;
							}
						}
						break;
					}
					case 12:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.b = 0;
						while (this.b < 2)
						{
							
							this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
							this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a];
							if (this.particle_p4[this.a] == 0)
							{
								this.bulletCollisions();
							}
							else
							{
								this.bulletCollisions_enemy();
							}
							this.addParticle(13, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_velX[this.a] * 0.75, Math.random() * -8, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
							if (this.particle_frame[this.a] != 2)
							{
								this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_frame[this.a] = 1;
									this.b = 100;
								}
							}
							
							this.b  ++ ;
							
						}
						this.particle_velY[this.a] = this.particle_velY[this.a] + 0.5;
						if (int(this.particle_frame[this.a]) == 1)
						{
							this.addParticle(3, this.particle_x[this.a] - this.smokeWidth * 0.5, this.particle_y[this.a] - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 0.9 + 0.2, 5, 1.5 + Math.random() * 0.5, 0, 0, 0, 0);
							this.b = 0;
							while (this.b < 25)
							{
								
								this.addParticle(13, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_x[this.a], this.particle_y[this.a], 0, Math.random() * 20 - 10, Math.random() * -16, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
								
								this.b  ++ ;
								
							}
							if (this.particle_p4[this.a] == 0)
							{
								this.c = 0;
								while (this.c < this.enemy_type.length)
								{
									
									this.d = Math.sqrt((this.enemy_x[this.c] - this.particle_x[this.a]) * (this.enemy_x[this.c] - this.particle_x[this.a]) + (this.enemy_y[this.c] - 50 - this.particle_y[this.a]) * (this.enemy_y[this.c] - 50 - this.particle_y[this.a]));
									if (int(this.d) < 150)
									{
										this.enemy_statusEffect[this.c] = 1;
										if (this.enemy_statusEffect_atp[this.c] < (200 - this.d) * 5e-005)
										{
											this.enemy_statusEffect_atp[this.c] = (200 - this.d) * 5e-005;
										}
									}
									
									this.c  ++ ;
									
								}
							}
							this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
							this.playSoundEffect(77, this.tempVol * 2, 0);
							this.removeParticle(this.a);
						}
						else if (int(this.particle_frame[this.a]) == 2)
						{
							this.b = 0;
							while (this.b < 25)
							{
								
								this.addParticle(13, this.particle_x[this.a], this.particle_y[this.a], 0, this.particle_x[this.a], this.particle_y[this.a], 0, Math.random() * 20 - 10, Math.random() * -16, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
								
								this.b  ++ ;
								
							}
							this.b = 0;
							while (this.b < 6)
							{
								
								this.addParticle(3, this.particle_x[this.a] + Math.random() * 20 - 10 - this.smokeWidth * 0.5, this.particle_y[this.a] + Math.random() * 20 - 10 - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 3 + 2, 5, 1.5 + Math.random() * 0.5, 0, 0, 0, 0);
								
								this.b  ++ ;
								
							}
							if (this.particle_p4[this.a] == 0)
							{
								this.c = 0;
								while (this.c < this.enemy_type.length)
								{
									
									this.d = Math.sqrt((this.enemy_x[this.c] - this.particle_x[this.a]) * (this.enemy_x[this.c] - this.particle_x[this.a]) + (this.enemy_y[this.c] - 50 - this.particle_y[this.a]) * (this.enemy_y[this.c] - 50 - this.particle_y[this.a]));
									if (int(this.d) < 150)
									{
										this.enemy_statusEffect[this.c] = 1;
										if (this.enemy_statusEffect_atp[this.c] < (200 - this.d) * 5e-005)
										{
											this.enemy_statusEffect_atp[this.c] = (200 - this.d) * 5e-005;
										}
									}
									
									this.c  ++ ;
									
								}
							}
							this.placeBloodSplatter(this.particle_x[this.a], this.particle_y[this.a], this.particle_p4[this.a]);
							this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
							this.playSoundEffect(77, this.tempVol * 2, 0);
							this.removeParticle(this.a);
						}
						break;
					}
					case 13:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a];
						this.particle_velX[this.a] = this.particle_velX[this.a] * 0.9;
						this.particle_velY[this.a] = this.particle_velY[this.a] + 2;
						this.particle_frame[this.a] = this.particle_frame[this.a] + this.particle_p5[this.a];
						if (this.particle_p2[this.a] != 1)
						{
							this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int(this.particle_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_p2[this.a] = 1;
							}
						}
						if (this.acidSfx < 1)
						{
							this.acidSfx = 3;
							this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
							this.playSoundEffect(78 + int(Math.random() * 3), this.tempVol * 2, 0);
						}
						if (this.particle_frame[this.a] <= 7)
						{
						}
						if (this.particle_p2[this.a] == 1)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 14:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.b = 0;
						while (this.b < 4)
						{
							
							this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a] * 0.25;
							this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a] * 0.25;
							this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int(this.particle_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_frame[this.a] = 1;
								this.b = 10;
							}
							else if (this.particle_p4[this.a] == 0)
							{
								this.bulletCollisions();
							}
							else
							{
								this.bulletCollisions_enemy();
							}
							
							this.b  ++ ;
							
						}
						if (this.particle_p2[this.a] < 15)
						{
							this.particle_velX[this.a] = this.particle_velX[this.a] * 1.1;
							this.particle_velY[this.a] = this.particle_velY[this.a] * 1.1;
							var _loc_1:* = this.particle_p2;
							var _loc_2:* = this.a;
							var _loc_3:* = this.particle_p2[this.a] + 1;
							_loc_1[_loc_2] = _loc_3;
						}
						if (int(this.particle_frame[this.a]) != 1)
						{
						}
						if (int(this.particle_frame[this.a]) == 2)
						{
							this.addSimpleParticle(10, this.particle_x[this.a], this.particle_y[this.a], 0, 0, 0);
							this.b = 0;
							while (this.b < 30)
							{
								
								this.addParticle(2, this.particle_x[this.a] - 6, this.particle_y[this.a] - 6, 0, this.particle_x[this.a] - 6, this.particle_y[this.a] - 6, 0, Math.random() * 30 - 15, (-Math.random()) * 10, 0, 0, 0, 0, 0, Math.random() + 0.5);
								
								this.b  ++ ;
								
							}
							if (int(this.particle_frame[this.a]) == 2)
							{
								this.b = 0;
								while (this.b < 4)
								{
									
									this.placeBloodSplatter(this.particle_x[this.a], this.particle_y[this.a], this.particle_p4[this.a]);
									
									this.b  ++ ;
									
								}
							}
							this.c = 0;
							while (this.c < this.enemy_type.length)
							{
								
								this.d = Math.sqrt((this.enemy_x[this.c] - this.particle_x[this.a]) * (this.enemy_x[this.c] - this.particle_x[this.a]) + (this.enemy_y[this.c] - 50 - this.particle_y[this.a]) * (this.enemy_y[this.c] - 50 - this.particle_y[this.a]));
								if (int(this.d) < 250)
								{
									this.enemy_health_head[this.c] = this.enemy_health_head[this.c] - this.particle_p5[this.a] * (250 - this.d) / 250;
									this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a] * (250 - this.d) / 250;
								}
								
								this.c  ++ ;
								
							}
							this.removeParticle(this.a);
						}
						break;
					}
					case 15:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_r[this.a] = 0;
						this.b = 0;
						while (this.b < 2)
						{
							
							this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a] * 0.5;
							this.tileOn = int((this.particle_y[this.a] - 2) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_x[this.a] = this.particle_x[this.a] - this.particle_velX[this.a];
								this.particle_velX[this.a] = this.particle_velX[this.a] * -0.8;
								this.particle_p2[this.a] = 1;
							}
							this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a] * 0.5;
							this.tileOn = int((this.particle_y[this.a] + 2) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								if (this.particle_velY[this.a] < 0)
								{
									this.particle_y[this.a] = int((this.particle_y[this.a] + 2) / 50) * 50 + 50;
								}
								else
								{
									this.particle_y[this.a] = int((this.particle_y[this.a] + 2) / 50) * 50 - 2;
								}
								this.particle_p2[this.a] = 1;
								this.particle_velX[this.a] = this.particle_velX[this.a] * 0.8;
								if (this.particle_velY[this.a] > 0)
								{
									if (this.particle_velY[this.a] > 2)
									{
										this.particle_velY[this.a] = this.particle_velY[this.a] * -0.5;
									}
									else
									{
										this.particle_velY[this.a] = 0;
										this.particle_r[this.a] = 1;
									}
								}
								else
								{
									this.particle_velY[this.a] = this.particle_velY[this.a] * -0.5;
								}
							}
							if (this.particle_p2[this.a] == 0)
							{
								if (this.particle_p4[this.a] == 0)
								{
									this.bulletCollisions();
								}
								else
								{
									this.bulletCollisions_enemy();
								}
								if (this.particle_frame[this.a] == 2)
								{
									this.particle_velX[this.a] = this.particle_velX[this.a] * -0.95;
									this.particle_frame[this.a] = 0;
									this.particle_p2[this.a] = 1;
								}
							}
							
							this.b  ++ ;
							
						}
						if (int(this.particle_velX[this.a]) == 0)
						{
						}
						if (this.particle_r[this.a] == 1)
						{
							this.tempPoint.x = this.particle_x[this.a] - 2;
							this.tempPoint.y = this.particle_y[this.a] - 2;
							this.rect.x = 0;
							this.rect.y = 0;
							this.rect.width = 5;
							this.rect.height = 5;
							this.level_bm.copyPixels(this.airsoftPellet, this.rect, this.tempPoint, null, null, true);
							this.removeParticle(this.a);
						}
						else if (this.particle_p2[this.a] == 1)
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] + 2;
						}
						else
						{
							this.particle_velY[this.a] = this.particle_velY[this.a] + 0.25;
						}
						break;
					}
					case 16:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						if (this.particle_p2[this.a] == 0)
						{
							this.gaussStartPoint_x = this.particle_x[this.a];
							this.gaussStartPoint_y = this.particle_y[this.a];
							this.gaussLength = 0;
							this.b = 0;
							while (this.b < 100)
							{
								
								this.gaussLength = this.gaussLength + 8;
								this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a] * 0.5;
								this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a] * 0.5;
								this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_frame[this.a] = 1;
									this.b = 1000;
								}
								else
								{
									this.particle_frame[this.a] = 0;
									if (this.particle_p4[this.a] == 0)
									{
										this.bulletCollisions();
									}
									else
									{
										this.bulletCollisions_enemy();
									}
									if (this.particle_frame[this.a] != 0)
									{
										this.c = int(Math.random() * 5);
										if (this.c == 0)
										{
											if (this.particle_velX[this.a] > 0)
											{
												this.addSimpleParticle(4, this.particle_x[this.a] - 60, this.particle_y[this.a] - 50, 0, 0, 1);
											}
											else
											{
												this.addSimpleParticle(4, this.particle_x[this.a] - 215, this.particle_y[this.a] - 50, 0, 0, 0);
											}
											this.c = int(Math.random() * 3);
											if (this.c == 0)
											{
												if (this.particle_velX[this.a] > 0)
												{
													this.addSimpleParticle(9, this.particle_x[this.a] - 127, this.particle_y[this.a] - 25, 0, 0, 1);
												}
												else
												{
													this.addSimpleParticle(9, this.particle_x[this.a] - 5, this.particle_y[this.a] - 25, 0, 0, 0);
												}
											}
										}
										else if (this.c == 1)
										{
											this.addSimpleParticle(5, this.particle_x[this.a] - 135, this.particle_y[this.a] - 85, 0, 0, 0);
										}
										else if (this.c == 2)
										{
											if (this.particle_velX[this.a] < 0)
											{
												this.addSimpleParticle(6, this.particle_x[this.a], this.particle_y[this.a], 3.14 + Math.random() * -0.3925, 0, -1);
											}
											else
											{
												this.addSimpleParticle(6, this.particle_x[this.a], this.particle_y[this.a], Math.random() * 0.785 - 0.3925, 0, 1);
											}
											this.c = int(Math.random() * 3);
											if (this.c == 0)
											{
												if (this.particle_velX[this.a] > 0)
												{
													this.addSimpleParticle(9, this.particle_x[this.a] - 127, this.particle_y[this.a] - 25, 0, 0, 1);
												}
												else
												{
													this.addSimpleParticle(9, this.particle_x[this.a] - 5, this.particle_y[this.a] - 25, 0, 0, 0);
												}
											}
										}
										else if (this.c == 3)
										{
											this.addSimpleParticle(7, this.particle_x[this.a], this.particle_y[this.a], this.particle_r[this.a], 0, 0);
										}
										else if (this.c == 4)
										{
											this.addSimpleParticle(8, this.particle_x[this.a] - 110, this.particle_y[this.a] - 56, 0, 0, 0);
										}
										this.placeBloodSplatter(this.particle_x[this.a], this.particle_y[this.a], this.particle_p4[this.a]);
									}
								}
								
								this.b  ++ ;
								
							}
							if (this.particle_p3[this.a] == 13)
							{
								this.addParticle(19, this.gaussStartPoint_x, this.gaussStartPoint_y, this.particle_r[this.a], 0, 0, 0, 0, 0, 0, this.gaussLength, 0, 4 - this.particle_p5[this.a] / 1.75 * 4, 100 - 100 * this.particle_p5[this.a] / 1.75, 0);
							}
							else
							{
								this.addParticle(19, this.gaussStartPoint_x, this.gaussStartPoint_y, this.particle_r[this.a], 0, 0, 0, 0, 0, 0, this.gaussLength, 0, 4 - this.particle_p5[this.a] / 1 * 4, 100 - 100 * this.particle_p5[this.a] / 1, 0);
							}
							this.particle_p2[this.a] = 1;
							this.addParticle(3, this.particle_x[this.a] - this.smokeWidth * 0.5, this.particle_y[this.a] - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 0.9 + 0.2, 5, 1.5 + Math.random() * 0.5, 0, 0, 0, 0);
							this.b = 0;
							while (this.b < 6)
							{
								
								this.addParticle(2, this.particle_x[this.a] - 6, this.particle_y[this.a] - 6, 0, this.particle_x[this.a] - 6, this.particle_y[this.a] - 6, 0, (-this.particle_velX[this.a]) * Math.random(), (-Math.random()) * 8, 0, 0, 0, 0, 0, Math.random() + 0.5);
								
								this.b  ++ ;
								
							}
						}
						break;
					}
					case 17:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
						this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a];
						this.particle_velX[this.a] = this.particle_velX[this.a] * 0.98;
						this.particle_velY[this.a] = this.particle_velY[this.a] + 0.5;
						this.particle_frame[this.a] = this.particle_frame[this.a] + this.particle_p1[this.a] * 2;
						if (this.particle_frame[this.a] > 29)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 18:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.c = Math.random() * 5;
						if (this.c == 0)
						{
							this.addSimpleParticle(11, this.particle_x[this.a] - 15 + Math.random() * 30, this.particle_y[this.a] - 15 + Math.random() * 30, 0, 0, int(Math.random() * 3));
						}
						if (this.artifactSfx < 1)
						{
							this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
							if (this.tempVol > this.closestArtifact_dist)
							{
								this.closestArtifact_dist = this.tempVol;
							}
						}
						this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a] * 0.4;
						this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a] * 0.4;
						this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int(this.particle_x[this.a] / 50);
						if (this.level_collidable[this.level[this.tileOn]] == 1)
						{
							this.particle_frame[this.a] = 1;
							this.b = 10;
						}
						else
						{
							this.bulletCollisions();
							if (this.particle_frame[this.a] == 2)
							{
								this.c = 0;
								while (this.c < this.enemy_type.length)
								{
									
									this.d = Math.sqrt((this.enemy_x[this.c] - this.particle_x[this.a]) * (this.enemy_x[this.c] - this.particle_x[this.a]) + (this.enemy_y[this.c] - 50 - this.particle_y[this.a]) * (this.enemy_y[this.c] - 50 - this.particle_y[this.a]));
									if (int(this.d) < 25)
									{
										this.enemy_health_head[this.c] = this.enemy_health_head[this.c] - 100;
										this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - 100;
									}
									
									this.c  ++ ;
									
								}
								this.placeBloodSplatter(this.particle_x[this.a], this.particle_y[this.a], this.particle_p4[this.a]);
								this.particle_frame[this.a] = 0;
							}
						}
						if (int(this.particle_frame[this.a]) == 1)
						{
							this.addSimpleParticle(10, this.particle_x[this.a], this.particle_y[this.a], 0, 0, 0);
							this.b = 0;
							while (this.b < 30)
							{
								
								this.addParticle(2, this.particle_x[this.a] - 6, this.particle_y[this.a] - 6, 0, this.particle_x[this.a] - 6, this.particle_y[this.a] - 6, 0, Math.random() * 30 - 15, (-Math.random()) * 10, 0, 0, 0, 0, 0, Math.random() + 0.5);
								
								this.b  ++ ;
								
							}
							this.removeParticle(this.a);
						}
						break;
					}
					case 19:
					{
						var _loc_1:* = this.particle_p4;
						var _loc_2:* = this.a;
						var _loc_3:* = this.particle_p4[this.a] + 1;
						_loc_1[_loc_2] = _loc_3;
						var _loc_1:* = this.particle_p2;
						var _loc_2:* = this.a;
						var _loc_3:* = this.particle_p2[this.a] + 1;
						_loc_1[_loc_2] = _loc_3;
						if (this.particle_p2[this.a] > 10)
						{
							var _loc_1:* = this.particle_p3;
							var _loc_2:* = this.a;
							var _loc_3:* = this.particle_p3[this.a] + 1;
							_loc_1[_loc_2] = _loc_3;
							this.particle_p2[this.a] = 0;
						}
						if (this.particle_p3[this.a] > 4)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 20:
					{
						this.particle_xOld[this.a] = this.particle_x[this.a];
						this.particle_yOld[this.a] = this.particle_y[this.a];
						this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
						this.particle_velX[this.a] = this.particle_velX[this.a] * 0.98;
						this.particle_r[this.a] = this.particle_r[this.a] + this.particle_velX[this.a] * 0.05;
						if (this.particle_r[this.a] > 15)
						{
							this.particle_r[this.a] = 0;
						}
						if (this.particle_r[this.a] < 0)
						{
							this.particle_r[this.a] = 15;
						}
						if (this.particle_velX[this.a] < 0)
						{
							this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int((this.particle_x[this.a] - 15) / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_velX[this.a] = this.particle_velX[this.a] * -1;
								this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
							}
						}
						else
						{
							this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int((this.particle_x[this.a] + 15) / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								this.particle_velX[this.a] = this.particle_velX[this.a] * -1;
								this.particle_x[this.a] = this.particle_x[this.a] + this.particle_velX[this.a];
							}
						}
						this.particle_velY[this.a] = this.particle_velY[this.a] + 1.5;
						this.b = 0;
						while (this.b < 2)
						{
							
							this.particle_y[this.a] = this.particle_y[this.a] + this.particle_velY[this.a] * 0.5;
							if (this.particle_velY[this.a] < 0)
							{
								this.tileOn = int((this.particle_y[this.a] - 10) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_y[this.a] = int(this.particle_y[this.a] / 50) * 50 + 10;
									this.particle_xOld[this.a] = this.particle_x[this.a];
									this.particle_yOld[this.a] = this.particle_y[this.a];
									this.particle_velY[this.a] = 1;
								}
							}
							else
							{
								this.tileOn = int((this.particle_y[this.a] + 10) / 50) * this.level_width + int(this.particle_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.particle_y[this.a] = int((this.particle_y[this.a] + 10) / 50) * 50 - 10;
									this.particle_xOld[this.a] = this.particle_x[this.a];
									this.particle_yOld[this.a] = this.particle_y[this.a];
									if (this.particle_velY[this.a] > 1)
									{
										this.particle_velY[this.a] = this.particle_velY[this.a] * -0.5;
									}
									else
									{
										this.tileOn = int(this.particle_y[this.a] / 50) * this.level_width + int(this.particle_x[this.a] / 50);
										if (this.level_collidable[this.level[this.tileOn]] == 0)
										{
											this.tempPoint.x = this.particle_x[this.a] - 17;
											this.tempPoint.y = this.particle_y[this.a] - 16;
											this.rect.x = int(this.particle_r[this.a]) * 35 + this.particle_p1[this.a] * 560;
											this.rect.y = 0;
											this.rect.width = 35;
											this.rect.height = 32;
											this.level_bm.copyPixels(this.bean_gib_eye, this.rect, this.tempPoint, null, null, true);
										}
										this.particle_p3[this.a] = 1;
									}
								}
							}
							
							this.b  ++ ;
							
						}
						if (this.particle_p3[this.a] == 1)
						{
							this.removeParticle(this.a);
						}
						break;
					}
					case 21:
					{
						if (this.character_hurtTime != 30)
						{
							this.bulletCollisions_enemy();
							if (int(this.particle_frame[this.a]) == 2)
							{
								if (this.numberOfBloodSplatSFX < 1)
								{
									this.getVolume(this.particle_x[this.a], this.particle_y[this.a]);
									this.playSoundEffect(int(Math.random() * 4) + 45, this.tempVol * 2, 0);
									
									this.numberOfBloodSplatSFX  ++ ;
									
								}
								this.c = int(Math.random() * 5);
								if (this.c == 0)
								{
									if (this.particle_velX[this.a] > 0)
									{
										this.addSimpleParticle(4, this.particle_x[this.a] - 60, this.particle_y[this.a] - 50, 0, 0, 1);
									}
									else
									{
										this.addSimpleParticle(4, this.particle_x[this.a] - 215, this.particle_y[this.a] - 50, 0, 0, 0);
									}
									this.c = int(Math.random() * 3);
									if (this.c == 0)
									{
										if (this.particle_velX[this.a] > 0)
										{
											this.addSimpleParticle(9, this.particle_x[this.a] - 127, this.particle_y[this.a] - 25, 0, 0, 1);
										}
										else
										{
											this.addSimpleParticle(9, this.particle_x[this.a] - 5, this.particle_y[this.a] - 25, 0, 0, 0);
										}
									}
								}
								else if (this.c == 1)
								{
									this.addSimpleParticle(5, this.particle_x[this.a] - 135, this.particle_y[this.a] - 85, 0, 0, 0);
								}
								else if (this.c == 2)
								{
									if (this.particle_velX[this.a] < 0)
									{
										this.addSimpleParticle(6, this.particle_x[this.a], this.particle_y[this.a], 3.14 + Math.random() * -0.3925, 0, -1);
									}
									else
									{
										this.addSimpleParticle(6, this.particle_x[this.a], this.particle_y[this.a], Math.random() * 0.785 - 0.3925, 0, 1);
									}
									this.c = int(Math.random() * 3);
									if (this.c == 0)
									{
										if (this.particle_velX[this.a] > 0)
										{
											this.addSimpleParticle(9, this.particle_x[this.a] - 127, this.particle_y[this.a] - 25, 0, 0, 1);
										}
										else
										{
											this.addSimpleParticle(9, this.particle_x[this.a] - 5, this.particle_y[this.a] - 25, 0, 0, 0);
										}
									}
								}
								else if (this.c == 3)
								{
									this.addSimpleParticle(7, this.particle_x[this.a], this.particle_y[this.a], this.particle_r[this.a], 0, 0);
								}
								else if (this.c == 4)
								{
									this.addSimpleParticle(8, this.particle_x[this.a] - 110, this.particle_y[this.a] - 56, 0, 0, 0);
								}
								this.placeBloodSplatter(this.particle_x[this.a], this.particle_y[this.a], this.particle_p4[this.a]);
							}
						}
						this.removeParticle(this.a);
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			if (this.artifactSfx < 1)
			{
				this.artifactSfx = 5;
				if (this.closestArtifact_dist > 0)
				{
					this.playSoundEffect(int(Math.random() * 3) + 82, this.closestArtifact_dist * 2, 0);
				}
			}
			return;
		}// end function
		
		public function bulletCollisions()
		{
			this.c = 0;
			while (this.c < this.enemy_type.length)
			{
				
				switch(this.enemy_type[this.c])
				{
					case 1:
					{
						if (this.enemy_markedForRemoval[this.c] == false)
						{
							if (Math.abs(this.particle_x[this.a] - this.enemy_x[this.c]) < 25)
							{
								if (Math.abs(this.particle_y[this.a] - (this.enemy_y[this.c] - 50)) < 50)
								{
									if (this.enemy_face[this.c] == 0)
									{
										this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_head_x"][this.enemy_fr[this.c]]);
										this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_head_y"][this.enemy_fr[this.c]]);
										if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 20)
										{
											this.particle_frame[this.a] = 2;
											if (this.particle_type[this.a] != 16)
											{
												this.b = 100;
											}
											this.enemy_health_head[this.c] = this.enemy_health_head[this.c] - this.particle_p5[this.a];
											this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
											if (this.particle_type[this.a] == 12)
											{
												this.enemy_statusEffect[this.c] = 1;
												this.enemy_statusEffect_atp[this.c] = 0.1;
											}
											this.c = this.enemy_type.length + 1;
										}
										else
										{
											this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_body_x"][this.enemy_fr[this.c]]);
											this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_body_y"][this.enemy_fr[this.c]]);
											if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 16)
											{
												this.particle_frame[this.a] = 2;
												if (this.particle_type[this.a] != 16)
												{
													this.b = 100;
												}
												this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a];
												this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
												if (this.particle_type[this.a] == 12)
												{
													this.enemy_statusEffect[this.c] = 1;
													this.enemy_statusEffect_atp[this.c] = 0.1;
												}
												this.c = this.enemy_type.length + 1;
											}
											else
											{
												this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_foot2_x"][this.enemy_fr[this.c]]);
												this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_foot2_y"][this.enemy_fr[this.c]]);
												if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
												{
													this.particle_frame[this.a] = 2;
													if (this.particle_type[this.a] != 16)
													{
														this.b = 100;
													}
													this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
													this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
													if (this.particle_type[this.a] == 12)
													{
														this.enemy_statusEffect[this.c] = 1;
														this.enemy_statusEffect_atp[this.c] = 0.1;
													}
													this.c = this.enemy_type.length + 1;
												}
												else
												{
													this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_foot1_x"][this.enemy_fr[this.c]]);
													this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_foot1_y"][this.enemy_fr[this.c]]);
													if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
													{
														this.particle_frame[this.a] = 2;
														if (this.particle_type[this.a] != 16)
														{
															this.b = 100;
														}
														this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
														this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
														if (this.particle_type[this.a] == 12)
														{
															this.enemy_statusEffect[this.c] = 1;
															this.enemy_statusEffect_atp[this.c] = 0.1;
														}
														this.c = this.enemy_type.length + 1;
													}
												}
											}
										}
									}
									else
									{
										this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["charAnim_" + this.enemy_anim[this.c] + "_head_x"][this.enemy_fr[this.c]]);
										this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_head_y"][this.enemy_fr[this.c]]);
										if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 20)
										{
											this.particle_frame[this.a] = 2;
											if (this.particle_type[this.a] != 16)
											{
												this.b = 100;
											}
											this.enemy_health_head[this.c] = this.enemy_health_head[this.c] - this.particle_p5[this.a];
											this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
											if (this.particle_type[this.a] == 12)
											{
												this.enemy_statusEffect[this.c] = 1;
												this.enemy_statusEffect_atp[this.c] = 0.1;
											}
											this.c = this.enemy_type.length + 1;
										}
										else
										{
											this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["charAnim_" + this.enemy_anim[this.c] + "_body_x"][this.enemy_fr[this.c]]);
											this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_body_y"][this.enemy_fr[this.c]]);
											if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 16)
											{
												this.particle_frame[this.a] = 2;
												if (this.particle_type[this.a] != 16)
												{
													this.b = 100;
												}
												this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a];
												this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
												if (this.particle_type[this.a] == 12)
												{
													this.enemy_statusEffect[this.c] = 1;
													this.enemy_statusEffect_atp[this.c] = 0.1;
												}
												this.c = this.enemy_type.length + 1;
											}
											else
											{
												this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["charAnim_" + this.enemy_anim[this.c] + "_foot2_x"][this.enemy_fr[this.c]]);
												this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_foot2_y"][this.enemy_fr[this.c]]);
												if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
												{
													this.particle_frame[this.a] = 2;
													if (this.particle_type[this.a] != 16)
													{
														this.b = 100;
													}
													this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
													this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
													if (this.particle_type[this.a] == 12)
													{
														this.enemy_statusEffect[this.c] = 1;
														this.enemy_statusEffect_atp[this.c] = 0.1;
													}
													this.c = this.enemy_type.length + 1;
												}
												else
												{
													this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["charAnim_" + this.enemy_anim[this.c] + "_foot1_x"][this.enemy_fr[this.c]]);
													this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["charAnim_" + this.enemy_anim[this.c] + "_foot1_y"][this.enemy_fr[this.c]]);
													if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
													{
														this.particle_frame[this.a] = 2;
														if (this.particle_type[this.a] != 16)
														{
															this.b = 100;
														}
														this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
														this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
														if (this.particle_type[this.a] == 12)
														{
															this.enemy_statusEffect[this.c] = 1;
															this.enemy_statusEffect_atp[this.c] = 0.1;
														}
														this.c = this.enemy_type.length + 1;
													}
												}
											}
										}
									}
								}
							}
						}
						break;
					}
					case 2:
					{
						if (Math.abs(this.particle_x[this.a] - this.enemy_x[this.c]) < 45)
						{
							if (Math.abs(this.particle_y[this.a] - (this.enemy_y[this.c] - 50)) < 90)
							{
								if (this.enemy_face[this.c] == 0)
								{
									this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_head_x"][this.enemy_fr[this.c]]);
									this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_head_y"][this.enemy_fr[this.c]]);
									if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 30)
									{
										if (this.particle_velX[this.a] < 0)
										{
											this.particle_frame[this.a] = 2;
											this.enemy_health_head[this.c] = this.enemy_health_head[this.c] - this.particle_p5[this.a];
										}
										else
										{
											this.particle_frame[this.a] = 1;
										}
										if (this.particle_type[this.a] != 16)
										{
											this.b = 100;
										}
										this.c = this.enemy_type.length + 1;
									}
									else
									{
										this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_body_x"][this.enemy_fr[this.c]]);
										this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_body_y"][this.enemy_fr[this.c]]);
										if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 20)
										{
											if (this.particle_velX[this.a] < 0)
											{
												this.particle_frame[this.a] = 2;
												this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a];
											}
											else
											{
												this.particle_frame[this.a] = 1;
											}
											if (this.particle_type[this.a] != 16)
											{
												this.b = 100;
											}
											this.c = this.enemy_type.length + 1;
										}
										else
										{
											this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_foot2_x"][this.enemy_fr[this.c]]);
											this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_foot2_y"][this.enemy_fr[this.c]]);
											if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
											{
												this.particle_frame[this.a] = 1;
												if (this.particle_type[this.a] != 16)
												{
													this.b = 100;
												}
												this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
												this.c = this.enemy_type.length + 1;
											}
											else
											{
												this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_foot1_x"][this.enemy_fr[this.c]]);
												this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_foot1_y"][this.enemy_fr[this.c]]);
												if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
												{
													this.particle_frame[this.a] = 1;
													if (this.particle_type[this.a] != 16)
													{
														this.b = 100;
													}
													this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
													this.c = this.enemy_type.length + 1;
												}
											}
										}
									}
								}
								else
								{
									this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["enemy_large1_anim" + this.enemy_anim[this.c] + "_head_x"][this.enemy_fr[this.c]]);
									this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_head_y"][this.enemy_fr[this.c]]);
									if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 30)
									{
										if (this.particle_velX[this.a] > 0)
										{
											this.particle_frame[this.a] = 2;
											this.enemy_health_head[this.c] = this.enemy_health_head[this.c] - this.particle_p5[this.a];
										}
										else
										{
											this.particle_frame[this.a] = 1;
										}
										if (this.particle_type[this.a] != 16)
										{
											this.b = 100;
										}
										this.c = this.enemy_type.length + 1;
									}
									else
									{
										this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["enemy_large1_anim" + this.enemy_anim[this.c] + "_body_x"][this.enemy_fr[this.c]]);
										this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_body_y"][this.enemy_fr[this.c]]);
										if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 20)
										{
											if (this.particle_velX[this.a] > 0)
											{
												this.particle_frame[this.a] = 2;
												this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a];
											}
											else
											{
												this.particle_frame[this.a] = 1;
											}
											if (this.particle_type[this.a] != 16)
											{
												this.b = 100;
											}
											this.c = this.enemy_type.length + 1;
										}
										else
										{
											this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["enemy_large1_anim" + this.enemy_anim[this.c] + "_foot2_x"][this.enemy_fr[this.c]]);
											this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_foot2_y"][this.enemy_fr[this.c]]);
											if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
											{
												this.particle_frame[this.a] = 1;
												if (this.particle_type[this.a] != 16)
												{
													this.b = 100;
												}
												this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
												this.c = this.enemy_type.length + 1;
											}
											else
											{
												this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["enemy_large1_anim" + this.enemy_anim[this.c] + "_foot1_x"][this.enemy_fr[this.c]]);
												this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["enemy_large1_anim" + this.enemy_anim[this.c] + "_foot1_y"][this.enemy_fr[this.c]]);
												if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
												{
													this.particle_frame[this.a] = 1;
													if (this.particle_type[this.a] != 16)
													{
														this.b = 100;
													}
													this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
													this.c = this.enemy_type.length + 1;
												}
											}
										}
									}
								}
							}
						}
						break;
					}
					case 3:
					{
						if (Math.abs(this.particle_x[this.a] - this.enemy_x[this.c]) < 20)
						{
							if (Math.abs(this.particle_y[this.a] - this.enemy_y[this.c]) < 20)
							{
								(this.enemy_health_head[this.c] - 1);
								(this.enemy_health_body[this.c] - 1);
								this.particle_frame[this.a] = 1;
								if (this.particle_type[this.a] != 16)
								{
									this.b = 100;
								}
							}
						}
						break;
					}
					case 4:
					{
						if (this.enemy_markedForRemoval[this.c] == false)
						{
							if (Math.abs(this.particle_x[this.a] - this.enemy_x[this.c]) < 30)
							{
								if (Math.abs(this.particle_y[this.a] - (this.enemy_y[this.c] - 32)) < 32)
								{
									this.particle_frame[this.a] = 2;
									if (this.particle_type[this.a] != 16)
									{
										this.b = 100;
									}
									this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a];
									this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
									if (this.particle_type[this.a] == 12)
									{
										this.enemy_statusEffect[this.c] = 1;
										this.enemy_statusEffect_atp[this.c] = 0.1;
									}
									if (this.enemy_jump[this.c] == false)
									{
										this.enemy_anim[this.c] = 5;
										this.enemy_fr[this.c] = 0;
										this.enemy_velX[this.c] = 0;
									}
									this.c = this.enemy_type.length + 1;
								}
							}
						}
						break;
					}
					case 5:
					{
						if (this.enemy_markedForRemoval[this.c] == false)
						{
							if (Math.abs(this.particle_x[this.a] - this.enemy_x[this.c]) < 25)
							{
								if (Math.abs(this.particle_y[this.a] - (this.enemy_y[this.c] - 23)) < 25)
								{
									this.bullet_dx = this.particle_x[this.a] - this.enemy_x[this.c];
									this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] - 23);
									if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 25)
									{
										this.particle_frame[this.a] = 2;
										if (this.particle_type[this.a] != 16)
										{
											this.b = 100;
										}
										this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a];
										this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
										if (this.particle_type[this.a] == 12)
										{
											this.enemy_statusEffect[this.c] = 1;
											this.enemy_statusEffect_atp[this.c] = 0.1;
										}
										this.c = this.enemy_type.length + 1;
									}
								}
							}
						}
						break;
					}
					case 6:
					{
						if (this.enemy_markedForRemoval[this.c] == false)
						{
							if (Math.abs(this.particle_x[this.a] - this.enemy_x[this.c]) < 25)
							{
								if (Math.abs(this.particle_y[this.a] - (this.enemy_y[this.c] - 50)) < 50)
								{
									if (this.enemy_face[this.c] == 0)
									{
										this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_head_x"][int(this.enemy_fr[this.c])]);
										this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_head_y"][int(this.enemy_fr[this.c])]);
										if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 20)
										{
											this.particle_frame[this.a] = 2;
											if (this.particle_type[this.a] != 16)
											{
												this.b = 100;
											}
											this.enemy_health_head[this.c] = this.enemy_health_head[this.c] - this.particle_p5[this.a];
											this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
											if (this.particle_type[this.a] == 12)
											{
												this.enemy_statusEffect[this.c] = 1;
												this.enemy_statusEffect_atp[this.c] = 0.1;
											}
											this.c = this.enemy_type.length + 1;
										}
										else
										{
											this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_body_x"][int(this.enemy_fr[this.c])]);
											this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_body_y"][int(this.enemy_fr[this.c])]);
											if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 16)
											{
												this.particle_frame[this.a] = 2;
												if (this.particle_type[this.a] != 16)
												{
													this.b = 100;
												}
												this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a];
												this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
												if (this.particle_type[this.a] == 12)
												{
													this.enemy_statusEffect[this.c] = 1;
													this.enemy_statusEffect_atp[this.c] = 0.1;
												}
												this.c = this.enemy_type.length + 1;
											}
											else
											{
												this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_foot2_x"][int(this.enemy_fr[this.c])]);
												this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_foot2_y"][int(this.enemy_fr[this.c])]);
												if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
												{
													this.particle_frame[this.a] = 2;
													if (this.particle_type[this.a] != 16)
													{
														this.b = 100;
													}
													this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
													this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
													if (this.particle_type[this.a] == 12)
													{
														this.enemy_statusEffect[this.c] = 1;
														this.enemy_statusEffect_atp[this.c] = 0.1;
													}
													this.c = this.enemy_type.length + 1;
												}
												else
												{
													this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_foot1_x"][int(this.enemy_fr[this.c])]);
													this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_foot1_y"][int(this.enemy_fr[this.c])]);
													if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
													{
														this.particle_frame[this.a] = 2;
														if (this.particle_type[this.a] != 16)
														{
															this.b = 100;
														}
														this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
														this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
														if (this.particle_type[this.a] == 12)
														{
															this.enemy_statusEffect[this.c] = 1;
															this.enemy_statusEffect_atp[this.c] = 0.1;
														}
														this.c = this.enemy_type.length + 1;
													}
												}
											}
										}
									}
									else
									{
										this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["zombieAnim_" + this.enemy_anim[this.c] + "_head_x"][int(this.enemy_fr[this.c])]);
										this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_head_y"][int(this.enemy_fr[this.c])]);
										if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 20)
										{
											this.particle_frame[this.a] = 2;
											if (this.particle_type[this.a] != 16)
											{
												this.b = 100;
											}
											this.enemy_health_head[this.c] = this.enemy_health_head[this.c] - this.particle_p5[this.a];
											this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
											if (this.particle_type[this.a] == 12)
											{
												this.enemy_statusEffect[this.c] = 1;
												this.enemy_statusEffect_atp[this.c] = 0.1;
											}
											this.c = this.enemy_type.length + 1;
										}
										else
										{
											this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["zombieAnim_" + this.enemy_anim[this.c] + "_body_x"][int(this.enemy_fr[this.c])]);
											this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_body_y"][int(this.enemy_fr[this.c])]);
											if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 16)
											{
												this.particle_frame[this.a] = 2;
												if (this.particle_type[this.a] != 16)
												{
													this.b = 100;
												}
												this.enemy_health_body[this.c] = this.enemy_health_body[this.c] - this.particle_p5[this.a];
												this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
												if (this.particle_type[this.a] == 12)
												{
													this.enemy_statusEffect[this.c] = 1;
													this.enemy_statusEffect_atp[this.c] = 0.1;
												}
												this.c = this.enemy_type.length + 1;
											}
											else
											{
												this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["zombieAnim_" + this.enemy_anim[this.c] + "_foot2_x"][int(this.enemy_fr[this.c])]);
												this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_foot2_y"][int(this.enemy_fr[this.c])]);
												if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
												{
													this.particle_frame[this.a] = 2;
													if (this.particle_type[this.a] != 16)
													{
														this.b = 100;
													}
													this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
													this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
													if (this.particle_type[this.a] == 12)
													{
														this.enemy_statusEffect[this.c] = 1;
														this.enemy_statusEffect_atp[this.c] = 0.1;
													}
													this.c = this.enemy_type.length + 1;
												}
												else
												{
													this.bullet_dx = this.particle_x[this.a] - (this.enemy_x[this.c] - this["zombieAnim_" + this.enemy_anim[this.c] + "_foot1_x"][int(this.enemy_fr[this.c])]);
													this.bullet_dy = this.particle_y[this.a] - (this.enemy_y[this.c] + this["zombieAnim_" + this.enemy_anim[this.c] + "_foot1_y"][int(this.enemy_fr[this.c])]);
													if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 12)
													{
														this.particle_frame[this.a] = 2;
														if (this.particle_type[this.a] != 16)
														{
															this.b = 100;
														}
														this.enemy_health_foot[this.c] = this.enemy_health_foot[this.c] - this.particle_p5[this.a];
														this.enemy_damagedBy[this.c] = this.particle_p3[this.a];
														if (this.particle_type[this.a] == 12)
														{
															this.enemy_statusEffect[this.c] = 1;
															this.enemy_statusEffect_atp[this.c] = 0.1;
														}
														this.c = this.enemy_type.length + 1;
													}
												}
											}
										}
									}
								}
							}
						}
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.c  ++ ;
				
			}
			return;
		}// end function
		
		public function bulletCollisions_enemy()
		{
			if (Math.abs(this.particle_x[this.a] - this.character_x) < 25)
			{
				if (Math.abs(this.particle_y[this.a] - (this.character_y - 50)) < 50)
				{
					if (this.character_face == 0)
					{
						this.bullet_dx = this.particle_x[this.a] - (this.character_x + this["charAnim_" + this.anim + "_head_x"][this.fr]);
						this.bullet_dy = this.particle_y[this.a] - (this.character_y + this["charAnim_" + this.anim + "_head_y"][this.fr]);
						if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 20)
						{
							this.particle_frame[this.a] = 2;
							this.b = 100;
							this.character_health = this.character_health - this.particle_p5[this.a];
							if (this.character_invincibleTime < 1)
							{
								if (this.jump == false)
								{
								}
								if (this.character_velX == 0)
								{
									this.character_hurtTime = 30;
									this.anim = int(Math.random() * 4) + 11;
									this.fr = 0;
									this.frOld = 0;
									this.character_velX = 0;
								}
							}
						}
						else
						{
							this.bullet_dx = this.particle_x[this.a] - (this.character_x + this["charAnim_" + this.anim + "_body_x"][this.fr]);
							this.bullet_dy = this.particle_y[this.a] - (this.character_y + this["charAnim_" + this.anim + "_body_y"][this.fr]);
							if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 16)
							{
								this.particle_frame[this.a] = 2;
								this.b = 100;
								this.character_health = this.character_health - this.particle_p5[this.a];
								if (this.character_invincibleTime < 1)
								{
									if (this.jump == false)
									{
									}
									if (this.character_velX == 0)
									{
										this.character_hurtTime = 30;
										this.anim = int(Math.random() * 4) + 15;
										this.fr = 0;
										this.frOld = 0;
										this.character_velX = 0;
									}
								}
							}
						}
					}
					else
					{
						this.bullet_dx = this.particle_x[this.a] - (this.character_x - this["charAnim_" + this.anim + "_head_x"][this.fr]);
						this.bullet_dy = this.particle_y[this.a] - (this.character_y + this["charAnim_" + this.anim + "_head_y"][this.fr]);
						if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 20)
						{
							this.particle_frame[this.a] = 2;
							this.b = 100;
							this.character_health = this.character_health - this.particle_p5[this.a];
							if (this.character_invincibleTime < 1)
							{
								if (this.jump == false)
								{
								}
								if (this.character_velX == 0)
								{
									this.character_hurtTime = 30;
									this.anim = int(Math.random() * 4) + 11;
									this.fr = 0;
									this.frOld = 0;
									this.character_velX = 0;
								}
							}
						}
						else
						{
							this.bullet_dx = this.particle_x[this.a] - (this.character_x - this["charAnim_" + this.anim + "_body_x"][this.fr]);
							this.bullet_dy = this.particle_y[this.a] - (this.character_y + this["charAnim_" + this.anim + "_body_y"][this.fr]);
							if (Math.sqrt(this.bullet_dx * this.bullet_dx + this.bullet_dy * this.bullet_dy) < 16)
							{
								this.particle_frame[this.a] = 2;
								this.b = 100;
								this.character_health = this.character_health - this.particle_p5[this.a];
								if (this.character_invincibleTime < 1)
								{
									if (this.jump == false)
									{
									}
									if (this.character_velX == 0)
									{
										this.character_hurtTime = 30;
										this.anim = int(Math.random() * 4) + 15;
										this.fr = 0;
										this.frOld = 0;
										this.character_velX = 0;
									}
								}
							}
						}
					}
				}
			}
			return;
		}// end function
		
		public function placeBloodSplatter(param1, param2, param3)
		{
			param1 = param1 + (Math.random() * 70 - 45);
			param2 = param2 + (Math.random() * 70 - 45);
			this.bloodLoop = 0;
			while (this.bloodLoop < int(Math.random() * 5))
			{
				
				this.addParticle(6, param1 + Math.random() * 70 - 35, param2 + Math.random() * 70 - 35, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() + 0.5, 0, Math.random() * 1 + 1, 0, 0, 0, 0);
				
				this.bloodLoop  ++ ;
				
			}
			if (this.levelToLoad != 4)
			{
				this.trans.createBox(Math.random() * 0.25 + 1, Math.random() * 0.25 + 1, Math.random() * 360, 100, 100);
			}
			else
			{
				this.trans.createBox(Math.random() * 0.75 + 1, Math.random() * 0.75 + 1, Math.random() * 360, 100, 100);
			}
			this.rect.x = 0;
			this.rect.y = 0;
			this.rect.width = 200;
			this.rect.height = 200;
			this.tempBloodSplatter_bm.fillRect(this.rect, 16777215);
			this.tempBloodSplatter_bm.draw(this["bloodSplatter" + int(Math.random() * 8)], this.trans);
			this.tempPoint.x = int((param1 - 100) / 50) * 50;
			this.tempPoint.y = int((param2 - 100) / 50) * 50;
			this.rect.width = 50;
			this.rect.height = 50;
			this.bloodLoop = 0;
			while (this.bloodLoop < 5)
			{
				
				this.c = 0;
				while (this.c < 5)
				{
					
					this.rect.x = this.tempPoint.x + this.c * 50;
					this.rect.y = this.tempPoint.y + this.bloodLoop * 50;
					this.tileOn = int(this.rect.y / 50) * this.level_width + int(this.rect.x / 50);
					if (this.tileOn >= 0)
					{
					}
					if (this.tileOn > (this.level.length - 1))
					{
						this.rect.x = this.rect.x - (param1 - 100);
						this.rect.y = this.rect.y - (param2 - 100);
						this.tempBloodSplatter_bm.fillRect(this.rect, 16777215);
					}
					else if (this.level_collidable[this.level[this.tileOn]] == 1)
					{
						this.rect.x = this.rect.x - (param1 - 100);
						this.rect.y = this.rect.y - (param2 - 100);
						this.tempBloodSplatter_bm.fillRect(this.rect, 16777215);
					}
					
					this.c  ++ ;
					
				}
				
				this.bloodLoop  ++ ;
				
			}
			this.trans.createBox(1, 1, 0, param1 - 100, param2 - 100);
			if (this.levelToLoad != 4)
			{
				this.level_bm.draw(this.tempBloodSplatter_bm, this.trans, null, "multiply");
			}
			else
			{
				this.level_bm.draw(this.tempBloodSplatter_bm, this.trans, null, "hardlight");
			}
			if (param3 == 0)
			{
				(this.splatterCount + 1);
				if (this.scoreTimesEarned[9] == 0)
				{
					if (this.splatterCount >= 250)
					{
						this.scoreTimesEarned[9] = 1;
						this.tempScoreQue = "";
						this.tempScoreQue = this.tempScoreQue + this.scoreNames[9];
						this.scoreTally = this.scoreTally + 25;
						this.scoreQue.push(this.tempScoreQue);
						if (this.scoreQue.length > 3)
						{
							this.scoreQue.splice(0, 1);
						}
						this.scoreQueTime = 60;
						this.multiplier_countdown = this.max_multiplier_countdown;
					}
				}
				if (this.scoreTimesEarned[10] == 0)
				{
					if (this.splatterCount >= 500)
					{
						this.scoreTimesEarned[10] = 1;
						this.tempScoreQue = "";
						this.tempScoreQue = this.tempScoreQue + this.scoreNames[10];
						this.scoreTally = this.scoreTally + 50;
						this.scoreQue.push(this.tempScoreQue);
						if (this.scoreQue.length > 3)
						{
							this.scoreQue.splice(0, 1);
						}
						this.scoreQueTime = 60;
						this.multiplier_countdown = this.max_multiplier_countdown;
					}
				}
				if (this.scoreTimesEarned[11] == 0)
				{
					if (this.splatterCount >= 1000)
					{
						this.scoreTimesEarned[11] = 1;
						this.tempScoreQue = "";
						this.tempScoreQue = this.tempScoreQue + this.scoreNames[11];
						this.scoreTally = this.scoreTally + 100;
						this.scoreQue.push(this.tempScoreQue);
						if (this.scoreQue.length > 3)
						{
							this.scoreQue.splice(0, 1);
						}
						this.scoreQueTime = 60;
						this.multiplier_countdown = this.max_multiplier_countdown;
					}
				}
			}
			return;
		}// end function
		
		public function keyHeadsUpFun()
		{
			this.trans = new Matrix();
			this.tempMc = new keyHeadsUp_mc();
			this.tempMc.key.gotoAndStop(this.k[5]);
			this.keyHeadsUp = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 166;
				this.trans.ty = 0;
				this.keyHeadsUp.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			return;
		}// end function
		
		public function render_a_character(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20)
		{
			this.interpFun(param9, 0, param10, 0);
			this.rotInterp = this.interpFinal.x;
			this.interpFun(param6, 0, param7, 0);
			this.interpFrame = this.interpFinal.x;
			if (param8 == 0)
			{
				this.interpFun(param1, param2, param3, param4);
				if (this.charAnim_hasHands[param5] == 1)
				{
					this.trans.createBox(1, 1, this["charAnim_" + param5 + "_hand1_r"][int(this.interpFrame)], this.interpFinal.x + this["charAnim_" + param5 + "_hand1_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_hand1_y"][int(this.interpFrame)]);
					this.bm.draw(this["char_hand1_" + param18], this.trans);
				}
				this.trans.createBox(1, 1, this["charAnim_" + param5 + "_foot2_r"][int(this.interpFrame)], this.interpFinal.x + this["charAnim_" + param5 + "_foot2_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_foot2_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_foot_" + param18], this.trans);
				this.trans.createBox(1, 1, this["charAnim_" + param5 + "_ankle2_r"][int(this.interpFrame)], this.interpFinal.x + this["charAnim_" + param5 + "_ankle2_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_ankle2_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_ankle_" + param18], this.trans);
				this.trans.createBox(1, 1, this["charAnim_" + param5 + "_body_r"][int(this.interpFrame)], this.interpFinal.x + this["charAnim_" + param5 + "_body_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_body_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_body_" + param18], this.trans);
				if (this.charAnim_headRot[param5] == 0)
				{
					this.tempHeadRot = param11;
					if (this.tempHeadRot < -0.75)
					{
						this.tempHeadRot = -0.75;
					}
					else if (this.tempHeadRot > 0.5)
					{
						this.tempHeadRot = 0.5;
					}
					this.trans.createBox(1, 1, this.tempHeadRot, this.interpFinal.x + this["charAnim_" + param5 + "_head_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_head_y"][int(this.interpFrame)]);
				}
				else
				{
					this.trans.createBox(1, 1, this["charAnim_" + param5 + "_head_r"][int(this.interpFrame)], this.interpFinal.x + this["charAnim_" + param5 + "_head_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_head_y"][int(this.interpFrame)]);
				}
				if (param19 == false)
				{
					this.bm.draw(this["char_head_" + param18], this.trans);
				}
				this.trans.createBox(1, 1, this["charAnim_" + param5 + "_foot1_r"][int(this.interpFrame)], this.interpFinal.x + this["charAnim_" + param5 + "_foot1_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_foot1_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_foot_" + param18], this.trans);
				this.trans.createBox(1, 1, this["charAnim_" + param5 + "_ankle1_r"][int(this.interpFrame)], this.interpFinal.x + this["charAnim_" + param5 + "_ankle1_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_ankle1_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_ankle_" + param18], this.trans);
				if (this.charAnim_hasHands[param5] == 1)
				{
					this.trans.createBox(1, 1, this["charAnim_" + param5 + "_hand2_r"][int(this.interpFrame)], this.interpFinal.x + this["charAnim_" + param5 + "_hand2_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_hand2_y"][int(this.interpFrame)]);
					this.bm.draw(this["char_hand2_" + param18], this.trans);
				}
				else
				{
					if (param20 >= 1)
					{
					}
					if (this.gun_hasReloadAnim[param16] == 0)
					{
						this.interpFun(param12, param13, param14, param15);
						this.trans.createBox(1, 1, this.rotInterp, this.interpFinal.x - this.cameraX, this.interpFinal.y - this.cameraY + this.gunShoulder_y[param16]);
						if (param18 == 0)
						{
							this.bm.draw(this["gun_" + param16 + "_right_" + this["gunFrames_" + param16][param17]], this.trans);
						}
						else
						{
							this.bm.draw(this["enemy_gun_" + (param18 - 1) + "_right_" + this["gunFrames_" + param16][param17]], this.trans);
						}
					}
					else
					{
						this.interpFun(param1, param2, param3, param4);
						this.rect.width = this.gun_reload_w[param16];
						this.rect.height = this["gun_" + param16 + "_reload_right"].height;
						this.tempPoint.x = this.interpFinal.x + this.gun_reload_x[param16];
						this.tempPoint.y = this.interpFinal.y + this.gun_reload_y[param16];
						this.rect.x = 30 - int(30 * (param20 / (this.gun_reload_time[param16] + 1)));
						if (this.rect.x < 0)
						{
							this.rect.x = 0;
						}
						else if (this.rect.x > 29)
						{
							this.rect.x = 29;
						}
						if (this.rect.x >= this.gun_magDropFrame[param16])
						{
						}
						if (this.hasDroppedMag == false)
						{
							switch(this.gun_magType[param16])
							{
								case 1:
								{
									this.playSoundEffect(49, 1, 0);
									this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * 7, Math.random() * 2, 4, 4, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 3:
								{
									this.playSoundEffect(49, 1, 0);
									this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * 7, Math.random() * 2, 4, 5, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 4:
								{
									this.b = 0;
									while (this.b < 6)
									{
										
										this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * -7, Math.random() * 2, 0, 3, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
										
										this.b  ++ ;
										
									}
									break;
								}
								case 5:
								{
									this.b = 0;
									while (this.b < 5)
									{
										
										this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * -7, Math.random() * 2, 0, 3, int(Math.random() * 3) + 10, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
										
										this.b  ++ ;
										
									}
									break;
								}
								case 6:
								{
									this.playSoundEffect(49, 1, 0);
									this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * 7, Math.random() * 2, 4, 6, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 7:
								{
									this.playSoundEffect(49, 1, 0);
									this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * 7, Math.random() * 2, 4, 7, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 8:
								{
									this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * 8 + 12, Math.random() * -8 - 6, 4, 8, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 9:
								{
									this.b = 0;
									while (this.b < 4)
									{
										
										this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * -7, Math.random() * 2, 0, 3, int(Math.random() * 3) + 10, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
										
										this.b  ++ ;
										
									}
								}
								default:
								{
									break;
								}
							}
							this.hasDroppedMag = true;
						}
						this.rect.x = this.rect.x * this.gun_reload_w[param16];
						this.rect.y = 0;
						this.bm.copyPixels(this["gun_" + param16 + "_reload_right"], this.rect, this.tempPoint, null, null, false);
					}
				}
			}
			else
			{
				if (this.charAnim_hasHands[param5] == 1)
				{
					this.interpFun(param1, param2, param3, param4);
					this.trans.createBox(-1, 1, this["charAnim_" + param5 + "_hand1_r"][int(this.interpFrame)], this.interpFinal.x - this["charAnim_" + param5 + "_hand1_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_hand1_y"][int(this.interpFrame)]);
					this.bm.draw(this["char_hand1_" + param18], this.trans);
				}
				else
				{
					if (param20 >= 1)
					{
					}
					if (this.gun_hasReloadAnim[param16] == 0)
					{
						this.interpFun(param12, param13, param14, param15);
						this.trans.createBox(1, -1, -this.rotInterp, this.interpFinal.x - this.cameraX, this.interpFinal.y - this.cameraY + this.gunShoulder_y[param16]);
						if (param18 == 0)
						{
							this.bm.draw(this["gun_" + param16 + "_left_" + this["gunFrames_" + param16][param17]], this.trans);
						}
						else
						{
							this.bm.draw(this["enemy_gun_" + (param18 - 1) + "_left_" + this["gunFrames_" + param16][param17]], this.trans);
						}
					}
					else
					{
						this.interpFun(param1, param2, param3, param4);
						this.rect.width = this.gun_reload_w[param16];
						this.rect.height = this["gun_" + param16 + "_reload_left"].height;
						this.tempPoint.x = this.interpFinal.x - this.gun_reload_x[param16] - this.gun_reload_w[param16];
						this.tempPoint.y = this.interpFinal.y + this.gun_reload_y[param16];
						this.rect.x = 30 - int(30 * (param20 / (this.gun_reload_time[param16] + 1)));
						if (this.rect.x < 0)
						{
							this.rect.x = 0;
						}
						else if (this.rect.x > 29)
						{
							this.rect.x = 29;
						}
						if (this.rect.x >= this.gun_magDropFrame[param16])
						{
						}
						if (this.hasDroppedMag == false)
						{
							switch(this.gun_magType[param16])
							{
								case 1:
								{
									this.addParticle(0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * -7, Math.random() * 2, 4, 4, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 3:
								{
									this.addParticle(0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * -7, Math.random() * 2, 4, 5, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 4:
								{
									this.b = 0;
									while (this.b < 6)
									{
										
										this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * 7, Math.random() * 2, 0, 3, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
										
										this.b  ++ ;
										
									}
									break;
								}
								case 5:
								{
									this.b = 0;
									while (this.b < 5)
									{
										
										this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * 7, Math.random() * 2, 0, 3, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
										
										this.b  ++ ;
										
									}
									break;
								}
								case 6:
								{
									this.addParticle(0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * -7, Math.random() * 2, 4, 6, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 7:
								{
									this.addParticle(0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * -7, Math.random() * 2, 4, 7, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 8:
								{
									this.addParticle(0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + (this.gun_reload_w[param16] - this.gun_reload_mag_x[param16]) + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * -8 - 12, Math.random() * -8 - 6, 4, 8, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									break;
								}
								case 9:
								{
									this.b = 0;
									while (this.b < 4)
									{
										
										this.addParticle(0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, this.tempPoint.x + this.gun_reload_mag_x[param16] + this.cameraX, this.tempPoint.y + this.gun_reload_mag_y[param16] + this.cameraY, 0, Math.random() * 7, Math.random() * 2, 0, 3, int(Math.random() * 3) + 12, (int(Math.random() * 4) + 0.25) / 10, 0, 0);
										
										this.b  ++ ;
										
									}
									break;
								}
								default:
								{
									break;
								}
							}
							this.hasDroppedMag = true;
						}
						this.rect.x = this.rect.x * this.gun_reload_w[param16];
						this.rect.y = 0;
						this.bm.copyPixels(this["gun_" + param16 + "_reload_left"], this.rect, this.tempPoint, null, null, false);
					}
				}
				this.interpFun(param1, param2, param3, param4);
				this.trans.createBox(-1, 1, this["charAnim_" + param5 + "_foot2_r"][int(this.interpFrame)], this.interpFinal.x - this["charAnim_" + param5 + "_foot2_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_foot2_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_foot_" + param18], this.trans);
				this.trans.createBox(-1, 1, this["charAnim_" + param5 + "_ankle2_r"][int(this.interpFrame)], this.interpFinal.x - this["charAnim_" + param5 + "_ankle2_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_ankle2_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_ankle_" + param18], this.trans);
				this.trans.createBox(-1, 1, this["charAnim_" + param5 + "_body_r"][int(this.interpFrame)], this.interpFinal.x - this["charAnim_" + param5 + "_body_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_body_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_body_" + param18], this.trans);
				if (this.charAnim_headRot[param5] == 0)
				{
					this.tempHeadRot = param11;
					if (this.tempHeadRot < 0)
					{
						if (this.tempHeadRot > -2.5)
						{
							this.tempHeadRot = -2.5;
						}
					}
					else if (this.tempHeadRot < 2.75)
					{
						this.tempHeadRot = 2.75;
					}
					this.trans.createBox(1, -1, -this.tempHeadRot, this.interpFinal.x - this["charAnim_" + param5 + "_head_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_head_y"][int(this.interpFrame)]);
				}
				else
				{
					this.trans.createBox(-1, 1, this["charAnim_" + param5 + "_head_r"][int(this.interpFrame)], this.interpFinal.x - this["charAnim_" + param5 + "_head_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_head_y"][int(this.interpFrame)]);
				}
				if (param19 == false)
				{
					this.bm.draw(this["char_head_" + param18], this.trans);
				}
				this.trans.createBox(-1, 1, this["charAnim_" + param5 + "_foot1_r"][int(this.interpFrame)], this.interpFinal.x - this["charAnim_" + param5 + "_foot1_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_foot1_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_foot_" + param18], this.trans);
				this.trans.createBox(-1, 1, this["charAnim_" + param5 + "_ankle1_r"][int(this.interpFrame)], this.interpFinal.x - this["charAnim_" + param5 + "_ankle1_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_ankle1_y"][int(this.interpFrame)]);
				this.bm.draw(this["char_ankle_" + param18], this.trans);
				if (this.charAnim_hasHands[param5] == 1)
				{
					this.trans.createBox(-1, 1, this["charAnim_" + param5 + "_hand2_r"][int(this.interpFrame)], this.interpFinal.x - this["charAnim_" + param5 + "_hand2_x"][int(this.interpFrame)], this.interpFinal.y + this["charAnim_" + param5 + "_hand2_y"][int(this.interpFrame)]);
					this.bm.draw(this["char_hand2_" + param18], this.trans);
				}
			}
			return;
		}// end function
		
		public function render_enemy_large1(param1, param2, param3, param4, param5, param6, param7, param8)
		{
			this.interpFun(param6, 0, param7, 0);
			this.interpFrame = this.interpFinal.x;
			if (param8 == 0)
			{
				this.interpFun(param1, param2, param3, param4);
				this.b = 0;
				while (this.b < 11)
				{
					
					this.tempPartToRender = this.enemy_large1_renderOrder[this.b];
					this.tempPartSprite = this.enemy_large1_spriteOrder[this.b];
					this.trans.createBox(1, 1, this["enemy_large1_anim" + param5 + "_" + this.tempPartToRender + "_r"][int(this.interpFrame)], this.interpFinal.x + this["enemy_large1_anim" + param5 + "_" + this.tempPartToRender + "_x"][int(this.interpFrame)], this.interpFinal.y + this["enemy_large1_anim" + param5 + "_" + this.tempPartToRender + "_y"][int(this.interpFrame)]);
					this.bm.draw(this["enemy_large1_" + this.tempPartSprite], this.trans);
					
					this.b  ++ ;
					
				}
			}
			else
			{
				this.interpFun(param1, param2, param3, param4);
				this.b = 0;
				while (this.b < 11)
				{
					
					this.tempPartToRender = this.enemy_large1_renderOrder[this.b];
					this.tempPartSprite = this.enemy_large1_spriteOrder[this.b];
					this.trans.createBox(-1, 1, this["enemy_large1_anim" + param5 + "_" + this.tempPartToRender + "_r"][int(this.interpFrame)], this.interpFinal.x - this["enemy_large1_anim" + param5 + "_" + this.tempPartToRender + "_x"][int(this.interpFrame)], this.interpFinal.y + this["enemy_large1_anim" + param5 + "_" + this.tempPartToRender + "_y"][int(this.interpFrame)]);
					this.bm.draw(this["enemy_large1_" + this.tempPartSprite], this.trans);
					
					this.b  ++ ;
					
				}
			}
			return;
		}// end function
		
		public function render_a_bean(param1, param2, param3, param4, param5, param6, param7)
		{
			this.rect.width = this.beanAnimWidth[param5];
			this.rect.height = this.beanAnimHeight[param5];
			this.rect.x = int(param6) * this.beanAnimWidth[param5];
			this.rect.y = 0;
			this.interpFun(param1, param2, param3, param4);
			this.tempPoint.x = this.interpFinal.x - this.beanAnimOrigin_x[param5] - this.cameraX;
			this.tempPoint.y = this.interpFinal.y - this.beanAnimOrigin_y[param5] - this.cameraY;
			this.bm.copyPixels(this["bean_anim" + param5 + "_" + param7], this.rect, this.tempPoint, null, null, false);
			return;
		}// end function
		
		public function render_a_teenie(param1, param2, param3, param4, param5, param6, param7)
		{
			this.rect.width = this.teenieAnimWidth[param5];
			this.rect.height = this.teenieAnimHeight[param5];
			this.rect.x = int(param6) * this.teenieAnimWidth[param5];
			this.rect.y = 0;
			this.interpFun(param1, param2, param3, param4);
			this.tempPoint.x = this.interpFinal.x - this.teenieAnimOrigin_x[param5] - this.cameraX;
			this.tempPoint.y = this.interpFinal.y - this.teenieAnimOrigin_y[param5] - this.cameraY;
			this.bm.copyPixels(this["teenie_anim" + param5 + "_" + param7], this.rect, this.tempPoint, null, null, false);
			return;
		}// end function
		
		public function render_a_zombie(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10)
		{
			this.interpFun(param6, 0, param7, 0);
			this.interpFrame = this.interpFinal.x;
			if (param8 == 0)
			{
				this.interpFun(param1, param2, param3, param4);
				this.trans.createBox(1, 1, this["zombieAnim_" + param5 + "_hand2_r"][int(this.interpFrame)], this.interpFinal.x + this["zombieAnim_" + param5 + "_hand2_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_hand2_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_hand2_" + param9], this.trans);
				this.trans.createBox(1, 1, this["zombieAnim_" + param5 + "_foot2_r"][int(this.interpFrame)], this.interpFinal.x + this["zombieAnim_" + param5 + "_foot2_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_foot2_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_foot_" + param9], this.trans);
				this.trans.createBox(1, 1, this["zombieAnim_" + param5 + "_ankle2_r"][int(this.interpFrame)], this.interpFinal.x + this["zombieAnim_" + param5 + "_ankle2_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_ankle2_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_ankle_" + param9], this.trans);
				this.trans.createBox(1, 1, this["zombieAnim_" + param5 + "_body_r"][int(this.interpFrame)], this.interpFinal.x + this["zombieAnim_" + param5 + "_body_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_body_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_body_" + param9], this.trans);
				this.trans.createBox(1, 1, this["zombieAnim_" + param5 + "_head_r"][int(this.interpFrame)], this.interpFinal.x + this["zombieAnim_" + param5 + "_head_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_head_y"][int(this.interpFrame)]);
				if (param10 == false)
				{
					this.bm.draw(this["zombie_head_" + param9], this.trans);
				}
				this.trans.createBox(1, 1, this["zombieAnim_" + param5 + "_foot1_r"][int(this.interpFrame)], this.interpFinal.x + this["zombieAnim_" + param5 + "_foot1_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_foot1_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_foot_" + param9], this.trans);
				this.trans.createBox(1, 1, this["zombieAnim_" + param5 + "_ankle1_r"][int(this.interpFrame)], this.interpFinal.x + this["zombieAnim_" + param5 + "_ankle1_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_ankle1_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_ankle_" + param9], this.trans);
				this.trans.createBox(1, 1, this["zombieAnim_" + param5 + "_hand1_r"][int(this.interpFrame)], this.interpFinal.x + this["zombieAnim_" + param5 + "_hand1_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_hand1_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_hand1_" + param9], this.trans);
			}
			else
			{
				this.interpFun(param1, param2, param3, param4);
				this.trans.createBox(-1, 1, this["zombieAnim_" + param5 + "_hand2_r"][int(this.interpFrame)], this.interpFinal.x - this["zombieAnim_" + param5 + "_hand2_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_hand2_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_hand2_" + param9], this.trans);
				this.trans.createBox(-1, 1, this["zombieAnim_" + param5 + "_foot2_r"][int(this.interpFrame)], this.interpFinal.x - this["zombieAnim_" + param5 + "_foot2_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_foot2_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_foot_" + param9], this.trans);
				this.trans.createBox(-1, 1, this["zombieAnim_" + param5 + "_ankle2_r"][int(this.interpFrame)], this.interpFinal.x - this["zombieAnim_" + param5 + "_ankle2_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_ankle2_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_ankle_" + param9], this.trans);
				this.trans.createBox(-1, 1, this["zombieAnim_" + param5 + "_body_r"][int(this.interpFrame)], this.interpFinal.x - this["zombieAnim_" + param5 + "_body_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_body_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_body_" + param9], this.trans);
				this.trans.createBox(-1, 1, this["zombieAnim_" + param5 + "_head_r"][int(this.interpFrame)], this.interpFinal.x - this["zombieAnim_" + param5 + "_head_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_head_y"][int(this.interpFrame)]);
				if (param10 == false)
				{
					this.bm.draw(this["zombie_head_" + param9], this.trans);
				}
				this.trans.createBox(-1, 1, this["zombieAnim_" + param5 + "_foot1_r"][int(this.interpFrame)], this.interpFinal.x - this["zombieAnim_" + param5 + "_foot1_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_foot1_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_foot_" + param9], this.trans);
				this.trans.createBox(-1, 1, this["zombieAnim_" + param5 + "_ankle1_r"][int(this.interpFrame)], this.interpFinal.x - this["zombieAnim_" + param5 + "_ankle1_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_ankle1_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_ankle_" + param9], this.trans);
				this.trans.createBox(-1, 1, this["zombieAnim_" + param5 + "_hand1_r"][int(this.interpFrame)], this.interpFinal.x - this["zombieAnim_" + param5 + "_hand1_x"][int(this.interpFrame)], this.interpFinal.y + this["zombieAnim_" + param5 + "_hand1_y"][int(this.interpFrame)]);
				this.bm.draw(this["zombie_hand1_" + param9], this.trans);
			}
			return;
		}// end function
		
		public function keyPressed(event:KeyboardEvent)
		{
			this.a = 0;
			while (this.a < this.k.length)
			{
				
				if (event.keyCode == this.k[this.a])
				{
					this.kD[this.a] = true;
				}
				
				this.a  ++ ;
				
			}
			return;
		}// end function
		
		public function keyUnpressed(event:KeyboardEvent)
		{
			this.a = 0;
			while (this.a < this.k.length)
			{
				
				if (event.keyCode == this.k[this.a])
				{
					this.kD[this.a] = false;
				}
				
				this.a  ++ ;
				
			}
			return;
		}// end function
		
		public function mouseWheel(event:MouseEvent) : void
		{
			if (event.delta != 0)
			{
				if (this.character_gunEquipped == this.character_weapons[0])
				{
					this.character_gunEquipped = this.character_weapons[1];
				}
				else
				{
					this.character_gunEquipped = this.character_weapons[0];
				}
			}
			return;
		}// end function
		
		public function md(event:MouseEvent)
		{
			this.mouseDown = true;
			this.cursorFrame = 1;
			if (this.pauseState == 0)
			{
				Mouse.hide();
			}
			return;
		}// end function
		
		public function mu(event:MouseEvent)
		{
			this.mouseDown = false;
			this.character_burstLength = 0;
			return;
		}// end function
		
		public function playerFun()
		{
			this.idle_x = this.character_x;
			this.idle_change_x = Math.abs(this.idle_x - this.idle_x_last);
			if (this.idle_change_x < 1)
			{
				
				this.idleTime  ++ ;
				
				if (this.stinkyBeanMode == true)
				{
					
					this.idleTime  ++ ;
					
				}
			}
			this.idle_movement = this.idle_movement + this.idle_change_x;
			this.idle_timePlus = 100 + this.idleTime;
			if (this.idle_timePlus > 800)
			{
				this.idle_timePlus = 800;
			}
			if (this.idle_movement > this.idle_timePlus)
			{
				this.idleTime = 0;
				this.idle_movement = 0;
			}
			else
			{
				
				this.idleTime  ++ ;
				
			}
			this.idle_x_last = this.idle_x;
			if (this.multiplier_countdown > 0)
			{
				if (this.enemiesOnScreen > 0)
				{
					
					this.multiplier_countdown  -- ;
					
				}
				else
				{
					this.multiplier_countdown = this.multiplier_countdown - 0.25;
				}
			}
			else
			{
				this.multiplier_countdown = 0;
				if (this.multiplier > 1)
				{
					this.score = this.score + this.scoreTally * this.multiplier;
					this.scoreQue = [];
					this.scoreTally = 0;
					this.multiplier = 1;
				}
			}
			if (this.character_hurtTime > 0)
			{
				this.character_velX = 0;
				
				this.character_hurtTime  -- ;
				
				this.character_invincibleTime = 5;
			}
			if (this.character_invincibleTime > 0)
			{
				
				this.character_invincibleTime  -- ;
				
			}
			if (this.jump == false)
			{
				if (this.character_velX != 0)
				{
					if (this.character_velX > 0)
					{
						if (this.character_face == 0)
						{
							if (this.anim != 2)
							{
								this.anim = 2;
								this.fr = 0;
								this.frOld = this.fr;
							}
						}
						else if (this.anim != 3)
						{
							this.anim = 3;
							this.fr = 0;
							this.frOld = this.fr;
						}
					}
					else if (this.character_face == 0)
					{
						if (this.anim != 3)
						{
							this.anim = 3;
							this.fr = 0;
							this.frOld = this.fr;
						}
					}
					else if (this.anim != 2)
					{
						this.anim = 2;
						this.fr = 0;
						this.frOld = this.fr;
					}
				}
				else if (this.character_hurtTime < 1)
				{
					this.tileOn = int(this.character_y / 50) * this.level_width + int((this.character_x - 15) / 50);
					if (this.level_collidable[this.level[this.tileOn]] == 0)
					{
						if (this.character_face == 1)
						{
							if (this.anim != 9)
							{
								this.anim = 9;
								this.fr = 0;
								this.frOld = this.fr;
							}
						}
						else if (this.anim != 10)
						{
							this.anim = 10;
							this.fr = 0;
							this.frOld = this.fr;
						}
					}
					else
					{
						this.tileOn = int(this.character_y / 50) * this.level_width + int((this.character_x + 15) / 50);
						if (this.level_collidable[this.level[this.tileOn]] == 0)
						{
							if (this.character_face == 1)
							{
								if (this.anim != 10)
								{
									this.anim = 10;
									this.fr = 0;
									this.frOld = this.fr;
								}
							}
							else if (this.anim != 9)
							{
								this.anim = 9;
								this.fr = 0;
								this.frOld = this.fr;
							}
						}
						else if (this.anim != 1)
						{
							this.anim = 1;
							this.fr = 0;
							this.frOld = this.fr;
						}
					}
				}
			}
			else if (this.character_velY < 0)
			{
				if (this.anim != 6)
				{
				}
				if (this.anim != 8)
				{
					if (this.character_face == 0)
					{
						if (this.kD[2] == true)
						{
							this.anim = 8;
						}
						else
						{
							this.anim = 6;
						}
					}
					else if (this.kD[3] == true)
					{
						this.anim = 8;
					}
					else
					{
						this.anim = 6;
					}
					this.fr = 0;
					this.frOld = this.fr;
				}
			}
			else if (this.anim != 7)
			{
				this.anim = 7;
				this.fr = 0;
				this.frOld = this.fr;
			}
			this.frOld = this.fr;
			this.fr = this.fr + 2;
			if (this.fr > this.maxFrames[this.anim])
			{
				if (this.anim > 10)
				{
					this.character_hurtTime = 0;
					this.anim = 1;
				}
				this.fr = 0;
				this.frOld = 0;
			}
			if (this.anim == 2)
			{
				if (this.fr != 0)
				{
				}
				if (this.fr == 14)
				{
					this.playSoundEffect(int(Math.random() * 4) + 21, 1, 0);
				}
			}
			else if (this.anim == 3)
			{
				if (this.fr != 0)
				{
				}
				if (this.fr == 10)
				{
					this.playSoundEffect(int(Math.random() * 4) + 21, 1, 0);
				}
			}
			this.character_xOld = this.character_x;
			this.character_yOld = this.character_y;
			if (this.character_hurtTime < 1)
			{
				if (this.kD[2] == true)
				{
					this.character_velX = this.character_velX - 4;
					if (this.character_velX < -this.runSpeed)
					{
						this.character_velX = -this.runSpeed;
					}
				}
				else if (this.kD[3] == true)
				{
					this.character_velX = this.character_velX + 4;
					if (this.character_velX > this.runSpeed)
					{
						this.character_velX = this.runSpeed;
					}
				}
				else if (this.character_velX > 4)
				{
					this.character_velX = this.character_velX - 4;
				}
				else if (this.character_velX < -4)
				{
					this.character_velX = this.character_velX + 4;
				}
				else
				{
					this.character_velX = 0;
				}
			}
			this.character_x = this.character_x + this.character_velX;
			if (this.character_velX < 0)
			{
				this.tileOn = int((this.character_y - 5) / 50) * this.level_width + int((this.character_x - 25) / 50);
				if (this.level_collidable[this.level[this.tileOn]] != 1)
				{
				}
				if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
				{
					this.character_x = int(this.character_x / 50) * 50 + 25;
					this.character_velX = 0;
				}
			}
			else if (this.character_velX > 0)
			{
				this.tileOn = int((this.character_y - 5) / 50) * this.level_width + int((this.character_x + 25) / 50);
				if (this.level_collidable[this.level[this.tileOn]] != 1)
				{
				}
				if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
				{
					this.character_x = int(this.character_x / 50) * 50 + 25;
					this.character_velX = 0;
				}
			}
			else
			{
				this.tileOn = int((this.character_y - 5) / 50) * this.level_width + int((this.character_x - 25) / 50);
				if (this.level_collidable[this.level[this.tileOn]] != 1)
				{
				}
				if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
				{
					this.character_x = int(this.character_x / 50) * 50 + 25;
					this.character_velX = 0;
				}
				this.tileOn = int((this.character_y - 55) / 50) * this.level_width + int((this.character_x - 25) / 50);
				if (this.level_collidable[this.level[this.tileOn]] != 1)
				{
				}
				if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
				{
					this.character_x = int(this.character_x / 50) * 50 + 25;
					this.character_velX = 0;
				}
			}
			if (this.character_hurtTime < 1)
			{
				if (this.kD[0] == true)
				{
					if (this.jump == false)
					{
						this.jump = true;
						this.character_velY = -38;
						this.releaseJump = false;
					}
				}
			}
			if (this.jump == true)
			{
				if (this.kD[0] == false)
				{
					if (this.releaseJump == false)
					{
						this.releaseJump = true;
						if (this.character_velY < -8)
						{
							this.character_velY = -8;
						}
					}
				}
				this.character_velY = this.character_velY + 2;
				if (this.character_velY > 40)
				{
					this.character_velY = 40;
				}
				this.character_y = this.character_y + this.character_velY;
				this.tileOn = int((this.character_y - 80) / 50) * this.level_width + int(this.character_x / 50);
				if (this.level_collidable[this.level[this.tileOn]] == 1)
				{
					this.character_velY = 0;
					this.character_y = int(this.character_y / 50) * 50 + 50;
				}
				this.tileOn = int(this.character_y / 50) * this.level_width + int(this.character_x / 50);
				if (this.level_collidable[this.level[this.tileOn]] == 1)
				{
					this.jump = false;
					this.character_velY = 0;
					this.character_y = int(this.character_y / 50) * 50 + 2;
					this.playSoundEffect(int(Math.random() * 4) + 21, 1, 0);
				}
				this.tileOn = int((this.character_y - 5) / 50) * this.level_width + int((this.character_x - 25) / 50);
				if (this.level_collidable[this.level[this.tileOn]] == 1)
				{
					this.character_x = int(this.character_x / 50) * 50 + 25;
					this.character_velX = 0;
				}
				this.tileOn = int((this.character_y - 5) / 50) * this.level_width + int((this.character_x + 25) / 50);
				if (this.level_collidable[this.level[this.tileOn]] == 1)
				{
					this.character_x = int(this.character_x / 50) * 50 + 25;
					this.character_velX = 0;
				}
			}
			else
			{
				this.tileOn = int(this.character_y / 50) * this.level_width + int((this.character_x - 10) / 50);
				if (this.level_collidable[this.level[this.tileOn]] == 0)
				{
					this.tileOn = int(this.character_y / 50) * this.level_width + int((this.character_x + 10) / 50);
					if (this.level_collidable[this.level[this.tileOn]] == 0)
					{
						this.jump = true;
					}
				}
			}
			this.aimFun();
			if (this.kD[4] == true)
			{
				this.kD[4] = false;
				if (this.character_gunEquipped == this.character_weapons[0])
				{
					this.character_gunEquipped = this.character_weapons[1];
				}
				else
				{
					this.character_gunEquipped = this.character_weapons[0];
				}
				this.character_gunFrame = 0;
				this.character_recoil_x = 0;
				this.character_recoil_y = 0;
				this.character_recoil_rot = 0;
				this.character_reloadTime = 0;
			}
			if (this.character_gunCoolDown > 0)
			{
				
				this.character_gunCoolDown  -- ;
				
			}
			if (this.kD[6] == true)
			{
			}
			if (this.gun_total_ammo[this.character_gunEquipped] > 0)
			{
			}
			if (this.character_reloadTime == 0)
			{
				this.kD[6] = false;
				this.hasDroppedMag = false;
				if (this.gun_ammo[this.character_gunEquipped] < this.gun_mag_size[this.character_gunEquipped])
				{
					this.character_reloadTime = this.gun_reload_time[this.character_gunEquipped];
				}
			}
			if (this.character_reloadTime > 0)
			{
				if (this.mouseDown == true)
				{
					this.playSoundEffect(20, 1, 0);
					this.mouseDown = false;
				}
				this.character_burstLength = 0;
				if (this.character_reloadTime == 1)
				{
					if (this.gun_hasReloadAnim[this.character_gunEquipped] == 1)
					{
						this.playSoundEffect(50, 1, 0);
					}
					if (this.gun_total_ammo[this.character_gunEquipped] >= this.gun_mag_size[this.character_gunEquipped])
					{
						this.gun_ammo[this.character_gunEquipped] = this.gun_mag_size[this.character_gunEquipped];
					}
					else
					{
						this.gun_ammo[this.character_gunEquipped] = this.gun_total_ammo[this.character_gunEquipped];
						this.gun_total_ammo[this.character_gunEquipped] = 0;
					}
				}
				
				this.character_reloadTime  -- ;
				
			}
			if (this.gun_ammo[this.character_gunEquipped] < 1)
			{
				if (this.character_reloadTime < 1)
				{
				}
				if (this.gun_total_ammo[this.character_gunEquipped] > 0)
				{
					this.hasDroppedMag = false;
					this.character_reloadTime = this.gun_reload_time[this.character_gunEquipped];
					this.mouseDown = false;
				}
			}
			else
			{
				if (this.character_gunEquipped == 16)
				{
				}
				if (this.mouseDown == false)
				{
				}
				if (this.character_reloadTime < 1)
				{
					
					this.gun16time  ++ ;
					
					if (this.gun16time > 1)
					{
						this.gun16time = 0;
						(this.gun_ammo[this.character_gunEquipped] + 1);
						if (this.gun_ammo[this.character_gunEquipped] > this.gun_mag_size[this.character_gunEquipped])
						{
							this.gun_ammo[this.character_gunEquipped] = this.gun_mag_size[this.character_gunEquipped];
						}
					}
				}
			}
			if (this.mouseDown == true)
			{
				if (this.character_gunCoolDown < 1)
				{
					if (this.gun_ammo[this.character_gunEquipped] > 0)
					{
					}
					if (this.character_reloadTime < 1)
					{
						this.character_gunCoolDown = this.gun_coolDown[this.character_gunEquipped];
						(this.gun_ammo[this.character_gunEquipped] - 1);
						this.character_recoil_x = this.character_recoil_x - Math.cos(this.character_gunRot) * this.gun_recoil_x[this.character_gunEquipped];
						this.character_recoil_y = this.character_recoil_y - Math.sin(this.character_gunRot) * this.gun_recoil_x[this.character_gunEquipped];
						if (this.gun_auto[this.character_gunEquipped] == 0)
						{
							this.mouseDown = false;
							this.character_recoil_rot = this.character_recoil_rot + this.gun_recoil_rot[this.character_gunEquipped];
						}
						else
						{
							
							this.character_burstLength  ++ ;
							
							if (this.character_burstLength > 30)
							{
								this.character_burstLength = 30;
							}
							this.character_recoil_rot = this.character_recoil_rot + (Math.random() * (this.gun_recoil_rot[this.character_gunEquipped] + this.character_burstLength * 0.05) * 0.5 - (this.gun_recoil_rot[this.character_gunEquipped] + this.character_burstLength * 0.05) * 0.25);
						}
						this.playSoundEffect(this.gun_sfx[this.character_gunEquipped], 1, 0);
						if (this.gun_bulletType[this.character_gunEquipped] != 9)
						{
							this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].x = this.character_gunX - this.cameraX;
							this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].y = this.character_gunY - this.cameraY + this.gunShoulder_y[this.character_gunEquipped];
							this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].rotation = this.character_gunRot * this.pi_180;
							if (this.character_face == 0)
							{
								this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].scaleY = 1;
							}
							else
							{
								this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].scaleY = -1;
							}
							this.gunFlash_pt = new Point(this.gun_barrel_x[this.character_gunEquipped], this.gun_barrel_y[this.character_gunEquipped]);
							this.gunFlash_pt = this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].localToGlobal(this.gunFlash_pt);
							this.addSimpleParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, int(Math.random() * 5), 0);
						}
						switch(this.gun_bulletType[this.character_gunEquipped])
						{
							case 0:
							{
								this.addParticle(1, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + Math.PI) * -16, Math.sin(this.character_gunRot + Math.PI) * -16, 0, int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.character_gunEquipped], this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
								break;
							}
							case 1:
							{
								this.a = 0;
								while (this.a < 4)
								{
									
									this.gunTempRand = (Math.random() - 0.5) * 0.25;
									this.gunTempSpd = 14 + Math.random() * 4;
									this.addParticle(1, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), Math.sin(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), 0, int((this.character_gunRot + this.gunTempRand + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.character_gunEquipped], this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
									
									this.a  ++ ;
									
								}
								break;
							}
							case 2:
							{
								this.a = 0;
								while (this.a < 5)
								{
									
									this.gunTempRand = (Math.random() - 0.5) * 0.3;
									this.gunTempSpd = 14 + Math.random() * 4;
									this.addParticle(1, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), Math.sin(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), 0, int((this.character_gunRot + this.gunTempRand + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.character_gunEquipped], this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
									
									this.a  ++ ;
									
								}
								break;
							}
							case 4:
							{
								(this.gun_ammo[this.character_gunEquipped] - 1);
								this.a = 0;
								while (this.a < 5)
								{
									
									this.gunTempRand = (Math.random() - 0.5) * 0.6;
									this.gunTempSpd = 14 + Math.random() * 4;
									this.addParticle(1, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), Math.sin(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), 0, int((this.character_gunRot + this.gunTempRand + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.character_gunEquipped], this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
									
									this.a  ++ ;
									
								}
								this.gunFlash_pt = new Point(this.gun_barrel_x[this.character_gunEquipped], this.gun_barrel_y[this.character_gunEquipped] + 10);
								this.gunFlash_pt = this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].localToGlobal(this.gunFlash_pt);
								this.addSimpleParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, int(Math.random() * 5), 0);
								this.a = 0;
								while (this.a < 5)
								{
									
									this.gunTempRand = (Math.random() - 0.5) * 0.6;
									this.gunTempSpd = 14 + Math.random() * 4;
									this.addParticle(1, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), Math.sin(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), 0, int((this.character_gunRot + this.gunTempRand + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.character_gunEquipped], this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
									
									this.a  ++ ;
									
								}
								break;
							}
							case 5:
							{
								this.addParticle(12, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + Math.PI) * -16, Math.sin(this.character_gunRot + Math.PI) * -16, 0, int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.character_gunEquipped], 0, 0, this.gun_atp[this.character_gunEquipped]);
								break;
							}
							case 7:
							{
								if (this.character_gunFrame == 0)
								{
									this.addParticle(16, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + Math.PI) * -16, Math.sin(this.character_gunRot + Math.PI) * -16, 0, int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 64), 0, this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
								}
								else
								{
									this.addParticle(16, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + Math.PI) * -16, Math.sin(this.character_gunRot + Math.PI) * -16, 0, int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 64), 0, this.character_gunEquipped, 0, this.character_gunFrame / this["gunFrames_" + this.character_gunEquipped].length * this.gun_atp[this.character_gunEquipped]);
								}
								break;
							}
							case 8:
							{
								this.addParticle(14, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + Math.PI) * -16, Math.sin(this.character_gunRot + Math.PI) * -16, 0, int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 64), 0, this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
								break;
							}
							case 9:
							{
								this.addParticle(15, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + Math.PI) * -30, Math.sin(this.character_gunRot + Math.PI) * -30, 0, int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 64), 0, this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
								break;
							}
							case 10:
							{
								this.addParticle(18, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + Math.PI) * -16, Math.sin(this.character_gunRot + Math.PI) * -16, 0, int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 64), 0, this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
								break;
							}
							case 11:
							{
								this.a = -1;
								while (this.a < 2)
								{
									
									this.addParticle(18, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + this.a * 0.25 + Math.PI) * -16, Math.sin(this.character_gunRot + this.a * 0.25 + Math.PI) * -16, 0, int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 64), 0, this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
									
									this.a  ++ ;
									
								}
								break;
							}
							case 12:
							{
								this.a = -1;
								while (this.a < 2)
								{
									
									this.addParticle(14, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + this.a * 0.18 + Math.PI) * -16, Math.sin(this.character_gunRot + this.a * 0.18 + Math.PI) * -16, 0, int((this.character_gunRot + this.a * 0.18 + Math.PI) / (Math.PI * 2) * 64), 0, this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
									
									this.a  ++ ;
									
								}
								break;
							}
							case 13:
							{
								this.a = 0;
								while (this.a < 10)
								{
									
									this.gunTempRand = (Math.random() - 0.5) * 0.3;
									this.gunTempSpd = 24 + Math.random() * 8;
									this.addParticle(15, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), Math.sin(this.character_gunRot + this.gunTempRand + Math.PI) * (-this.gunTempSpd), 0, int((this.character_gunRot + this.gunTempRand + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.character_gunEquipped], this.character_gunEquipped, 0, this.gun_atp[this.character_gunEquipped]);
									
									this.a  ++ ;
									
								}
								break;
							}
							default:
							{
								break;
							}
						}
						this.character_gunFrame = 1;
					}
				}
			}
			if (this.character_gunFrame > 0)
			{
				
				this.character_gunFrame  ++ ;
				
				if (this.character_gunFrame == this.gun_frameToEjectShellOn[this.character_gunEquipped])
				{
					this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].x = this.character_gunX - this.cameraX;
					this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].y = this.character_gunY - this.cameraY + this.gunShoulder_y[this.character_gunEquipped];
					this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].rotation = this.character_gunRot * this.pi_180;
					if (this.character_face == 0)
					{
						this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].scaleY = 1;
					}
					else
					{
						this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].scaleY = -1;
					}
					this.gunFlash_pt = new Point(this.gun_eject_x[this.character_gunEquipped], this.gun_eject_y[this.character_gunEquipped]);
					this.gunFlash_pt = this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].localToGlobal(this.gunFlash_pt);
					this.gunTempSpd = 20 + Math.random() * 4;
					if (this.character_face == 0)
					{
						this.addParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, Math.cos(this.character_gunRot - 2) * this.gunTempSpd, Math.sin(this.character_gunRot - 2) * this.gunTempSpd, 0, int(this.gun_casingType[this.character_gunEquipped]), int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 16), (int(Math.random() * 4) + 0.25) / 10, 0, 0);
					}
					else
					{
						this.addParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, Math.cos(this.character_gunRot + 2) * this.gunTempSpd, Math.sin(this.character_gunRot + 2) * this.gunTempSpd, 0, int(this.gun_casingType[this.character_gunEquipped]), int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 16), (int(Math.random() * 4) + 0.25) / 10, 0, 0);
					}
					if (this.gun_bulletType[this.character_gunEquipped] == 4)
					{
						this.gunFlash_pt = new Point(this.gun_eject_x[this.character_gunEquipped] - 5, this.gun_eject_y[this.character_gunEquipped]);
						this.gunFlash_pt = this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].localToGlobal(this.gunFlash_pt);
						this.gunTempSpd = 15 + Math.random() * 4;
						if (this.character_face == 0)
						{
							this.addParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, Math.cos(this.character_gunRot - 2) * this.gunTempSpd, Math.sin(this.character_gunRot - 2) * this.gunTempSpd, 0, int(this.gun_casingType[this.character_gunEquipped]), int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 16), (int(Math.random() * 4) + 0.25) / 10, 0, 0);
						}
						else
						{
							this.addParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.character_gunRot, Math.cos(this.character_gunRot + 2) * this.gunTempSpd, Math.sin(this.character_gunRot + 2) * this.gunTempSpd, 0, int(this.gun_casingType[this.character_gunEquipped]), int((this.character_gunRot + Math.PI) / (Math.PI * 2) * 16), (int(Math.random() * 4) + 0.25) / 10, 0, 0);
						}
					}
				}
				if (this.character_gunFrame > (this["gunFrames_" + this.character_gunEquipped].length - 1))
				{
					this.character_gunFrame = 0;
				}
			}
			if (this.noRecoil == true)
			{
				this.character_recoil_x = 0;
				this.character_recoil_y = 0;
				this.character_recoil_rot = 0;
				this.character_gunCoolDown = 0;
				this.gun_auto[this.character_gunEquipped] = 1;
				this.gun_coolDown[this.character_gunEquipped] = 1;
				this.gun_ammo[this.character_gunEquipped] = 1000;
				this.gun_mag_size[this.character_gunEquipped] = 1000;
			}
			if (this.character_recoil_rot != 0)
			{
				this.recoilRotVel = this.recoilRotVel + this.character_recoil_rot * 0.95;
				this.character_recoil_rot = this.character_recoil_rot - this.recoilRotVel;
				this.character_recoil_rot = this.character_recoil_rot * this.gun_recoil_dampening[this.character_gunEquipped];
				if (Math.abs(this.recoilRotVel) < 0.01)
				{
					this.recoilRotVel = 0;
					this.character_recoil_rot = 0;
				}
			}
			if (this.character_recoil_x != 0)
			{
				this.character_recoil_x = this.character_recoil_x * this.gun_recoil_xRecover[this.character_gunEquipped];
				if (Math.abs(this.character_recoil_x) < 0.01)
				{
					this.character_recoil_x = 0;
				}
			}
			if (this.character_recoil_y != 0)
			{
				this.character_recoil_y = this.character_recoil_y * this.gun_recoil_xRecover[this.character_gunEquipped];
				if (Math.abs(this.character_recoil_y) < 0.01)
				{
					this.character_recoil_y = 0;
				}
			}
			this.aimPanOld = this.aimPan;
			if (this.character_face == 0)
			{
				if (this.aimPan < 100)
				{
					this.aimPan = this.aimPan - (this.aimPan - 100) * 0.25;
				}
				else
				{
					this.aimPan = 100;
				}
			}
			else if (this.aimPan > -100)
			{
				this.aimPan = this.aimPan - (this.aimPan - -100) * 0.25;
			}
			else
			{
				this.aimPan = -100;
			}
			return;
		}// end function
		
		public function aimFun()
		{
			this.character_gunRotOld = this.character_gunRot;
			this.character_gunXOld = this.character_gunX;
			this.character_gunYOld = this.character_gunY;
			this.character_gunX = mc.mouseX + this.cameraX;
			this.character_gunY = mc.mouseY + this.cameraY - this.gunShoulder_y[this.character_gunEquipped];
			if (this.character_gunX > this.character_x + this["charAnim_" + this.anim + "_body_x"][int(this.fr)])
			{
				if (this.character_face == 1)
				{
					this.character_face = 0;
					if (this.character_gunRot > 0)
					{
						if (this.character_gunRot > Math.PI * 0.5)
						{
							this.character_gunRot = 0;
						}
					}
					else if (this.character_gunRot < (-Math.PI) * 0.5)
					{
						this.character_gunRot = 0;
					}
					this.character_gunRotOld = this.character_gunRot;
				}
			}
			else if (this.character_face == 0)
			{
				this.character_face = 1;
				if (this.character_gunRot > 0)
				{
					if (this.character_gunRot < Math.PI * 0.5)
					{
						this.character_gunRot = -Math.PI;
					}
				}
				else if (this.character_gunRot > (-Math.PI) * 0.5)
				{
					this.character_gunRot = -Math.PI;
				}
				this.character_gunRotOld = this.character_gunRot;
			}
			this.d = this.gun_dist[this.character_gunEquipped];
			if (this.character_face == 0)
			{
				this.character_gunX = mc.mouseX + this.cameraX + this.character_recoil_x;
				this.character_gunY = mc.mouseY + this.cameraY - this.gunShoulder_y[this.character_gunEquipped] + this.character_recoil_y;
				this.character_gunDX = this.character_gunX - (this.character_x + this["charAnim_" + this.anim + "_body_x"][int(this.fr)]);
				this.character_gunDY = this.character_gunY - (this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)]);
				this.radTo = Math.atan2(this.character_gunDY, this.character_gunDX);
				this.character_headRot = this.radTo;
				this.radTo = this.radTo + this.character_recoil_rot;
				this.character_gunRot = this.character_gunRot - (this.character_gunRot - this.radTo) / 3;
				if (Math.sqrt(this.character_gunDX * this.character_gunDX + this.character_gunDY * this.character_gunDY) > this.d)
				{
					this.character_gunX = this.character_x + this["charAnim_" + this.anim + "_body_x"][int(this.fr)] + Math.cos(this.character_gunRot) * this.d + this.character_recoil_x;
					this.character_gunY = this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)] + Math.sin(this.character_gunRot) * this.d + this.character_recoil_y;
				}
				else
				{
					this.d = Math.sqrt(this.character_gunDX * this.character_gunDX + this.character_gunDY * this.character_gunDY);
				}
				this.character_gunX = this.character_x + this["charAnim_" + this.anim + "_body_x"][int(this.fr)] + this.character_recoil_x;
				this.character_gunY = this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)] + this.character_recoil_y;
				this.getBarrelPoint();
				this.b = 0;
				this.tileOn = int((this.gunFlash_pt.y + this.cameraY) / 50) * this.level_width + int((this.gunFlash_pt.x + this.cameraX) / 50);
				if (this.level_collidable[this.level[this.tileOn]] == 0)
				{
					do
					{
						
						this.character_gunX = this.character_gunX + Math.cos(this.character_gunRot) * 2;
						this.character_gunY = this.character_gunY + Math.sin(this.character_gunRot) * 2;
						this.getBarrelPoint();
						this.tileOn = int((this.gunFlash_pt.y + this.cameraY) / 50) * this.level_width + int((this.gunFlash_pt.x + this.cameraX) / 50);
						this.b = this.b + 2;
						if (this.level_collidable[this.level[this.tileOn]] == 0)
						{
						}
					}while (this.b < this.d)
				}
			}
			else
			{
				this.character_gunX = mc.mouseX + this.cameraX + this.character_recoil_x;
				this.character_gunY = mc.mouseY + this.cameraY - this.gunShoulder_y[this.character_gunEquipped] + this.character_recoil_y;
				this.character_gunDX = this.character_gunX - (this.character_x - this["charAnim_" + this.anim + "_body_x"][int(this.fr)]);
				this.character_gunDY = this.character_gunY - (this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)]);
				this.radTo = Math.atan2(this.character_gunDY, this.character_gunDX);
				this.character_headRot = this.radTo;
				this.radTo = this.radTo - this.character_recoil_rot;
				if (this.radTo > this.character_gunRot + Math.PI)
				{
					this.character_gunRot = this.character_gunRot + Math.PI * 2;
					this.character_gunRotOld = this.character_gunRot;
				}
				if (this.radTo < this.character_gunRot - Math.PI)
				{
					this.character_gunRot = this.character_gunRot - Math.PI * 2;
					this.character_gunRotOld = this.character_gunRot;
				}
				this.character_gunRot = this.character_gunRot - (this.character_gunRot - this.radTo) / 3;
				if (Math.sqrt(this.character_gunDX * this.character_gunDX + this.character_gunDY * this.character_gunDY) > this.d)
				{
					this.character_gunX = this.character_x - this["charAnim_" + this.anim + "_body_x"][int(this.fr)] + Math.cos(this.character_gunRot) * this.d + this.character_recoil_x;
					this.character_gunY = this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)] + Math.sin(this.character_gunRot) * this.d + this.character_recoil_y;
				}
				this.character_gunX = this.character_x - this["charAnim_" + this.anim + "_body_x"][int(this.fr)] + this.character_recoil_x;
				this.character_gunY = this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)] + this.character_recoil_y;
				this.getBarrelPoint();
				this.b = 0;
				this.tileOn = int((this.gunFlash_pt.y + this.cameraY) / 50) * this.level_width + int((this.gunFlash_pt.x + this.cameraX) / 50);
				if (this.level_collidable[this.level[this.tileOn]] == 0)
				{
					do
					{
						
						this.character_gunX = this.character_gunX + Math.cos(this.character_gunRot) * 2;
						this.character_gunY = this.character_gunY + Math.sin(this.character_gunRot) * 2;
						this.getBarrelPoint();
						this.tileOn = int((this.gunFlash_pt.y + this.cameraY) / 50) * this.level_width + int((this.gunFlash_pt.x + this.cameraX) / 50);
						this.b = this.b + 2;
						if (this.level_collidable[this.level[this.tileOn]] == 0)
						{
						}
					}while (this.b < this.d)
				}
			}
			return;
		}// end function
		
		public function getBarrelPoint()
		{
			this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].x = this.character_gunX - this.cameraX;
			this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].y = this.character_gunY - this.cameraY + this.gunShoulder_y[this.character_gunEquipped];
			this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].rotation = this.character_gunRot * this.pi_180;
			if (this.character_face == 0)
			{
				this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].scaleY = 1;
			}
			else
			{
				this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].scaleY = -1;
			}
			this.gunFlash_pt = new Point(this.gun_barrel_x[this.character_gunEquipped], this.gun_barrel_y[this.character_gunEquipped]);
			this.gunFlash_pt = this["gun_" + this.character_gunEquipped + "_right_" + this["gunFrames_" + this.character_gunEquipped][this.character_gunFrame]].localToGlobal(this.gunFlash_pt);
			return;
		}// end function
		
		public function playerFun_intro()
		{
			this.frOld = this.fr;
			this.fr = this.fr + 2;
			if (this.fr > this.maxFrames[this.anim])
			{
				this.fr = 0;
				this.frOld = 0;
			}
			this.aimFun2();
			return;
		}// end function
		
		public function aimFun2()
		{
			this.character_gunRotOld = this.character_gunRot;
			this.character_gunXOld = this.character_gunX;
			this.character_gunYOld = this.character_gunY;
			this.character_gunX = this.character_x + 100;
			this.character_gunY = this.character_y - 30;
			this.d = this.gun_dist[this.character_gunEquipped];
			if (this.character_face == 0)
			{
				this.character_gunX = this.character_x + 100;
				this.character_gunY = this.character_y - 30;
				this.character_gunDX = this.character_gunX - (this.character_x + this["charAnim_" + this.anim + "_body_x"][int(this.fr)]);
				this.character_gunDY = this.character_gunY - (this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)]);
				this.radTo = Math.atan2(this.character_gunDY, this.character_gunDX);
				this.character_headRot = this.radTo;
				this.radTo = this.radTo + this.character_recoil_rot;
				this.character_gunRot = this.character_gunRot - (this.character_gunRot - this.radTo) / 3;
				if (Math.sqrt(this.character_gunDX * this.character_gunDX + this.character_gunDY * this.character_gunDY) > this.d)
				{
					this.character_gunX = this.character_x + this["charAnim_" + this.anim + "_body_x"][int(this.fr)] + Math.cos(this.character_gunRot) * this.d + this.character_recoil_x;
					this.character_gunY = this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)] + Math.sin(this.character_gunRot) * this.d + this.character_recoil_y;
				}
				else
				{
					this.d = Math.sqrt(this.character_gunDX * this.character_gunDX + this.character_gunDY * this.character_gunDY);
				}
			}
			return;
		}// end function
		
		public function addEnemy(param1, param2, param3, param4, param5, param6, param7)
		{
			this.enemy_type.push(param1);
			this.enemy_health_head.push(param2);
			this.enemy_health_body.push(param3);
			this.enemy_health_foot.push(param4);
			this.enemy_health_headMax.push(param2);
			this.enemy_health_bodyMax.push(param3);
			this.enemy_health_footMax.push(param4);
			this.enemy_health_headOld.push(param2);
			this.enemy_health_bodyOld.push(param3);
			this.enemy_health_footOld.push(param4);
			this.enemy_damagedBy.push(0);
			this.enemy_spriteSet.push(param5);
			this.enemy_face.push(0);
			this.enemy_anim.push(1);
			this.enemy_fr.push(0);
			this.enemy_frOld.push(0);
			this.enemy_x.push(param6);
			this.enemy_y.push(param7);
			this.enemy_xOld.push(param6);
			this.enemy_yOld.push(param7);
			this.enemy_velX.push(0);
			this.enemy_velY.push(0);
			this.enemy_jump.push(false);
			this.enemy_gunX.push(param6);
			this.enemy_gunY.push(param7 - 50);
			this.enemy_gunXOld.push(param6);
			this.enemy_gunYOld.push(param7 - 50);
			this.enemy_gunRot.push(0);
			this.enemy_gunRotOld.push(0);
			this.enemy_headRot.push(0);
			this.enemy_radTo.push(0);
			this.enemy_gunEquipped.push(this.enemyWeapons[(param5 - 1)]);
			this.enemy_recoil_rot.push(0);
			this.enemy_recoil_rotVel.push(0);
			this.enemy_recoil_x.push(0);
			this.enemy_recoil_y.push(0);
			this.enemy_gunCoolDown.push(0);
			this.enemy_gunFrame.push(0);
			this.enemy_burstLength.push(0);
			this.enemy_engagementDistance.push(Math.random() * 100 + 100);
			this.enemy_lineOfSightTimer.push(0);
			this.enemy_nextNode.push(-1);
			this.enemy_aiState.push(0);
			this.enemy_maxJumpHeight.push(0);
			this.enemy_hasLineOfSight.push(false);
			this.enemy_lineOfSightCountdown.push(0);
			this.enemy_markedForRemoval.push(false);
			this.enemy_isHeadless.push(false);
			this.enemy_statusEffect.push(0);
			this.enemy_statusEffect_atp.push(0);
			this.enemy_inacc_x.push(0);
			this.enemy_inacc_y.push(0);
			this.enemy_inacc_x_target.push(0);
			this.enemy_inacc_y_target.push(0);
			this.enemy_initialized.push(0);
			return;
		}// end function
		
		public function removeEnemy(param1)
		{
			this.enemy_type.splice(param1, 1);
			this.enemy_health_head.splice(param1, 1);
			this.enemy_health_body.splice(param1, 1);
			this.enemy_health_foot.splice(param1, 1);
			this.enemy_health_headMax.splice(param1, 1);
			this.enemy_health_bodyMax.splice(param1, 1);
			this.enemy_health_footMax.splice(param1, 1);
			this.enemy_health_headOld.splice(param1, 1);
			this.enemy_health_bodyOld.splice(param1, 1);
			this.enemy_health_footOld.splice(param1, 1);
			this.enemy_damagedBy.splice(param1, 1);
			this.enemy_spriteSet.splice(param1, 1);
			this.enemy_face.splice(param1, 1);
			this.enemy_anim.splice(param1, 1);
			this.enemy_fr.splice(param1, 1);
			this.enemy_frOld.splice(param1, 1);
			this.enemy_x.splice(param1, 1);
			this.enemy_y.splice(param1, 1);
			this.enemy_xOld.splice(param1, 1);
			this.enemy_yOld.splice(param1, 1);
			this.enemy_velX.splice(param1, 1);
			this.enemy_velY.splice(param1, 1);
			this.enemy_jump.splice(param1, 1);
			this.enemy_gunX.splice(param1, 1);
			this.enemy_gunY.splice(param1, 1);
			this.enemy_gunXOld.splice(param1, 1);
			this.enemy_gunYOld.splice(param1, 1);
			this.enemy_gunRot.splice(param1, 1);
			this.enemy_gunRotOld.splice(param1, 1);
			this.enemy_headRot.splice(param1, 1);
			this.enemy_radTo.splice(param1, 1);
			this.enemy_gunEquipped.splice(param1, 1);
			this.enemy_recoil_rot.splice(param1, 1);
			this.enemy_recoil_rotVel.splice(param1, 1);
			this.enemy_recoil_x.splice(param1, 1);
			this.enemy_recoil_y.splice(param1, 1);
			this.enemy_gunCoolDown.splice(param1, 1);
			this.enemy_gunFrame.splice(param1, 1);
			this.enemy_burstLength.splice(param1, 1);
			this.enemy_engagementDistance.splice(param1, 1);
			this.enemy_lineOfSightTimer.splice(param1, 1);
			this.enemy_nextNode.splice(param1, 1);
			this.enemy_aiState.splice(param1, 1);
			this.enemy_maxJumpHeight.splice(param1, 1);
			this.enemy_hasLineOfSight.splice(param1, 1);
			this.enemy_lineOfSightCountdown.splice(param1, 1);
			this.enemy_markedForRemoval.splice(param1, 1);
			this.enemy_isHeadless.splice(param1, 1);
			this.enemy_statusEffect.splice(param1, 1);
			this.enemy_statusEffect_atp.splice(param1, 1);
			this.enemy_inacc_x.splice(param1, 1);
			this.enemy_inacc_y.splice(param1, 1);
			this.enemy_inacc_x_target.splice(param1, 1);
			this.enemy_inacc_y_target.splice(param1, 1);
			this.enemy_initialized.splice(param1, 1);
			return;
		}// end function
		
		public function enemyLogic()
		{
			
			this.timePassed  ++ ;
			
			if (this.stinkyBeanMode == true)
			{
				if (this.timePassed > 150)
				{
					if (this.maxNumOfEnemies < 6)
					{
						this.maxNumOfEnemies = 6;
					}
					this.maxNumOfEnemies_forReal = 6;
				}
				if (this.timePassed > 450)
				{
					if (this.maxNumOfEnemies < 8)
					{
						this.maxNumOfEnemies = 8;
					}
					this.maxNumOfEnemies_forReal = 8;
				}
				if (this.timePassed > 900)
				{
					if (this.maxNumOfEnemies < 10)
					{
						this.maxNumOfEnemies = 10;
					}
					this.maxNumOfEnemies_forReal = 10;
				}
				if (this.timePassed > 1800)
				{
					if (this.maxNumOfEnemies < 12)
					{
						this.maxNumOfEnemies = 12;
					}
					this.maxNumOfEnemies_forReal = 12;
				}
				if (this.timePassed > 2100)
				{
					if (this.maxNumOfEnemies < 14)
					{
						this.maxNumOfEnemies = 14;
					}
					this.maxNumOfEnemies_forReal = 14;
				}
				if (this.timePassed > 3600)
				{
					if (this.maxNumOfEnemies < 16)
					{
						this.maxNumOfEnemies = 16;
					}
					this.maxNumOfEnemies_forReal = 16;
				}
			}
			else if (this.zombieMode == true)
			{
				if (this.timePassed > 150)
				{
					if (this.maxNumOfEnemies < 6)
					{
						this.maxNumOfEnemies = 6;
					}
					this.maxNumOfEnemies_forReal = 6;
				}
				if (this.timePassed > 450)
				{
					if (this.maxNumOfEnemies < 8)
					{
						this.maxNumOfEnemies = 8;
					}
					this.maxNumOfEnemies_forReal = 8;
				}
				if (this.timePassed > 900)
				{
					if (this.maxNumOfEnemies < 10)
					{
						this.maxNumOfEnemies = 10;
					}
					this.maxNumOfEnemies_forReal = 10;
				}
				if (this.timePassed > 1800)
				{
					if (this.maxNumOfEnemies < 12)
					{
						this.maxNumOfEnemies = 12;
					}
					this.maxNumOfEnemies_forReal = 12;
				}
				if (this.timePassed > 2100)
				{
					if (this.maxNumOfEnemies < 14)
					{
						this.maxNumOfEnemies = 14;
					}
					this.maxNumOfEnemies_forReal = 14;
				}
				if (this.timePassed > 3600)
				{
					if (this.maxNumOfEnemies < 16)
					{
						this.maxNumOfEnemies = 16;
					}
					this.maxNumOfEnemies_forReal = 16;
				}
			}
			else
			{
				if (this.timePassed > 450)
				{
					if (this.maxNumOfEnemies < 4)
					{
						this.maxNumOfEnemies = 4;
					}
					this.maxNumOfEnemies_forReal = 4;
				}
				if (this.timePassed > 900)
				{
					if (this.maxNumOfEnemies < 5)
					{
						this.maxNumOfEnemies = 5;
					}
					this.maxNumOfEnemies_forReal = 5;
				}
				if (this.timePassed > 1800)
				{
					if (this.maxNumOfEnemies < 6)
					{
						this.maxNumOfEnemies = 6;
					}
					this.maxNumOfEnemies_forReal = 6;
				}
				if (this.timePassed > 2100)
				{
					if (this.maxNumOfEnemies < 7)
					{
						this.maxNumOfEnemies = 7;
					}
					this.maxNumOfEnemies_forReal = 7;
				}
				if (this.timePassed > 3600)
				{
					if (this.maxNumOfEnemies < 8)
					{
						this.maxNumOfEnemies = 8;
					}
					this.maxNumOfEnemies_forReal = 8;
				}
			}
			this.tempNumOfEnemies = 0;
			this.a = 0;
			while (this.a < this.enemy_type.length)
			{
				
				if (this.enemy_type[this.a] != 1)
				{
				}
				if (this.enemy_type[this.a] != 4)
				{
				}
				if (this.enemy_type[this.a] != 5)
				{
				}
				if (this.enemy_type[this.a] == 6)
				{
					
					this.tempNumOfEnemies  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			if (this.tempNumOfEnemies < this.maxNumOfEnemies)
			{
				if (this.maxNumOfEnemies < 9)
				{
					if (this.tempNumOfEnemies == 0)
					{
						this.c = 0;
					}
					else
					{
						this.c = int(Math.random() * 20);
					}
					if (this.idleTime > 500)
					{
						this.c = 1;
					}
				}
				else
				{
					this.c = 0;
					if (this.isHackedVersion == false)
					{
						if (this.idleTime > 500)
						{
							this.c = 1;
						}
					}
				}
				if (this.c == 0)
				{
					this.d = int(Math.random() * 2);
					if (this.d == 0)
					{
						if (this.cameraX + this.screenWidth + 250 < this.level_width * 50)
						{
							this.a = -5;
							while (this.a < 3)
							{
								
								this.tileOn = int((this.character_y - 10 + this.a * 50) / 50) * this.level_width + int((this.cameraX + this.screenWidth + 250) / 50);
								if (this.tileOn > 0)
								{
								}
								if (this.level_collidable[this.level[this.tileOn]] == 0)
								{
								}
								if (this.level_collidable[this.level[this.tileOn + this.level_width]] == 1)
								{
								}
								if (this.cameraX + this.screenWidth + 250 < this.level_width * 50)
								{
									if (this.stinkyBeanMode == true)
									{
										this.e = Math.random() * 3;
										if (this.e == 0)
										{
											this.addEnemy(5, 1, 1, 1, (int(Math.random() * 5) + 1), int((this.cameraX + this.screenWidth + 250) / 50) * 50 + 25, this.character_y - 10 + this.a * 50);
										}
										else
										{
											this.addEnemy(4, 5, 5, 5, (int(Math.random() * 5) + 1), int((this.cameraX + this.screenWidth + 250) / 50) * 50 + 25, this.character_y - 10 + this.a * 50);
										}
									}
									else if (this.zombieMode == true)
									{
										this.addEnemy(6, 7, 7, 7, int(Math.random() * 6), int((this.cameraX + this.screenWidth + 250) / 50) * 50 + 25, this.character_y - 10 + this.a * 50);
									}
									else
									{
										this.addEnemy(1, 5, 5, 5, (int(Math.random() * 5) + 1), int((this.cameraX + this.screenWidth + 250) / 50) * 50 + 25, this.character_y - 10 + this.a * 50);
									}
									this.a = 10;
								}
								
								this.a  ++ ;
								
							}
						}
					}
					else if (this.cameraX - 250 > 0)
					{
						this.a = -5;
						while (this.a < 3)
						{
							
							this.tileOn = int((this.character_y - 10 + this.a * 50) / 50) * this.level_width + int((this.cameraX - 250) / 50);
							if (this.tileOn > 0)
							{
							}
							if (this.level_collidable[this.level[this.tileOn]] == 0)
							{
							}
							if (this.level_collidable[this.level[this.tileOn + this.level_width]] == 1)
							{
							}
							if (this.cameraX - 250 > 0)
							{
								if (this.stinkyBeanMode == true)
								{
									this.e = Math.random() * 3;
									if (this.e == 0)
									{
										this.addEnemy(5, 1, 1, 1, (int(Math.random() * 5) + 1), int((this.cameraX - 250) / 50) * 50 + 25, this.character_y - 10 + this.a * 50);
									}
									else
									{
										this.addEnemy(4, 5, 5, 5, (int(Math.random() * 5) + 1), int((this.cameraX - 250) / 50) * 50 + 25, this.character_y - 10 + this.a * 50);
									}
								}
								else if (this.zombieMode == true)
								{
									this.addEnemy(6, 7, 7, 7, int(Math.random() * 6), int((this.cameraX - 250) / 50) * 50 + 25, this.character_y - 10 + this.a * 50);
								}
								else
								{
									this.addEnemy(1, 5, 5, 5, (int(Math.random() * 5) + 1), int((this.cameraX - 250) / 50) * 50 + 25, this.character_y - 10 + this.a * 50);
								}
								this.a = 10;
							}
							
							this.a  ++ ;
							
						}
					}
				}
			}
			if (this.multiKillTime < 1)
			{
				this.multiKillCount = 0;
			}
			else
			{
				
				this.multiKillTime  -- ;
				
			}
			this.a = 0;
			while (this.a < this.enemy_type.length)
			{
				
				switch(this.enemy_type[this.a])
				{
					case 1:
					{
						if (this.enemy_health_body[this.a] > 0)
						{
						}
						if (this.enemy_health_head[this.a] > 0)
						{
						}
						if (this.enemy_health_foot[this.a] > 0)
						{
							if (this.enemy_statusEffect[this.a] == 1)
							{
								this.enemy_health_head[this.a] = this.enemy_health_head[this.a] - this.enemy_statusEffect_atp[this.a];
								this.enemy_health_body[this.a] = this.enemy_health_body[this.a] - this.enemy_statusEffect_atp[this.a] * 0.95;
								this.enemy_health_headOld[this.a] = this.enemy_health_head[this.a];
								this.enemy_health_bodyOld[this.a] = this.enemy_health_body[this.a];
								this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40 - 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
								this.c = int(Math.random() * 2);
								if (this.c == 0)
								{
									this.addParticle(3, this.particle_x[(this.particle_x.length - 1)] - this.smokeWidth * 0.5, this.particle_y[(this.particle_y.length - 1)] - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 3 + 2, 5, 1.5 + Math.random() * 0.5, 0, 0, 0, 0);
								}
								if (this.enemy_statusEffect_atp[this.a] > 0.001)
								{
									this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40 - 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
									if (this.enemy_statusEffect_atp[this.a] > 0.005)
									{
										this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40 - 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
									}
								}
							}
							if (this.enemy_recoil_rot[this.a] != 0)
							{
								this.enemy_recoil_rotVel[this.a] = this.enemy_recoil_rotVel[this.a] + this.enemy_recoil_rot[this.a] * 0.95;
								this.enemy_recoil_rot[this.a] = this.enemy_recoil_rot[this.a] - this.enemy_recoil_rotVel[this.a];
								this.enemy_recoil_rot[this.a] = this.enemy_recoil_rot[this.a] * this.gun_recoil_dampening[this.enemy_gunEquipped[this.a]];
								if (Math.abs(this.enemy_recoil_rotVel[this.a]) < 0.01)
								{
									this.enemy_recoil_rotVel[this.a] = 0;
									this.enemy_recoil_rot[this.a] = 0;
								}
							}
							if (this.enemy_recoil_x[this.a] != 0)
							{
								this.enemy_recoil_x[this.a] = this.enemy_recoil_x[this.a] * this.gun_recoil_xRecover[this.enemy_gunEquipped[this.a]];
								if (Math.abs(this.enemy_recoil_x[this.a]) < 0.01)
								{
									this.enemy_recoil_x[this.a] = 0;
								}
							}
							if (this.enemy_recoil_y[this.a] != 0)
							{
								this.enemy_recoil_y[this.a] = this.enemy_recoil_y[this.a] * this.gun_recoil_xRecover[this.enemy_gunEquipped[this.a]];
								if (Math.abs(this.enemy_recoil_y[this.a]) < 0.01)
								{
									this.enemy_recoil_y[this.a] = 0;
								}
							}
							this.enemy_aimFun();
							if (this.enemy_anim[this.a] == 1)
							{
							}
							if (this.enemy_hasLineOfSight[this.a] == true)
							{
							}
							if (this.enemy_jump[this.a] == false)
							{
								if (this.jump == false)
								{
									if (Math.abs(this.character_velX) < 3)
									{
										this.c = Math.random() * 25;
									}
									else
									{
										this.c = Math.random() * 40;
									}
								}
								else
								{
									this.c = Math.random() * 70;
								}
								if (this.c == 0)
								{
									this.enemy_shoot();
								}
							}
							if (this.enemy_lineOfSightCountdown[this.a] > 5)
							{
								this.enemy_tempRise = Math.sin(this.enemy_headRot[this.a]) * 25;
								this.enemy_tempRun = Math.cos(this.enemy_headRot[this.a]) * 25;
								this.enemy_dX = this.enemy_x[this.a] - this.character_x;
								this.enemy_dY = this.enemy_y[this.a] - this.character_y;
								this.enemy_lineOfSightCountdown[this.a] = 0;
								this.enemy_dist = Math.sqrt(this.enemy_dX * this.enemy_dX + this.enemy_dY * this.enemy_dY);
								this.enemy_dist = Math.abs(int(this.enemy_dist / 25));
								if (this.enemy_dist > 30)
								{
									this.enemy_dist = 30;
								}
								this.enemy_hasLineOfSight[this.a] = true;
								this.b = 0;
								while (this.b < this.enemy_dist)
								{
									
									this.tileOn = int((this.enemy_y[this.a] - 75 + this.enemy_tempRise * this.b) / 50) * this.level_width + int((this.enemy_x[this.a] + this.enemy_tempRun * this.b) / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 1)
									{
										this.enemy_hasLineOfSight[this.a] = false;
										this.b = 50;
									}
									
									this.b  ++ ;
									
								}
								if (this.enemy_hasLineOfSight[this.a] == false)
								{
									if (this.character_y <= this.enemy_y[this.a] + 600)
									{
									}
									if (this.character_y >= this.enemy_y[this.a] - 600)
									{
									}
									if (this.character_x >= this.enemy_x[this.a] - 2500)
									{
									}
									if (this.character_x > this.enemy_x[this.a] + 2500)
									{
										this.enemy_aiState[this.a] = 4;
									}
								}
							}
							else
							{
								var _loc_1:* = this.enemy_lineOfSightCountdown;
								var _loc_2:* = this.a;
								var _loc_3:* = this.enemy_lineOfSightCountdown[this.a] + 1;
								_loc_1[_loc_2] = _loc_3;
							}
							if (this.enemy_hasLineOfSight[this.a] == true)
							{
							}
							if (this.enemy_anim[this.a] != 22)
							{
							}
							if (this.enemy_anim[this.a] != 23)
							{
							}
							else
							{
								this.enemy_hasLineOfSight[this.a] = false;
								if (this.enemy_face[this.a] == 0)
								{
									this.enemy_headRot[this.a] = 0;
								}
								else
								{
									this.enemy_headRot[this.a] = -3.14;
								}
							}
							if (this.enemy_gunFrame[this.a] > 0)
							{
								var _loc_1:* = this.enemy_gunFrame;
								var _loc_2:* = this.a;
								var _loc_3:* = this.enemy_gunFrame[this.a] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.enemy_gunFrame[this.a] == this.gun_frameToEjectShellOn[this.enemy_gunEquipped[this.a]])
								{
									this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].x = this.enemy_gunX[this.a] - this.cameraX;
									this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].y = this.enemy_gunY[this.a] - this.cameraY + this.gunShoulder_y[this.enemy_gunEquipped[this.a]];
									this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].rotation = this.enemy_headRot[this.a] * this.pi_180;
									if (this.enemy_face[this.a] == 0)
									{
										this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].scaleY = 1;
									}
									else
									{
										this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].scaleY = -1;
									}
									this.gunFlash_pt = new Point(this.gun_eject_x[this.enemy_gunEquipped[this.a]], this.gun_eject_y[this.enemy_gunEquipped[this.a]]);
									this.gunFlash_pt = this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].localToGlobal(this.gunFlash_pt);
									this.gunTempSpd = 20 + Math.random() * 4;
									if (this.enemy_face[this.a] == 0)
									{
										this.addParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_headRot[this.a], this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_headRot[this.a], Math.cos(this.enemy_headRot[this.a] - 2) * this.gunTempSpd, Math.sin(this.enemy_headRot[this.a] - 2) * this.gunTempSpd, 0, int(this.gun_casingType[this.enemy_gunEquipped[this.a]]), int((this.enemy_headRot[this.a] + Math.PI) / (Math.PI * 2) * 16), (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									}
									else
									{
										this.addParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_headRot[this.a], this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_headRot[this.a], Math.cos(this.enemy_headRot[this.a] + 2) * this.gunTempSpd, Math.sin(this.enemy_headRot[this.a] + 2) * this.gunTempSpd, 0, int(this.gun_casingType[this.enemy_gunEquipped[this.a]]), int((this.enemy_headRot[this.a] + Math.PI) / (Math.PI * 2) * 16), (int(Math.random() * 4) + 0.25) / 10, 0, 0);
									}
									if (this.gun_bulletType[this.enemy_gunEquipped[this.a]] == 4)
									{
										this.gunFlash_pt = new Point(this.gun_eject_x[this.enemy_gunEquipped[this.a]] - 5, this.gun_eject_y[this.enemy_gunEquipped[this.a]]);
										this.gunFlash_pt = this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].localToGlobal(this.gunFlash_pt);
										this.gunTempSpd = 15 + Math.random() * 4;
										if (this.enemy_face[this.a] == 0)
										{
											this.addParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_headRot[this.a], this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_headRot[this.a], Math.cos(this.enemy_headRot[this.a] - 2) * this.gunTempSpd, Math.sin(this.enemy_headRot[this.a] - 2) * this.gunTempSpd, 0, int(this.gun_casingType[this.enemy_gunEquipped[this.a]]), int((this.enemy_headRot[this.a] + Math.PI) / (Math.PI * 2) * 16), (int(Math.random() * 4) + 0.25) / 10, 0, 0);
										}
										else
										{
											this.addParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_headRot[this.a], this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_headRot[this.a], Math.cos(this.enemy_headRot[this.a] + 2) * this.gunTempSpd, Math.sin(this.enemy_headRot[this.a] + 2) * this.gunTempSpd, 0, int(this.gun_casingType[this.enemy_gunEquipped[this.a]]), int((this.enemy_headRot[this.a] + Math.PI) / (Math.PI * 2) * 16), (int(Math.random() * 4) + 0.25) / 10, 0, 0);
										}
									}
								}
								if (this.enemy_gunFrame[this.a] > (this["gunFrames_" + this.enemy_gunEquipped[this.a]].length - 1))
								{
									this.enemy_gunFrame[this.a] = 0;
								}
							}
							if (this.enemy_gunCoolDown[this.a] > 0)
							{
								var _loc_1:* = this.enemy_gunCoolDown;
								var _loc_2:* = this.a;
								var _loc_3:* = this.enemy_gunCoolDown[this.a] - 1;
								_loc_1[_loc_2] = _loc_3;
							}
							if (this.enemy_anim[this.a] < 11)
							{
								switch(this.enemy_aiState[this.a])
								{
									case 0:
									{
										this.enemy_isMoving = false;
										if (this.enemy_hasLineOfSight[this.a] == true)
										{
											var _loc_1:* = this.enemy_lineOfSightTimer;
											var _loc_2:* = this.a;
											var _loc_3:* = this.enemy_lineOfSightTimer[this.a] + 1;
											_loc_1[_loc_2] = _loc_3;
											if (this.enemy_lineOfSightTimer[this.a] > 5)
											{
												if (this.enemy_jump[this.a] == false)
												{
													if (Math.abs(this.character_y - this.enemy_y[this.a]) < 60)
													{
														if (this.enemy_face[this.a] == 0)
														{
															if (this.character_x - this.enemy_x[this.a] < this.enemy_engagementDistance[this.a])
															{
																this.tileOn = int((this.enemy_y[this.a] + 25) / 50) * this.level_width + int((this.enemy_x[this.a] - 30) / 50);
																if (this.level_collidable[this.level[this.tileOn]] == 1)
																{
																	this.enemy_velX[this.a] = this.enemy_velX[this.a] - 2;
																	if (this.enemy_velX[this.a] < -this.enemyRunSpeed)
																	{
																		this.enemy_velX[this.a] = -this.enemyRunSpeed;
																	}
																	this.enemy_isMoving = true;
																}
																else
																{
																	this.enemy_isMoving = false;
																}
															}
															else if (this.character_x - this.enemy_x[this.a] > this.enemy_engagementDistance[this.a] * 2)
															{
																this.tileOn = int((this.enemy_y[this.a] + 25) / 50) * this.level_width + int((this.enemy_x[this.a] + 30) / 50);
																if (this.level_collidable[this.level[this.tileOn]] == 1)
																{
																	this.enemy_velX[this.a] = this.enemy_velX[this.a] + 2;
																	if (this.enemy_velX[this.a] > this.enemyRunSpeed)
																	{
																		this.enemy_velX[this.a] = this.enemyRunSpeed;
																	}
																	this.enemy_isMoving = true;
																}
																else
																{
																	this.enemy_isMoving = false;
																	this.tileOn = int((this.enemy_y[this.a] - 10) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
																	if (this.nodeMap[this.tileOn] == 3)
																	{
																		this.enemy_jump[this.a] = true;
																		this.enemy_velY[this.a] = -34;
																		this.enemy_aiState[this.a] = 2;
																		this.b = 0;
																		while (this.b < 15)
																		{
																			
																			if (this.nodeMap[this.tileOn + this.b] == 4)
																			{
																				this.enemy_nextNode[this.a] = this.tileOn + this.b;
																				this.enemy_maxJumpHeight[this.a] = -64 + 2 * (this.b * 50 / 16);
																				this.b = 25;
																			}
																			
																			this.b  ++ ;
																			
																		}
																	}
																}
															}
															else
															{
																this.enemy_isMoving = false;
															}
														}
														else if (this.character_x - this.enemy_x[this.a] > -this.enemy_engagementDistance[this.a])
														{
															this.tileOn = int((this.enemy_y[this.a] + 25) / 50) * this.level_width + int((this.enemy_x[this.a] + 30) / 50);
															if (this.level_collidable[this.level[this.tileOn]] == 1)
															{
																this.enemy_velX[this.a] = this.enemy_velX[this.a] + 2;
																if (this.enemy_velX[this.a] > this.enemyRunSpeed)
																{
																	this.enemy_velX[this.a] = this.enemyRunSpeed;
																}
																this.enemy_isMoving = true;
															}
															else
															{
																this.enemy_isMoving = false;
															}
														}
														else if (this.character_x - this.enemy_x[this.a] < (-this.enemy_engagementDistance[this.a]) * 2)
														{
															this.tileOn = int((this.enemy_y[this.a] + 25) / 50) * this.level_width + int((this.enemy_x[this.a] - 30) / 50);
															if (this.level_collidable[this.level[this.tileOn]] == 1)
															{
																this.enemy_velX[this.a] = this.enemy_velX[this.a] - 2;
																if (this.enemy_velX[this.a] < -this.enemyRunSpeed)
																{
																	this.enemy_velX[this.a] = -this.enemyRunSpeed;
																}
																this.enemy_isMoving = true;
															}
															else
															{
																this.enemy_isMoving = false;
																this.tileOn = int((this.enemy_y[this.a] - 10) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
																if (this.nodeMap[this.tileOn] == 4)
																{
																	this.enemy_jump[this.a] = true;
																	this.enemy_velY[this.a] = -34;
																	this.enemy_aiState[this.a] = 2;
																	this.b = 0;
																	while (this.b < 15)
																	{
																		
																		if (this.nodeMap[this.tileOn - this.b] == 3)
																		{
																			this.enemy_nextNode[this.a] = this.tileOn - this.b;
																			this.enemy_maxJumpHeight[this.a] = -64 + 2 * (this.b * 50 / 16);
																			this.b = 25;
																		}
																		
																		this.b  ++ ;
																		
																	}
																}
															}
														}
														else
														{
															this.enemy_isMoving = false;
														}
													}
													else
													{
														this.enemy_isMoving = false;
													}
												}
											}
											else
											{
												this.enemy_isMoving = false;
											}
										}
										else if (this.enemy_isMoving == false)
										{
											if (this.enemy_lineOfSightTimer[this.a] > 0)
											{
												this.enemy_lineOfSightTimer[this.a] = 0;
											}
											else
											{
												var _loc_1:* = this.enemy_lineOfSightTimer;
												var _loc_2:* = this.a;
												var _loc_3:* = this.enemy_lineOfSightTimer[this.a] - 1;
												_loc_1[_loc_2] = _loc_3;
												if (this.enemy_lineOfSightTimer[this.a] < -15)
												{
													this.enemy_aiState[this.a] = 1;
													this.enemy_nextNode[this.a] = -1;
													this.enemy_lineOfSightTimer[this.a] = 0;
												}
											}
										}
										if (this.character_gunCoolDown == this.gun_coolDown[this.character_gunEquipped])
										{
											if (this.enemy_x[this.a] > this.character_x)
											{
											}
											if (this.character_face != 0)
											{
												if (this.enemy_x[this.a] < this.character_x)
												{
												}
											}
											if (this.character_face == 1)
											{
												if (this.enemy_jump[this.a] == false)
												{
													this.c = int(Math.random() * 3);
													if (this.c == 0)
													{
														this.enemy_jump[this.a] = true;
														this.c = 0;
														while (this.c < this.enemy_type.length)
														{
															
															if (this.enemy_jump[this.c] == true)
															{
															}
															if (this.c != this.a)
															{
																this.enemy_jump[this.a] = false;
																this.enemy_velY[this.a] = 0;
															}
															
															this.c  ++ ;
															
														}
														if (this.enemy_jump[this.a] == true)
														{
															this.enemy_velY[this.a] = (-Math.random()) * 15 - 15;
															if (this.enemy_x[this.a] > this.character_x)
															{
																this.enemy_velX[this.a] = Math.random() * 8 + 12;
															}
															else
															{
																this.enemy_velX[this.a] = Math.random() * -8 - 12;
															}
															this.enemy_isMoving = true;
														}
													}
												}
											}
										}
										break;
									}
									case 1:
									{
										if (this.enemy_nextNode[this.a] == -1)
										{
											if (this.character_y < this.enemy_y[this.a] - 100)
											{
											}
											if (this.character_y > this.enemy_y[this.a] - 400)
											{
												this.tileOn = int((this.enemy_y[this.a] - 10) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
												if (this.nodeMap[this.tileOn] != 5)
												{
													this.tileOn = int((this.enemy_y[this.a] - 20) / 50) * this.level_width + int(this.character_x / 50);
													this.d = 50;
													this.e = -1;
													this.b = -40;
													while (this.b < 40)
													{
														
														if (this.nodeMap[this.tileOn + this.b] == 5)
														{
															if (Math.abs(this.b) < this.d)
															{
																this.d = Math.abs(this.b);
																this.enemy_nextNode[this.a] = this.tileOn + this.b;
															}
														}
														
														this.b  ++ ;
														
													}
												}
												else
												{
													this.b = 0;
													while (this.b < 7)
													{
														
														this.c = -1;
														while (this.c < 2)
														{
															
															this.tileOn = int((this.enemy_y[this.a] - this.b * 50) / 50) * this.level_width + int((this.enemy_x[this.a] + this.c * 50) / 50);
															if (this.nodeMap[this.tileOn] != 3)
															{
															}
															if (this.nodeMap[this.tileOn] == 4)
															{
																this.enemy_nextNode[this.a] = this.tileOn;
																if (this.nodeMap[this.tileOn] == 3)
																{
																	this.enemy_face[this.a] = 1;
																}
																else
																{
																	this.enemy_face[this.a] = 0;
																}
															}
															
															this.c  ++ ;
															
														}
														
														this.b  ++ ;
														
													}
													this.enemy_velY[this.a] = -34;
													this.enemy_jump[this.a] = true;
												}
											}
											else
											{
												if (this.character_y > this.enemy_y[this.a] + 100)
												{
												}
												if (this.character_y < this.enemy_y[this.a] + 400)
												{
													this.enemy_aiState[this.a] = 3;
													this.c = Math.random() * 2;
													if (this.c == 0)
													{
														if (this.enemy_velX[this.a] == 0)
														{
															this.enemy_velX[this.a] = 1;
														}
														else if (this.enemy_velX[this.a] < 0)
														{
															this.enemy_velX[this.a] = this.enemy_velX[this.a] * -1;
														}
													}
													else if (this.enemy_velX[this.a] == 0)
													{
														this.enemy_velX[this.a] = -1;
													}
													else if (this.enemy_velX[this.a] > 0)
													{
														this.enemy_velX[this.a] = this.enemy_velX[this.a] * -1;
													}
												}
												else
												{
													if (this.character_y <= this.enemy_y[this.a] + 400)
													{
													}
													if (this.character_y >= this.enemy_y[this.a] - 400)
													{
													}
													if (this.character_x >= this.enemy_x[this.a] - 2000)
													{
													}
													if (this.character_x > this.enemy_x[this.a] + 2000)
													{
														this.enemy_aiState[this.a] = 4;
													}
													else
													{
														this.enemy_aiState[this.a] = 0;
														this.enemy_nextNode[this.a] = -1;
													}
												}
											}
										}
										else if (this.nodeMap[this.enemy_nextNode[this.a]] == 5)
										{
											if (this.enemy_x[this.a] + 15 < this.enemy_nextNode[this.a] % this.level_width * 50 + 25)
											{
												this.enemy_velX[this.a] = this.enemy_velX[this.a] + 2;
												if (this.enemy_velX[this.a] > this.enemyRunSpeed)
												{
													this.enemy_velX[this.a] = this.enemyRunSpeed;
												}
												this.enemy_isMoving = true;
											}
											else if (this.enemy_x[this.a] - 15 > this.enemy_nextNode[this.a] % this.level_width * 50 + 25)
											{
												this.enemy_velX[this.a] = this.enemy_velX[this.a] - 2;
												if (this.enemy_velX[this.a] < -this.enemyRunSpeed)
												{
													this.enemy_velX[this.a] = -this.enemyRunSpeed;
												}
												this.enemy_isMoving = true;
											}
											else
											{
												this.enemy_isMoving = false;
												this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 25;
												this.enemy_velX[this.a] = 0;
												this.enemy_nextNode[this.a] = -1;
											}
										}
										else if (this.nodeMap[this.enemy_nextNode[this.a]] == 3)
										{
											if (this.enemy_jump[this.a] == true)
											{
												if (int(this.enemy_y[this.a] / 50) == int(this.enemy_nextNode[this.a] / this.level_width))
												{
													if (this.enemy_velY[this.a] < -8)
													{
														this.enemy_velY[this.a] = -8;
													}
													this.enemy_velX[this.a] = this.enemy_velX[this.a] - 2;
													if (this.enemy_velX[this.a] < -this.enemyRunSpeed)
													{
														this.enemy_velX[this.a] = -this.enemyRunSpeed;
													}
													this.enemy_isMoving = true;
												}
											}
											else
											{
												this.enemy_velX[this.a] = 0;
												this.enemy_nextNode[this.a] = -1;
											}
										}
										else if (this.nodeMap[this.enemy_nextNode[this.a]] == 4)
										{
											if (this.enemy_jump[this.a] == true)
											{
												if (int(this.enemy_y[this.a] / 50) == int(this.enemy_nextNode[this.a] / this.level_width))
												{
													if (this.enemy_velY[this.a] < -8)
													{
														this.enemy_velY[this.a] = -8;
													}
													this.enemy_velX[this.a] = this.enemy_velX[this.a] + 2;
													if (this.enemy_velX[this.a] > this.enemyRunSpeed)
													{
														this.enemy_velX[this.a] = this.enemyRunSpeed;
													}
													this.enemy_isMoving = true;
												}
											}
											else
											{
												this.enemy_velX[this.a] = 0;
												this.enemy_nextNode[this.a] = -1;
											}
										}
										break;
									}
									case 2:
									{
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_velX[this.a] = 16;
											if (this.enemy_velY[this.a] > this.enemy_maxJumpHeight[this.a])
											{
											}
											if (this.enemy_velY[this.a] < -8)
											{
												this.enemy_velY[this.a] = -8;
											}
											this.enemy_isMoving = true;
											if (this.enemy_jump[this.a] == false)
											{
												this.enemy_aiState[this.a] = 0;
												this.enemy_velX[this.a] = 0;
												this.enemy_nextNode[this.a] = -1;
											}
										}
										else
										{
											this.enemy_velX[this.a] = -16;
											if (this.enemy_velY[this.a] > this.enemy_maxJumpHeight[this.a])
											{
											}
											if (this.enemy_velY[this.a] < -8)
											{
												this.enemy_velY[this.a] = -8;
											}
											this.enemy_isMoving = true;
											if (this.enemy_jump[this.a] == false)
											{
												this.enemy_aiState[this.a] = 0;
												this.enemy_velX[this.a] = 0;
												this.enemy_nextNode[this.a] = -1;
											}
										}
										break;
									}
									case 3:
									{
										if (this.enemy_jump[this.a] == false)
										{
											if (this.enemy_velX[this.a] > 0)
											{
												this.enemy_velX[this.a] = this.enemy_velX[this.a] + 2;
												if (this.enemy_velX[this.a] > this.enemyRunSpeed)
												{
													this.enemy_velX[this.a] = this.enemyRunSpeed;
												}
												this.enemy_isMoving = true;
											}
											else
											{
												this.enemy_velX[this.a] = this.enemy_velX[this.a] - 2;
												if (this.enemy_velX[this.a] < -this.enemyRunSpeed)
												{
													this.enemy_velX[this.a] = -this.enemyRunSpeed;
												}
												this.enemy_isMoving = true;
											}
											this.tileOn = int(this.enemy_y[this.a] / 50) * this.level_width + int((this.enemy_x[this.a] - 10) / 50);
											if (this.level_collidable[this.level[this.tileOn]] == 0)
											{
												this.tileOn = int(this.enemy_y[this.a] / 50) * this.level_width + int((this.enemy_x[this.a] + 10) / 50);
												if (this.level_collidable[this.level[this.tileOn]] == 0)
												{
													this.enemy_jump[this.a] = true;
												}
											}
										}
										else
										{
											this.enemy_isMoving = false;
										}
										break;
									}
									case 4:
									{
										if (this.enemy_hasLineOfSight[this.a] == true)
										{
											this.enemy_aiState[this.a] = 0;
										}
										this.enemy_health_head[this.a] = -50001;
										this.enemy_markedForRemoval[this.a] = true;
										break;
									}
									default:
									{
										break;
									}
								}
							}
							if (this.enemy_isMoving == false)
							{
								if (this.enemy_jump[this.a] == false)
								{
									if (this.enemy_velX[this.a] < -4)
									{
										this.enemy_velX[this.a] = this.enemy_velX[this.a] + 4;
									}
									else if (this.enemy_velX[this.a] > 4)
									{
										this.enemy_velX[this.a] = this.enemy_velX[this.a] - 4;
									}
									else
									{
										this.enemy_velX[this.a] = 0;
									}
								}
								else if (this.enemy_velX[this.a] < -1)
								{
									(this.enemy_velX[this.a] + 1);
								}
								else if (this.enemy_velX[this.a] > 1)
								{
									(this.enemy_velX[this.a] - 1);
								}
								else
								{
									this.enemy_velX[this.a] = 0;
								}
							}
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_x[this.a] = this.enemy_x[this.a] + this.enemy_velX[this.a];
							if (this.enemy_velX[this.a] > 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] + 25) / 50);
								if (this.level_collidable[this.level[this.tileOn]] != 1)
								{
								}
								if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
								{
									this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 25;
									this.enemy_velX[this.a] = 0;
								}
							}
							else if (this.enemy_velX[this.a] < 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] - 25) / 50);
								if (this.level_collidable[this.level[this.tileOn]] != 1)
								{
								}
								if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
								{
									this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 25;
									this.enemy_velX[this.a] = 0;
								}
							}
							if (this.enemy_jump[this.a] == true)
							{
								this.enemy_yOld[this.a] = this.enemy_y[this.a];
								this.enemy_y[this.a] = this.enemy_y[this.a] + this.enemy_velY[this.a];
								this.enemy_velY[this.a] = this.enemy_velY[this.a] + 2;
								if (this.enemy_velY[this.a] > 40)
								{
									this.enemy_velY[this.a] = 40;
								}
								if (int(this.enemy_y[this.a] / 50) == this.enemy_nextNode[this.a] / this.level_width)
								{
									if (this.enemy_velY[this.a] < -8)
									{
										this.enemy_velY[this.a] = -8;
									}
									if (this.enemy_velY[this.a] == 0)
									{
										if (int(this.enemy_x[this.a] / 50) < this.enemy_nextNode[this.a] % this.level_width)
										{
											this.enemy_velX[this.a] = this.enemyRunSpeed;
										}
										else if (int(this.enemy_x[this.a] / 50) > this.enemy_nextNode[this.a] % this.level_width)
										{
											this.enemy_velX[this.a] = -this.enemyRunSpeed;
										}
									}
								}
								if (this.enemy_velY[this.a] > 0)
								{
									this.tileOn = int(this.enemy_y[this.a] / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 1)
									{
										this.enemy_jump[this.a] = false;
										this.enemy_velY[this.a] = 0;
										this.enemy_y[this.a] = int(this.enemy_y[this.a] / 50) * 50 + 2;
										this.enemy_yOld[this.a] = this.enemy_y[this.a];
										if (this.enemy_aiState[this.a] == 3)
										{
											this.enemy_aiState[this.a] = 0;
											this.enemy_nextNode[this.a] = -1;
										}
									}
								}
								else
								{
									this.tileOn = int((this.enemy_y[this.a] - 80) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 1)
									{
										this.enemy_velY[this.a] = 0;
									}
								}
							}
							else
							{
								this.tileOn = int(this.enemy_y[this.a] / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 0)
								{
									this.enemy_jump[this.a] = true;
								}
							}
							this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 1)
							{
								if (this.level_collidable[(this.level[this.tileOn] - 1)] == 0)
								{
									this.enemy_x[this.a] = int((this.enemy_x[this.a] - 50) / 50) * 50 + 25;
								}
								else if (this.level_collidable[(this.level[this.tileOn] + 1)] == 0)
								{
									this.enemy_x[this.a] = int((this.enemy_x[this.a] + 50) / 50) * 50 + 25;
								}
							}
							if (this.enemy_health_head[this.a] < this.enemy_health_headOld[this.a])
							{
								if (this.enemy_anim[this.a] < 20)
								{
									this.enemy_anim[this.a] = int(Math.random() * 4) + 11;
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = 0;
									this.enemy_velX[this.a] = 0;
								}
							}
							else if (this.enemy_health_body[this.a] < this.enemy_health_bodyOld[this.a])
							{
								if (this.enemy_anim[this.a] < 20)
								{
									this.enemy_anim[this.a] = int(Math.random() * 4) + 15;
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = 0;
									this.enemy_velX[this.a] = 0;
								}
							}
							else if (this.enemy_health_foot[this.a] < this.enemy_health_footOld[this.a])
							{
								if (this.enemy_anim[this.a] < 20)
								{
									if (this.enemy_velX[this.a] != 0)
									{
										this.enemy_anim[this.a] = int(Math.random() * 2) + 22;
									}
									else
									{
										this.enemy_anim[this.a] = int(Math.random() * 3) + 19;
									}
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = 0;
									this.enemy_velX[this.a] = 0;
								}
							}
							this.enemy_health_headOld[this.a] = this.enemy_health_head[this.a];
							this.enemy_health_bodyOld[this.a] = this.enemy_health_body[this.a];
							this.enemy_health_footOld[this.a] = this.enemy_health_foot[this.a];
							if (this.enemy_jump[this.a] == false)
							{
								if (this.enemy_anim[this.a] < 11)
								{
									if (this.enemy_velX[this.a] != 0)
									{
										if (this.enemy_face[this.a] == 0)
										{
											if (this.enemy_velX[this.a] > 0)
											{
												this.enemy_anim[this.a] = 2;
											}
											else
											{
												this.enemy_anim[this.a] = 3;
											}
										}
										else if (this.enemy_velX[this.a] > 0)
										{
											this.enemy_anim[this.a] = 3;
										}
										else
										{
											this.enemy_anim[this.a] = 2;
										}
									}
									else
									{
										this.tileOn = int(this.enemy_y[this.a] / 50) * this.level_width + int((this.enemy_x[this.a] - 15) / 50);
										if (this.level_collidable[this.level[this.tileOn]] == 0)
										{
											if (this.enemy_face[this.a] == 1)
											{
												if (this.enemy_anim[this.a] != 9)
												{
													this.enemy_anim[this.a] = 9;
													this.enemy_fr[this.a] = 0;
													this.enemy_frOld[this.a] = this.enemy_fr[this.a];
												}
											}
											else if (this.enemy_anim[this.a] != 10)
											{
												this.enemy_anim[this.a] = 10;
												this.enemy_fr[this.a] = 0;
												this.enemy_frOld[this.a] = this.enemy_fr[this.a];
											}
										}
										else
										{
											this.tileOn = int(this.enemy_y[this.a] / 50) * this.level_width + int((this.enemy_x[this.a] + 15) / 50);
											if (this.level_collidable[this.level[this.tileOn]] == 0)
											{
												if (this.enemy_face[this.a] == 1)
												{
													if (this.enemy_anim[this.a] != 9)
													{
														this.enemy_anim[this.a] = 9;
														this.enemy_fr[this.a] = 0;
														this.enemy_frOld[this.a] = this.enemy_fr[this.a];
													}
												}
												else if (this.enemy_anim[this.a] != 10)
												{
													this.enemy_anim[this.a] = 10;
													this.enemy_fr[this.a] = 0;
													this.enemy_frOld[this.a] = this.enemy_fr[this.a];
												}
											}
											else if (this.enemy_anim[this.a] != 1)
											{
												this.enemy_anim[this.a] = 1;
												this.enemy_fr[this.a] = 0;
												this.enemy_frOld[this.a] = this.enemy_fr[this.a];
											}
										}
									}
								}
							}
							else if (this.enemy_velY[this.a] < 0)
							{
								if (this.enemy_anim[this.a] != 6)
								{
									this.enemy_anim[this.a] = 6;
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
								}
							}
							else if (this.enemy_anim[this.a] != 7)
							{
								this.enemy_anim[this.a] = 7;
								this.enemy_fr[this.a] = 0;
								this.enemy_frOld[this.a] = this.enemy_fr[this.a];
							}
							this.enemy_frOld[this.a] = this.enemy_fr[this.a];
							this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
							if (this.enemy_fr[this.a] > this.maxFrames[this.enemy_anim[this.a]])
							{
								if (this.enemy_anim[this.a] > 10)
								{
									this.enemy_anim[this.a] = 1;
								}
								this.enemy_fr[this.a] = 0;
								this.enemy_frOld[this.a] = 0;
							}
						}
						else
						{
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							if (this.enemy_markedForRemoval[this.a] == false)
							{
								this.enemy_markedForRemoval[this.a] = true;
								var _loc_1:* = this.weaponProficiencyKills;
								var _loc_2:* = this.enemy_damagedBy[this.a];
								var _loc_3:* = this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.enemy_damagedBy[this.a] != 20)
								{
									if (this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] >= 50)
									{
									}
									if (this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] == 0)
									{
										this.scoreTally = this.scoreTally + 100;
										this.tempScoreQue = "";
										this.tempScoreQue = this.tempScoreQue + this.scoreNames[this.enemy_damagedBy[this.a] + 12];
										this.scoreQue.push(this.tempScoreQue);
										if (this.scoreQue.length > 3)
										{
											this.scoreQue.splice(0, 1);
										}
										this.scoreQueTime = 60;
										this.multiplier_countdown = this.max_multiplier_countdown;
										this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] = 1;
									}
								}
								else
								{
									if (this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] >= 5)
									{
									}
									if (this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] == 0)
									{
										this.scoreTally = this.scoreTally + 100;
										this.tempScoreQue = "";
										this.tempScoreQue = this.tempScoreQue + this.scoreNames[this.enemy_damagedBy[this.a] + 12];
										this.scoreQue.push(this.tempScoreQue);
										if (this.scoreQue.length > 3)
										{
											this.scoreQue.splice(0, 1);
										}
										this.scoreQueTime = 60;
										this.multiplier_countdown = this.max_multiplier_countdown;
										this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] = 1;
									}
								}
								this.tempScoreQue = "";
								this.tempScoreQue = this.tempScoreQue + this.scoreNames[0];
								this.scoreTally = this.scoreTally + 10;
								var _loc_1:* = this.scoreTimesEarned;
								var _loc_2:int = 0;
								var _loc_3:* = this.scoreTimesEarned[0] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.gun_ammo[this.character_gunEquipped] == 0)
								{
								}
								if (this.gun_mag_size[this.character_gunEquipped] > 2)
								{
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[3]);
									this.scoreTally = this.scoreTally + 5;
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 3;
									var _loc_3:* = this.scoreTimesEarned[3] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								if (this.enemy_anim[this.a] == 23)
								{
									this.scoreTally = this.scoreTally + 5;
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[4]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 4;
									var _loc_3:* = this.scoreTimesEarned[4] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								if (this.enemy_health_head[this.a] <= 0)
								{
								}
								if (this.enemy_health_body[this.a] == this.enemy_health_bodyMax[this.a])
								{
								}
								if (this.enemy_health_foot[this.a] == this.enemy_health_footMax[this.a])
								{
									this.cameraShakeFun(0.5);
									this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
									this.playSoundEffect(int(Math.random() * 3) + 42, this.tempVol, 0);
									this.enemy_isHeadless[this.a] = true;
									this.scoreTally = this.scoreTally + 5;
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[1]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 1;
									var _loc_3:* = this.scoreTimesEarned[1] + 1;
									_loc_1[_loc_2] = _loc_3;
									if (this.enemy_jump[this.a] == true)
									{
										this.scoreTally = this.scoreTally + 5;
										this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[8]);
										var _loc_1:* = this.scoreTimesEarned;
										var _loc_2:int = 8;
										var _loc_3:* = this.scoreTimesEarned[8] + 1;
										_loc_1[_loc_2] = _loc_3;
									}
									this.b = 5;
									while (this.b < 9)
									{
										
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_tempPos_x = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] + this.giblet_posX[this.b];
											this.enemy_tempPos_face = 1;
											this.enemy_tempVel_x = Math.random() * -8 - 1;
										}
										else
										{
											this.enemy_tempPos_x = this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] - this.giblet_posX[this.b];
											this.enemy_tempPos_face = -1;
											this.enemy_tempVel_x = Math.random() * 8 + 1;
										}
										this.enemy_tempPos_y = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] + this.giblet_posY[this.b];
										this.enemy_tempVel_y = Math.random() * -10 - 2;
										this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
										
										this.b  ++ ;
										
									}
									if (this.enemy_face[this.a] == 0)
									{
										this.placeBloodSplatter(this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
										this.placeBloodSplatter(this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
										this.placeBloodSplatter(this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
									}
									else
									{
										this.placeBloodSplatter(this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
										this.placeBloodSplatter(this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
										this.placeBloodSplatter(this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
									}
									this.addSimpleParticle(8, this.enemy_x[this.a] - 110 + Math.random() * 50 - 25, this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] - 75, 0, 0, 0);
									this.addSimpleParticle(5, this.enemy_x[this.a] - 135 + Math.random() * 50 - 25, this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] - 100, 0, 0, 0);
									this.b = 0;
									while (this.b < 5)
									{
										
										this.enemy_tempPos_x = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] + Math.random() * 40 - 20;
										this.enemy_tempPos_y = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] + Math.random() * 40 - 20;
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_tempVel_x = Math.random() * -10 - 1;
										}
										else
										{
											this.enemy_tempVel_x = Math.random() * 10 + 1;
										}
										this.enemy_tempVel_y = Math.random() * -15 - 10;
										this.addParticle(9, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, int(Math.random() * 5), 0, 0, 0, 0);
										
										this.b  ++ ;
										
									}
								}
								else
								{
									if (this.enemy_health_body[this.a] <= 0)
									{
									}
									if (this.enemy_health_head[this.a] == this.enemy_health_headMax[this.a])
									{
									}
									if (this.enemy_health_foot[this.a] == this.enemy_health_footMax[this.a])
									{
										this.scoreTally = this.scoreTally + 5;
										this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[2]);
										var _loc_1:* = this.scoreTimesEarned;
										var _loc_2:int = 2;
										var _loc_3:* = this.scoreTimesEarned[2] + 1;
										_loc_1[_loc_2] = _loc_3;
									}
								}
								this.wasGibbed = false;
								if (this.enemy_health_head[this.a] <= 0)
								{
								}
								if (this.enemy_health_body[this.a] <= 0)
								{
									this.cameraShakeFun(1.5);
									this.wasGibbed = true;
									this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
									this.playSoundEffect(int(Math.random() * 4) + 38, this.tempVol, 0);
									this.scoreTally = this.scoreTally + 10;
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[5]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 5;
									var _loc_3:* = this.scoreTimesEarned[5] + 1;
									_loc_1[_loc_2] = _loc_3;
									if (this.enemy_jump[this.a] == true)
									{
										this.scoreTally = this.scoreTally + 5;
										this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[6]);
										var _loc_1:* = this.scoreTimesEarned;
										var _loc_2:int = 6;
										var _loc_3:* = this.scoreTimesEarned[6] + 1;
										_loc_1[_loc_2] = _loc_3;
									}
									this.b = 4;
									while (this.b > -1)
									{
										
										switch(this.b)
										{
											case 0:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])];
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
												break;
											}
											case 1:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] - 3;
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] + 3;
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] + 20;
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												break;
											}
											case 2:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_body_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_y"][int(this.enemy_fr[this.a])];
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
												break;
											}
											case 3:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot1_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_foot1_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot1_y"][int(this.enemy_fr[this.a])] - 3;
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot2_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_foot2_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot2_y"][int(this.enemy_fr[this.a])] - 3;
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												break;
											}
											case 4:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_gunX[this.a];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_gunX[this.a];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_gunY[this.a];
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												break;
											}
											default:
											{
												break;
											}
										}
										this.addSimpleParticle(8, this.enemy_x[this.a] - 110 + Math.random() * 50 - 25, this.enemy_y[this.a] - 56 - Math.random() * 100, 0, 0, 0);
										this.addSimpleParticle(5, this.enemy_x[this.a] - 135 + Math.random() * 50 - 25, this.enemy_y[this.a] - 85 - Math.random() * 100, 0, 0, 0);
										
										this.b  -- ;
										
									}
									this.b = 0;
									while (this.b < 7)
									{
										
										this.enemy_tempPos_x = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] + Math.random() * 40 - 20;
										this.enemy_tempPos_y = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] + Math.random() * 40 - 20;
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_tempVel_x = Math.random() * -10 - 1;
										}
										else
										{
											this.enemy_tempVel_x = Math.random() * 10 + 1;
										}
										this.enemy_tempVel_y = Math.random() * -15 - 10;
										this.addParticle(9, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, int(Math.random() * 5), 0, 0, 0, 0);
										
										this.b  ++ ;
										
									}
								}
								if (this.wasGibbed == false)
								{
									this.c = int(Math.random() * 4);
									if (this.c != 0)
									{
										this.c = int(Math.random() * 2);
										if (this.c == 0)
										{
											this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
											this.playSoundEffect(int(Math.random() * 9) + 59, this.tempVol * 1.5, 0);
										}
										else
										{
											this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
											this.playSoundEffect(int(Math.random() * 9) + 68, this.tempVol * 1.5, 0);
										}
									}
								}
								
								this.multiKillCount  ++ ;
								
								this.multiKillTime = 1;
								if (this.multiKillCount > 10)
								{
									this.multiKillCount = 10;
								}
								if (this.multiKillCount > 1)
								{
									this.scoreTally = this.scoreTally + 5 * (this.multiKillCount - 1);
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[32 + (this.multiKillCount - 1)]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:* = 32 + (this.multiKillCount - 1);
									var _loc_3:* = this.scoreTimesEarned[32 + (this.multiKillCount - 1)] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								this.scoreQue.push(this.tempScoreQue);
								if (this.scoreQue.length > 3)
								{
									this.scoreQue.splice(0, 1);
								}
								this.scoreQueTime = 60;
								this.multiplier = this.multiplier + 0.1;
								this.multiplier_countdown = this.max_multiplier_countdown;
							}
							if (this.enemy_anim[this.a] < 24)
							{
								if (this.enemy_jump[this.a] == false)
								{
									this.tileOn = int((this.enemy_y[this.a] - 15) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
									if (this.enemy_face[this.a] == 0)
									{
										if (this.level_collidable[this.level[(this.tileOn - 1)]] != 1)
										{
										}
										if (this.level_collidable[this.level[this.tileOn + this.level_width - 1]] == 0)
										{
											this.enemy_anim[this.a] = 25 + int(Math.random() * 2);
										}
										else if (this.level_collidable[this.level[this.tileOn + this.level_width + 1]] == 1)
										{
											this.enemy_anim[this.a] = 24 + int(Math.random() * 5);
										}
										else
										{
											this.enemy_anim[this.a] = 26;
										}
									}
									else
									{
										if (this.level_collidable[this.level[(this.tileOn + 1)]] != 1)
										{
										}
										if (this.level_collidable[this.level[this.tileOn + this.level_width + 1]] == 0)
										{
											this.enemy_anim[this.a] = 25 + int(Math.random() * 2);
										}
										else if (this.level_collidable[this.level[this.tileOn + this.level_width - 1]] == 1)
										{
											this.enemy_anim[this.a] = 24 + int(Math.random() * 5);
										}
										else
										{
											this.enemy_anim[this.a] = 26;
										}
									}
								}
								else
								{
									this.enemy_anim[this.a] = 29;
									this.enemy_velY[this.a] = -12;
									if (this.enemy_face[this.a] == 0)
									{
										this.enemy_velX[this.a] = -(Math.random() * 10 + 10);
									}
									else
									{
										this.enemy_velX[this.a] = Math.random() * 10 + 10;
									}
								}
								this.enemy_fr[this.a] = 0;
							}
							if (this.enemy_anim[this.a] == 27)
							{
								if (this.enemy_fr[this.a] != 4)
								{
								}
								if (this.enemy_fr[this.a] == 36)
								{
									if (this.enemy_face[this.a] == 0)
									{
										this.addSimpleParticle(9, this.enemy_x[this.a], this.enemy_y[this.a] - 60, 0, 0, 0);
									}
									else
									{
										this.addSimpleParticle(9, this.enemy_x[this.a] - 130, this.enemy_y[this.a] - 60, 0, 0, 1);
									}
								}
							}
							else if (this.enemy_anim[this.a] == 29)
							{
								this.enemy_x[this.a] = this.enemy_x[this.a] + this.enemy_velX[this.a];
								this.enemy_velX[this.a] = this.enemy_velX[this.a] * 0.97;
								if (Math.abs(this.enemy_velX[this.a]) < 0.5)
								{
									this.enemy_velX[this.a] = 0;
								}
								if (this.enemy_velX[this.a] > 0)
								{
									this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] + 25) / 50);
									if (this.level_collidable[this.level[this.tileOn]] != 1)
									{
									}
									if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
									{
										this.enemy_x[this.a] = this.enemy_x[this.a] - this.enemy_velX[this.a];
										this.enemy_velX[this.a] = this.enemy_velX[this.a] * -0.5;
									}
								}
								else if (this.enemy_velX[this.a] < 0)
								{
									this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] - 25) / 50);
									if (this.level_collidable[this.level[this.tileOn]] != 1)
									{
									}
									if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
									{
										this.enemy_x[this.a] = this.enemy_x[this.a] - this.enemy_velX[this.a];
										this.enemy_velX[this.a] = this.enemy_velX[this.a] * -0.5;
									}
								}
								else
								{
									this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] + 25) / 50);
									if (this.level_collidable[this.level[this.tileOn]] != 1)
									{
									}
									if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
									{
										this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 25;
									}
									this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] - 25) / 50);
									if (this.level_collidable[this.level[this.tileOn]] != 1)
									{
									}
									if (this.level_collidable[this.level[this.tileOn - this.level_width]] == 1)
									{
										this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 - 25;
									}
								}
								this.b = 0;
								while (this.b < 2)
								{
									
									this.enemy_y[this.a] = this.enemy_y[this.a] + this.enemy_velY[this.a] * 0.5;
									if (this.enemy_velY[this.a] > 0)
									{
										this.tileOn = int((this.enemy_y[this.a] - 2) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
										if (this.level_collidable[this.level[this.tileOn]] == 1)
										{
											this.enemy_velY[this.a] = 0;
											this.enemy_y[this.a] = int(this.enemy_y[this.a] / 50) * 50 + 2;
											this.enemy_anim[this.a] = 28;
											this.enemy_fr[this.a] = 10;
										}
									}
									else if (this.enemy_velY[this.a] < 0)
									{
										this.tileOn = int((this.enemy_y[this.a] - 70) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
										if (this.level_collidable[this.level[this.tileOn]] == 1)
										{
											this.enemy_y[this.a] = this.enemy_y[this.a] - this.enemy_velY[this.a];
											this.enemy_velY[this.a] = 0;
										}
									}
									
									this.b  ++ ;
									
								}
								this.enemy_velY[this.a] = this.enemy_velY[this.a] + 2;
								if (this.enemy_velY[this.a] > 40)
								{
									this.enemy_velY[this.a] = 40;
								}
							}
							if (this.wasGibbed != true)
							{
							}
							if (this.enemy_health_head[this.a] == -50001)
							{
								this.removeEnemy(this.a);
							}
							else
							{
								this.enemy_frOld[this.a] = this.enemy_fr[this.a];
								this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
								if (this.enemy_anim[this.a] == 29)
								{
									if (this.enemy_fr[this.a] > this.maxFrames[this.enemy_anim[this.a]])
									{
										this.enemy_fr[this.a] = 14;
										this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									}
								}
								if (this.enemy_fr[this.a] > this.maxFrames[this.enemy_anim[this.a]])
								{
									if (this.enemy_face[this.a] == 0)
									{
										this.trans.createBox(1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_hand1_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_hand1_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_hand1_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_hand1_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_foot2_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot2_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot2_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_foot_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_ankle2_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_ankle2_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_ankle2_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_ankle_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_body_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_body_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_head_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										if (this.enemy_isHeadless[this.a] == false)
										{
											this.level_bm.draw(this["char_head_" + this.enemy_spriteSet[this.a]], this.trans);
										}
										this.trans.createBox(1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_foot1_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot1_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot1_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_foot_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_ankle1_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_ankle1_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_ankle1_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_ankle_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_hand2_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_hand2_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_hand2_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_hand2_" + this.enemy_spriteSet[this.a]], this.trans);
									}
									else
									{
										this.trans.createBox(-1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_hand1_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_hand1_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_hand1_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_hand1_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_foot2_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_foot2_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot2_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_foot_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_ankle2_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_ankle2_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_ankle2_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_ankle_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_body_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_body_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_body_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_head_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_head_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_head_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										if (this.enemy_isHeadless[this.a] == false)
										{
											this.level_bm.draw(this["char_head_" + this.enemy_spriteSet[this.a]], this.trans);
										}
										this.trans.createBox(-1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_foot1_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_foot1_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_foot1_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_foot_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_ankle1_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_ankle1_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_ankle1_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_ankle_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["charAnim_" + this.enemy_anim[this.a] + "_hand2_r"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_hand2_x"][this.maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_hand2_y"][this.maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["char_hand2_" + this.enemy_spriteSet[this.a]], this.trans);
									}
									this.removeEnemy(this.a);
								}
							}
						}
						break;
					}
					case 2:
					{
						this.enemy_engagementDistance[this.a] = 200;
						if (this.enemy_health_body[this.a] > 0)
						{
						}
						if (this.enemy_health_head[this.a] > 0)
						{
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							switch(this.enemy_anim[this.a])
							{
								case 0:
								{
									this.enemy_anim[this.a] = 1;
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = 0;
									break;
								}
								case 1:
								{
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
									if (this.enemy_fr[this.a] > this.enemy_large1_maxFrames[this.enemy_anim[this.a]])
									{
										this.enemy_fr[this.a] = 0;
										this.enemy_frOld[this.a] = 0;
									}
									if (this.character_x < this.enemy_x[this.a])
									{
										this.enemy_face[this.a] = 0;
									}
									else
									{
										this.enemy_face[this.a] = 1;
									}
									if (this.enemy_face[this.a] == 0)
									{
										if (this.character_x - this.enemy_x[this.a] < (-this.enemy_engagementDistance[this.a]) * 2)
										{
											this.enemy_anim[this.a] = 2;
											this.enemy_fr[this.a] = 0;
											this.enemy_frOld[this.a] = 0;
										}
										else if (this.character_x - this.enemy_x[this.a] > -this.enemy_engagementDistance[this.a])
										{
											this.c = Math.random() * 3;
											if (this.c == 0)
											{
												this.enemy_anim[this.a] = 5;
											}
											else if (this.c == 1)
											{
												this.enemy_anim[this.a] = 4;
											}
											else
											{
												this.enemy_anim[this.a] = 3;
											}
											this.enemy_fr[this.a] = 0;
											this.enemy_frOld[this.a] = 0;
										}
										else
										{
											this.c = Math.random() * 40;
											if (this.c == 0)
											{
												this.enemy_anim[this.a] = 7;
												this.enemy_fr[this.a] = 0;
												this.enemy_frOld[this.a] = 0;
												this.enemy_lineOfSightTimer[this.a] = 0;
												this.enemy_velX[this.a] = 0;
											}
											else if (this.c == 1)
											{
												this.enemy_anim[this.a] = 4;
												this.enemy_fr[this.a] = 0;
												this.enemy_frOld[this.a] = 0;
											}
										}
									}
									else if (this.character_x - this.enemy_x[this.a] > this.enemy_engagementDistance[this.a] * 2)
									{
										this.enemy_anim[this.a] = 2;
										this.enemy_fr[this.a] = 0;
										this.enemy_frOld[this.a] = 0;
									}
									else if (this.character_x - this.enemy_x[this.a] < this.enemy_engagementDistance[this.a])
									{
										this.c = Math.random() * 3;
										if (this.c == 0)
										{
											this.enemy_anim[this.a] = 5;
										}
										else
										{
											this.enemy_anim[this.a] = 3;
										}
										this.enemy_fr[this.a] = 0;
										this.enemy_frOld[this.a] = 0;
									}
									else
									{
										this.c = Math.random() * 40;
										if (this.c == 0)
										{
											this.enemy_anim[this.a] = 7;
											this.enemy_fr[this.a] = 0;
											this.enemy_frOld[this.a] = 0;
											this.enemy_lineOfSightTimer[this.a] = 0;
											this.enemy_velX[this.a] = 0;
										}
										else if (this.c == 1)
										{
											this.enemy_anim[this.a] = 4;
											this.enemy_fr[this.a] = 0;
											this.enemy_frOld[this.a] = 0;
										}
									}
									break;
								}
								case 2:
								{
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									this.enemy_fr[this.a] = this.enemy_fr[this.a] + int(Math.abs(this.enemy_velX[this.a] / 3));
									if (this.enemy_fr[this.a] > this.enemy_large1_maxFrames[this.enemy_anim[this.a]])
									{
										this.enemy_fr[this.a] = 5;
										this.enemy_frOld[this.a] = 5;
									}
									if (Math.abs(this.character_x - this.enemy_x[this.a]) < this.enemy_engagementDistance[this.a])
									{
										if (this.enemy_velX[this.a] == 0)
										{
											if (this.enemy_velX[this.a] > 1)
											{
												(this.enemy_velX[this.a] - 1);
											}
											else if (this.enemy_velX[this.a] < -1)
											{
												(this.enemy_velX[this.a] + 1);
											}
											else
											{
												this.enemy_velX[this.a] = 0;
											}
										}
										else
										{
											this.enemy_anim[this.a] = 1;
											this.enemy_fr[this.a] = 0;
											this.enemy_frOld[this.a] = 0;
										}
									}
									else if (this.enemy_face[this.a] == 0)
									{
										if (this.enemy_velX[this.a] > -6)
										{
											(this.enemy_velX[this.a] - 1);
										}
									}
									else if (this.enemy_velX[this.a] < 6)
									{
										(this.enemy_velX[this.a] + 1);
									}
									this.enemy_x[this.a] = this.enemy_x[this.a] + this.enemy_velX[this.a];
									break;
								}
								case 3:
								{
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
									if (this.enemy_fr[this.a] > this.enemy_large1_maxFrames[this.enemy_anim[this.a]])
									{
										this.enemy_anim[this.a] = 1;
										this.enemy_fr[this.a] = 0;
										this.enemy_frOld[this.a] = 0;
									}
									if (this.enemy_fr[this.a] > 70)
									{
									}
									if (this.enemy_fr[this.a] < 85)
									{
										this.enemy_large1_swordCollisions();
									}
									break;
								}
								case 4:
								{
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
									if (this.enemy_fr[this.a] > this.enemy_large1_maxFrames[this.enemy_anim[this.a]])
									{
										this.enemy_anim[this.a] = 1;
										this.enemy_fr[this.a] = 0;
										this.enemy_frOld[this.a] = 0;
									}
									if (this.enemy_fr[this.a] != 48)
									{
									}
									if (this.enemy_fr[this.a] == 72)
									{
										this.enemy_tempPos_y = this.enemy_y[this.a] + this["enemy_large1_anim" + this.enemy_anim[this.a] + "_gun_y"][int(this.enemy_fr[this.a])] + 10;
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_tempPos_x = this.enemy_x[this.a] + this["enemy_large1_anim" + this.enemy_anim[this.a] + "_gun_x"][int(this.enemy_fr[this.a])] - 22;
											this.addSimpleParticle(0, this.enemy_tempPos_x, this.enemy_tempPos_y, this["enemy_large1_anim" + this.enemy_anim[this.a] + "_gun_r"][int(this.enemy_fr[this.a])] - Math.PI, int(Math.random() * 5), 0);
											this.addParticle(1, this.enemy_tempPos_x, this.enemy_tempPos_y, -Math.PI, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(-0.05) * -16, Math.sin(-0.05) * -16, 0, int(-0.05 / (Math.PI * 2) * 64), 0, 0, 1, 25);
										}
										else
										{
											this.enemy_tempPos_x = this.enemy_x[this.a] - this["enemy_large1_anim" + this.enemy_anim[this.a] + "_gun_x"][int(this.enemy_fr[this.a])] + 22;
											this.addSimpleParticle(0, this.enemy_tempPos_x, this.enemy_tempPos_y, this["enemy_large1_anim" + this.enemy_anim[this.a] + "_gun_r"][int(this.enemy_fr[this.a])], int(Math.random() * 5), 0);
											this.addParticle(1, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(0.05 + Math.PI) * -16, Math.sin(0.05 + Math.PI) * -16, 0, int((0.05 + Math.PI) / (Math.PI * 2) * 64), 0, 0, 1, 25);
										}
									}
									break;
								}
								case 5:
								{
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
									if (this.enemy_fr[this.a] > this.enemy_large1_maxFrames[this.enemy_anim[this.a]])
									{
										this.enemy_anim[this.a] = 1;
										this.enemy_fr[this.a] = 0;
										this.enemy_frOld[this.a] = 0;
									}
									if (this.enemy_fr[this.a] > 55)
									{
									}
									if (this.enemy_fr[this.a] < 63)
									{
										this.enemy_large1_swordCollisions();
									}
									break;
								}
								case 6:
								{
									break;
								}
								case 7:
								{
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
									if (this.enemy_fr[this.a] > this.enemy_large1_maxFrames[this.enemy_anim[this.a]])
									{
										this.enemy_fr[this.a] = 24;
										this.enemy_frOld[this.a] = 24;
									}
									if (this.enemy_fr[this.a] > 23)
									{
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_velX[this.a] = -18;
										}
										else
										{
											this.enemy_velX[this.a] = 18;
										}
									}
									this.enemy_x[this.a] = this.enemy_x[this.a] + this.enemy_velX[this.a];
									if (this.enemy_face[this.a] == 0)
									{
										if (this.character_x > this.enemy_x[this.a])
										{
											this.enemy_lineOfSightTimer[this.a] = this.enemy_lineOfSightTimer[this.a] + Math.abs(this.enemy_velX[this.a]);
											if (this.enemy_lineOfSightTimer[this.a] > 500)
											{
												this.enemy_velX[this.a] = 0;
												this.enemy_anim[this.a] = 1;
												this.enemy_fr[this.a] = 0;
												this.enemy_frOld[this.a] = 0;
											}
										}
									}
									else if (this.character_x < this.enemy_x[this.a])
									{
										this.enemy_lineOfSightTimer[this.a] = this.enemy_lineOfSightTimer[this.a] + Math.abs(this.enemy_velX[this.a]);
										if (this.enemy_lineOfSightTimer[this.a] > 500)
										{
											this.enemy_velX[this.a] = 0;
											this.enemy_anim[this.a] = 1;
											this.enemy_fr[this.a] = 0;
											this.enemy_frOld[this.a] = 0;
										}
									}
									if (this.enemy_velX[this.a] > 0)
									{
										this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] + 60) / 50);
										if (this.level_collidable[this.level[this.tileOn]] == 1)
										{
											this.enemy_velX[this.a] = 0;
											this.enemy_anim[this.a] = 8;
											this.enemy_fr[this.a] = 0;
											this.enemy_frOld[this.a] = 0;
										}
									}
									else if (this.enemy_velX[this.a] < 0)
									{
										this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] - 60) / 50);
										if (this.level_collidable[this.level[this.tileOn]] == 1)
										{
											this.enemy_velX[this.a] = 0;
											this.enemy_anim[this.a] = 8;
											this.enemy_fr[this.a] = 0;
											this.enemy_frOld[this.a] = 0;
										}
									}
									if (this.enemy_fr[this.a] > 23)
									{
										this.enemy_large1_swordCollisions();
									}
									break;
								}
								case 8:
								{
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
									if (this.enemy_fr[this.a] > this.enemy_large1_maxFrames[this.enemy_anim[this.a]])
									{
										this.enemy_anim[this.a] = 1;
										this.enemy_fr[this.a] = 0;
										this.enemy_frOld[this.a] = 0;
									}
									break;
								}
								default:
								{
									break;
								}
							}
						}
						else
						{
							this.removeEnemy(this.a);
						}
						break;
					}
					case 3:
					{
						if (this.enemy_health_body[this.a] > 0)
						{
						}
						if (this.enemy_health_head[this.a] > 0)
						{
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							this.enemy_y[this.a] = this.enemy_y[this.a] + this.enemy_velY[this.a];
							if (int(this.enemy_face[this.a]) == 0)
							{
								this.enemy_velY[this.a] = this.enemy_velY[this.a] - 0.1;
								if (this.enemy_velY[this.a] < -2)
								{
									this.enemy_face[this.a] = 1;
								}
							}
							else
							{
								this.enemy_velY[this.a] = this.enemy_velY[this.a] + 0.1;
								if (this.enemy_velY[this.a] > 2)
								{
									this.enemy_face[this.a] = 0;
								}
							}
							this.enemy_fr[this.a] = this.enemy_fr[this.a] + 0.5;
							if (this.enemy_fr[this.a] > 32)
							{
								this.enemy_fr[this.a] = 0;
							}
						}
						else
						{
							this.playSoundEffect(25, 1, 0);
							this.addSimpleParticle(10, this.enemy_x[this.a], this.enemy_y[this.a], 0, 0, 0);
							this.b = 0;
							while (this.b < 30)
							{
								
								this.addParticle(2, this.enemy_x[this.a], this.enemy_y[this.a], 0, this.enemy_x[this.a], this.enemy_y[this.a], 0, Math.random() * 30 - 15, (-Math.random()) * 10, 0, 0, 0, 0, 0, Math.random() + 0.5);
								
								this.b  ++ ;
								
							}
							
							this.discsDestroyed  ++ ;
							
							if (this.levelToLoad == 4)
							{
								if (this.discsDestroyed < 20)
								{
									this.messageTime = 60;
									this.playSoundEffect(86, 2, 0);
									this.messageText = "DATA DISC DESTROYED " + this.discsDestroyed + "^20";
								}
								else
								{
									this.messageTime2 = 70;
									this.playSoundEffect(85, 2, 0);
									this.messageText2 = "OBJECTIVE COMPLETE: DESTROY 20 DATA DISCS";
									this.scoreTally = this.scoreTally + 100;
									this.tempScoreQue = "";
									this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
									this.scoreQue.push(this.tempScoreQue);
									if (this.scoreQue.length > 3)
									{
										this.scoreQue.splice(0, 1);
									}
									this.scoreQueTime = 60;
									this.multiplier_countdown = this.max_multiplier_countdown;
								}
							}
							else if (this.discsDestroyed < 10)
							{
								this.messageTime = 60;
								this.playSoundEffect(86, 2, 0);
								this.messageText = "DATA DISC DESTROYED " + this.discsDestroyed + "^10";
							}
							else
							{
								this.messageTime2 = 70;
								this.playSoundEffect(85, 2, 0);
								this.messageText2 = "OBJECTIVE COMPLETE: DESTROY 10 DATA DISCS";
								this.scoreTally = this.scoreTally + 100;
								this.tempScoreQue = "";
								this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
								this.scoreQue.push(this.tempScoreQue);
								if (this.scoreQue.length > 3)
								{
									this.scoreQue.splice(0, 1);
								}
								this.scoreQueTime = 60;
								this.multiplier_countdown = this.max_multiplier_countdown;
							}
							this.removeEnemy(this.a);
						}
						break;
					}
					case 4:
					{
						if (this.enemy_health_body[this.a] > 0)
						{
						}
						if (this.enemy_health_head[this.a] > 0)
						{
							if (this.enemy_initialized[this.a] == 0)
							{
								this.enemy_anim[this.a] = 0;
								this.enemy_initialized[this.a] = 1;
								this.enemy_engagementDistance[this.a] = int(Math.random() * 6) + 5;
								this.enemy_hasLineOfSight[this.a] = true;
							}
							if (this.enemy_statusEffect[this.a] == 1)
							{
								this.enemy_health_head[this.a] = this.enemy_health_head[this.a] - this.enemy_statusEffect_atp[this.a];
								this.enemy_health_body[this.a] = this.enemy_health_body[this.a] - this.enemy_statusEffect_atp[this.a] * 0.95;
								this.enemy_health_headOld[this.a] = this.enemy_health_head[this.a];
								this.enemy_health_bodyOld[this.a] = this.enemy_health_body[this.a];
								this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
								this.c = int(Math.random() * 2);
								if (this.c == 0)
								{
									this.addParticle(3, this.particle_x[(this.particle_x.length - 1)] - this.smokeWidth * 0.5, this.particle_y[(this.particle_y.length - 1)] - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 3 + 2, 5, 1.5 + Math.random() * 0.5, 0, 0, 0, 0);
								}
								if (this.enemy_statusEffect_atp[this.a] > 0.001)
								{
									this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
									if (this.enemy_statusEffect_atp[this.a] > 0.005)
									{
										this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
									}
								}
							}
							if (this.enemy_anim[this.a] == 3)
							{
								this.enemy_fr[this.a] = this.enemy_fr[this.a] + Math.abs(this.enemy_velX[this.a] * 0.2);
							}
							else if (this.enemy_anim[this.a] == 2)
							{
								this.enemy_fr[this.a] = this.enemy_fr[this.a] + Math.abs((this.enemy_velX[this.a] + this.enemy_velY[this.a]) * 0.15);
							}
							else
							{
								var _loc_1:* = this.enemy_fr;
								var _loc_2:* = this.a;
								var _loc_3:* = this.enemy_fr[this.a] + 1;
								_loc_1[_loc_2] = _loc_3;
							}
							if (this.enemy_fr[this.a] > this.beanAnimFrMax[this.enemy_anim[this.a]])
							{
								if (this.enemy_anim[this.a] != 0)
								{
								}
								if (this.enemy_anim[this.a] != 1)
								{
								}
								if (this.enemy_anim[this.a] != 4)
								{
								}
								if (this.enemy_anim[this.a] == 5)
								{
									this.enemy_anim[this.a] = int(Math.random() * 2);
								}
								if (this.enemy_anim[this.a] != 3)
								{
									this.enemy_fr[this.a] = 0;
								}
								else
								{
									this.enemy_fr[this.a] = 4;
								}
							}
							if (this.enemy_anim[this.a] == 4)
							{
							}
							if (this.enemy_fr[this.a] == 11)
							{
								if (this.enemy_face[this.a] == 0)
								{
									if (Math.abs(this.character_x - (this.enemy_x[this.a] + 15)) < 20)
									{
										if (Math.abs(this.character_y - this.enemy_y[this.a]) < 20)
										{
											this.character_health = this.character_health - 0.5;
											if (this.character_invincibleTime < 1)
											{
												if (this.jump == false)
												{
												}
												if (this.character_velX == 0)
												{
													this.character_hurtTime = 30;
													this.anim = int(Math.random() * 4) + 11;
													this.fr = 0;
													this.frOld = 0;
													this.character_velX = 0;
												}
											}
											if (this.numberOfBloodSplatSFX < 1)
											{
												this.playSoundEffect(int(Math.random() * 4) + 45, 2, 0);
												
												this.numberOfBloodSplatSFX  ++ ;
												
											}
											this.addSimpleParticle(5, this.enemy_x[this.a] + 15 - 135 + Math.random() * 40 - 20, this.enemy_y[this.a] - 30 - 85 + Math.random() * 40 - 20, 0, 0, 0);
											this.enemy_tempPos_x = this.enemy_x[this.a] + 15 + Math.random() * 40 - 20;
											this.enemy_tempPos_y = this.enemy_y[this.a] - 30 + Math.random() * 40 - 20;
											this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
										}
									}
								}
								else if (Math.abs(this.character_x - (this.enemy_x[this.a] - 15)) < 20)
								{
									if (Math.abs(this.character_y - this.enemy_y[this.a]) < 20)
									{
										this.character_health = this.character_health - 0.5;
										if (this.character_invincibleTime < 1)
										{
											if (this.jump == false)
											{
											}
											if (this.character_velX == 0)
											{
												this.character_hurtTime = 30;
												this.anim = int(Math.random() * 4) + 11;
												this.fr = 0;
												this.frOld = 0;
												this.character_velX = 0;
											}
										}
										if (this.numberOfBloodSplatSFX < 1)
										{
											this.playSoundEffect(int(Math.random() * 4) + 45, 2, 0);
											
											this.numberOfBloodSplatSFX  ++ ;
											
										}
										this.addSimpleParticle(5, this.enemy_x[this.a] - 15 - 135 + Math.random() * 40 - 20, this.enemy_y[this.a] - 30 - 85 + Math.random() * 40 - 20, 0, 0, 0);
										this.enemy_tempPos_x = this.enemy_x[this.a] - 15 + Math.random() * 40 - 20;
										this.enemy_tempPos_y = this.enemy_y[this.a] - 30 + Math.random() * 40 - 20;
										this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
									}
								}
							}
							if (this.enemy_lineOfSightCountdown[this.a] > 5)
							{
							}
							if (this.enemy_jump[this.a] == false)
							{
								this.enemy_dX = this.enemy_x[this.a] - this.character_x;
								this.enemy_dY = this.enemy_y[this.a] - this.character_y;
								this.enemy_radTo[this.a] = Math.atan2(this.enemy_dY, this.enemy_dX);
								this.enemy_headRot[this.a] = this.enemy_radTo[this.a];
								this.enemy_tempRise = Math.sin(this.enemy_headRot[this.a]) * -25;
								this.enemy_tempRun = Math.cos(this.enemy_headRot[this.a]) * -25;
								this.enemy_lineOfSightCountdown[this.a] = 0;
								this.enemy_dist = Math.sqrt(this.enemy_dX * this.enemy_dX + this.enemy_dY * this.enemy_dY);
								this.enemy_dist = Math.abs(int(this.enemy_dist / 25));
								if (this.enemy_dist > 30)
								{
									this.enemy_dist = 30;
								}
								this.enemy_hasLineOfSight[this.a] = true;
								this.b = 0;
								while (this.b < this.enemy_dist)
								{
									
									this.tileOn = int((this.enemy_y[this.a] - 20 + this.enemy_tempRise * this.b) / 50) * this.level_width + int((this.enemy_x[this.a] + this.enemy_tempRun * this.b) / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 1)
									{
										this.enemy_hasLineOfSight[this.a] = false;
										this.b = 50;
									}
									
									this.b  ++ ;
									
								}
							}
							else
							{
								var _loc_1:* = this.enemy_lineOfSightCountdown;
								var _loc_2:* = this.a;
								var _loc_3:* = this.enemy_lineOfSightCountdown[this.a] + 1;
								_loc_1[_loc_2] = _loc_3;
							}
							if (this.enemy_hasLineOfSight[this.a] == true)
							{
								if (this.enemy_jump[this.a] == false)
								{
									if (this.enemy_anim[this.a] != 5)
									{
									}
									if (this.enemy_anim[this.a] != 4)
									{
										if (this.enemy_x[this.a] > this.character_x + 20)
										{
											if (this.enemy_velX[this.a] > -this.enemy_engagementDistance[this.a])
											{
												(this.enemy_velX[this.a] - 1);
											}
											if (this.enemy_anim[this.a] != 3)
											{
												this.enemy_anim[this.a] = 3;
												this.enemy_fr[this.a] = 0;
											}
										}
										else if (this.enemy_x[this.a] < this.character_x - 20)
										{
											if (this.enemy_velX[this.a] < this.enemy_engagementDistance[this.a])
											{
												(this.enemy_velX[this.a] + 1);
											}
											if (this.enemy_anim[this.a] != 3)
											{
												this.enemy_anim[this.a] = 3;
												this.enemy_fr[this.a] = 0;
											}
										}
										else
										{
											if (this.enemy_velX[this.a] > 1)
											{
												(this.enemy_velX[this.a] - 1);
											}
											else if (this.enemy_velX[this.a] < -1)
											{
												(this.enemy_velX[this.a] + 1);
											}
											else if (this.enemy_velX[this.a] != 0)
											{
												this.enemy_velX[this.a] = 0;
												this.enemy_anim[this.a] = int(Math.random() * 2);
												this.enemy_fr[this.a] = 0;
											}
											if (Math.abs(this.enemy_y[this.a] - this.character_y) < 30)
											{
												if (this.enemy_anim[this.a] != 4)
												{
													this.enemy_anim[this.a] = 4;
													this.enemy_fr[this.a] = 4;
													this.enemy_velX[this.a] = 0;
												}
											}
										}
									}
									this.c = int(Math.random() * 100);
									if (this.c == 0)
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = Math.random() * -16 - 10;
									}
								}
								else
								{
									this.enemy_velY[this.a] = this.enemy_velY[this.a] + 2;
									if (this.enemy_velY[this.a] > 20)
									{
										this.enemy_velY[this.a] = 20;
									}
									if (this.enemy_anim[this.a] != 2)
									{
										this.enemy_anim[this.a] = 2;
										this.enemy_fr[this.a] = 0;
									}
								}
							}
							else if (this.enemy_jump[this.a] == true)
							{
								this.enemy_velY[this.a] = this.enemy_velY[this.a] + 2;
								if (this.enemy_velY[this.a] > 20)
								{
									this.enemy_velY[this.a] = 20;
								}
								if (this.enemy_anim[this.a] != 2)
								{
									this.enemy_anim[this.a] = 2;
									this.enemy_fr[this.a] = 0;
								}
								if (this.enemy_y[this.a] > this.character_y + 50)
								{
									if (this.enemy_velX[this.a] > 4)
									{
										this.enemy_velX[this.a] = this.enemy_velX[this.a] - 4;
									}
									else if (this.enemy_velX[this.a] < -4)
									{
										this.enemy_velX[this.a] = this.enemy_velX[this.a] + 4;
									}
									else
									{
										this.enemy_velX[this.a] = 0;
									}
								}
								else if (this.enemy_x[this.a] > this.character_x + 20)
								{
									if (this.enemy_velX[this.a] > -this.enemy_engagementDistance[this.a])
									{
										(this.enemy_velX[this.a] - 1);
									}
								}
								else if (this.enemy_x[this.a] < this.character_x - 20)
								{
									if (this.enemy_velX[this.a] < this.enemy_engagementDistance[this.a])
									{
										(this.enemy_velX[this.a] + 1);
									}
								}
								else if (this.enemy_velX[this.a] > 1)
								{
									(this.enemy_velX[this.a] - 1);
								}
								else if (this.enemy_velX[this.a] < -1)
								{
									(this.enemy_velX[this.a] + 1);
								}
								else if (this.enemy_velX[this.a] != 0)
								{
									this.enemy_velX[this.a] = 0;
								}
							}
							else if (this.character_y > this.enemy_y[this.a])
							{
								if (this.enemy_velX[this.a] > 0)
								{
									if (this.enemy_velX[this.a] < this.enemy_engagementDistance[this.a])
									{
										(this.enemy_velX[this.a] + 1);
									}
									if (this.enemy_anim[this.a] != 3)
									{
										this.enemy_anim[this.a] = 3;
										this.enemy_fr[this.a] = 0;
									}
								}
								else if (this.enemy_velX[this.a] < 0)
								{
									if (this.enemy_velX[this.a] > -this.enemy_engagementDistance[this.a])
									{
										(this.enemy_velX[this.a] - 1);
									}
									if (this.enemy_anim[this.a] != 3)
									{
										this.enemy_anim[this.a] = 3;
										this.enemy_fr[this.a] = 0;
									}
								}
								else
								{
									this.c = int(Math.random() * 2);
									if (this.c == 0)
									{
										this.enemy_velX[this.a] = 1;
									}
									else
									{
										this.enemy_velX[this.a] = -1;
									}
								}
							}
							if (this.enemy_velX[this.a] > 0)
							{
								this.enemy_face[this.a] = 0;
							}
							else if (this.enemy_velX[this.a] < 0)
							{
								this.enemy_face[this.a] = 1;
							}
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							this.enemy_x[this.a] = this.enemy_x[this.a] + this.enemy_velX[this.a];
							if (this.enemy_velX[this.a] > 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 1) / 50) * this.level_width + int((this.enemy_x[this.a] + 20) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = (int(this.enemy_x[this.a] / 50) + 1) * 50 - 20;
									if (this.enemy_hasLineOfSight[this.a] == false)
									{
										this.enemy_velX[this.a] = -1;
									}
								}
								this.tileOn = int((this.enemy_y[this.a] - 50) / 50) * this.level_width + int((this.enemy_x[this.a] + 20) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = (int(this.enemy_x[this.a] / 50) + 1) * 50 - 20;
									if (this.enemy_hasLineOfSight[this.a] == false)
									{
										this.enemy_velX[this.a] = -1;
									}
								}
								this.tileOn = int((this.enemy_y[this.a] - 10) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
								if (this.nodeMap[this.tileOn] == 3)
								{
									if (this.character_y - 50 < this.enemy_y[this.a])
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = -15 - Math.random() * 19;
									}
								}
								else if (this.nodeMap[this.tileOn] == 5)
								{
									if (this.enemy_y[this.a] > this.character_y)
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = -20 - Math.random() * 19;
									}
								}
							}
							else if (this.enemy_velX[this.a] < 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 1) / 50) * this.level_width + int((this.enemy_x[this.a] - 20) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 20;
									if (this.enemy_hasLineOfSight[this.a] == false)
									{
										this.enemy_velX[this.a] = 1;
									}
								}
								this.tileOn = int((this.enemy_y[this.a] - 50) / 50) * this.level_width + int((this.enemy_x[this.a] - 20) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 20;
									if (this.enemy_hasLineOfSight[this.a] == false)
									{
										this.enemy_velX[this.a] = 1;
									}
								}
								this.tileOn = int((this.enemy_y[this.a] - 10) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
								if (this.nodeMap[this.tileOn] == 4)
								{
									if (this.character_y - 50 < this.enemy_y[this.a])
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = -15 - Math.random() * 19;
									}
								}
								else if (this.nodeMap[this.tileOn] == 5)
								{
									if (this.enemy_y[this.a] > this.character_y)
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = -20 - Math.random() * 19;
									}
								}
							}
							this.enemy_y[this.a] = this.enemy_y[this.a] + this.enemy_velY[this.a];
							this.tileOn = int(this.enemy_y[this.a] / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 0)
							{
								if (this.enemy_jump[this.a] == false)
								{
									this.enemy_jump[this.a] = true;
								}
							}
							else
							{
								this.enemy_y[this.a] = int(this.enemy_y[this.a] / 50) * 50;
								if (this.enemy_jump[this.a] == true)
								{
									this.enemy_jump[this.a] = false;
									if (this.enemy_anim[this.a] != 3)
									{
									}
									if (this.enemy_anim[this.a] == 4)
									{
										this.enemy_anim[this.a] = int(Math.random() * 2);
										this.enemy_fr[this.a] = 0;
									}
								}
							}
							if (this.enemy_velY[this.a] < 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 50) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_velY[this.a] = 0;
									this.enemy_y[this.a] = int(this.enemy_y[this.a] / 50) * 50 + 50;
								}
							}
							if (Math.abs(this.enemy_x[this.a] - this.character_x) <= 1200)
							{
							}
							if (Math.abs(this.enemy_y[this.a] - this.character_y) > 800)
							{
								this.enemy_health_head[this.a] = -50001;
								this.enemy_markedForRemoval[this.a] = true;
							}
						}
						else if (this.enemy_health_head[this.a] == -50001)
						{
							this.removeEnemy(this.a);
						}
						else
						{
							if (this.enemy_markedForRemoval[this.a] == false)
							{
								this.enemy_markedForRemoval[this.a] = true;
								this.cameraShakeFun(0.5);
								this.b = 0;
								while (this.b < 3)
								{
									
									this.enemy_tempPos_x = this.enemy_x[this.a] + Math.random() * 50 - 25;
									this.enemy_tempPos_y = this.enemy_y[this.a] - 23 + Math.random() * 50 - 25;
									this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
									
									this.b  ++ ;
									
								}
								this.addParticle(20, this.enemy_x[this.a] - 20, this.enemy_y[this.a] - 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * -15 - 5, Math.random() * -10 - 5, 0, 0, 0, 0, 0, 0);
								this.addParticle(20, this.enemy_x[this.a] + 20, this.enemy_y[this.a] - 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 15 + 5, Math.random() * -10 - 5, 0, 1, 0, 0, 0, 0);
								this.b = 0;
								while (this.b < 8)
								{
									
									this.enemy_tempPos_x = this.enemy_x[this.a] + Math.random() * 40 - 20;
									this.enemy_tempPos_y = this.enemy_y[this.a] - 5 - Math.random() * 60;
									if (this.enemy_face[this.a] == 0)
									{
										this.enemy_tempVel_x = Math.random() * -10 - 1;
									}
									else
									{
										this.enemy_tempVel_x = Math.random() * 10 + 1;
									}
									this.enemy_tempVel_y = Math.random() * -15 - 10;
									this.addParticle(9, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, int(Math.random() * 5), 0, 0, 0, 0);
									
									this.b  ++ ;
									
								}
								var _loc_1:* = this.weaponProficiencyKills;
								var _loc_2:* = this.enemy_damagedBy[this.a];
								var _loc_3:* = this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.enemy_damagedBy[this.a] != 20)
								{
									if (this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] >= 50)
									{
									}
									if (this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] == 0)
									{
										this.scoreTally = this.scoreTally + 100;
										this.tempScoreQue = "";
										this.tempScoreQue = this.tempScoreQue + this.scoreNames[this.enemy_damagedBy[this.a] + 12];
										this.scoreQue.push(this.tempScoreQue);
										if (this.scoreQue.length > 3)
										{
											this.scoreQue.splice(0, 1);
										}
										this.scoreQueTime = 60;
										this.multiplier_countdown = this.max_multiplier_countdown;
										this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] = 1;
									}
								}
								else
								{
									if (this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] >= 5)
									{
									}
									if (this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] == 0)
									{
										this.scoreTally = this.scoreTally + 100;
										this.tempScoreQue = "";
										this.tempScoreQue = this.tempScoreQue + this.scoreNames[this.enemy_damagedBy[this.a] + 12];
										this.scoreQue.push(this.tempScoreQue);
										if (this.scoreQue.length > 3)
										{
											this.scoreQue.splice(0, 1);
										}
										this.scoreQueTime = 60;
										this.multiplier_countdown = this.max_multiplier_countdown;
										this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] = 1;
									}
								}
								this.tempScoreQue = "";
								this.tempScoreQue = this.tempScoreQue + this.scoreNames[0];
								this.scoreTally = this.scoreTally + 10;
								var _loc_1:* = this.scoreTimesEarned;
								var _loc_2:int = 0;
								var _loc_3:* = this.scoreTimesEarned[0] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.gun_ammo[this.character_gunEquipped] == 0)
								{
								}
								if (this.gun_mag_size[this.character_gunEquipped] > 2)
								{
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[3]);
									this.scoreTally = this.scoreTally + 5;
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 3;
									var _loc_3:* = this.scoreTimesEarned[3] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
								this.playSoundEffect(int(Math.random() * 3) + 90, this.tempVol * 3, 0);
								this.playSoundEffect(int(Math.random() * 5) + 110, this.tempVol * 2, 0);
								
								this.multiKillCount  ++ ;
								
								if (this.multiKillCount > 10)
								{
									this.multiKillCount = 10;
								}
								this.multiKillTime = 1;
								if (this.multiKillCount > 1)
								{
									this.scoreTally = this.scoreTally + 5 * (this.multiKillCount - 1);
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[32 + (this.multiKillCount - 1)]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:* = 32 + (this.multiKillCount - 1);
									var _loc_3:* = this.scoreTimesEarned[32 + (this.multiKillCount - 1)] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								this.scoreQue.push(this.tempScoreQue);
								if (this.scoreQue.length > 3)
								{
									this.scoreQue.splice(0, 1);
								}
								this.scoreQueTime = 60;
								this.multiplier = this.multiplier + 0.1;
								this.multiplier_countdown = this.max_multiplier_countdown;
								this.enemy_velY[this.a] = Math.random() * -3 - 1;
							}
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							this.enemy_y[this.a] = this.enemy_y[this.a] + this.enemy_velY[this.a];
							if (this.enemy_anim[this.a] != 6)
							{
								this.enemy_anim[this.a] = 6;
								this.enemy_fr[this.a] = 0;
							}
							var _loc_1:* = this.enemy_fr;
							var _loc_2:* = this.a;
							var _loc_3:* = this.enemy_fr[this.a] + 1;
							_loc_1[_loc_2] = _loc_3;
							if (this.enemy_fr[this.a] > this.beanAnimFrMax[this.enemy_anim[this.a]])
							{
								this.removeEnemy(this.a);
							}
						}
						break;
					}
					case 5:
					{
						if (this.enemy_health_body[this.a] > 0)
						{
						}
						if (this.enemy_health_head[this.a] > 0)
						{
							if (this.enemy_initialized[this.a] == 0)
							{
								this.enemy_anim[this.a] = 0;
								this.enemy_initialized[this.a] = 1;
								this.enemy_engagementDistance[this.a] = int(Math.random() * 10) + 5;
								this.enemy_hasLineOfSight[this.a] = true;
							}
							if (this.enemy_statusEffect[this.a] == 1)
							{
								this.enemy_health_head[this.a] = this.enemy_health_head[this.a] - this.enemy_statusEffect_atp[this.a];
								this.enemy_health_body[this.a] = this.enemy_health_body[this.a] - this.enemy_statusEffect_atp[this.a] * 0.95;
								this.enemy_health_headOld[this.a] = this.enemy_health_head[this.a];
								this.enemy_health_bodyOld[this.a] = this.enemy_health_body[this.a];
								this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
								this.c = int(Math.random() * 2);
								if (this.c == 0)
								{
									this.addParticle(3, this.particle_x[(this.particle_x.length - 1)] - this.smokeWidth * 0.5, this.particle_y[(this.particle_y.length - 1)] - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 3 + 2, 5, 1.5 + Math.random() * 0.5, 0, 0, 0, 0);
								}
								if (this.enemy_statusEffect_atp[this.a] > 0.001)
								{
									this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
									if (this.enemy_statusEffect_atp[this.a] > 0.005)
									{
										this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
									}
								}
							}
							if (this.enemy_anim[this.a] == 2)
							{
								this.enemy_fr[this.a] = this.enemy_fr[this.a] + Math.abs(this.enemy_velX[this.a] * 0.2);
							}
							else
							{
								var _loc_1:* = this.enemy_fr;
								var _loc_2:* = this.a;
								var _loc_3:* = this.enemy_fr[this.a] + 1;
								_loc_1[_loc_2] = _loc_3;
							}
							if (this.enemy_fr[this.a] > this.teenieAnimFrMax[this.enemy_anim[this.a]])
							{
								if (this.enemy_anim[this.a] != 0)
								{
								}
								if (this.enemy_anim[this.a] == 1)
								{
									this.enemy_anim[this.a] = int(Math.random() * 2);
								}
								if (this.enemy_anim[this.a] != 3)
								{
								}
								if (this.enemy_anim[this.a] != 4)
								{
									this.enemy_fr[this.a] = 0;
								}
								else
								{
									this.enemy_fr[this.a] = this.teenieAnimFrMax[this.enemy_anim[this.a]];
								}
							}
							if (this.enemy_lineOfSightCountdown[this.a] > 5)
							{
							}
							if (this.enemy_jump[this.a] == false)
							{
								this.enemy_dX = this.enemy_x[this.a] - this.character_x;
								this.enemy_dY = this.enemy_y[this.a] - this.character_y;
								this.enemy_radTo[this.a] = Math.atan2(this.enemy_dY, this.enemy_dX);
								this.enemy_headRot[this.a] = this.enemy_radTo[this.a];
								this.enemy_tempRise = Math.sin(this.enemy_headRot[this.a]) * -25;
								this.enemy_tempRun = Math.cos(this.enemy_headRot[this.a]) * -25;
								this.enemy_lineOfSightCountdown[this.a] = 0;
								this.enemy_dist = Math.sqrt(this.enemy_dX * this.enemy_dX + this.enemy_dY * this.enemy_dY);
								this.enemy_dist = Math.abs(int(this.enemy_dist / 25));
								if (this.enemy_dist > 30)
								{
									this.enemy_dist = 30;
								}
								this.enemy_hasLineOfSight[this.a] = true;
								this.b = 0;
								while (this.b < this.enemy_dist)
								{
									
									this.tileOn = int((this.enemy_y[this.a] - 20 + this.enemy_tempRise * this.b) / 50) * this.level_width + int((this.enemy_x[this.a] + this.enemy_tempRun * this.b) / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 1)
									{
										this.enemy_hasLineOfSight[this.a] = false;
										this.b = 50;
									}
									
									this.b  ++ ;
									
								}
							}
							else
							{
								var _loc_1:* = this.enemy_lineOfSightCountdown;
								var _loc_2:* = this.a;
								var _loc_3:* = this.enemy_lineOfSightCountdown[this.a] + 1;
								_loc_1[_loc_2] = _loc_3;
							}
							if (this.enemy_hasLineOfSight[this.a] == true)
							{
								if (this.enemy_jump[this.a] == false)
								{
									if (this.enemy_x[this.a] > this.character_x + 20)
									{
										if (this.enemy_velX[this.a] > -this.enemy_engagementDistance[this.a])
										{
											(this.enemy_velX[this.a] - 1);
										}
										if (this.enemy_anim[this.a] != 2)
										{
											this.enemy_anim[this.a] = 2;
											this.enemy_fr[this.a] = 0;
										}
									}
									else if (this.enemy_x[this.a] < this.character_x - 20)
									{
										if (this.enemy_velX[this.a] < this.enemy_engagementDistance[this.a])
										{
											(this.enemy_velX[this.a] + 1);
										}
										if (this.enemy_anim[this.a] != 2)
										{
											this.enemy_anim[this.a] = 2;
											this.enemy_fr[this.a] = 0;
										}
									}
									else
									{
										if (this.enemy_velX[this.a] > 1)
										{
											(this.enemy_velX[this.a] - 1);
										}
										else if (this.enemy_velX[this.a] < -1)
										{
											(this.enemy_velX[this.a] + 1);
										}
										else if (this.enemy_velX[this.a] != 0)
										{
											this.enemy_velX[this.a] = 0;
											this.enemy_anim[this.a] = int(Math.random() * 2);
											this.enemy_fr[this.a] = 0;
										}
										if (Math.abs(this.enemy_y[this.a] - this.character_y) < 30)
										{
											this.c = Math.random() * 5;
											if (this.c == 0)
											{
												this.enemy_health_head[this.a] = -100001;
											}
										}
									}
									this.c = int(Math.random() * 100);
									if (this.c == 0)
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = Math.random() * -16 - 10;
									}
								}
								else
								{
									this.enemy_velY[this.a] = this.enemy_velY[this.a] + 2;
									if (this.enemy_velY[this.a] > 20)
									{
										this.enemy_velY[this.a] = 20;
									}
									if (this.enemy_velY[this.a] < 0)
									{
										if (this.enemy_anim[this.a] != 3)
										{
											this.enemy_anim[this.a] = 3;
											this.enemy_fr[this.a] = 0;
										}
									}
									else if (this.enemy_velY[this.a] > 0)
									{
										if (this.enemy_anim[this.a] != 4)
										{
											this.enemy_anim[this.a] = 4;
											this.enemy_fr[this.a] = 0;
										}
									}
								}
							}
							else if (this.enemy_jump[this.a] == true)
							{
								this.enemy_velY[this.a] = this.enemy_velY[this.a] + 2;
								if (this.enemy_velY[this.a] > 20)
								{
									this.enemy_velY[this.a] = 20;
								}
								if (this.enemy_velY[this.a] < 0)
								{
									if (this.enemy_anim[this.a] != 3)
									{
										this.enemy_anim[this.a] = 3;
										this.enemy_fr[this.a] = 0;
									}
								}
								else if (this.enemy_velY[this.a] > 0)
								{
									if (this.enemy_anim[this.a] != 4)
									{
										this.enemy_anim[this.a] = 4;
										this.enemy_fr[this.a] = 0;
									}
								}
								if (this.enemy_y[this.a] > this.character_y + 50)
								{
									if (this.enemy_velX[this.a] > 4)
									{
										this.enemy_velX[this.a] = this.enemy_velX[this.a] - 4;
									}
									else if (this.enemy_velX[this.a] < -4)
									{
										this.enemy_velX[this.a] = this.enemy_velX[this.a] + 4;
									}
									else
									{
										this.enemy_velX[this.a] = 0;
									}
								}
								else if (this.enemy_x[this.a] > this.character_x + 20)
								{
									if (this.enemy_velX[this.a] > -this.enemy_engagementDistance[this.a])
									{
										(this.enemy_velX[this.a] - 1);
									}
								}
								else if (this.enemy_x[this.a] < this.character_x - 20)
								{
									if (this.enemy_velX[this.a] < this.enemy_engagementDistance[this.a])
									{
										(this.enemy_velX[this.a] + 1);
									}
								}
								else
								{
									if (this.enemy_velX[this.a] > 1)
									{
										(this.enemy_velX[this.a] - 1);
									}
									else if (this.enemy_velX[this.a] < -1)
									{
										(this.enemy_velX[this.a] + 1);
									}
									else if (this.enemy_velX[this.a] != 0)
									{
										this.enemy_velX[this.a] = 0;
									}
									if (Math.abs(this.enemy_y[this.a] - this.character_y) < 30)
									{
										this.c = Math.random() * 5;
										if (this.c == 0)
										{
											this.enemy_health_head[this.a] = -100001;
										}
									}
								}
							}
							else if (this.character_y > this.enemy_y[this.a])
							{
								if (this.enemy_velX[this.a] > 0)
								{
									if (this.enemy_velX[this.a] < this.enemy_engagementDistance[this.a])
									{
										(this.enemy_velX[this.a] + 1);
									}
									if (this.enemy_anim[this.a] != 2)
									{
										this.enemy_anim[this.a] = 2;
										this.enemy_fr[this.a] = 0;
									}
								}
								else if (this.enemy_velX[this.a] < 0)
								{
									if (this.enemy_velX[this.a] > -this.enemy_engagementDistance[this.a])
									{
										(this.enemy_velX[this.a] - 1);
									}
									if (this.enemy_anim[this.a] != 2)
									{
										this.enemy_anim[this.a] = 2;
										this.enemy_fr[this.a] = 0;
									}
								}
								else
								{
									this.c = int(Math.random() * 2);
									if (this.c == 0)
									{
										this.enemy_velX[this.a] = 1;
									}
									else
									{
										this.enemy_velX[this.a] = -1;
									}
								}
							}
							if (this.enemy_velX[this.a] > 0)
							{
								this.enemy_face[this.a] = 0;
							}
							else if (this.enemy_velX[this.a] < 0)
							{
								this.enemy_face[this.a] = 1;
							}
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							this.enemy_x[this.a] = this.enemy_x[this.a] + this.enemy_velX[this.a];
							if (this.enemy_velX[this.a] > 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 1) / 50) * this.level_width + int((this.enemy_x[this.a] + 20) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = (int(this.enemy_x[this.a] / 50) + 1) * 50 - 20;
									if (this.enemy_hasLineOfSight[this.a] == false)
									{
										this.enemy_velX[this.a] = -1;
									}
								}
								this.tileOn = int((this.enemy_y[this.a] - 50) / 50) * this.level_width + int((this.enemy_x[this.a] + 20) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = (int(this.enemy_x[this.a] / 50) + 1) * 50 - 20;
									if (this.enemy_hasLineOfSight[this.a] == false)
									{
										this.enemy_velX[this.a] = -1;
									}
								}
								this.tileOn = int((this.enemy_y[this.a] - 10) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
								if (this.nodeMap[this.tileOn] == 3)
								{
									if (this.character_y - 50 < this.enemy_y[this.a])
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = -15 - Math.random() * 19;
									}
								}
								else if (this.nodeMap[this.tileOn] == 5)
								{
									if (this.enemy_y[this.a] > this.character_y)
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = -20 - Math.random() * 19;
									}
								}
							}
							else if (this.enemy_velX[this.a] < 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 1) / 50) * this.level_width + int((this.enemy_x[this.a] - 20) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 20;
									if (this.enemy_hasLineOfSight[this.a] == false)
									{
										this.enemy_velX[this.a] = 1;
									}
								}
								this.tileOn = int((this.enemy_y[this.a] - 50) / 50) * this.level_width + int((this.enemy_x[this.a] - 20) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 20;
									if (this.enemy_hasLineOfSight[this.a] == false)
									{
										this.enemy_velX[this.a] = 1;
									}
								}
								this.tileOn = int((this.enemy_y[this.a] - 10) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
								if (this.nodeMap[this.tileOn] == 4)
								{
									if (this.character_y - 50 < this.enemy_y[this.a])
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = -15 - Math.random() * 19;
									}
								}
								else if (this.nodeMap[this.tileOn] == 5)
								{
									if (this.enemy_y[this.a] > this.character_y)
									{
										this.enemy_jump[this.a] = true;
										this.enemy_velY[this.a] = -20 - Math.random() * 19;
									}
								}
							}
							this.enemy_y[this.a] = this.enemy_y[this.a] + this.enemy_velY[this.a];
							this.tileOn = int(this.enemy_y[this.a] / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
							if (this.level_collidable[this.level[this.tileOn]] == 0)
							{
								if (this.enemy_jump[this.a] == false)
								{
									this.enemy_jump[this.a] = true;
								}
							}
							else
							{
								this.enemy_y[this.a] = int(this.enemy_y[this.a] / 50) * 50;
								if (this.enemy_jump[this.a] == true)
								{
									this.enemy_jump[this.a] = false;
									if (this.enemy_anim[this.a] != 3)
									{
									}
									if (this.enemy_anim[this.a] == 4)
									{
										this.enemy_anim[this.a] = int(Math.random() * 2);
										this.enemy_fr[this.a] = 0;
									}
								}
							}
							if (this.enemy_velY[this.a] < 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 50) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_velY[this.a] = 0;
									this.enemy_y[this.a] = int(this.enemy_y[this.a] / 50) * 50 + 50;
								}
							}
							if (Math.abs(this.enemy_x[this.a] - this.character_x) <= 1200)
							{
							}
							if (Math.abs(this.enemy_y[this.a] - this.character_y) > 800)
							{
								this.enemy_health_head[this.a] = -50001;
								this.enemy_markedForRemoval[this.a] = true;
							}
						}
						else if (this.enemy_health_head[this.a] == -50001)
						{
							this.removeEnemy(this.a);
						}
						else if (this.enemy_health_head[this.a] == -100001)
						{
							this.cameraShakeFun(0.5);
							this.b = 0;
							while (this.b < 3)
							{
								
								this.enemy_tempPos_x = this.enemy_x[this.a] + Math.random() * 50 - 25;
								this.enemy_tempPos_y = this.enemy_y[this.a] - 23 + Math.random() * 50 - 25;
								this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
								
								this.b  ++ ;
								
							}
							this.addParticle(20, this.enemy_x[this.a] - 20, this.enemy_y[this.a] - 20, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * -15 - 5, Math.random() * -10 - 5, 0, 0, 0, 0, 0, 0);
							this.addParticle(20, this.enemy_x[this.a] + 20, this.enemy_y[this.a] - 20, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 15 + 5, Math.random() * -10 - 5, 0, 1, 0, 0, 0, 0);
							this.b = 0;
							while (this.b < 5)
							{
								
								this.enemy_tempPos_x = this.enemy_x[this.a] + Math.random() * 40 - 20;
								this.enemy_tempPos_y = this.enemy_y[this.a] - 5 - Math.random() * 40;
								if (this.enemy_face[this.a] == 0)
								{
									this.enemy_tempVel_x = Math.random() * -10 - 1;
								}
								else
								{
									this.enemy_tempVel_x = Math.random() * 10 + 1;
								}
								this.enemy_tempVel_y = Math.random() * -15 - 10;
								this.addParticle(9, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, int(Math.random() * 5), 0, 0, 0, 0);
								
								this.b  ++ ;
								
							}
							this.addSimpleParticle(10, this.enemy_x[this.a], this.enemy_y[this.a] - 15, 0, 0, 0);
							this.character_health = this.character_health - 1.25;
							if (this.character_invincibleTime < 1)
							{
								if (this.jump == false)
								{
								}
								if (this.character_velX == 0)
								{
									this.character_hurtTime = 30;
									this.anim = int(Math.random() * 4) + 11;
									this.fr = 0;
									this.frOld = 0;
									this.character_velX = 0;
								}
							}
							this.removeEnemy(this.a);
						}
						else
						{
							if (this.enemy_markedForRemoval[this.a] == false)
							{
								this.enemy_markedForRemoval[this.a] = true;
								this.cameraShakeFun(0.5);
								this.b = 0;
								while (this.b < 3)
								{
									
									this.enemy_tempPos_x = this.enemy_x[this.a] + Math.random() * 50 - 25;
									this.enemy_tempPos_y = this.enemy_y[this.a] - 23 + Math.random() * 50 - 25;
									this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
									
									this.b  ++ ;
									
								}
								this.addParticle(20, this.enemy_x[this.a] - 20, this.enemy_y[this.a] - 20, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * -15 - 5, Math.random() * -10 - 5, 0, 0, 0, 0, 0, 0);
								this.addParticle(20, this.enemy_x[this.a] + 20, this.enemy_y[this.a] - 20, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 15 + 5, Math.random() * -10 - 5, 0, 1, 0, 0, 0, 0);
								this.b = 0;
								while (this.b < 5)
								{
									
									this.enemy_tempPos_x = this.enemy_x[this.a] + Math.random() * 40 - 20;
									this.enemy_tempPos_y = this.enemy_y[this.a] - 5 - Math.random() * 40;
									if (this.enemy_face[this.a] == 0)
									{
										this.enemy_tempVel_x = Math.random() * -10 - 1;
									}
									else
									{
										this.enemy_tempVel_x = Math.random() * 10 + 1;
									}
									this.enemy_tempVel_y = Math.random() * -15 - 10;
									this.addParticle(9, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, int(Math.random() * 5), 0, 0, 0, 0);
									
									this.b  ++ ;
									
								}
								var _loc_1:* = this.weaponProficiencyKills;
								var _loc_2:* = this.enemy_damagedBy[this.a];
								var _loc_3:* = this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.enemy_damagedBy[this.a] != 20)
								{
									if (this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] >= 50)
									{
									}
									if (this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] == 0)
									{
										this.scoreTally = this.scoreTally + 100;
										this.tempScoreQue = "";
										this.tempScoreQue = this.tempScoreQue + this.scoreNames[this.enemy_damagedBy[this.a] + 12];
										this.scoreQue.push(this.tempScoreQue);
										if (this.scoreQue.length > 3)
										{
											this.scoreQue.splice(0, 1);
										}
										this.scoreQueTime = 60;
										this.multiplier_countdown = this.max_multiplier_countdown;
										this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] = 1;
									}
								}
								else
								{
									if (this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] >= 5)
									{
									}
									if (this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] == 0)
									{
										this.scoreTally = this.scoreTally + 100;
										this.tempScoreQue = "";
										this.tempScoreQue = this.tempScoreQue + this.scoreNames[this.enemy_damagedBy[this.a] + 12];
										this.scoreQue.push(this.tempScoreQue);
										if (this.scoreQue.length > 3)
										{
											this.scoreQue.splice(0, 1);
										}
										this.scoreQueTime = 60;
										this.multiplier_countdown = this.max_multiplier_countdown;
										this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] = 1;
									}
								}
								this.tempScoreQue = "";
								this.tempScoreQue = this.tempScoreQue + this.scoreNames[0];
								this.scoreTally = this.scoreTally + 10;
								var _loc_1:* = this.scoreTimesEarned;
								var _loc_2:int = 0;
								var _loc_3:* = this.scoreTimesEarned[0] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.gun_ammo[this.character_gunEquipped] == 0)
								{
								}
								if (this.gun_mag_size[this.character_gunEquipped] > 2)
								{
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[3]);
									this.scoreTally = this.scoreTally + 5;
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 3;
									var _loc_3:* = this.scoreTimesEarned[3] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
								this.playSoundEffect(int(Math.random() * 3) + 90, this.tempVol * 3, 0);
								this.playSoundEffect(int(Math.random() * 5) + 110, this.tempVol * 2, 0);
								
								this.multiKillCount  ++ ;
								
								if (this.multiKillCount > 10)
								{
									this.multiKillCount = 10;
								}
								this.multiKillTime = 1;
								if (this.multiKillCount > 1)
								{
									this.scoreTally = this.scoreTally + 5 * (this.multiKillCount - 1);
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[32 + (this.multiKillCount - 1)]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:* = 32 + (this.multiKillCount - 1);
									var _loc_3:* = this.scoreTimesEarned[32 + (this.multiKillCount - 1)] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								this.scoreQue.push(this.tempScoreQue);
								if (this.scoreQue.length > 3)
								{
									this.scoreQue.splice(0, 1);
								}
								this.scoreQueTime = 60;
								this.multiplier = this.multiplier + 0.1;
								this.multiplier_countdown = this.max_multiplier_countdown;
								this.enemy_velY[this.a] = Math.random() * -3 - 1;
							}
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							this.enemy_y[this.a] = this.enemy_y[this.a] + this.enemy_velY[this.a];
							if (this.enemy_anim[this.a] != 5)
							{
								this.enemy_anim[this.a] = 5;
								this.enemy_fr[this.a] = 0;
							}
							var _loc_1:* = this.enemy_fr;
							var _loc_2:* = this.a;
							var _loc_3:* = this.enemy_fr[this.a] + 1;
							_loc_1[_loc_2] = _loc_3;
							if (this.enemy_fr[this.a] > this.teenieAnimFrMax[this.enemy_anim[this.a]])
							{
								this.removeEnemy(this.a);
							}
						}
						break;
					}
					case 6:
					{
						if (this.enemy_health_body[this.a] > 0)
						{
						}
						if (this.enemy_health_head[this.a] > 0)
						{
						}
						if (this.enemy_health_foot[this.a] > 0)
						{
							if (this.enemy_statusEffect[this.a] == 1)
							{
								this.enemy_health_head[this.a] = this.enemy_health_head[this.a] - this.enemy_statusEffect_atp[this.a];
								this.enemy_health_body[this.a] = this.enemy_health_body[this.a] - this.enemy_statusEffect_atp[this.a] * 0.95;
								this.enemy_health_headOld[this.a] = this.enemy_health_head[this.a];
								this.enemy_health_bodyOld[this.a] = this.enemy_health_body[this.a];
								this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40 - 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
								this.c = int(Math.random() * 2);
								if (this.c == 0)
								{
									this.addParticle(3, this.particle_x[(this.particle_x.length - 1)] - this.smokeWidth * 0.5, this.particle_y[(this.particle_y.length - 1)] - this.gun_flash_smoke_bm.height * 0.5, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, Math.random() * 3 + 2, 5, 1.5 + Math.random() * 0.5, 0, 0, 0, 0);
								}
								if (this.enemy_statusEffect_atp[this.a] > 0.001)
								{
									this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40 - 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
									if (this.enemy_statusEffect_atp[this.a] > 0.005)
									{
										this.addParticle(13, this.enemy_x[this.a] + Math.random() * 40 - 20, this.enemy_y[this.a] - Math.random() * 40 - 40, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.random() * 20 - 10, 0, 0, int(Math.random() * 4), 0, 0, 0, Math.random() * 0.5 + 0.25);
									}
								}
							}
							if (this.enemy_lineOfSightCountdown[this.a] > 5)
							{
								this.enemy_dX = this.enemy_x[this.a] - this.character_x;
								this.enemy_dY = this.enemy_y[this.a] - this.character_y;
								this.enemy_radTo[this.a] = Math.atan2(this.enemy_dY, this.enemy_dX);
								this.enemy_headRot[this.a] = this.enemy_radTo[this.a];
								this.enemy_tempRise = Math.sin(this.enemy_headRot[this.a]) * -25;
								this.enemy_tempRun = Math.cos(this.enemy_headRot[this.a]) * -25;
								this.enemy_lineOfSightCountdown[this.a] = 0;
								this.enemy_dist = Math.sqrt(this.enemy_dX * this.enemy_dX + this.enemy_dY * this.enemy_dY);
								this.enemy_dist = Math.abs(int(this.enemy_dist / 25));
								this.enemy_hasLineOfSight[this.a] = true;
								if (this.enemy_aiState[this.a] == 0)
								{
									if (this.enemy_face[this.a] == 0)
									{
										if (this.character_x > this.enemy_x[this.a] + 25)
										{
											if (this.enemy_dist > 6)
											{
												this.enemy_hasLineOfSight[this.a] = false;
												this.enemy_dist = 6;
											}
										}
										else if (this.enemy_dist > 1)
										{
											this.enemy_hasLineOfSight[this.a] = false;
											this.enemy_dist = 1;
										}
									}
									else if (this.character_x < this.enemy_x[this.a] - 25)
									{
										if (this.enemy_dist > 6)
										{
											this.enemy_hasLineOfSight[this.a] = false;
											this.enemy_dist = 6;
										}
									}
									else if (this.enemy_dist > 1)
									{
										this.enemy_hasLineOfSight[this.a] = false;
										this.enemy_dist = 1;
									}
								}
								else if (this.enemy_dist > 20)
								{
									this.enemy_dist = 20;
								}
								this.b = 0;
								while (this.b < this.enemy_dist)
								{
									
									this.tileOn = int((this.enemy_y[this.a] - 20 + this.enemy_tempRise * this.b) / 50) * this.level_width + int((this.enemy_x[this.a] + this.enemy_tempRun * this.b) / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 1)
									{
										this.enemy_hasLineOfSight[this.a] = false;
										this.b = 50;
									}
									
									this.b  ++ ;
									
								}
								if (this.enemy_hasLineOfSight[this.a] == true)
								{
									this.enemy_aiState[this.a] = 1;
								}
								else if (this.enemy_aiState[this.a] == 1)
								{
									this.enemy_aiState[this.a] = 2;
								}
							}
							else
							{
								var _loc_1:* = this.enemy_lineOfSightCountdown;
								var _loc_2:* = this.a;
								var _loc_3:* = this.enemy_lineOfSightCountdown[this.a] + 1;
								_loc_1[_loc_2] = _loc_3;
							}
							if (this.enemy_initialized[this.a] == 0)
							{
								this.enemy_anim[this.a] = int(Math.random() * 3) + 1;
								this.enemy_face[this.a] = int(Math.random() * 2);
								this.enemy_initialized[this.a] = 1;
								this.b = 0;
								while (this.b < 50)
								{
									
									var _loc_1:* = this.enemy_y;
									var _loc_2:* = this.a;
									var _loc_3:* = this.enemy_y[this.a] + 1;
									_loc_1[_loc_2] = _loc_3;
									this.tileOn = int((this.enemy_y[this.a] - 2) / 50) * this.level_width + int(this.enemy_x[this.a] / 50);
									if (this.level_collidable[this.level[this.tileOn]] == 1)
									{
										this.b = 100;
									}
									
									this.b  ++ ;
									
								}
								this.enemy_hasLineOfSight[this.a] = false;
								this.c = int(Math.random() * 4);
								if (this.c == 0)
								{
									this.enemy_aiState[this.a] = 2;
								}
								else
								{
									this.enemy_aiState[this.a] = 0;
								}
								this.enemy_engagementDistance[this.a] = Math.random() * 4 + 1;
							}
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							switch(this.enemy_aiState[this.a])
							{
								case 0:
								{
									break;
								}
								case 1:
								{
									if (this.enemy_jump[this.a] == false)
									{
										if (this.enemy_anim[this.a] < 5)
										{
											if (this.enemy_x[this.a] > this.character_x + 60)
											{
												if (this.enemy_face[this.a] != 1)
												{
													this.enemy_face[this.a] = 1;
												}
												if (this.enemy_velX[this.a] > -this.enemy_engagementDistance[this.a])
												{
													var _loc_1:* = this.enemy_velX;
													var _loc_2:* = this.a;
													var _loc_3:* = this.enemy_velX[this.a] - 1;
													_loc_1[_loc_2] = _loc_3;
												}
												else
												{
													this.enemy_velX[this.a] = -this.enemy_engagementDistance[this.a];
												}
											}
											else if (this.enemy_x[this.a] < this.character_x - 60)
											{
												if (this.enemy_face[this.a] != 0)
												{
													this.enemy_face[this.a] = 0;
												}
												if (this.enemy_velX[this.a] < this.enemy_engagementDistance[this.a])
												{
													var _loc_1:* = this.enemy_velX;
													var _loc_2:* = this.a;
													var _loc_3:* = this.enemy_velX[this.a] + 1;
													_loc_1[_loc_2] = _loc_3;
												}
												else
												{
													this.enemy_velX[this.a] = this.enemy_engagementDistance[this.a];
												}
											}
											else if (this.enemy_velX[this.a] > 1)
											{
												var _loc_1:* = this.enemy_velX;
												var _loc_2:* = this.a;
												var _loc_3:* = this.enemy_velX[this.a] - 1;
												_loc_1[_loc_2] = _loc_3;
											}
											else if (this.enemy_velX[this.a] < -1)
											{
												var _loc_1:* = this.enemy_velX;
												var _loc_2:* = this.a;
												var _loc_3:* = this.enemy_velX[this.a] + 1;
												_loc_1[_loc_2] = _loc_3;
											}
											else
											{
												this.enemy_velX[this.a] = 0;
												if (this.enemy_anim[this.a] < 5)
												{
													this.c = Math.random() * 10;
													if (this.c == 0)
													{
														this.enemy_anim[this.a] = int(Math.random() * 3) + 5;
														this.enemy_fr[this.a] = 0;
													}
													else if (this.enemy_anim[this.a] != 1)
													{
														this.enemy_anim[this.a] = 1;
														this.enemy_fr[this.a] = 0;
													}
												}
											}
											if (this.enemy_spriteSet[this.a] == 4)
											{
												this.c = Math.random() * 20;
												if (this.c == 0)
												{
													this.enemy_anim[this.a] = 8;
													this.enemy_fr[this.a] = 0;
													this.enemy_velX[this.a] = 0;
												}
											}
										}
									}
									else
									{
										this.enemy_velY[this.a] = this.enemy_velY[this.a] + 2;
										if (this.enemy_velY[this.a] > 25)
										{
											this.enemy_velY[this.a] = 25;
										}
										if (this.enemy_velX[this.a] > 1)
										{
											var _loc_1:* = this.enemy_velX;
											var _loc_2:* = this.a;
											var _loc_3:* = this.enemy_velX[this.a] - 1;
											_loc_1[_loc_2] = _loc_3;
										}
										else if (this.enemy_velX[this.a] < -1)
										{
											var _loc_1:* = this.enemy_velX;
											var _loc_2:* = this.a;
											var _loc_3:* = this.enemy_velX[this.a] + 1;
											_loc_1[_loc_2] = _loc_3;
										}
										else
										{
											this.enemy_velX[this.a] = 0;
										}
									}
									break;
								}
								case 2:
								{
									if (this.enemy_jump[this.a] == false)
									{
										if (this.enemy_face[this.a] == 1)
										{
											if (this.enemy_velX[this.a] > -this.enemy_engagementDistance[this.a])
											{
												var _loc_1:* = this.enemy_velX;
												var _loc_2:* = this.a;
												var _loc_3:* = this.enemy_velX[this.a] - 1;
												_loc_1[_loc_2] = _loc_3;
											}
											else
											{
												this.enemy_velX[this.a] = -this.enemy_engagementDistance[this.a];
											}
										}
										else if (this.enemy_velX[this.a] < this.enemy_engagementDistance[this.a])
										{
											var _loc_1:* = this.enemy_velX;
											var _loc_2:* = this.a;
											var _loc_3:* = this.enemy_velX[this.a] + 1;
											_loc_1[_loc_2] = _loc_3;
										}
										else
										{
											this.enemy_velX[this.a] = this.enemy_engagementDistance[this.a];
										}
									}
									else
									{
										this.enemy_velY[this.a] = this.enemy_velY[this.a] + 2;
										if (this.enemy_velY[this.a] > 25)
										{
											this.enemy_velY[this.a] = 25;
										}
										if (this.enemy_velX[this.a] > 1)
										{
											var _loc_1:* = this.enemy_velX;
											var _loc_2:* = this.a;
											var _loc_3:* = this.enemy_velX[this.a] - 1;
											_loc_1[_loc_2] = _loc_3;
										}
										else if (this.enemy_velX[this.a] < -1)
										{
											var _loc_1:* = this.enemy_velX;
											var _loc_2:* = this.a;
											var _loc_3:* = this.enemy_velX[this.a] + 1;
											_loc_1[_loc_2] = _loc_3;
										}
										else
										{
											this.enemy_velX[this.a] = 0;
										}
									}
									break;
								}
								default:
								{
									break;
								}
							}
							if (this.enemy_velX[this.a] != 0)
							{
								if (this.enemy_anim[this.a] != 4)
								{
								}
								if (this.enemy_anim[this.a] < 5)
								{
									this.enemy_anim[this.a] = 4;
									this.enemy_fr[this.a] = 0;
								}
							}
							this.enemy_x[this.a] = this.enemy_x[this.a] + this.enemy_velX[this.a];
							if (this.enemy_velX[this.a] > 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] + 25) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = (int(this.enemy_x[this.a] / 50) + 1) * 50 - 25;
									this.enemy_anim[this.a] = int(Math.random() * 4) + 10;
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = 0;
									this.enemy_velX[this.a] = 0;
									if (this.enemy_aiState[this.a] == 2)
									{
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_face[this.a] = 1;
										}
										else
										{
											this.enemy_face[this.a] = 0;
										}
									}
									else
									{
										this.enemy_aiState[this.a] = 0;
									}
								}
							}
							else if (this.enemy_velX[this.a] < 0)
							{
								this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] - 25) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 25;
									this.enemy_anim[this.a] = int(Math.random() * 4) + 10;
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = 0;
									this.enemy_velX[this.a] = 0;
									if (this.enemy_aiState[this.a] == 2)
									{
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_face[this.a] = 1;
										}
										else
										{
											this.enemy_face[this.a] = 0;
										}
									}
									else
									{
										this.enemy_aiState[this.a] = 0;
									}
								}
							}
							else
							{
								this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] + 25) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = (int(this.enemy_x[this.a] / 50) + 1) * 50 - 25;
								}
								this.tileOn = int((this.enemy_y[this.a] - 5) / 50) * this.level_width + int((this.enemy_x[this.a] - 25) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_x[this.a] = int(this.enemy_x[this.a] / 50) * 50 + 25;
								}
							}
							this.enemy_y[this.a] = this.enemy_y[this.a] + this.enemy_velY[this.a];
							if (this.enemy_jump[this.a] == true)
							{
								this.tileOn = int((this.enemy_y[this.a] + 5) / 50) * this.level_width + int((this.enemy_x[this.a] - 25) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 1)
								{
									this.enemy_jump[this.a] = false;
									this.enemy_y[this.a] = int(this.enemy_y[this.a] / 50) * 50 + 2;
									this.enemy_velY[this.a] = 0;
									this.enemy_velX[this.a] = 0;
									this.enemy_anim[this.a] = 18;
									this.enemy_fr[this.a] = 0;
								}
							}
							else if (this.enemy_face[this.a] == 0)
							{
								this.tileOn = int((this.enemy_y[this.a] + 5) / 50) * this.level_width + int((this.enemy_x[this.a] - 10) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 0)
								{
									this.enemy_jump[this.a] = true;
									this.enemy_anim[this.a] = 9;
									this.enemy_fr[this.a] = 0;
									this.enemy_velX[this.a] = 10;
								}
							}
							else
							{
								this.tileOn = int((this.enemy_y[this.a] + 5) / 50) * this.level_width + int((this.enemy_x[this.a] + 10) / 50);
								if (this.level_collidable[this.level[this.tileOn]] == 0)
								{
									this.enemy_jump[this.a] = true;
									this.enemy_anim[this.a] = 9;
									this.enemy_fr[this.a] = 0;
									this.enemy_velX[this.a] = -10;
								}
							}
							if (this.enemy_anim[this.a] == 18)
							{
								this.enemy_velX[this.a] = 0;
							}
							if (this.enemy_health_head[this.a] < this.enemy_health_headOld[this.a])
							{
								if (this.enemy_anim[this.a] < 18)
								{
									this.enemy_anim[this.a] = int(Math.random() * 4) + 10;
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = 0;
									this.enemy_velX[this.a] = 0;
								}
								this.enemy_aiState[this.a] = 1;
							}
							else if (this.enemy_health_body[this.a] < this.enemy_health_bodyOld[this.a])
							{
								if (this.enemy_anim[this.a] < 18)
								{
									this.enemy_anim[this.a] = int(Math.random() * 4) + 14;
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = 0;
									this.enemy_velX[this.a] = 0;
								}
								this.enemy_aiState[this.a] = 1;
							}
							else if (this.enemy_health_foot[this.a] < this.enemy_health_footOld[this.a])
							{
								if (this.enemy_anim[this.a] < 18)
								{
									this.c = int(Math.random() * 4);
									if (this.c == 0)
									{
										this.enemy_anim[this.a] = 18;
										this.enemy_fr[this.a] = 0;
										this.enemy_frOld[this.a] = 0;
										this.enemy_velX[this.a] = 0;
									}
								}
								this.enemy_aiState[this.a] = 1;
							}
							this.enemy_health_headOld[this.a] = this.enemy_health_head[this.a];
							this.enemy_health_bodyOld[this.a] = this.enemy_health_body[this.a];
							this.enemy_health_footOld[this.a] = this.enemy_health_foot[this.a];
							this.enemy_frOld[this.a] = this.enemy_fr[this.a];
							if (this.enemy_anim[this.a] != 4)
							{
								this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
							}
							else
							{
								this.enemy_fr[this.a] = this.enemy_fr[this.a] + Math.abs(this.enemy_velX[this.a] * 0.8);
							}
							if (this.enemy_anim[this.a] == 5)
							{
								if (this.enemy_fr[this.a] == 20)
								{
									if (this.enemy_face[this.a] == 0)
									{
										this.addParticle(21, this.enemy_x[this.a] + 20, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] + 40, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] + 60, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
									}
									else
									{
										this.addParticle(21, this.enemy_x[this.a] - 20, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] - 40, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] - 60, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
									}
								}
							}
							else if (this.enemy_anim[this.a] == 6)
							{
								if (this.enemy_fr[this.a] == 22)
								{
									if (this.enemy_face[this.a] == 0)
									{
										this.addParticle(21, this.enemy_x[this.a] + 20, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] + 40, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] + 60, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
									}
									else
									{
										this.addParticle(21, this.enemy_x[this.a] - 20, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] - 40, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] - 60, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
									}
								}
							}
							else if (this.enemy_anim[this.a] == 7)
							{
								if (this.enemy_fr[this.a] == 14)
								{
									if (this.enemy_face[this.a] == 0)
									{
										this.addParticle(21, this.enemy_x[this.a] + 20, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] + 40, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] + 60, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
									}
									else
									{
										this.addParticle(21, this.enemy_x[this.a] - 20, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] - 40, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
										this.addParticle(21, this.enemy_x[this.a] - 60, this.enemy_y[this.a] - 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
									}
								}
							}
							else if (this.enemy_anim[this.a] == 8)
							{
								if (this.enemy_fr[this.a] > 32)
								{
								}
								if (this.enemy_fr[this.a] < 56)
								{
									if (this.enemy_fr[this.a] / 2 % 2 == 0)
									{
										if (this.enemy_face[this.a] == 0)
										{
											this.tempRad = -0.2 - Math.random() * 0.1;
											this.addParticle(12, this.enemy_x[this.a] + 25, this.enemy_y[this.a] - 60, this.tempRad, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.tempRad + Math.PI) * -10, Math.sin(this.tempRad + Math.PI) * -10, 0, int((this.tempRad + Math.PI) / (Math.PI * 2) * 64), 0, 0, 1, 0.1);
										}
										else
										{
											this.tempRad = -Math.PI + 0.2 + Math.random() * 0.1;
											this.addParticle(12, this.enemy_x[this.a] - 25, this.enemy_y[this.a] - 60, this.tempRad, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.tempRad + Math.PI) * -10, Math.sin(this.tempRad + Math.PI) * -10, 0, int((this.tempRad + Math.PI) / (Math.PI * 2) * 64), 0, 0, 1, 0.1);
										}
									}
								}
							}
							if (this.enemy_fr[this.a] > this.zombie_maxFrames[this.enemy_anim[this.a]])
							{
								if (this.enemy_anim[this.a] != 9)
								{
									this.enemy_fr[this.a] = 0;
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
									this.enemy_anim[this.a] = int(Math.random() * 3) + 1;
								}
								else
								{
									this.enemy_fr[this.a] = this.zombie_maxFrames[this.enemy_anim[this.a]];
									this.enemy_frOld[this.a] = this.enemy_fr[this.a];
								}
							}
							if (Math.abs(this.enemy_x[this.a] - this.character_x) <= 1200)
							{
							}
							if (Math.abs(this.enemy_y[this.a] - this.character_y) > 800)
							{
								this.enemy_health_head[this.a] = -50001;
								this.enemy_markedForRemoval[this.a] = true;
							}
						}
						else
						{
							this.enemy_xOld[this.a] = this.enemy_x[this.a];
							this.enemy_yOld[this.a] = this.enemy_y[this.a];
							if (this.enemy_markedForRemoval[this.a] == false)
							{
								this.enemy_markedForRemoval[this.a] = true;
								var _loc_1:* = this.weaponProficiencyKills;
								var _loc_2:* = this.enemy_damagedBy[this.a];
								var _loc_3:* = this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.enemy_damagedBy[this.a] != 20)
								{
									if (this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] >= 50)
									{
									}
									if (this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] == 0)
									{
										this.scoreTally = this.scoreTally + 100;
										this.tempScoreQue = "";
										this.tempScoreQue = this.tempScoreQue + this.scoreNames[this.enemy_damagedBy[this.a] + 12];
										this.scoreQue.push(this.tempScoreQue);
										if (this.scoreQue.length > 3)
										{
											this.scoreQue.splice(0, 1);
										}
										this.scoreQueTime = 60;
										this.multiplier_countdown = this.max_multiplier_countdown;
										this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] = 1;
									}
								}
								else
								{
									if (this.weaponProficiencyKills[this.enemy_damagedBy[this.a]] >= 5)
									{
									}
									if (this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] == 0)
									{
										this.scoreTally = this.scoreTally + 100;
										this.tempScoreQue = "";
										this.tempScoreQue = this.tempScoreQue + this.scoreNames[this.enemy_damagedBy[this.a] + 12];
										this.scoreQue.push(this.tempScoreQue);
										if (this.scoreQue.length > 3)
										{
											this.scoreQue.splice(0, 1);
										}
										this.scoreQueTime = 60;
										this.multiplier_countdown = this.max_multiplier_countdown;
										this.scoreTimesEarned[this.enemy_damagedBy[this.a] + 12] = 1;
									}
								}
								this.tempScoreQue = "";
								this.tempScoreQue = this.tempScoreQue + this.scoreNames[0];
								this.scoreTally = this.scoreTally + 10;
								var _loc_1:* = this.scoreTimesEarned;
								var _loc_2:int = 0;
								var _loc_3:* = this.scoreTimesEarned[0] + 1;
								_loc_1[_loc_2] = _loc_3;
								if (this.gun_ammo[this.character_gunEquipped] == 0)
								{
								}
								if (this.gun_mag_size[this.character_gunEquipped] > 2)
								{
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[3]);
									this.scoreTally = this.scoreTally + 5;
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 3;
									var _loc_3:* = this.scoreTimesEarned[3] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								if (this.enemy_anim[this.a] == 23)
								{
									this.scoreTally = this.scoreTally + 5;
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[4]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 4;
									var _loc_3:* = this.scoreTimesEarned[4] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								if (this.enemy_health_head[this.a] <= 0)
								{
								}
								if (this.enemy_health_body[this.a] == this.enemy_health_bodyMax[this.a])
								{
								}
								if (this.enemy_health_foot[this.a] == this.enemy_health_footMax[this.a])
								{
									this.cameraShakeFun(0.5);
									this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
									this.playSoundEffect(int(Math.random() * 3) + 42, this.tempVol, 0);
									this.enemy_isHeadless[this.a] = true;
									this.scoreTally = this.scoreTally + 5;
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[1]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 1;
									var _loc_3:* = this.scoreTimesEarned[1] + 1;
									_loc_1[_loc_2] = _loc_3;
									if (this.enemy_jump[this.a] == true)
									{
										this.scoreTally = this.scoreTally + 5;
										this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[8]);
										var _loc_1:* = this.scoreTimesEarned;
										var _loc_2:int = 8;
										var _loc_3:* = this.scoreTimesEarned[8] + 1;
										_loc_1[_loc_2] = _loc_3;
									}
									this.b = 5;
									while (this.b < 9)
									{
										
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_tempPos_x = this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] + this.giblet_posX[this.b];
											this.enemy_tempPos_face = 1;
											this.enemy_tempVel_x = Math.random() * -8 - 1;
										}
										else
										{
											this.enemy_tempPos_x = this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] - this.giblet_posX[this.b];
											this.enemy_tempPos_face = -1;
											this.enemy_tempVel_x = Math.random() * 8 + 1;
										}
										this.enemy_tempPos_y = this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] + this.giblet_posY[this.b];
										this.enemy_tempVel_y = Math.random() * -10 - 2;
										this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
										
										this.b  ++ ;
										
									}
									if (this.enemy_face[this.a] == 0)
									{
										this.placeBloodSplatter(this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
										this.placeBloodSplatter(this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
										this.placeBloodSplatter(this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
									}
									else
									{
										this.placeBloodSplatter(this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
										this.placeBloodSplatter(this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
										this.placeBloodSplatter(this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])], 0);
									}
									this.addSimpleParticle(8, this.enemy_x[this.a] - 110 + Math.random() * 50 - 25, this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] - 75, 0, 0, 0);
									this.addSimpleParticle(5, this.enemy_x[this.a] - 135 + Math.random() * 50 - 25, this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] - 100, 0, 0, 0);
									this.b = 0;
									while (this.b < 5)
									{
										
										this.enemy_tempPos_x = this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] + Math.random() * 40 - 20;
										this.enemy_tempPos_y = this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] + Math.random() * 40 - 20;
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_tempVel_x = Math.random() * -10 - 1;
										}
										else
										{
											this.enemy_tempVel_x = Math.random() * 10 + 1;
										}
										this.enemy_tempVel_y = Math.random() * -15 - 10;
										this.addParticle(9, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, int(Math.random() * 5), 0, 0, 0, 0);
										
										this.b  ++ ;
										
									}
								}
								else
								{
									if (this.enemy_health_body[this.a] <= 0)
									{
									}
									if (this.enemy_health_head[this.a] == this.enemy_health_headMax[this.a])
									{
									}
									if (this.enemy_health_foot[this.a] == this.enemy_health_footMax[this.a])
									{
										this.scoreTally = this.scoreTally + 5;
										this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[2]);
										var _loc_1:* = this.scoreTimesEarned;
										var _loc_2:int = 2;
										var _loc_3:* = this.scoreTimesEarned[2] + 1;
										_loc_1[_loc_2] = _loc_3;
									}
								}
								this.wasGibbed = false;
								if (this.enemy_health_head[this.a] <= 0)
								{
								}
								if (this.enemy_health_body[this.a] > 0)
								{
								}
								if (this.enemy_jump[this.a] == true)
								{
									this.cameraShakeFun(1.5);
									this.wasGibbed = true;
									this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
									this.playSoundEffect(int(Math.random() * 4) + 38, this.tempVol, 0);
									this.scoreTally = this.scoreTally + 10;
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[5]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:int = 5;
									var _loc_3:* = this.scoreTimesEarned[5] + 1;
									_loc_1[_loc_2] = _loc_3;
									if (this.enemy_jump[this.a] == true)
									{
										this.scoreTally = this.scoreTally + 5;
										this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[6]);
										var _loc_1:* = this.scoreTimesEarned;
										var _loc_2:int = 6;
										var _loc_3:* = this.scoreTimesEarned[6] + 1;
										_loc_1[_loc_2] = _loc_3;
									}
									this.b = 4;
									while (this.b > -1)
									{
										
										switch(this.b)
										{
											case 0:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])];
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
												break;
											}
											case 1:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] - 3;
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] + 3;
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] + 20;
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												break;
											}
											case 2:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_body_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_body_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_body_y"][int(this.enemy_fr[this.a])];
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												this.placeBloodSplatter(this.enemy_tempPos_x, this.enemy_tempPos_y, 0);
												break;
											}
											case 3:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_y"][int(this.enemy_fr[this.a])] - 3;
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_x"][int(this.enemy_fr[this.a])];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_y"][int(this.enemy_fr[this.a])] - 3;
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												break;
											}
											case 4:
											{
												if (this.enemy_face[this.a] == 0)
												{
													this.enemy_tempPos_x = this.enemy_gunX[this.a];
													this.enemy_tempPos_face = 1;
													this.enemy_tempVel_x = Math.random() * -8 - 1;
												}
												else
												{
													this.enemy_tempPos_x = this.enemy_gunX[this.a];
													this.enemy_tempPos_face = -1;
													this.enemy_tempVel_x = Math.random() * 8 + 1;
												}
												this.enemy_tempPos_y = this.enemy_gunY[this.a];
												this.enemy_tempVel_y = Math.random() * -10 - 2;
												this.addParticle(7, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.b, this.enemy_tempPos_face, 0, 0, 0);
												break;
											}
											default:
											{
												break;
											}
										}
										this.addSimpleParticle(8, this.enemy_x[this.a] - 110 + Math.random() * 50 - 25, this.enemy_y[this.a] - 56 - Math.random() * 100, 0, 0, 0);
										this.addSimpleParticle(5, this.enemy_x[this.a] - 135 + Math.random() * 50 - 25, this.enemy_y[this.a] - 85 - Math.random() * 100, 0, 0, 0);
										
										this.b  -- ;
										
									}
									this.b = 0;
									while (this.b < 7)
									{
										
										this.enemy_tempPos_x = this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][int(this.enemy_fr[this.a])] + Math.random() * 40 - 20;
										this.enemy_tempPos_y = this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][int(this.enemy_fr[this.a])] + Math.random() * 40 - 20;
										if (this.enemy_face[this.a] == 0)
										{
											this.enemy_tempVel_x = Math.random() * -10 - 1;
										}
										else
										{
											this.enemy_tempVel_x = Math.random() * 10 + 1;
										}
										this.enemy_tempVel_y = Math.random() * -15 - 10;
										this.addParticle(9, this.enemy_tempPos_x, this.enemy_tempPos_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, int(Math.random() * 5), 0, 0, 0, 0);
										
										this.b  ++ ;
										
									}
								}
								if (this.wasGibbed == false)
								{
									this.c = int(Math.random() * 4);
									if (this.c != 0)
									{
										this.c = int(Math.random() * 2);
										if (this.c == 0)
										{
											this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
											this.playSoundEffect(int(Math.random() * 8) + 93, this.tempVol * 3, 0);
										}
										else
										{
											this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
											this.playSoundEffect(int(Math.random() * 9) + 101, this.tempVol * 3, 0);
										}
									}
								}
								
								this.multiKillCount  ++ ;
								
								this.multiKillTime = 1;
								if (this.multiKillCount > 10)
								{
									this.multiKillCount = 10;
								}
								if (this.multiKillCount > 1)
								{
									this.scoreTally = this.scoreTally + 5 * (this.multiKillCount - 1);
									this.tempScoreQue = this.tempScoreQue + (" @ " + this.scoreNames[32 + (this.multiKillCount - 1)]);
									var _loc_1:* = this.scoreTimesEarned;
									var _loc_2:* = 32 + (this.multiKillCount - 1);
									var _loc_3:* = this.scoreTimesEarned[32 + (this.multiKillCount - 1)] + 1;
									_loc_1[_loc_2] = _loc_3;
								}
								this.scoreQue.push(this.tempScoreQue);
								if (this.scoreQue.length > 3)
								{
									this.scoreQue.splice(0, 1);
								}
								this.scoreQueTime = 60;
								this.multiplier = this.multiplier + 0.1;
								this.multiplier_countdown = this.max_multiplier_countdown;
							}
							if (this.enemy_anim[this.a] < 19)
							{
								this.enemy_anim[this.a] = 19 + int(Math.random() * 5);
								this.enemy_fr[this.a] = 0;
							}
							if (this.wasGibbed != true)
							{
							}
							if (this.enemy_health_head[this.a] == -50001)
							{
								this.removeEnemy(this.a);
							}
							else
							{
								this.enemy_frOld[this.a] = this.enemy_fr[this.a];
								this.enemy_fr[this.a] = this.enemy_fr[this.a] + 2;
								if (this.enemy_fr[this.a] > this.zombie_maxFrames[this.enemy_anim[this.a]])
								{
									this.enemy_fr[this.a] = this.zombie_maxFrames[this.enemy_anim[this.a]];
									if (this.enemy_face[this.a] == 0)
									{
										this.trans.createBox(1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_hand2_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_hand2_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_hand2_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_hand2_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_foot_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle2_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle2_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle2_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_ankle_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_body_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_body_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_body_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_body_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_head_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										if (this.enemy_isHeadless[this.a] == false)
										{
											this.level_bm.draw(this["zombie_head_" + this.enemy_spriteSet[this.a]], this.trans);
										}
										this.trans.createBox(1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_foot_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle1_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle1_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle1_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_ankle_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_hand1_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_hand1_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_hand1_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_hand1_" + this.enemy_spriteSet[this.a]], this.trans);
									}
									else
									{
										this.trans.createBox(-1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_hand2_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_hand2_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_hand2_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_hand2_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot2_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_foot_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle2_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle2_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle2_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_ankle_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_body_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_body_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_body_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_body_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_head_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_head_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_head_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										if (this.enemy_isHeadless[this.a] == false)
										{
											this.level_bm.draw(this["zombie_head_" + this.enemy_spriteSet[this.a]], this.trans);
										}
										this.trans.createBox(-1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_foot1_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_foot_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle1_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle1_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_ankle1_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_ankle_" + this.enemy_spriteSet[this.a]], this.trans);
										this.trans.createBox(-1, 1, this["zombieAnim_" + this.enemy_anim[this.a] + "_hand1_r"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_x[this.a] - this["zombieAnim_" + this.enemy_anim[this.a] + "_hand1_x"][this.zombie_maxFrames[this.enemy_anim[this.a]]], this.enemy_y[this.a] + this["zombieAnim_" + this.enemy_anim[this.a] + "_hand1_y"][this.zombie_maxFrames[this.enemy_anim[this.a]]]);
										this.level_bm.draw(this["zombie_hand1_" + this.enemy_spriteSet[this.a]], this.trans);
									}
									this.removeEnemy(this.a);
								}
							}
						}
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			return;
		}// end function
		
		public function enemy_large1_swordCollisions()
		{
			if (this.enemy_face[this.a] == 0)
			{
				this.enemy_tempPos_x = this.enemy_x[this.a] + this["enemy_large1_anim" + this.enemy_anim[this.a] + "_sword_x"][int(this.enemy_fr[this.a])];
				this.enemy_tempPos_y = this.enemy_y[this.a] + this["enemy_large1_anim" + this.enemy_anim[this.a] + "_sword_y"][int(this.enemy_fr[this.a])];
				if (this.character_hurtTime < 1)
				{
					this.b = 0;
					while (this.b < 4)
					{
						
						this.enemy_tempVel_x = this.enemy_tempPos_x + Math.cos(this["enemy_large1_anim" + this.enemy_anim[this.a] + "_sword_r"][int(this.enemy_fr[this.a])] + 1.57) * (32 * (-this.b));
						this.enemy_tempVel_y = this.enemy_tempPos_y + Math.sin(this["enemy_large1_anim" + this.enemy_anim[this.a] + "_sword_r"][int(this.enemy_fr[this.a])] + 1.57) * (32 * (-this.b));
						this.addParticle(2, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 1, 0, 0, 0, 0, Math.random() + 0.5);
						if (this.character_face == 0)
						{
							if (Math.abs(this.enemy_tempVel_x - (this.character_x + this["charAnim_" + this.anim + "_head_x"][int(this.fr)])) < 20)
							{
								if (Math.abs(this.enemy_tempVel_y - (this.character_y + this["charAnim_" + this.anim + "_head_y"][int(this.fr)])) < 20)
								{
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.addSimpleParticle(4, this.enemy_tempVel_x - 60, this.enemy_tempVel_y - 50, 0, 0, 1);
									this.addSimpleParticle(9, this.enemy_tempVel_x - 127, this.enemy_tempVel_y - 25, 0, 0, 1);
									if (this.character_hurtTime < 1)
									{
										this.character_health = this.character_health - 25;
										if (this.jump == false)
										{
											this.character_hurtTime = 30;
											this.anim = int(Math.random() * 4) + 11;
											this.fr = 0;
											this.frOld = 0;
											this.character_velX = 0;
										}
									}
								}
							}
							if (Math.abs(this.enemy_tempVel_x - (this.character_x + this["charAnim_" + this.anim + "_body_x"][int(this.fr)])) < 16)
							{
								if (Math.abs(this.enemy_tempVel_y - (this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)])) < 16)
								{
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.addSimpleParticle(4, this.enemy_tempVel_x - 60, this.enemy_tempVel_y - 50, 0, 0, 1);
									this.addSimpleParticle(9, this.enemy_tempVel_x - 127, this.enemy_tempVel_y - 25, 0, 0, 1);
									if (this.character_hurtTime < 1)
									{
										this.character_health = this.character_health - 25;
										if (this.jump == false)
										{
											this.character_hurtTime = 30;
											this.anim = int(Math.random() * 4) + 15;
											this.fr = 0;
											this.frOld = 0;
											this.character_velX = 0;
										}
									}
								}
							}
						}
						else
						{
							if (Math.abs(this.enemy_tempVel_x - (this.character_x - this["charAnim_" + this.anim + "_head_x"][int(this.fr)])) < 20)
							{
								if (Math.abs(this.enemy_tempVel_y - (this.character_y + this["charAnim_" + this.anim + "_head_y"][int(this.fr)])) < 20)
								{
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.addSimpleParticle(4, this.enemy_tempVel_x - 60, this.enemy_tempVel_y - 50, 0, 0, 1);
									this.addSimpleParticle(9, this.enemy_tempVel_x - 127, this.enemy_tempVel_y - 25, 0, 0, 1);
									if (this.character_hurtTime < 1)
									{
										this.character_health = this.character_health - 25;
										if (this.jump == false)
										{
											this.character_hurtTime = 30;
											this.anim = int(Math.random() * 4) + 11;
											this.fr = 0;
											this.frOld = 0;
											this.character_velX = 0;
										}
									}
								}
							}
							if (Math.abs(this.enemy_tempVel_x - (this.character_x - this["charAnim_" + this.anim + "_body_x"][int(this.fr)])) < 16)
							{
								if (Math.abs(this.enemy_tempVel_y - (this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)])) < 16)
								{
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.addSimpleParticle(4, this.enemy_tempVel_x - 60, this.enemy_tempVel_y - 50, 0, 0, 1);
									this.addSimpleParticle(9, this.enemy_tempVel_x - 127, this.enemy_tempVel_y - 25, 0, 0, 1);
									if (this.character_hurtTime < 1)
									{
										this.character_health = this.character_health - 25;
										if (this.jump == false)
										{
											this.character_hurtTime = 30;
											this.anim = int(Math.random() * 4) + 15;
											this.fr = 0;
											this.frOld = 0;
											this.character_velX = 0;
										}
									}
								}
							}
						}
						
						this.b  ++ ;
						
					}
				}
			}
			else
			{
				this.enemy_tempPos_x = this.enemy_x[this.a] - this["enemy_large1_anim" + this.enemy_anim[this.a] + "_sword_x"][int(this.enemy_fr[this.a])];
				this.enemy_tempPos_y = this.enemy_y[this.a] + this["enemy_large1_anim" + this.enemy_anim[this.a] + "_sword_y"][int(this.enemy_fr[this.a])];
				if (this.character_hurtTime < 1)
				{
					this.b = 0;
					while (this.b < 4)
					{
						
						this.enemy_tempVel_x = this.enemy_tempPos_x - Math.cos(-this["enemy_large1_anim" + this.enemy_anim[this.a] + "_sword_r"][int(this.enemy_fr[this.a])] + 1.57) * (32 * this.b);
						this.enemy_tempVel_y = this.enemy_tempPos_y - Math.sin(-this["enemy_large1_anim" + this.enemy_anim[this.a] + "_sword_r"][int(this.enemy_fr[this.a])] + 1.57) * (32 * this.b);
						this.addParticle(2, this.enemy_tempVel_x, this.enemy_tempVel_y, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 1, 0, 0, 0, 0, Math.random() + 0.5);
						if (this.character_face == 0)
						{
							if (Math.abs(this.enemy_tempVel_x - (this.character_x + this["charAnim_" + this.anim + "_head_x"][int(this.fr)])) < 25)
							{
								if (Math.abs(this.enemy_tempVel_y - (this.character_y + this["charAnim_" + this.anim + "_head_y"][int(this.fr)])) < 25)
								{
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.addSimpleParticle(4, this.enemy_tempVel_x - 215, this.enemy_tempVel_y - 50, 0, 0, 0);
									this.addSimpleParticle(9, this.enemy_tempVel_x - 5, this.enemy_tempVel_y - 25, 0, 0, 0);
									if (this.character_hurtTime < 1)
									{
										this.character_health = this.character_health - 25;
										if (this.jump == false)
										{
											this.character_hurtTime = 30;
											this.anim = int(Math.random() * 4) + 11;
											this.fr = 0;
											this.frOld = 0;
											this.character_velX = 0;
										}
									}
								}
							}
							if (Math.abs(this.enemy_tempVel_x - (this.character_x + this["charAnim_" + this.anim + "_body_x"][int(this.fr)])) < 20)
							{
								if (Math.abs(this.enemy_tempVel_y - (this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)])) < 20)
								{
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.addSimpleParticle(4, this.enemy_tempVel_x - 215, this.enemy_tempVel_y - 50, 0, 0, 0);
									this.addSimpleParticle(9, this.enemy_tempVel_x - 5, this.enemy_tempVel_y - 25, 0, 0, 0);
									if (this.character_hurtTime < 1)
									{
										this.character_health = this.character_health - 25;
										if (this.jump == false)
										{
											this.character_hurtTime = 30;
											this.anim = int(Math.random() * 4) + 15;
											this.fr = 0;
											this.frOld = 0;
											this.character_velX = 0;
										}
									}
								}
							}
						}
						else
						{
							if (Math.abs(this.enemy_tempVel_x - (this.character_x - this["charAnim_" + this.anim + "_head_x"][int(this.fr)])) < 25)
							{
								if (Math.abs(this.enemy_tempVel_y - (this.character_y + this["charAnim_" + this.anim + "_head_y"][int(this.fr)])) < 25)
								{
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.addSimpleParticle(4, this.enemy_tempVel_x - 215, this.enemy_tempVel_y - 50, 0, 0, 0);
									this.addSimpleParticle(9, this.enemy_tempVel_x - 5, this.enemy_tempVel_y - 25, 0, 0, 0);
									if (this.character_hurtTime < 1)
									{
										this.character_health = this.character_health - 25;
										if (this.jump == false)
										{
											this.character_hurtTime = 30;
											this.anim = int(Math.random() * 4) + 11;
											this.fr = 0;
											this.frOld = 0;
											this.character_velX = 0;
										}
									}
								}
							}
							if (Math.abs(this.enemy_tempVel_x - (this.character_x - this["charAnim_" + this.anim + "_body_x"][int(this.fr)])) < 20)
							{
								if (Math.abs(this.enemy_tempVel_y - (this.character_y + this["charAnim_" + this.anim + "_body_y"][int(this.fr)])) < 20)
								{
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.placeBloodSplatter(this.enemy_tempVel_x, this.enemy_tempVel_y, 0);
									this.addSimpleParticle(4, this.enemy_tempVel_x - 215, this.enemy_tempVel_y - 50, 0, 0, 0);
									this.addSimpleParticle(9, this.enemy_tempVel_x - 5, this.enemy_tempVel_y - 25, 0, 0, 0);
									if (this.character_hurtTime < 1)
									{
										this.character_health = this.character_health - 25;
										if (this.jump == false)
										{
											this.character_hurtTime = 30;
											this.anim = int(Math.random() * 4) + 15;
											this.fr = 0;
											this.frOld = 0;
											this.character_velX = 0;
										}
									}
								}
							}
						}
						
						this.b  ++ ;
						
					}
				}
			}
			return;
		}// end function
		
		public function enemy_shoot()
		{
			if (this.enemy_gunCoolDown[this.a] < 1)
			{
				this.getVolume(this.enemy_x[this.a], this.enemy_y[this.a]);
				this.playSoundEffect(this.gun_sfx[this.enemy_gunEquipped[this.a]], this.tempVol, 0);
				this.enemy_gunCoolDown[this.a] = this.gun_coolDown[this.enemy_gunEquipped[this.a]];
				this.enemy_gunFrame[this.a] = 1;
				this.enemy_recoil_x[this.a] = this.enemy_recoil_x[this.a] - Math.cos(this.enemy_gunRot[this.a]) * this.gun_recoil_x[this.enemy_gunEquipped[this.a]];
				this.enemy_recoil_y[this.a] = this.enemy_recoil_y[this.a] - Math.sin(this.enemy_gunRot[this.a]) * this.gun_recoil_x[this.enemy_gunEquipped[this.a]];
				this.enemy_recoil_rot[this.a] = this.enemy_recoil_rot[this.a] + this.gun_recoil_rot[this.enemy_gunEquipped[this.a]];
				this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].x = this.enemy_gunX[this.a] - this.cameraX;
				this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].y = this.enemy_gunY[this.a] - this.cameraY + this.gunShoulder_y[this.enemy_gunEquipped[this.a]];
				this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].rotation = this.enemy_gunRot[this.a] * this.pi_180;
				if (this.enemy_face[this.a] == 0)
				{
					this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].scaleY = 1;
				}
				else
				{
					this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].scaleY = -1;
				}
				this.gunFlash_pt = new Point(this.gun_barrel_x[this.enemy_gunEquipped[this.a]], this.gun_barrel_y[this.enemy_gunEquipped[this.a]]);
				this.gunFlash_pt = this["gun_" + this.enemy_gunEquipped[this.a] + "_right_" + this["gunFrames_" + this.enemy_gunEquipped[this.a]][this.enemy_gunFrame[this.a]]].localToGlobal(this.gunFlash_pt);
				this.addSimpleParticle(0, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_gunRot[this.a], int(Math.random() * 5), 0);
				switch(this.gun_bulletType[this.enemy_gunEquipped[this.a]])
				{
					case 0:
					{
						this.addParticle(1, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_gunRot[this.a], this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.enemy_gunRot[this.a] + Math.PI) * -16, Math.sin(this.enemy_gunRot[this.a] + Math.PI) * -16, 0, int((this.enemy_gunRot[this.a] + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.enemy_gunEquipped[this.a]], 0, 1, this.gun_atp_enemy[this.enemy_gunEquipped[this.a]]);
						break;
					}
					case 1:
					{
						this.b = 0;
						while (this.b < 3)
						{
							
							this.gunTempRand = (Math.random() - 0.8) * 0.4;
							this.gunTempSpd = 14 + Math.random() * 4;
							this.addParticle(1, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_gunRot[this.a], this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.enemy_gunRot[this.a] + this.gunTempRand + Math.PI) * (-this.gunTempSpd), Math.sin(this.enemy_gunRot[this.a] + this.gunTempRand + Math.PI) * (-this.gunTempSpd), 0, int((this.enemy_gunRot[this.a] + this.gunTempRand + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.enemy_gunEquipped[this.a]], 0, 1, this.gun_atp_enemy[this.enemy_gunEquipped[this.a]]);
							
							this.b  ++ ;
							
						}
						break;
					}
					case 2:
					{
						this.b = 0;
						while (this.b < 3)
						{
							
							this.gunTempRand = (Math.random() - 0.8) * 0.4;
							this.gunTempSpd = 14 + Math.random() * 4;
							this.addParticle(1, this.gunFlash_pt.x + this.cameraX, this.gunFlash_pt.y + this.cameraY, this.enemy_gunRot[this.a], this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, Math.cos(this.enemy_gunRot[this.a] + this.gunTempRand + Math.PI) * (-this.gunTempSpd), Math.sin(this.enemy_gunRot[this.a] + this.gunTempRand + Math.PI) * (-this.gunTempSpd), 0, int((this.enemy_gunRot[this.a] + this.gunTempRand + Math.PI) / (Math.PI * 2) * 64), this.gun_isIncindiary[this.enemy_gunEquipped[this.a]], 0, 1, this.gun_atp_enemy[this.enemy_gunEquipped[this.a]]);
							
							this.b  ++ ;
							
						}
						break;
					}
					default:
					{
						break;
					}
				}
			}
			return;
		}// end function
		
		public function enemy_aimFun()
		{
			this.enemy_inacc_x[this.a] = this.enemy_inacc_x[this.a] - (this.enemy_inacc_x[this.a] - this.enemy_inacc_x_target[this.a]) / 10;
			this.enemy_inacc_y[this.a] = this.enemy_inacc_y[this.a] - (this.enemy_inacc_y[this.a] - this.enemy_inacc_y_target[this.a]) / 10;
			if (Math.abs(this.enemy_inacc_x[this.a] - this.enemy_inacc_x_target[this.a]) < 0.1)
			{
				this.enemy_inacc_x_target[this.a] = Math.random() * 100 - 50;
			}
			if (Math.abs(this.enemy_inacc_y[this.a] - this.enemy_inacc_y_target[this.a]) < 0.1)
			{
				this.enemy_inacc_y_target[this.a] = Math.random() * 100 - 50;
			}
			this.enemy_gunRotOld[this.a] = this.enemy_gunRot[this.a];
			this.enemy_gunXOld[this.a] = this.enemy_gunX[this.a];
			this.enemy_gunYOld[this.a] = this.enemy_gunY[this.a];
			this.enemy_gunX[this.a] = this.character_x + this.enemy_inacc_x[this.a];
			this.enemy_gunY[this.a] = this.character_y + this.enemy_inacc_y[this.a] - 25 - this.gunShoulder_y[this.enemy_gunEquipped[this.a]];
			if (this.enemy_jump[this.a] == false)
			{
				if (this.character_x > this.enemy_x[this.a])
				{
					if (this.enemy_face[this.a] == 1)
					{
						this.enemy_face[this.a] = 0;
						if (this.enemy_gunRot[this.a] > 0)
						{
							if (this.enemy_gunRot[this.a] > Math.PI * 0.5)
							{
								this.enemy_gunRot[this.a] = 0;
							}
						}
						else if (this.enemy_gunRot[this.a] < (-Math.PI) * 0.5)
						{
							this.enemy_gunRot[this.a] = 0;
						}
						this.enemy_gunRotOld[this.a] = this.enemy_gunRot[this.a];
					}
				}
				else if (this.enemy_face[this.a] == 0)
				{
					this.enemy_face[this.a] = 1;
					if (this.enemy_gunRot[this.a] > 0)
					{
						if (this.enemy_gunRot[this.a] < Math.PI * 0.5)
						{
							this.enemy_gunRot[this.a] = -Math.PI;
						}
					}
					else if (this.enemy_gunRot[this.a] > (-Math.PI) * 0.5)
					{
						this.enemy_gunRot[this.a] = -Math.PI;
					}
					this.enemy_gunRotOld[this.a] = this.enemy_gunRot[this.a];
				}
			}
			this.d = this.gun_dist[this.enemy_gunEquipped[this.a]];
			if (this.enemy_face[this.a] == 0)
			{
				this.enemy_gunX[this.a] = this.character_x + this.enemy_inacc_x[this.a] + this.enemy_recoil_x[this.a];
				this.enemy_gunY[this.a] = this.character_y + this.enemy_inacc_y[this.a] - 25 - this.gunShoulder_y[this.enemy_gunEquipped[this.a]] + this.enemy_recoil_y[this.a];
				this.character_gunDX = this.enemy_gunX[this.a] - (this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_x"][int(this.enemy_fr[this.a])]);
				this.character_gunDY = this.enemy_gunY[this.a] - (this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_y"][int(this.enemy_fr[this.a])]);
				this.enemy_radTo[this.a] = Math.atan2(this.character_gunDY, this.character_gunDX);
				this.enemy_headRot[this.a] = this.enemy_radTo[this.a];
				this.enemy_radTo[this.a] = this.enemy_radTo[this.a] + this.enemy_recoil_rot[this.a];
				this.enemy_gunRot[this.a] = this.enemy_gunRot[this.a] - (this.enemy_gunRot[this.a] - this.enemy_radTo[this.a]) / 3;
				if (Math.sqrt(this.character_gunDX * this.character_gunDX + this.character_gunDY * this.character_gunDY) > this.d)
				{
					this.enemy_gunX[this.a] = this.enemy_x[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_x"][int(this.enemy_fr[this.a])] + Math.cos(this.enemy_gunRot[this.a]) * this.d + this.enemy_recoil_x[this.a];
					this.enemy_gunY[this.a] = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_y"][int(this.enemy_fr[this.a])] + Math.sin(this.enemy_gunRot[this.a]) * this.d + this.enemy_recoil_y[this.a];
				}
			}
			else
			{
				this.enemy_gunX[this.a] = this.character_x + this.enemy_inacc_x[this.a] + this.enemy_recoil_x[this.a];
				this.enemy_gunY[this.a] = this.character_y + this.enemy_inacc_y[this.a] - 25 - this.gunShoulder_y[this.enemy_gunEquipped[this.a]] + this.enemy_recoil_y[this.a];
				this.character_gunDX = this.enemy_gunX[this.a] - (this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_body_x"][int(this.enemy_fr[this.a])]);
				this.character_gunDY = this.enemy_gunY[this.a] - (this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_y"][int(this.enemy_fr[this.a])]);
				this.enemy_radTo[this.a] = Math.atan2(this.character_gunDY, this.character_gunDX);
				this.enemy_headRot[this.a] = this.enemy_radTo[this.a];
				this.enemy_radTo[this.a] = this.enemy_radTo[this.a] - this.enemy_recoil_rot[this.a];
				if (this.enemy_radTo[this.a] > this.enemy_gunRot[this.a] + Math.PI)
				{
					this.enemy_gunRot[this.a] = this.enemy_gunRot[this.a] + Math.PI * 2;
					this.enemy_gunRotOld[this.a] = this.enemy_gunRot[this.a];
				}
				if (this.enemy_radTo[this.a] < this.enemy_gunRot[this.a] - Math.PI)
				{
					this.enemy_gunRot[this.a] = this.enemy_gunRot[this.a] - Math.PI * 2;
					this.enemy_gunRotOld[this.a] = this.enemy_gunRot[this.a];
				}
				this.enemy_gunRot[this.a] = this.enemy_gunRot[this.a] - (this.enemy_gunRot[this.a] - this.enemy_radTo[this.a]) / 3;
				if (Math.sqrt(this.character_gunDX * this.character_gunDX + this.character_gunDY * this.character_gunDY) > this.d)
				{
					this.enemy_gunX[this.a] = this.enemy_x[this.a] - this["charAnim_" + this.enemy_anim[this.a] + "_body_x"][int(this.enemy_fr[this.a])] + Math.cos(this.enemy_gunRot[this.a]) * this.d + this.enemy_recoil_x[this.a];
					this.enemy_gunY[this.a] = this.enemy_y[this.a] + this["charAnim_" + this.enemy_anim[this.a] + "_body_y"][int(this.enemy_fr[this.a])] + Math.sin(this.enemy_gunRot[this.a]) * this.d + this.enemy_recoil_y[this.a];
				}
			}
			return;
		}// end function
		
		public function addEnemyRagdoll(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20, param21, param22, param23)
		{
			this.enemy_ragdoll_type.push(param1);
			this.enemy_ragdoll_outfit.push(param2);
			this.enemy_ragdoll_face.push(param3);
			this.enemy_head_x.push(param4);
			this.enemy_head_y.push(param5);
			this.enemy_head_r.push(param6);
			this.enemy_head_xOld.push(param4 - param7);
			this.enemy_head_yOld.push(param5 - param8);
			this.enemy_head_rOld.push(param6);
			this.enemy_head_velX.push(param7);
			this.enemy_head_velY.push(param8);
			this.enemy_body_x.push(param9);
			this.enemy_body_y.push(param10);
			this.enemy_body_r.push(param11);
			this.enemy_body_xOld.push(param9 - param12);
			this.enemy_body_yOld.push(param10 - param13);
			this.enemy_body_rOld.push(param11);
			this.enemy_body_velX.push(param12);
			this.enemy_body_velY.push(param13);
			this.enemy_body2_x.push(param9);
			this.enemy_body2_y.push(param10 + 25);
			this.enemy_body2_r.push(param11);
			this.enemy_body2_xOld.push(param9 - param12);
			this.enemy_body2_yOld.push(param10 + 25 - param13);
			this.enemy_body2_rOld.push(param11);
			this.enemy_body2_velX.push(param12);
			this.enemy_body2_velY.push(param13);
			this.enemy_foot1_x.push(param14);
			this.enemy_foot1_y.push(param15);
			this.enemy_foot1_r.push(param16);
			this.enemy_foot1_xOld.push(param14);
			this.enemy_foot1_yOld.push(param15);
			this.enemy_foot1_rOld.push(param16);
			this.enemy_foot1_velX.push(param17);
			this.enemy_foot1_velY.push(param18);
			this.enemy_foot2_x.push(param19);
			this.enemy_foot2_y.push(param20);
			this.enemy_foot2_r.push(param21);
			this.enemy_foot2_xOld.push(param19);
			this.enemy_foot2_yOld.push(param20);
			this.enemy_foot2_rOld.push(param21);
			this.enemy_foot2_velX.push(param22);
			this.enemy_foot2_velY.push(param23);
			return;
		}// end function
		
		public function removeEnemyRagdoll(param1)
		{
			this.enemy_ragdoll_type.splice(param1, 1);
			this.enemy_ragdoll_outfit.splice(param1, 1);
			this.enemy_ragdoll_face.splice(param1, 1);
			this.enemy_head_x.splice(param1, 1);
			this.enemy_head_y.splice(param1, 1);
			this.enemy_head_r.splice(param1, 1);
			this.enemy_head_xOld.splice(param1, 1);
			this.enemy_head_yOld.splice(param1, 1);
			this.enemy_head_rOld.splice(param1, 1);
			this.enemy_head_velX.splice(param1, 1);
			this.enemy_head_velY.splice(param1, 1);
			this.enemy_body_x.splice(param1, 1);
			this.enemy_body_y.splice(param1, 1);
			this.enemy_body_r.splice(param1, 1);
			this.enemy_body_xOld.splice(param1, 1);
			this.enemy_body_yOld.splice(param1, 1);
			this.enemy_body_rOld.splice(param1, 1);
			this.enemy_body_velX.splice(param1, 1);
			this.enemy_body_velY.splice(param1, 1);
			this.enemy_body2_x.splice(param1, 1);
			this.enemy_body2_y.splice(param1, 1);
			this.enemy_body2_r.splice(param1, 1);
			this.enemy_body2_xOld.splice(param1, 1);
			this.enemy_body2_yOld.splice(param1, 1);
			this.enemy_body2_rOld.splice(param1, 1);
			this.enemy_body2_velX.splice(param1, 1);
			this.enemy_body2_velY.splice(param1, 1);
			this.enemy_foot1_x.splice(param1, 1);
			this.enemy_foot1_y.splice(param1, 1);
			this.enemy_foot1_r.splice(param1, 1);
			this.enemy_foot1_xOld.splice(param1, 1);
			this.enemy_foot1_yOld.splice(param1, 1);
			this.enemy_foot1_rOld.splice(param1, 1);
			this.enemy_foot1_velX.splice(param1, 1);
			this.enemy_foot1_velY.splice(param1, 1);
			this.enemy_foot2_x.splice(param1, 1);
			this.enemy_foot2_y.splice(param1, 1);
			this.enemy_foot2_r.splice(param1, 1);
			this.enemy_foot2_xOld.splice(param1, 1);
			this.enemy_foot2_yOld.splice(param1, 1);
			this.enemy_foot2_rOld.splice(param1, 1);
			this.enemy_foot2_velX.splice(param1, 1);
			this.enemy_foot2_velY.splice(param1, 1);
			
			this.a  -- ;
			
			return;
		}// end function
		
		public function updateRagdolls()
		{
			this.a = 0;
			while (this.a < this.enemy_ragdoll_type.length)
			{
				
				if (this.enemy_ragdoll_type[this.a] == 1)
				{
					this.enemy_body_x[this.a] = this.enemy_body_x[this.a] + this.enemy_body_velX[this.a];
					this.enemy_body_y[this.a] = this.enemy_body_y[this.a] + this.enemy_body_velY[this.a];
					this.enemy_body_velX[this.a] = this.enemy_body_velX[this.a] * 0.97;
					this.enemy_body_velY[this.a] = this.enemy_body_velY[this.a] + 1.5;
					this.tileOn = int((this.enemy_body_y[this.a] + 15) / 50) * this.level_width + int(this.enemy_body_x[this.a] / 50);
					if (this.level_collidable[this.level[this.tileOn]] == 1)
					{
						this.enemy_body_y[this.a] = int((this.enemy_body_y[this.a] + 15) / 50) * 50 - 14;
						this.enemy_body_velX[this.a] = this.enemy_body_velX[this.a] * 0.8;
						this.enemy_body_velY[this.a] = 0;
						this.enemy_body_yOld[this.a] = this.enemy_body_y[this.a];
					}
					this.tempRad = this.enemy_body_r[this.a] - Math.PI * 0.5 + 0.4;
					if (this.enemy_ragdoll_face[this.a] == 0)
					{
						this.enemy_head_x[this.a] = this.enemy_body_x[this.a] + Math.cos(this.tempRad) * 27;
					}
					else
					{
						this.enemy_head_x[this.a] = this.enemy_body_x[this.a] - Math.cos(this.tempRad) * 27;
					}
					this.enemy_head_y[this.a] = this.enemy_body_y[this.a] + Math.sin(this.tempRad) * 27;
					this.tileOn = int((this.enemy_head_y[this.a] + 15) / 50) * this.level_width + int(this.enemy_head_x[this.a] / 50);
					if (this.level_collidable[this.level[this.tileOn]] == 0)
					{
						if (this.enemy_body_r[this.a] > 1.57)
						{
							this.enemy_body_r[this.a] = this.enemy_body_r[this.a] + 0.15;
						}
						else
						{
							this.enemy_body_r[this.a] = this.enemy_body_r[this.a] - 0.15;
						}
						this.enemy_head_r[this.a] = this.enemy_head_r[this.a] + this.enemy_head_velX[this.a] * 0.02;
					}
					this.enemy_head_velX[this.a] = (this.enemy_head_x[this.a] - this.enemy_head_xOld[this.a]) * 0.97;
					this.enemy_head_velY[this.a] = (this.enemy_head_y[this.a] - this.enemy_head_yOld[this.a] + 1.1) * 0.97;
					this.enemy_head_xOld[this.a] = this.enemy_head_x[this.a];
					this.enemy_head_yOld[this.a] = this.enemy_head_y[this.a];
					this.enemy_head_rOld[this.a] = this.enemy_head_r[this.a];
					this.enemy_body2_xOld[this.a] = this.enemy_body2_x[this.a];
					this.enemy_body2_yOld[this.a] = this.enemy_body2_y[this.a];
					this.enemy_body2_rOld[this.a] = this.enemy_body2_r[this.a];
					this.enemy_foot1_xOld[this.a] = this.enemy_foot1_x[this.a];
					this.enemy_foot1_yOld[this.a] = this.enemy_foot1_y[this.a];
					this.enemy_foot1_rOld[this.a] = this.enemy_foot1_r[this.a];
					this.enemy_foot2_xOld[this.a] = this.enemy_foot2_x[this.a];
					this.enemy_foot2_yOld[this.a] = this.enemy_foot2_y[this.a];
					this.enemy_foot2_rOld[this.a] = this.enemy_foot2_r[this.a];
				}
				
				this.a  ++ ;
				
			}
			return;
		}// end function
		
		public function cameraShakeFun(param1)
		{
			this.cameraShakeX = Math.random() * 10 + 10;
			this.cameraShakeY = Math.random() * 10 + 10;
			this.c = int(Math.random() * 2);
			if (this.c == 0)
			{
				this.cameraShakeX = this.cameraShakeX * -1;
			}
			this.c = int(Math.random() * 2);
			if (this.c == 0)
			{
				this.cameraShakeY = this.cameraShakeY * -1;
			}
			this.cameraShakeX = this.cameraShakeX * param1;
			this.cameraShakeY = this.cameraShakeY * param1;
			return;
		}// end function
		
		public function gameLogic()
		{
			this.playerFun();
			this.enemyLogic();
			this.particleLogic();
			this.updateRagdolls();
			if (this.gameType == 0)
			{
				if (this.timeRemaining > 0)
				{
					
					this.timeRemaining  -- ;
					
				}
				if (this.timeRemaining < 310)
				{
					if (this.timeRemaining % 30 == 0)
					{
						this.playSoundEffect(57, 1 - this.timeRemaining / 300, 0);
					}
				}
			}
			if (this.messageTime > 0)
			{
				
				this.messageTime  -- ;
				
			}
			if (this.messageTime2 > 0)
			{
				
				this.messageTime2  -- ;
				
			}
			if (this.scoreQueTime > 0)
			{
				if (this.scoreQue.length > 0)
				{
					
					this.scoreQueTime  -- ;
					
				}
			}
			else if (this.scoreQue.length > 0)
			{
				this.scoreQue.splice(0, 1);
				this.scoreQueTime = 60;
			}
			this.healthFrame = this.healthFrame + 0.5;
			if (this.healthFrame > 24)
			{
				this.healthFrame = 0;
			}
			
			this.keyHeadsUp_frame  ++ ;
			
			if (this.keyHeadsUp_frame > 15)
			{
				this.keyHeadsUp_frame = 0;
			}
			this.cameraShakeXOld = this.cameraShakeX;
			this.cameraShakeYOld = this.cameraShakeY;
			if (Math.abs(this.cameraShakeX) < 2)
			{
				this.cameraShakeX = 0;
			}
			else
			{
				this.cameraShakeX = this.cameraShakeX * -0.8;
			}
			if (Math.abs(this.cameraShakeY) < 2)
			{
				this.cameraShakeY = 0;
			}
			else
			{
				this.cameraShakeY = this.cameraShakeY * -0.8;
			}
			if (this.gameType == 0)
			{
				if (this.objective_score_complete[0] == 0)
				{
					if (this.score + this.scoreTally * this.multiplier >= this.objective_scores[0])
					{
						this.objective_score_complete[0] = 1;
						this.playSoundEffect(85, 2, 0);
						this.messageTime2 = 70;
						this.messageText2 = "OBJECTIVE COMPLETE: AMATEUR SCORE";
						this.scoreTally = this.scoreTally + 100;
						this.tempScoreQue = "";
						this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
						this.scoreQue.push(this.tempScoreQue);
						if (this.scoreQue.length > 3)
						{
							this.scoreQue.splice(0, 1);
						}
						this.scoreQueTime = 60;
						this.multiplier_countdown = this.max_multiplier_countdown;
					}
				}
				else if (this.objective_score_complete[1] == 0)
				{
					if (this.score + this.scoreTally * this.multiplier >= this.objective_scores[1])
					{
						this.objective_score_complete[1] = 1;
						this.playSoundEffect(85, 2, 0);
						this.messageTime2 = 70;
						this.messageText2 = "OBJECTIVE COMPLETE: PRO SCORE";
						this.scoreTally = this.scoreTally + 100;
						this.tempScoreQue = "";
						this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
						this.scoreQue.push(this.tempScoreQue);
						if (this.scoreQue.length > 3)
						{
							this.scoreQue.splice(0, 1);
						}
						this.scoreQueTime = 60;
						this.multiplier_countdown = this.max_multiplier_countdown;
					}
				}
				else if (this.objective_score_complete[2] == 0)
				{
					if (this.score + this.scoreTally * this.multiplier >= this.objective_scores[2])
					{
						this.objective_score_complete[2] = 1;
						this.playSoundEffect(85, 2, 0);
						this.messageTime2 = 70;
						this.messageText2 = "OBJECTIVE COMPLETE: OPERATOR SCORE";
						this.scoreTally = this.scoreTally + 100;
						this.tempScoreQue = "";
						this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
						this.scoreQue.push(this.tempScoreQue);
						if (this.scoreQue.length > 3)
						{
							this.scoreQue.splice(0, 1);
						}
						this.scoreQueTime = 60;
						this.multiplier_countdown = this.max_multiplier_countdown;
					}
				}
				if (this.objective_skill_complete[1] == 0)
				{
					if (this.scoreTimesEarned[this.objective_specialKillType] >= this.objective_specialKills_needed)
					{
						this.objective_skill_complete[1] = 1;
						this.playSoundEffect(85, 2, 0);
						this.messageTime2 = 70;
						this.messageText2 = "OBJECTIVE COMPLETE: ";
						this.messageText2 = this.messageText2 + this.objectives[5];
						this.messageText2 = this.messageText2.toUpperCase();
						this.scoreTally = this.scoreTally + 100;
						this.tempScoreQue = "";
						this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
						this.scoreQue.push(this.tempScoreQue);
						if (this.scoreQue.length > 3)
						{
							this.scoreQue.splice(0, 1);
						}
						this.scoreQueTime = 60;
						this.multiplier_countdown = this.max_multiplier_countdown;
					}
				}
				if (this.objective_skill_complete[0] == 0)
				{
					if (this.scoreTimesEarned[this.objective_whichWeaponProficiency + 12] == 1)
					{
						this.objective_skill_complete[0] = 1;
						this.playSoundEffect(85, 2, 0);
						this.messageTime2 = 70;
						this.messageText2 = "OBJECTIVE COMPLETE: ";
						this.messageText2 = this.messageText2 + this.objectives[6];
						this.messageText2 = this.messageText2.toUpperCase();
						this.scoreTally = this.scoreTally + 100;
						this.tempScoreQue = "";
						this.tempScoreQue = this.tempScoreQue + this.scoreNames[7];
						this.scoreQue.push(this.tempScoreQue);
						if (this.scoreQue.length > 3)
						{
							this.scoreQue.splice(0, 1);
						}
						this.scoreQueTime = 60;
						this.multiplier_countdown = this.max_multiplier_countdown;
					}
				}
			}
			return;
		}// end function
		
		public function gameLogic_intro()
		{
			this.particleLogic();
			this.playerFun_intro();
			this.intro_cameraXOld = this.intro_cameraX;
			this.intro_cameraYOld = this.intro_cameraY;
			this.intro_cameraX = this.intro_cameraX + this.intro_cameraVelX;
			this.intro_cameraY = this.intro_cameraY + this.intro_cameraVelY;
			if (Math.abs(this.intro_cameraVelX) > 0.5)
			{
				this.intro_cameraVelX = this.intro_cameraVelX * 0.98;
			}
			else
			{
				this.intro_cameraVelX = 0;
			}
			if (Math.abs(this.intro_cameraVelY) > 0.5)
			{
				this.intro_cameraVelY = this.intro_cameraVelY * 0.98;
			}
			else
			{
				this.intro_cameraVelY = 0;
			}
			if (this.objectiveTime > 0)
			{
				if (this.mc.intro_text_back.alpha < 1)
				{
					this.mc.intro_text_back.alpha = this.mc.intro_text_back.alpha + 0.05;
				}
				if (this.mc.intro_text_back.fade.alpha > 0)
				{
				}
				if (this.finished_lights == true)
				{
					this.mc.intro_text_back.fade.alpha = this.mc.intro_text_back.fade.alpha - 0.1;
					if (this.mc.intro_text_back.fade.alpha <= 0)
					{
						this.mc.intro_text_back.fade.visible = false;
					}
				}
				if (this.mouseDown == true)
				{
				}
				if (this.finished_lights == true)
				{
					this.mouseDown = false;
					this.intro_countdown = 0;
					this.mc.intro_text_back.visible = false;
					this.playMusic_whichGameTrack();
				}
			}
			else
			{
				
				this.objectiveTime  ++ ;
				
				this.intro_cameraX = this.cameraStart_x;
				this.intro_cameraY = this.cameraStart_y;
				this.intro_cameraXOld = this.intro_cameraX;
				this.intro_cameraYOld = this.intro_cameraY;
				this.intro_cameraVelX = 3;
				this.intro_cameraVelY = 0;
			}
			if (this.intro_countdown > 0)
			{
			}
			else
			{
				this.pauseState = 0;
			}
			return;
		}// end function
		
		public function drawRay(param1, param2, param3, param4)
		{
			this.tempRise = param3 - param4;
			this.tempRun = param1 - param2;
			this.lineLength = 100;
			this.endPoint.x = param1 + this.tempRun * this.lineLength;
			this.endPoint.y = param3 + this.tempRise * this.lineLength;
			this.lightMask.graphics.lineTo(this.endPoint.x, this.endPoint.y);
			return;
		}// end function
		
		public function getRay(param1, param2, param3, param4)
		{
			this.tempRise = param3 - param4;
			this.tempRun = param1 - param2;
			this.lineLength = 100;
			this.endPoint2.x = param1 + this.tempRun * this.lineLength;
			this.endPoint2.y = param3 + this.tempRise * this.lineLength;
			return;
		}// end function
		
		public function drawLine(param1, param2, param3, param4)
		{
			this.lightMask.graphics.lineTo(param2, param4);
			return;
		}// end function
		
		public function shadowFromLine(param1, param2, param3, param4)
		{
			this.lightMask.graphics.moveTo(param1, param3);
			this.lightMask.graphics.beginFill(this.shadowColor, 1);
			this.drawRay(param1, this.tempLight.x, param3, this.tempLight.y);
			this.getRay(param2, this.tempLight.x, param4, this.tempLight.y);
			this.drawLine(this.endPoint.x, this.endPoint2.x, this.endPoint.y, this.endPoint2.y);
			this.drawLine(this.endPoint2.x, param2, this.endPoint2.y, param4);
			this.drawLine(param2, param1, param4, param3);
			this.lightMask.graphics.endFill();
			return;
		}// end function
		
		public function castShadow(param1, param2, param3, param4)
		{
			this.tempRect_x = param1;
			this.tempRect_y = param2;
			this.tempRect_width = param3;
			this.tempRect_height = param4;
			this.tempRect_x_width = this.tempRect_x + this.tempRect_width;
			this.tempRect_y_height = this.tempRect_y + this.tempRect_height;
			if (Math.abs(this.tempRect_x + this.tempRect_width * 0.5 - this.tempLight.x) < this.tempRect_width * 0.5 + this.lightSizeHalf)
			{
				if (Math.abs(this.tempRect_y + this.tempRect_height * 0.5 - this.tempLight.y) < this.tempRect_height * 0.5 + this.lightSizeHalf)
				{
					this.lightMask.graphics.beginFill(this.shadowColor, 1);
					this.lightMask.graphics.moveTo(this.tempRect_x, this.tempRect_y);
					this.drawLine(this.tempRect_x, this.tempRect_x_width, this.tempRect_y, this.tempRect_y);
					this.drawLine(this.tempRect_x_width, this.tempRect_x_width, this.tempRect_y, this.tempRect_y_height);
					this.drawLine(this.tempRect_x_width, this.tempRect_x, this.tempRect_y_height, this.tempRect_y_height);
					this.drawLine(this.tempRect_x, this.tempRect_x, this.tempRect_y, this.tempRect_y);
					this.lightMask.graphics.endFill();
					if (this.tempLight.y > this.tempRect_y)
					{
						this.shadowFromLine(this.tempRect_x, this.tempRect_x_width, this.tempRect_y, this.tempRect_y);
					}
					if (this.tempLight.x < this.tempRect_x_width)
					{
						this.shadowFromLine(this.tempRect_x_width, this.tempRect_x_width, this.tempRect_y, this.tempRect_y_height);
					}
					if (this.tempLight.y < this.tempRect_y_height)
					{
						this.shadowFromLine(this.tempRect_x, this.tempRect_x_width, this.tempRect_y_height, this.tempRect_y_height);
					}
					if (this.tempLight.x > this.tempRect_x)
					{
						this.shadowFromLine(this.tempRect_x, this.tempRect_x, this.tempRect_y_height, this.tempRect_y);
					}
				}
			}
			return;
		}// end function
		
		public function renderLight(param1, param2, param3)
		{
			this.tempLight.x = param1;
			this.tempLight.y = param2;
			if (param3 == 0)
			{
				this.lightSizeHalf = this.light_bm_lg.width / 2;
				this.lightTexture = new BitmapData(this.light_bm_lg.width / this.shadowMapScale, this.light_bm_lg.width / this.shadowMapScale, false, 0);
			}
			else if (param3 == 1)
			{
				this.lightSizeHalf = this.light_bm_md.width / 2;
				this.lightTexture = new BitmapData(this.light_bm_md.width / this.shadowMapScale, this.light_bm_md.height / this.shadowMapScale, false, 0);
			}
			else if (param3 == 2)
			{
				this.lightSizeHalf = this.light_bm_sm.width / 2;
				this.lightTexture = new BitmapData(this.light_bm_sm.width / this.shadowMapScale, this.light_bm_sm.height / this.shadowMapScale, false, 0);
			}
			this.rect.x = 0;
			this.rect.y = 0;
			this.rect.width = this.lightTexture.width;
			this.rect.height = this.lightTexture.height;
			this.lightTexture.fillRect(this.rect, this.shadowColor);
			this.lightMask = new Shape();
			this.lightMatrix.tx = this.tempLight.x - this.lightSizeHalf;
			this.lightMatrix.ty = this.tempLight.y - this.lightSizeHalf;
			if (param3 == 0)
			{
				this.lightMask.graphics.beginBitmapFill(this.light_bm_lg, this.lightMatrix, false, false);
			}
			else if (param3 == 1)
			{
				this.lightMask.graphics.beginBitmapFill(this.light_bm_md, this.lightMatrix, false, false);
			}
			else if (param3 == 2)
			{
				this.lightMask.graphics.beginBitmapFill(this.light_bm_sm, this.lightMatrix, false, false);
			}
			this.lightMask.graphics.moveTo(this.tempLight.x - this.lightSizeHalf, this.tempLight.y - this.lightSizeHalf);
			this.lightMask.graphics.lineTo(this.tempLight.x + this.lightSizeHalf, this.tempLight.y - this.lightSizeHalf);
			this.lightMask.graphics.lineTo(this.tempLight.x + this.lightSizeHalf, this.tempLight.y + this.lightSizeHalf);
			this.lightMask.graphics.lineTo(this.tempLight.x - this.lightSizeHalf, this.tempLight.y + this.lightSizeHalf);
			this.lightMask.graphics.lineTo(this.tempLight.x - this.lightSizeHalf, this.tempLight.y - this.lightSizeHalf);
			this.lightMask.graphics.endFill();
			this.b = 0;
			while (this.b < this.level_rect_x.length)
			{
				
				this.castShadow(this.level_rect_x[this.b], this.level_rect_y[this.b], this.level_rect_w[this.b], this.level_rect_h[this.b]);
				
				this.b  ++ ;
				
			}
			this.lightMatrix2 = new Matrix();
			this.lightMatrix2.scale(1 / this.shadowMapScale, 1 / this.shadowMapScale);
			this.shadowBuffer.draw(this.lightMask, this.lightMatrix2, null, "add", null, false);
			return;
		}// end function
		
		public function interpFun(param1, param2, param3, param4)
		{
			this.tempInterpPoint.x = param1;
			this.tempInterpPoint.y = param2;
			this.tempInterpPointOld.x = param3;
			this.tempInterpPointOld.y = param4;
			this.interpFinal = Point.interpolate(this.tempInterpPointOld, this.tempInterpPoint, 1 - this.interpAmount);
			return;
		}// end function
		
		public function do_lights_fun()
		{
			if (this.doLights == true)
			{
			}
			if (this.levelToLoad != 4)
			{
			}
			if (this.levelToLoad != 12)
			{
				if (this.finished_lights == false)
				{
					while (getTimer() - this.precompute_time < 100)
					{
						
						this.renderLight(this.light_x[this.light_num], this.light_y[this.light_num], this.light_s[this.light_num]);
						
						this.light_num  ++ ;
						
						if (this.light_num >= this.light_x.length)
						{
							this.finished_lights = true;
							this.a = 100000;
						}
					}
				}
				if (this.finished_lights == true)
				{
					this.lightMatrix2 = new Matrix();
					this.lightMatrix2.scale(this.shadowMapScale, this.shadowMapScale);
					this.shadowBuffer_bm = new Bitmap(this.shadowBuffer);
					this.shadowBuffer_bm.filters = [this.bf];
					this.level_bm.draw(this.shadowBuffer_bm, this.lightMatrix2, this.lightTransform, "overlay", null, false);
					this.rect.width = 50;
					this.rect.height = 50;
					this.a = 0;
					while (this.a < this.level_height)
					{
						
						this.b = 0;
						while (this.b < this.level_width)
						{
							
							this.tempPoint.x = this.b * 50;
							this.tempPoint.y = this.a * 50;
							this.tileOn = this.level[this.a * this.level_width + this.b];
							if (this.tileSet == 1)
							{
							}
							else if (this.tileSet == 3)
							{
								if (this.level_collidable[this.tileOn] == 1)
								{
									this.rect.x = this.tileOn * 50;
									this.rect.y = 0;
									this.level_bm.copyPixels(this.tileSet_bm, this.rect, this.tempPoint, null, null, false);
								}
							}
							else if (this.tileSet == 4)
							{
								if (this.level_collidable[this.tileOn] == 1)
								{
									this.rect.x = this.tileOn * 50;
									this.rect.y = 0;
									this.level_bm.copyPixels(this.tileSet_bm, this.rect, this.tempPoint, null, null, false);
								}
							}
							else if (this.tileSet == 6)
							{
								if (this.level_collidable[this.tileOn] == 1)
								{
									this.rect.x = this.tileOn * 50;
									this.rect.y = 0;
									this.level_bm.copyPixels(this.tileSet_bm, this.rect, this.tempPoint, null, null, false);
								}
							}
							
							this.b  ++ ;
							
						}
						
						this.a  ++ ;
						
					}
					if (this.tileSet == 3)
					{
						this.lightMask = new Shape();
						this.lightMask.graphics.beginFill(4631);
						this.lightMask.graphics.drawRect(0, 0, this.level_bm.width, this.level_bm.height);
						this.lightMask.graphics.endFill();
						this.level_bm.draw(this.lightMask, null, null, "add", null, false);
					}
					else if (this.tileSet == 4)
					{
						this.lightMask = new Shape();
						this.lightMask.graphics.beginFill(1317152);
						this.lightMask.graphics.drawRect(0, 0, this.level_bm.width, this.level_bm.height);
						this.lightMask.graphics.endFill();
						this.level_bm.draw(this.lightMask, null, null, "add", null, false);
					}
					else if (this.tileSet == 6)
					{
						this.lightMask = new Shape();
						this.lightMask.graphics.beginFill(2040590);
						this.lightMask.graphics.drawRect(0, 0, this.level_bm.width, this.level_bm.height);
						this.lightMask.graphics.endFill();
						this.level_bm.draw(this.lightMask, null, null, "add", null, false);
					}
					this.dispose_of_light_stuff();
				}
			}
			else
			{
				this.finished_lights = true;
				this.dispose_of_light_stuff();
			}
			return;
		}// end function
		
		public function dispose_of_light_stuff()
		{
			this.lightMask = new Shape();
			this.light_x = [];
			this.light_y = [];
			this.light_s = [];
			this.shadowBuffer = new BitmapData(1, 1, false, this.shadowColor);
			this.lightTexture = new BitmapData(1, 1, false, 0);
			this.shadowBuffer_bm = new Bitmap(this.shadowBuffer);
			this.light_bm_lg = new BitmapData(1, 1, true, 0);
			this.light_bm_md = new BitmapData(1, 1, true, 0);
			this.light_bm_sm = new BitmapData(1, 1, true, 0);
			this.occlusion_bm = new BitmapData(1, 1, true, 0);
			System.gc();
			return;
		}// end function
		
		public function render()
		{
			this.bm.lock();
			if (this.pauseState != 0)
			{
			}
			if (this.pauseState == 2)
			{
				this.interpFun(this.character_x + int(this.aimPan) + this.cameraShakeX, this.character_y + this.cameraShakeY, this.character_xOld + int(this.aimPanOld) + this.cameraShakeXOld, this.character_yOld + this.cameraShakeYOld);
			}
			else
			{
				this.interpFun(this.intro_cameraX, this.intro_cameraY, this.intro_cameraXOld, this.intro_cameraYOld);
			}
			this.cameraX = this.interpFinal.x - this.screenWidth * 0.5;
			this.cameraY = this.interpFinal.y - this.screenHeight * 0.65 + 50;
			if (this.cameraX < -this.cameraShakeX)
			{
				this.cameraX = -this.cameraShakeX;
			}
			if (this.cameraX > this.level_width * 50 - this.screenWidth + this.cameraShakeX)
			{
				this.cameraX = this.level_width * 50 - this.screenWidth + this.cameraShakeX;
			}
			if (this.cameraY < -this.cameraShakeY)
			{
				this.cameraY = -this.cameraShakeY;
			}
			if (this.cameraY > this.level_height * 50 - this.screenHeight + this.cameraShakeY)
			{
				this.cameraY = this.level_height * 50 - this.screenHeight + this.cameraShakeY;
			}
			this.rect.width = this.screenWidth;
			this.rect.height = this.screenHeight - 80;
			this.rect.x = this.cameraX;
			this.rect.y = this.cameraY;
			this.tempPoint.x = 0;
			this.tempPoint.y = 0;
			this.bm.copyPixels(this.level_bm, this.rect, this.tempPoint, null, null, false);
			this.a = 0;
			while (this.a < this.simpleParticle_bg_type.length)
			{
				
				switch(this.simpleParticle_bg_type[this.a])
				{
					case 0:
					{
						this.rect.width = 58;
						this.rect.height = 150;
						this.rect.x = 0;
						this.rect.y = -this.simpleParticle_bg_p1[this.a];
						this.tempPoint.x = this.simpleParticle_bg_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_bg_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.door_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 1:
					{
						this.rect.width = 50;
						this.rect.height = 50;
						this.rect.x = 50 * int(this.simpleParticle_bg_p1[this.a]);
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_bg_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_bg_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.door_lock_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 2:
					{
						this.rect.width = 50;
						this.rect.height = 50;
						this.rect.x = 150 + 50 * int(this.simpleParticle_bg_p1[this.a]);
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_bg_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_bg_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.door_lock_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 3:
					{
						this.rect.width = 50;
						this.rect.height = 50;
						this.rect.x = 300 + 50 * int(this.simpleParticle_bg_p1[this.a]);
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_bg_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_bg_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.door_lock_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 4:
					{
						this.rect.width = 50;
						this.rect.height = 50;
						this.rect.x = 450 + 50 * int(this.simpleParticle_bg_p1[this.a]);
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_bg_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_bg_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.door_lock_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			this.render_a_character(this.character_x - this.cameraX, this.character_y - this.cameraY, this.character_xOld - this.cameraX, this.character_yOld - this.cameraY, this.anim, this.fr, this.frOld, this.character_face,this.character_gunRot, this.character_gunRotOld, this.character_headRot, this.character_gunX, this.character_gunY, this.character_gunXOld, this.character_gunYOld, this.character_gunEquipped, this.character_gunFrame, 0, false, this.character_reloadTime);
			this.enemiesOnScreen = 0;
			this.a = 0;
			while (this.a < this.enemy_type.length)
			{
				
				switch(this.enemy_type[this.a])
				{
					case 1:
					{
						if (this.enemy_x[this.a] - this.cameraX > -200)
						{
						}
						if (this.enemy_x[this.a] - this.cameraX < this.screenWidth + 200)
						{
							if (this.enemy_y[this.a] - this.cameraY > -200)
							{
							}
							if (this.enemy_y[this.a] - this.cameraY < this.screenHeight + 200)
							{
								this.render_a_character(this.enemy_x[this.a] - this.cameraX, this.enemy_y[this.a] - this.cameraY, this.enemy_xOld[this.a] - this.cameraX, this.enemy_yOld[this.a] - this.cameraY, this.enemy_anim[this.a], this.enemy_fr[this.a], this.enemy_frOld[this.a], this.enemy_face[this.a], this.enemy_gunRot[this.a], this.enemy_gunRotOld[this.a], this.enemy_headRot[this.a], this.enemy_gunX[this.a], this.enemy_gunY[this.a], this.enemy_gunXOld[this.a], this.enemy_gunYOld[this.a], this.enemy_gunEquipped[this.a], this.enemy_gunFrame[this.a], this.enemy_spriteSet[this.a], this.enemy_isHeadless[this.a], 0);
								
								this.enemiesOnScreen  ++ ;
								
							}
						}
						break;
					}
					case 2:
					{
						if (this.enemy_x[this.a] - this.cameraX > -300)
						{
						}
						if (this.enemy_x[this.a] - this.cameraX < this.screenWidth + 300)
						{
							if (this.enemy_y[this.a] - this.cameraY > -300)
							{
							}
							if (this.enemy_y[this.a] - this.cameraY < this.screenHeight + 300)
							{
								this.render_enemy_large1(this.enemy_x[this.a] - this.cameraX, this.enemy_y[this.a] - this.cameraY, this.enemy_xOld[this.a] - this.cameraX, this.enemy_yOld[this.a] - this.cameraY, this.enemy_anim[this.a], this.enemy_fr[this.a], this.enemy_frOld[this.a], this.enemy_face[this.a]);
								
								this.enemiesOnScreen  ++ ;
								
							}
						}
						break;
					}
					case 3:
					{
						this.rect.width = 60;
						this.rect.height = 60;
						this.rect.x = 60 * int(this.enemy_fr[this.a]);
						this.rect.y = 0;
						this.tempPoint.x = this.enemy_x[this.a] - this.cameraX - 30;
						this.tempPoint.y = this.enemy_y[this.a] - this.cameraY - 30;
						this.bm.copyPixels(this.disc_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 4:
					{
						if (this.enemy_x[this.a] - this.cameraX > -300)
						{
						}
						if (this.enemy_x[this.a] - this.cameraX < this.screenWidth + 300)
						{
							if (this.enemy_y[this.a] - this.cameraY > -300)
							{
							}
							if (this.enemy_y[this.a] - this.cameraY < this.screenHeight + 300)
							{
								this.render_a_bean(this.enemy_x[this.a], this.enemy_y[this.a], this.enemy_xOld[this.a], this.enemy_yOld[this.a], this.enemy_anim[this.a], this.enemy_fr[this.a], this.enemy_face[this.a]);
								
								this.enemiesOnScreen  ++ ;
								
							}
						}
						break;
					}
					case 5:
					{
						if (this.enemy_x[this.a] - this.cameraX > -300)
						{
						}
						if (this.enemy_x[this.a] - this.cameraX < this.screenWidth + 300)
						{
							if (this.enemy_y[this.a] - this.cameraY > -300)
							{
							}
							if (this.enemy_y[this.a] - this.cameraY < this.screenHeight + 300)
							{
								this.render_a_teenie(this.enemy_x[this.a], this.enemy_y[this.a], this.enemy_xOld[this.a], this.enemy_yOld[this.a], this.enemy_anim[this.a], this.enemy_fr[this.a], this.enemy_face[this.a]);
								
								this.enemiesOnScreen  ++ ;
								
							}
						}
						break;
					}
					case 6:
					{
						if (this.enemy_x[this.a] - this.cameraX > -200)
						{
						}
						if (this.enemy_x[this.a] - this.cameraX < this.screenWidth + 200)
						{
							if (this.enemy_y[this.a] - this.cameraY > -200)
							{
							}
							if (this.enemy_y[this.a] - this.cameraY < this.screenHeight + 200)
							{
								this.render_a_zombie(this.enemy_x[this.a] - this.cameraX, this.enemy_y[this.a] - this.cameraY, this.enemy_xOld[this.a] - this.cameraX, this.enemy_yOld[this.a] - this.cameraY, this.enemy_anim[this.a], this.enemy_fr[this.a], this.enemy_frOld[this.a], this.enemy_face[this.a], this.enemy_spriteSet[this.a], this.enemy_isHeadless[this.a]);
								
								this.enemiesOnScreen  ++ ;
								
							}
						}
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.simpleParticle_type.length)
			{
				
				switch(this.simpleParticle_type[this.a])
				{
					case 0:
					{
						this.trans.createBox(1, 1, this.simpleParticle_r[this.a], this.simpleParticle_x[this.a] - this.cameraX, this.simpleParticle_y[this.a] - this.cameraY);
						this.bm.draw(this["gun_flash_" + this.simpleParticle_p1[this.a]], this.trans);
						break;
					}
					case 1:
					{
						this.rect.width = this.smokeWidth;
						this.rect.height = this.gun_flash_smoke_bm.height;
						this.rect.x = int(this.simpleParticle_p1[this.a]) * this.smokeWidth;
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.gun_flash_smoke_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 2:
					{
						this.rect.width = this.gunCasingWidth[int(this.simpleParticle_p1[this.a])];
						this.rect.height = this.rect.width;
						this.rect.x = this.simpleParticle_p2[this.a];
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY;
						this.bm.copyPixels(this["gun_casing" + int(this.simpleParticle_p1[this.a])], this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 3:
					{
						this.rect.width = 65;
						this.rect.height = 65;
						this.rect.x = int(this.simpleParticle_p1[this.a]) * 65;
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.gun_incindary_impact_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 4:
					{
						this.rect.width = 275;
						this.rect.height = 170;
						this.rect.x = int(this.simpleParticle_p1[this.a]) * 275 + this.simpleParticle_p2[this.a] * 275 * 12;
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.gun_blood_impact_bm1, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 5:
					{
						this.rect.width = 300;
						this.rect.height = 170;
						this.rect.x = int(this.simpleParticle_p1[this.a]) * 300;
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.gun_blood_impact_bm2, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 6:
					{
						this.trans.createBox(1, int(this.simpleParticle_p2[this.a]), this.simpleParticle_r[this.a], this.simpleParticle_x[this.a] - this.cameraX, this.simpleParticle_y[this.a] - this.cameraY);
						this.bm.draw(this["gun_blood_impact3_fr" + int(this.simpleParticle_p1[this.a])], this.trans);
						break;
					}
					case 7:
					{
						this.trans.createBox(1, 1, this.simpleParticle_r[this.a], this.simpleParticle_x[this.a] - this.cameraX, this.simpleParticle_y[this.a] - this.cameraY);
						this.bm.draw(this["gun_blood_impact4_fr" + int(this.simpleParticle_p1[this.a])], this.trans);
						break;
					}
					case 8:
					{
						this.rect.width = 215;
						this.rect.height = 135;
						this.rect.x = int(this.simpleParticle_p1[this.a]) * 215;
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.gun_blood_impact_bm5, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 9:
					{
						this.rect.width = 131;
						this.rect.height = 105;
						this.rect.x = int(this.simpleParticle_p1[this.a]) * 131 + this.simpleParticle_p2[this.a] * 131 * 11;
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY;
						this.bm.copyPixels(this.gun_blood_impact_bm6, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 10:
					{
						this.rect.width = 151;
						this.rect.height = 151;
						this.rect.x = int(this.simpleParticle_p1[this.a]) * 151;
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX - 75;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY - 75;
						this.bm.copyPixels(this.explosion, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 11:
					{
						this.rect.width = 65;
						this.rect.height = 65;
						this.rect.x = this.simpleParticle_p2[this.a] * 910 + int(this.simpleParticle_p1[this.a]) * 65;
						this.rect.y = 0;
						this.tempPoint.x = this.simpleParticle_x[this.a] - this.cameraX - 33;
						this.tempPoint.y = this.simpleParticle_y[this.a] - this.cameraY - 33;
						this.bm.copyPixels(this.gun_blackhole_fx_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.particle_type.length)
			{
				
				switch(this.particle_type[this.a])
				{
					case 0:
					{
						this.rect.width = this.gunCasingWidth[int(this.particle_p1[this.a])];
						this.rect.height = this.rect.width;
						this.rect.x = int(this.particle_p2[this.a]) * this.rect.width;
						this.rect.y = 0;
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - this.rect.width * 0.5;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - this.rect.height * 0.5;
						this.bm.copyPixels(this["gun_casing" + int(this.particle_p1[this.a])], this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 1:
					{
						this.rect.width = this.boolitWidth;
						this.rect.height = this.gun_boolit.height;
						this.rect.x = int(this.particle_p1[this.a]) * this.boolitWidth;
						this.rect.y = 0;
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - this.rect.width * 0.5;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - this.rect.height * 0.5;
						this.bm.copyPixels(this.gun_boolit, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 2:
					{
						this.tempPoint.x = this.particle_x[this.a] - this.cameraX;
						this.tempPoint.y = this.particle_y[this.a] - this.cameraY;
						this.rect.width = 12;
						this.rect.height = 12;
						this.rect.x = 12 * int(this.particle_frame[this.a]);
						this.rect.y = 0;
						this.bm.copyPixels(this.spark_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 3:
					{
						this.rect.width = this.smokeWidth;
						this.rect.height = this.gun_flash_smoke_bm.height;
						this.rect.x = int(this.particle_frame[this.a]) * this.smokeWidth;
						this.rect.y = 0;
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX;
						this.tempPoint.y = this.interpFinal.y - this.cameraY;
						this.bm.copyPixels(this.gun_flash_smoke_bm, this.rect, this.tempPoint, null, null, false);
						break;
					}
					case 4:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 37;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 37;
						this.rect.x = 0;
						this.rect.y = 0;
						this.rect.width = 75;
						this.rect.height = 75;
						this.bm.copyPixels(this.door_keycard_bm, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 5:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 37;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 37;
						this.rect.x = this.particle_frame[this.a] * 75;
						this.rect.y = 0;
						this.rect.width = 75;
						this.rect.height = 75;
						this.bm.copyPixels(this.collectable_gunPiece_bm, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 6:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.trans.createBox(this.particle_p1[this.a], this.particle_p1[this.a], 0, this.interpFinal.x - this.particle_p1[this.a], this.interpFinal.y - this.particle_p1[this.a]);
						this.level_bm.draw(this.blood_drop, this.trans, null, "multiply", null, false);
						break;
					}
					case 7:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.trans.createBox(this.particle_p2[this.a], 1, this.particle_r[this.a], this.interpFinal.x - this.cameraX, this.interpFinal.y - this.cameraY);
						this.bm.draw(this["giblets_human_sprite" + int(this.particle_p1[this.a])], this.trans);
						break;
					}
					case 8:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 37;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 37;
						this.rect.x = 0;
						this.rect.y = 0;
						this.rect.width = 75;
						this.rect.height = 75;
						this.bm.copyPixels(this.briefcase_bm, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 9:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX;
						this.tempPoint.y = this.interpFinal.y - this.cameraY;
						this.rect.x = 80 * int(this.particle_p1[this.a]) + 10 * int(this.particle_p2[this.a]);
						this.rect.y = 0;
						this.rect.width = 10;
						this.rect.height = 10;
						this.bm.copyPixels(this.giblets_small_bm, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 10:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 37;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 37;
						this.rect.x = 0;
						this.rect.y = 0;
						this.rect.width = 75;
						this.rect.height = 75;
						this.bm.copyPixels(this.health_bm, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 11:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 50;
						this.rect.x = 0;
						this.rect.y = 0;
						this.rect.width = 50;
						this.rect.height = 85;
						this.bm.copyPixels(this.time_bm, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 12:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 9;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 9;
						this.rect.x = 0;
						this.rect.y = 0;
						this.rect.width = 18;
						this.rect.height = 18;
						this.bm.copyPixels(this.gun_acidBomb, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 13:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 15;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 18;
						this.rect.x = 31 * int(this.particle_frame[this.a]) + 248 * this.particle_p1[this.a];
						this.rect.y = 0;
						this.rect.width = 31;
						this.rect.height = 36;
						this.bm.copyPixels(this.gun_acidBomb_drip, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 14:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.trans.createBox(1, 1, this.particle_r[this.a], this.interpFinal.x - this.cameraX, this.interpFinal.y - this.cameraY);
						this.bm.draw(this.gun_rocket, this.trans);
						break;
					}
					case 15:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 2;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 2;
						this.rect.x = 0;
						this.rect.y = 0;
						this.rect.width = 5;
						this.rect.height = 5;
						this.bm.copyPixels(this.airsoftPellet, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 17:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 4;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 4;
						this.rect.x = 8 * int(this.particle_frame[this.a]);
						this.rect.y = 0;
						this.rect.width = 8;
						this.rect.height = 8;
						if (this.particle_p2[this.a] == 0)
						{
							this.bm.copyPixels(this.collectStar_yellow_bm, this.rect, this.tempPoint, null, null, true);
						}
						else if (this.particle_p2[this.a] == 1)
						{
							this.bm.copyPixels(this.collectStar_red_bm, this.rect, this.tempPoint, null, null, true);
						}
						else if (this.particle_p2[this.a] == 2)
						{
							this.bm.copyPixels(this.collectStar_blue_bm, this.rect, this.tempPoint, null, null, true);
						}
						else if (this.particle_p2[this.a] == 3)
						{
							this.bm.copyPixels(this.collectStar_white_bm, this.rect, this.tempPoint, null, null, true);
						}
						break;
					}
					case 18:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 15;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 15;
						var _loc_1:* = this.particle_p2;
						var _loc_2:* = this.a;
						var _loc_3:* = this.particle_p2[this.a] + 1;
						_loc_1[_loc_2] = _loc_3;
						if (this.particle_p2[this.a] > 6)
						{
							this.particle_p2[this.a] = 0;
						}
						if (this.particle_p2[this.a] < 3)
						{
							this.rect.x = 0;
						}
						else
						{
							this.rect.x = int(this.particle_p3[this.a]) * 40;
							if (this.particle_p3[this.a] > 0)
							{
							}
							if (this.particle_p3[this.a] < 13)
							{
								this.particle_p3[this.a] = this.particle_p3[this.a] + 0.4;
								if (this.particle_p3[this.a] > 12)
								{
									this.particle_p3[this.a] = 0;
								}
							}
							else
							{
								if (this.particle_p3[this.a] > 12)
								{
								}
								if (this.particle_p3[this.a] < 25)
								{
									this.particle_p3[this.a] = this.particle_p3[this.a] + 0.4;
									if (this.particle_p3[this.a] > 24)
									{
										this.particle_p3[this.a] = 0;
									}
								}
								else
								{
									this.c = int(Math.random() * 60);
									if (this.c == 0)
									{
										this.particle_p3[this.a] = 1;
									}
									else if (this.c == 1)
									{
										this.particle_p3[this.a] = 13;
									}
									else
									{
										this.particle_p3[this.a] = int(Math.random() * 5) + 25;
									}
								}
							}
						}
						this.rect.y = 0;
						this.rect.width = 40;
						this.rect.height = 40;
						this.bm.copyPixels(this.gun_blackhole_bm, this.rect, this.tempPoint, null, null, true);
						break;
					}
					case 19:
					{
						this.trans = new Matrix();
						this.gaussTrail.trail.scaleX = this.particle_p1[this.a] * 0.01;
						this.gaussTrail.trail.alpha = 1 - this.particle_p4[this.a] * 0.02;
						this.gaussTrail.trail.gotoAndStop(int(this.particle_p3[this.a]));
						this.trans.createBox(1, 1, this.particle_r[this.a], this.particle_x[this.a] - this.cameraX, this.particle_y[this.a] - this.cameraY);
						this.bm.draw(this.gaussTrail, this.trans, null, null, null, false);
						break;
					}
					case 20:
					{
						this.interpFun(this.particle_x[this.a], this.particle_y[this.a], this.particle_xOld[this.a], this.particle_yOld[this.a]);
						this.tempPoint.x = this.interpFinal.x - this.cameraX - 17;
						this.tempPoint.y = this.interpFinal.y - this.cameraY - 16;
						this.rect.x = int(this.particle_r[this.a]) * 35 + this.particle_p1[this.a] * 560;
						this.rect.y = 0;
						this.rect.width = 35;
						this.rect.height = 32;
						this.bm.copyPixels(this.bean_gib_eye, this.rect, this.tempPoint, null, null, true);
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			this.tempPoint.x = mc.mouseX - 18;
			this.tempPoint.y = mc.mouseY - 18;
			this.rect.x = 35 * this.cursorFrame;
			this.rect.y = 0;
			this.rect.width = 35;
			this.rect.height = 35;
			this.bm.copyPixels(this.cursor, this.rect, this.tempPoint, null, null, true);
			if (this.cursorFrame > 0)
			{
				
				this.cursorFrame  ++ ;
				
				if (this.cursorFrame > 4)
				{
					this.cursorFrame = 0;
				}
			}
			this.tempPoint.x = 0;
			this.tempPoint.y = this.screenHeight - 80;
			this.rect.x = 0;
			this.rect.y = 0;
			this.rect.width = 800;
			this.rect.height = 80;
			this.bm.copyPixels(this.hud_back, this.rect, this.tempPoint, null, null, true);
			if (this.pauseState != 1)
			{
			}
			if (this.pauseState != 2)
			{
				if (this.gameType == 0)
				{
					if (this.timeRemaining > 9999999993600)
					{
						this.tempText = "TIME : " + "2:00";
						this.addText_lg(5, this.screenHeight - 80 + 50, 0, 0);
					}
					else
					{
						this.time_min = int(this.timeRemaining / 30 / 60);
						this.time_sec = int(this.timeRemaining / 30) % 60;
						if (this.time_sec < 10)
						{
							this.tempText = "TIME : " + this.time_min + ":0" + this.time_sec;
							this.addText_lg(5, this.screenHeight - 80 + 50, 0, 0);
						}
						else
						{
							this.tempText = "TIME : " + this.time_min + ":" + this.time_sec;
							this.addText_lg(5, this.screenHeight - 80 + 50, 0, 0);
						}
					}
				}
				if (this.messageTime > 0)
				{
					this.tempText = this.messageText;
					if (this.messageTime > 55)
					{
						this.addText_lg(this.screenWidth * 0.5, this.screenHeight * 0.15, 2, this.messageTime - 55);
					}
					else if (this.messageTime > 10)
					{
						this.addText_lg(this.screenWidth * 0.5, this.screenHeight * 0.15, 2, 0);
					}
					else
					{
						this.addText_lg(this.screenWidth * 0.5, this.screenHeight * 0.15, 2, int(5 - this.messageTime * 0.5));
					}
				}
				if (this.messageTime2 > 0)
				{
					this.tempText = this.messageText2;
					if (this.messageTime2 > 55)
					{
						this.addText_lg(this.screenWidth * 0.5, this.screenHeight * 0.15 + 30, 2, this.messageTime2 - 55);
					}
					else if (this.messageTime2 > 10)
					{
						this.addText_lg(this.screenWidth * 0.5, this.screenHeight * 0.15 + 30, 2, 0);
					}
					else
					{
						this.addText_lg(this.screenWidth * 0.5, this.screenHeight * 0.15 + 30, 2, int(5 - this.messageTime2 * 0.5));
					}
				}
				this.tempText = "SCORE: " + this.score;
				this.addText_lg(5, this.screenHeight - 80 + 30, 0, 0);
				if (this.scoreTally > 0)
				{
					this.tempText = this.scoreTally + " * " + int(this.multiplier * 10) / 10;
					this.addText_lg(this.screenWidth * 0.5, this.screenHeight - 80 + 30, 2, 0);
				}
				this.tempText = "";
				this.a = 0;
				while (this.a < this.scoreQue.length)
				{
					
					this.tempText = this.scoreQue[this.a];
					this.addText_sm(this.screenWidth * 0.5, this.screenHeight - 105 - 20 * this.a, 2, 0);
					
					this.a  ++ ;
					
				}
				if (this.displayMiniMap == false)
				{
					this.tempText = "KEYCARDS: " + this.character_keycards;
					this.addText_lg(this.screenWidth - 5, this.screenHeight - 80 + 50, 1, 0);
					this.tempText = "" + this.gun_names[this.character_gunEquipped];
					this.addText_lg(this.screenWidth - 5, this.screenHeight - 80 + 30, 1, 0);
				}
				this.rect.x = 150;
				this.rect.y = 0;
				this.rect.width = 150;
				this.rect.height = 30;
				this.tempPoint.x = this.screenWidth * 0.5 - 75;
				this.tempPoint.y = 67;
				this.rect.x = 0;
				this.rect.y = 0;
				this.rect.width = this.multiplier_countdown / this.max_multiplier_countdown * 150;
				this.rect.height = 30;
				this.tempPoint.x = this.screenWidth * 0.5 - 75;
				this.tempPoint.y = 67;
				this.rect.x = 0;
				this.rect.y = 0;
				this.rect.width = 300;
				this.rect.height = 25;
				this.tempPoint.x = 0;
				this.tempPoint.y = this.screenHeight - 80 + 5;
				this.bm.copyPixels(this.health_meter_back, this.rect, this.tempPoint, null, null, true);
				this.healthPixels = 300 * this.character_health / this.character_maxHealth;
				this.rect.y = 0;
				this.rect.height = 25;
				this.tempPoint.y = this.screenHeight - 80 + 5;
				this.a = 0;
				while (this.a < (int(this.healthPixels / 25) + 1))
				{
					
					this.rect.width = this.healthPixels + 25 - (this.a + 1) * 25;
					if (this.rect.width > 25)
					{
						this.rect.width = 25;
					}
					if (this.a < 11)
					{
						this.rect.x = int(this.healthFrame) * 50;
					}
					else
					{
						this.rect.x = int(this.healthFrame) * 50 + 25;
					}
					this.tempPoint.x = this.a * 25;
					this.bm.copyPixels(this.health_meter, this.rect, this.tempPoint, null, null, true);
					
					this.a  ++ ;
					
				}
				this.rect.x = 0;
				this.rect.y = 0;
				this.rect.width = 300;
				this.rect.height = 25;
				this.tempPoint.x = 0;
				this.tempPoint.y = this.screenHeight - 80 + 5;
				this.bm.copyPixels(this.health_meter_top, this.rect, this.tempPoint, null, null, true);
				this.tempText = "HEALTH: " + this.character_health * 4 + "^" + this.character_maxHealth * 4;
				this.addText_sm(15, this.screenHeight - 80 + 8, 0, 0);
				if (this.displayMiniMap == false)
				{
					this.rect.x = 0;
					this.rect.y = 0;
					this.rect.width = 300;
					this.rect.height = 25;
					this.tempPoint.x = this.screenWidth - 300;
					this.tempPoint.y = this.screenHeight - 80 + 5;
					this.bm.copyPixels(this.ammo_meter_back, this.rect, this.tempPoint, null, null, true);
					if (this.character_reloadTime < 1)
					{
						this.healthPixels = 300 * this.gun_ammo[this.character_gunEquipped] / this.gun_mag_size[this.character_gunEquipped];
						if (this.healthPixels > 300)
						{
							this.healthPixels = 300;
						}
					}
					else
					{
						this.healthPixels = 300 - 300 * this.character_reloadTime / this.gun_reload_time[this.character_gunEquipped];
						if (this.healthPixels > 300)
						{
							this.healthPixels = 300;
						}
					}
					this.rect.y = 0;
					this.rect.height = 25;
					this.tempPoint.y = this.screenHeight - 80 + 5;
					this.a = 0;
					while (this.a < (int(this.healthPixels / 25) + 1))
					{
						
						this.rect.width = this.healthPixels + 25 - (this.a + 1) * 25;
						if (this.rect.width > 25)
						{
							this.rect.width = 25;
						}
						if (this.a < 11)
						{
							this.rect.x = int(this.healthFrame) * 50 + 25;
							if (this.rect.width < 25)
							{
								this.rect.x = this.rect.x + (25 - this.rect.width);
							}
						}
						else
						{
							this.rect.x = int(this.healthFrame) * 50;
							if (this.rect.width < 25)
							{
								this.rect.x = this.rect.x + (25 - this.rect.width);
							}
						}
						this.tempPoint.x = this.screenWidth - (this.a + 1) * 25;
						if (this.rect.width < 25)
						{
							this.tempPoint.x = this.tempPoint.x + (25 - this.rect.width);
						}
						this.bm.copyPixels(this.ammo_meter, this.rect, this.tempPoint, null, null, true);
						
						this.a  ++ ;
						
					}
					this.rect.x = 0;
					this.rect.y = 0;
					this.rect.width = 300;
					this.rect.height = 25;
					this.tempPoint.x = this.screenWidth - 300;
					this.tempPoint.y = this.screenHeight - 80 + 5;
					this.bm.copyPixels(this.ammo_meter_top, this.rect, this.tempPoint, null, null, true);
					if (this.character_reloadTime < 1)
					{
						this.tempText = "AMMO: " + this.gun_ammo[this.character_gunEquipped];
					}
					else
					{
						this.tempText = "RELOADING";
					}
					this.addText_sm(this.screenWidth - 15, this.screenHeight - 80 + 8, 1, 0);
				}
				this.rect.x = 0;
				this.rect.y = 0;
				this.rect.width = 175;
				this.rect.height = 25;
				this.tempPoint.x = this.screenWidth * 0.5 - 87;
				this.tempPoint.y = this.screenHeight - 80 + 5;
				this.bm.copyPixels(this.combo_meter_back, this.rect, this.tempPoint, null, null, true);
				this.healthPixels = int(this.multiplier_countdown / this.max_multiplier_countdown * 87.5);
				this.rect.x = int(87.5 - this.healthPixels) + 175 * int(this.healthFrame);
				this.rect.y = 0;
				this.rect.width = int(this.healthPixels * 2);
				this.rect.height = 25;
				this.tempPoint.x = int(this.screenWidth * 0.5 - 87 + 87.5 - this.healthPixels);
				this.tempPoint.y = this.screenHeight - 80 + 5;
				this.bm.copyPixels(this.combo_meter, this.rect, this.tempPoint, null, null, true);
				this.rect.x = 0;
				this.rect.y = 0;
				this.rect.width = 175;
				this.rect.height = 25;
				this.tempPoint.x = this.screenWidth * 0.5 - 87;
				this.tempPoint.y = this.screenHeight - 80 + 5;
				this.bm.copyPixels(this.combo_meter_top, this.rect, this.tempPoint, null, null, true);
				this.tempText = "COMBO";
				this.addText_sm(this.screenWidth * 0.5 - 3, this.screenHeight - 80 + 8, 2, 0);
				if (this.keyHeadsUp_visible == true)
				{
					if (this.keyHeadsUp_frame > 8)
					{
						this.rect.x = 0;
					}
					else
					{
						this.rect.x = 166 * this.keyHeadsUp_frame;
					}
					this.rect.y = 0;
					this.rect.width = 166;
					this.rect.height = 60;
					this.interpFun(this.character_x, this.character_y, this.character_xOld, this.character_yOld);
					this.tempPoint.x = this.interpFinal.x - this.cameraX - 83;
					this.tempPoint.y = this.interpFinal.y - this.cameraY + 10;
					this.bm.copyPixels(this.keyHeadsUp, this.rect, this.tempPoint, null, null, true);
				}
				if (this.displayMiniMap == true)
				{
					if (this.userMap.height < 70)
					{
						this.rect.x = 0;
						this.rect.y = 0;
						this.rect.width = this.userMap.width;
						this.rect.height = this.userMap.height;
						this.tempPoint.x = 495 + (305 - this.userMap.width) * 0.5;
						this.tempPoint.y = this.screenHeight - (75 - this.userMap.height) * 0.5;
					}
					else
					{
						this.rect.x = 0;
						this.rect.y = int(this.character_y / 50) - 35;
						if (this.rect.y < 0)
						{
							this.rect.y = 0;
						}
						if (this.rect.y > this.userMap.height - 70)
						{
							this.rect.y = this.userMap.height - 70;
						}
						this.rect.width = this.userMap.width;
						this.rect.height = 70;
						this.tempPoint.x = 495 + (305 - this.userMap.width) * 0.5;
						this.tempPoint.y = this.screenHeight - 75;
					}
					this.bm.copyPixels(this.userMap, this.rect, this.tempPoint, null, null, true);
					this.bm.setPixel(int(this.character_x / 50) + this.tempPoint.x - 1, int(this.character_y / 50) + this.tempPoint.y - this.rect.y, 16711680);
					this.bm.setPixel(int(this.character_x / 50) + this.tempPoint.x - 1, int(this.character_y / 50) + this.tempPoint.y - 1 - this.rect.y, 16711680);
					this.bm.setPixel(int(this.character_x / 50) + this.tempPoint.x + 1, int(this.character_y / 50) + this.tempPoint.y - this.rect.y, 16711680);
					this.bm.setPixel(int(this.character_x / 50) + this.tempPoint.x + 1, int(this.character_y / 50) + this.tempPoint.y - 1 - this.rect.y, 16711680);
					this.bm.setPixel(int(this.character_x / 50) + this.tempPoint.x, int(this.character_y / 50) + this.tempPoint.y + 1 - this.rect.y, 16711680);
					this.bm.setPixel(int(this.character_x / 50) + this.tempPoint.x, int(this.character_y / 50) + this.tempPoint.y - 2 - this.rect.y, 16711680);
				}
			}
			if (this.kD[8] == true)
			{
				this.kD[8] = false;
				if (this.displayMiniMap == true)
				{
					this.displayMiniMap = false;
				}
				else
				{
					this.displayMiniMap = true;
				}
				this.mapToggled = this.displayMiniMap;
			}
			this.bm.unlock();
			return;
		}// end function
		
		public function addText_lg(param1, param2, param3, param4)
		{
			this.c = 0;
			while (this.c < this.tempText.length)
			{
				
				this.tempTextNum = this.tempText.charCodeAt(this.c) - 65;
				if (this.tempTextNum > -1)
				{
				}
				if (this.tempTextNum < 26)
				{
					this.rect.x = this.tempTextNum * 20;
				}
				else if (this.tempTextNum == -19)
				{
					this.rect.x = 520;
				}
				else if (this.tempTextNum == -32)
				{
					this.rect.x = 540;
				}
				else if (this.tempTextNum == -7)
				{
					this.rect.x = 560;
				}
				else if (this.tempTextNum == 29)
				{
					this.rect.x = 780;
				}
				else if (this.tempTextNum == -1)
				{
					this.rect.x = 820;
				}
				else if (this.tempTextNum == -23)
				{
					this.rect.x = 800;
				}
				else if (this.tempTextNum == -22)
				{
					this.rect.x = 840;
				}
				else
				{
					if (this.tempTextNum > -18)
					{
					}
					if (this.tempTextNum < -7)
					{
						this.rect.x = (31 + this.tempTextNum + 15) * 20;
					}
				}
				if (param3 == 0)
				{
					this.tempPoint.x = param1 + this.c * 14;
				}
				else if (param3 == 1)
				{
					this.tempPoint.x = param1 - this.tempText.length * 14 + this.c * 14;
				}
				else
				{
					this.tempPoint.x = param1 - this.tempText.length * 14 * 0.5 + this.c * 14;
				}
				this.tempPoint.y = param2;
				this.rect.y = 26 * param4;
				this.rect.width = 20;
				this.rect.height = 26;
				if (this.tempTextNum != -33)
				{
					this.bm.copyPixels(this.alphabet_bm_lg, this.rect, this.tempPoint, null, null, true);
				}
				
				this.c  ++ ;
				
			}
			return;
		}// end function
		
		public function addText_sm(param1, param2, param3, param4)
		{
			this.c = 0;
			while (this.c < this.tempText.length)
			{
				
				this.tempTextNum = this.tempText.charCodeAt(this.c) - 65;
				if (this.tempTextNum > -1)
				{
				}
				if (this.tempTextNum < 26)
				{
					this.rect.x = this.tempTextNum * 16;
				}
				else if (this.tempTextNum == -19)
				{
					this.rect.x = 416;
				}
				else if (this.tempTextNum == -32)
				{
					this.rect.x = 432;
				}
				else if (this.tempTextNum == -7)
				{
					this.rect.x = 448;
				}
				else if (this.tempTextNum == 29)
				{
					this.rect.x = 624;
				}
				else if (this.tempTextNum == -1)
				{
					this.rect.x = 656;
				}
				else if (this.tempTextNum == -23)
				{
					this.rect.x = 640;
				}
				else if (this.tempTextNum == -22)
				{
					this.rect.x = 672;
				}
				else
				{
					if (this.tempTextNum > -18)
					{
					}
					if (this.tempTextNum < -7)
					{
						this.rect.x = (31 + this.tempTextNum + 15) * 16;
					}
				}
				if (param3 == 0)
				{
					this.tempPoint.x = param1 + this.c * 10;
				}
				else if (param3 == 1)
				{
					this.tempPoint.x = param1 - this.tempText.length * 10 + this.c * 10;
				}
				else
				{
					this.tempPoint.x = param1 - this.tempText.length * 10 * 0.5 + this.c * 10;
				}
				this.tempPoint.y = param2;
				this.rect.y = 20 * param4;
				this.rect.width = 16;
				this.rect.height = 20;
				if (this.tempTextNum != -33)
				{
					this.bm.copyPixels(this.alphabet_bm_sm, this.rect, this.tempPoint, null, null, true);
				}
				
				this.c  ++ ;
				
			}
			return;
		}// end function
		
		public function game_removeAllTheThings()
		{
			mc.removeChild(this.bg);
			mc.removeChild(this.mc.intro_text_back);
			mc.removeChild(this.mc.fade);
			mc.removeEventListener(Event.ENTER_FRAME, this.enterFrameFun);
			return;
		}// end function
		
		public function fpsFun()
		{
			if (this.fpsCounter_count < 1)
			{
				this.fpsCounterFps = int(10 / (getTimer() - this.fpsCounterT) * 1000);
				this.fpsCounterT = getTimer();
				this.fpsCounter_count = 9;
				this.avgFPS = (this.fpsCounterFps + this.avgFPS) * 0.5;
			}
			else
			{
				
				this.fpsCounter_count  -- ;
				
			}
			return;
		}// end function
		
		public function enterFrameFun(event:Event)
		{
			this.newTime = getTimer();
			this.frameTime = (this.newTime - this.currentTime) / 1000;
			this.currentTime = this.newTime;
			this.fpsFun();
			this.accumulator = this.accumulator + this.frameTime;
			if (this.accumulator > 0.3)
			{
				this.accumulator = 0.3;
			}
			this.precompute_time = getTimer();
			while (this.accumulator > this.framesPerSecond)
			{
				this.accumulator = this.accumulator - this.framesPerSecond;
				if (this.pauseState == 0)
				{
					this.gameLogic();
					continue;
				}
				if (this.pauseState == 1)
				{
					this.gameLogic_intro();
					continue;
				}
				if (this.pauseState == 2)
				{
					this.timeRemaining  -- ;
					
					if (this.didLastRender == false)
					{
						this.didLastRender = true;
						this.render();
					}
				}
			}
			this.interpAmount = this.accumulator / this.framesPerSecond;
			if (this.pauseState != 0)
			{
			}
			if (this.pauseState == 1)
			{
				this.render();
			}
			if (this.finished_lights == false)
			{
				this.do_lights_fun();
			}
			if (this.kD[7] == true)
			{
				this.kD[7] = false;
				if (this.character_health > 0)
				{
					if (this.mc.intro_text_back.visible == false)
					{
						if (this.pauseState == 0)
						{
							this.pauseState = 3;
							this.mc.pauseScreen.gotoAndStop(2);
							Mouse.show();
						}
						else if (this.mc.pauseScreen.currentFrame != 5)
						{
							this.pauseState = 0;
							this.mc.pauseScreen.gotoAndStop(1);
							Mouse.hide();
						}
					}
				}
			}
			if (this.timeRemaining == 1)
			{
				this.score = this.score + this.scoreTally * this.multiplier;
				this.scoreTally = 0;
				this.multiplier = 1;
			}
			if (this.timeRemaining < 1)
			{
			}
			if (this.character_health > 0)
			{
				if (this.mc.timeUp.currentFrame > 90)
				{
					if (this.mc.intro_text_back.alpha < 0.75)
					{
						this.mc.intro_text_back.alpha = this.mc.intro_text_back.alpha + 0.075;
					}
					if (this.mc.intro_text_back.visible == false)
					{
						Mouse.show();
						this.playMusic_levelComplete();
						this.mc.intro_text_back.visible = true;
						this.mc.intro_text_back.finalScore.text = "Score: " + this.score;
						switch(this.levelToLoad)
						{
							case 0:
							{
								if (this.score > this.bestScore[1])
								{
									this.bestScore[1] = this.score;
								}
								break;
							}
							case 2:
							{
								if (this.score > this.bestScore[0])
								{
									this.bestScore[0] = this.score;
								}
								break;
							}
							case 3:
							{
								if (this.score > this.bestScore[2])
								{
									this.bestScore[2] = this.score;
								}
								break;
							}
							case 4:
							{
								if (this.score > this.bestScore[3])
								{
									this.bestScore[3] = this.score;
								}
								break;
							}
							case 5:
							{
								if (this.score > this.bestScore[4])
								{
									this.bestScore[4] = this.score;
								}
								break;
							}
							default:
							{
								break;
							}
						}
						this.a = 0;
						while (this.a < 9)
						{
							
							if (this.a < 3)
							{
								if (this.objective_score_complete[this.a] == 1)
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(2);
									switch(this.levelToLoad)
									{
										case 0:
										{
											this.objectives_complete_arr[this.a + 18] = 1;
											break;
										}
										case 2:
										{
											this.objectives_complete_arr[this.a + 0] = 1;
											break;
										}
										case 3:
										{
											this.objectives_complete_arr[this.a + 27] = 1;
											break;
										}
										case 4:
										{
											this.objectives_complete_arr[this.a + 36] = 1;
											break;
										}
										case 5:
										{
											this.objectives_complete_arr[this.a + 9] = 1;
											break;
										}
										default:
										{
											break;
										}
									}
								}
								else
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(3);
								}
							}
							else if (this.a == 3)
							{
								if (this.objective_collectables_collected[0] == 1)
								{
								}
								if (this.objective_collectables_collected[1] == 1)
								{
								}
								if (this.objective_collectables_collected[2] == 1)
								{
								}
								if (this.objective_collectables_collected[3] == 1)
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(2);
									switch(this.levelToLoad)
									{
										case 0:
										{
											this.objectives_complete_arr[this.a + 18] = 1;
											break;
										}
										case 2:
										{
											this.objectives_complete_arr[this.a + 0] = 1;
											break;
										}
										case 3:
										{
											this.objectives_complete_arr[this.a + 27] = 1;
											break;
										}
										case 4:
										{
											this.objectives_complete_arr[this.a + 36] = 1;
											break;
										}
										case 5:
										{
											this.objectives_complete_arr[this.a + 9] = 1;
											break;
										}
										default:
										{
											break;
										}
									}
								}
								else
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(3);
								}
							}
							else if (this.a == 4)
							{
								if (this.objective_briefcase_collected == true)
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(2);
									switch(this.levelToLoad)
									{
										case 0:
										{
											this.objectives_complete_arr[this.a + 18] = 1;
											break;
										}
										case 2:
										{
											this.objectives_complete_arr[this.a + 0] = 1;
											break;
										}
										case 3:
										{
											this.objectives_complete_arr[this.a + 27] = 1;
											break;
										}
										case 4:
										{
											this.objectives_complete_arr[this.a + 36] = 1;
											break;
										}
										case 5:
										{
											this.objectives_complete_arr[this.a + 9] = 1;
											break;
										}
										default:
										{
											break;
										}
									}
								}
								else
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(3);
								}
							}
							else if (this.a == 5)
							{
								if (this.scoreTimesEarned[this.objective_specialKillType] >= this.objective_specialKills_needed)
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(2);
									switch(this.levelToLoad)
									{
										case 0:
										{
											this.objectives_complete_arr[this.a + 18] = 1;
											break;
										}
										case 2:
										{
											this.objectives_complete_arr[this.a + 0] = 1;
											break;
										}
										case 3:
										{
											this.objectives_complete_arr[this.a + 27] = 1;
											break;
										}
										case 4:
										{
											this.objectives_complete_arr[this.a + 36] = 1;
											break;
										}
										case 5:
										{
											this.objectives_complete_arr[this.a + 9] = 1;
											break;
										}
										default:
										{
											break;
										}
									}
								}
								else
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(3);
								}
							}
							else if (this.a == 6)
							{
								if (this.scoreTimesEarned[this.objective_whichWeaponProficiency + 12] == 1)
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(2);
									switch(this.levelToLoad)
									{
										case 0:
										{
											this.objectives_complete_arr[this.a + 18] = 1;
											break;
										}
										case 2:
										{
											this.objectives_complete_arr[this.a + 0] = 1;
											break;
										}
										case 3:
										{
											this.objectives_complete_arr[this.a + 27] = 1;
											break;
										}
										case 4:
										{
											this.objectives_complete_arr[this.a + 36] = 1;
											break;
										}
										case 5:
										{
											this.objectives_complete_arr[this.a + 9] = 1;
											break;
										}
										default:
										{
											break;
										}
									}
								}
								else
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(3);
								}
							}
							else if (this.a == 7)
							{
								if (this.levelToLoad == 4)
								{
									if (this.discsDestroyed >= 20)
									{
										this.mc.intro_text_back["o" + this.a].gotoAndStop(2);
										switch(this.levelToLoad)
										{
											case 0:
											{
												this.objectives_complete_arr[this.a + 18] = 1;
												break;
											}
											case 2:
											{
												this.objectives_complete_arr[this.a + 0] = 1;
												break;
											}
											case 3:
											{
												this.objectives_complete_arr[this.a + 27] = 1;
												break;
											}
											case 4:
											{
												this.objectives_complete_arr[this.a + 36] = 1;
												break;
											}
											case 5:
											{
												this.objectives_complete_arr[this.a + 9] = 1;
												break;
											}
											default:
											{
												break;
											}
										}
									}
									else
									{
										this.mc.intro_text_back["o" + this.a].gotoAndStop(3);
									}
								}
								else if (this.discsDestroyed >= 10)
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(2);
									switch(this.levelToLoad)
									{
										case 0:
										{
											this.objectives_complete_arr[this.a + 18] = 1;
											break;
										}
										case 2:
										{
											this.objectives_complete_arr[this.a + 0] = 1;
											break;
										}
										case 3:
										{
											this.objectives_complete_arr[this.a + 27] = 1;
											break;
										}
										case 4:
										{
											this.objectives_complete_arr[this.a + 36] = 1;
											break;
										}
										case 5:
										{
											this.objectives_complete_arr[this.a + 9] = 1;
											break;
										}
										default:
										{
											break;
										}
									}
								}
								else
								{
									this.mc.intro_text_back["o" + this.a].gotoAndStop(3);
								}
							}
							else if (this.a == 8)
							{
								this.mc.intro_text_back["o" + this.a].gotoAndStop(2);
								this.b = 0;
								while (this.b < 8)
								{
									
									if (this.mc.intro_text_back["o" + this.b].currentFrame == 3)
									{
										this.mc.intro_text_back["o" + this.a].gotoAndStop(3);
									}
									
									this.b  ++ ;
									
								}
								if (this.mc.intro_text_back["o" + this.a].currentFrame == 2)
								{
									switch(this.levelToLoad)
									{
										case 0:
										{
											this.objectives_complete_arr[this.a + 18] = 1;
											break;
										}
										case 2:
										{
											this.objectives_complete_arr[this.a + 0] = 1;
											break;
										}
										case 3:
										{
											this.objectives_complete_arr[this.a + 27] = 1;
											break;
										}
										case 4:
										{
											this.objectives_complete_arr[this.a + 36] = 1;
											break;
										}
										case 5:
										{
											this.objectives_complete_arr[this.a + 9] = 1;
											break;
										}
										default:
										{
											break;
										}
									}
								}
							}
							
							this.a  ++ ;
							
						}
						this.tempObjectivesCompleted = 0;
						this.a = 0;
						while (this.a < 9)
						{
							
							if (this.mc.intro_text_back["o" + this.a].currentFrame == 2)
							{
								
								this.tempObjectivesCompleted  ++ ;
								
							}
							
							this.a  ++ ;
							
						}
						this.mc.intro_text_back.objectives_completed.text = "Objectives Completed: " + this.tempObjectivesCompleted + "/9";
						trace("objectives_complete_arr = [" + this.objectives_complete_arr + "];");
						this.saveData();
					}
				}
				this.pauseState = 2;
				if (this.mc.timeUp.currentFrame == 1)
				{
					this.mc.timeUp.play();
				}
				else if (this.mc.timeUp.currentFrame > 90)
				{
					if (this.mc.fade.currentFrame == 1)
					{
						this.mc.fade.gotoAndStop(3);
					}
					if (this.mc.fade.alpha < 0.5)
					{
						this.mc.fade.alpha = this.mc.fade.alpha + 0.01;
					}
					if (this.timeRemaining < -60)
					{
						if (this.mouseDown == true)
						{
							this.game_removeAllTheThings();
							mc.gotoAndStop(15);
						}
					}
					else
					{
						this.mouseDown = false;
					}
				}
			}
			if (this.character_health <= 0)
			{
				if (this.gameVersion == 0)
				{
					if (this.timeRemaining > 0)
					{
						this.timeRemaining = 0;
					}
					if (this.timeRemaining < -2)
					{
						if (this.pauseState != 2)
						{
							this.pauseState = 2;
							this.deathScreenBuffer = new BitmapData(800, 600, true, 83886080);
							this.rect.width = 800;
							this.rect.height = 600;
							this.rect.x = 0;
							this.rect.y = 0;
							this.tempPoint.x = 0;
							this.tempPoint.y = 0;
							this.anim = 27;
							this.fr = 0;
						}
						else
						{
							this.rect.width = 800;
							this.rect.height = 600;
							this.rect.x = 0;
							this.rect.y = 0;
							this.tempPoint.x = 0;
							this.tempPoint.y = 0;
							this.bm.copyPixels(this.deathScreenBuffer, this.rect, this.tempPoint, null, null, true);
							if (this.fr < 82)
							{
								this.frOld = this.fr;
								this.fr = this.fr + 0.5;
							}
							else
							{
								if (this.mc.fade.currentFrame == 1)
								{
									this.mc.fade.gotoAndStop(2);
								}
								if (this.mc.fade.alpha < 0.9)
								{
									this.mc.fade.alpha = this.mc.fade.alpha + 0.01;
								}
								this.mc.fade.youDied.text = "MISSION FAILED: YOU DIED!";
							}
							this.render_a_character(this.character_x - this.cameraX, this.character_y - this.cameraY, this.character_x - this.cameraX, this.character_y - this.cameraY, this.anim, this.fr, this.frOld, this.character_face, this.character_gunRot, this.character_gunRotOld, this.character_headRot, this.character_gunX, this.character_gunY, this.character_gunXOld, this.character_gunYOld, this.character_gunEquipped, this.character_gunFrame, 0, false, this.character_reloadTime);
						}
					}
					else
					{
						
						this.timeRemaining  -- ;
						
					}
					if (this.timeRemaining < -60)
					{
						Mouse.show();
						if (this.mouseDown == true)
						{
							this.game_removeAllTheThings();
							mc.gotoAndStop(16);
						}
					}
					else
					{
						this.mouseDown = false;
					}
				}
				else if (this.gameVersion == 1)
				{
					if (this.timeRemaining > 0)
					{
						this.timeRemaining = 0;
					}
					if (this.timeRemaining < -2)
					{
						if (this.pauseState != 2)
						{
							this.score = this.score + this.scoreTally * this.multiplier;
							this.scoreTally = 0;
							this.multiplier = 1;
							switch(this.levelToLoad)
							{
								case 7:
								{
									if (this.zombieMode == true)
									{
										if (this.score > this.bestScore_survival[0][1])
										{
											this.bestScore_survival[0][1] = this.score;
										}
									}
									else if (this.stinkyBeanMode == true)
									{
										if (this.score > this.bestScore_survival[0][2])
										{
											this.bestScore_survival[0][2] = this.score;
										}
									}
									else if (this.score > this.bestScore_survival[0][0])
									{
										this.bestScore_survival[0][0] = this.score;
									}
									break;
								}
								case 6:
								{
									if (this.zombieMode == true)
									{
										if (this.score > this.bestScore_survival[1][1])
										{
											this.bestScore_survival[1][1] = this.score;
										}
									}
									else if (this.stinkyBeanMode == true)
									{
										if (this.score > this.bestScore_survival[1][2])
										{
											this.bestScore_survival[1][2] = this.score;
										}
									}
									else if (this.score > this.bestScore_survival[1][0])
									{
										this.bestScore_survival[1][0] = this.score;
									}
									break;
								}
								case 13:
								{
									if (this.zombieMode == true)
									{
										if (this.score > this.bestScore_survival[2][1])
										{
											this.bestScore_survival[2][1] = this.score;
										}
									}
									else if (this.stinkyBeanMode == true)
									{
										if (this.score > this.bestScore_survival[2][2])
										{
											this.bestScore_survival[2][2] = this.score;
										}
									}
									else if (this.score > this.bestScore_survival[2][0])
									{
										this.bestScore_survival[2][0] = this.score;
									}
									break;
								}
								case 8:
								{
									if (this.zombieMode == true)
									{
										if (this.score > this.bestScore_survival[3][1])
										{
											this.bestScore_survival[3][1] = this.score;
										}
									}
									else if (this.stinkyBeanMode == true)
									{
										if (this.score > this.bestScore_survival[3][2])
										{
											this.bestScore_survival[3][2] = this.score;
										}
									}
									else if (this.score > this.bestScore_survival[3][0])
									{
										this.bestScore_survival[3][0] = this.score;
									}
									break;
								}
								case 9:
								{
									if (this.zombieMode == true)
									{
										if (this.score > this.bestScore_survival[4][1])
										{
											this.bestScore_survival[4][1] = this.score;
										}
									}
									else if (this.stinkyBeanMode == true)
									{
										if (this.score > this.bestScore_survival[4][2])
										{
											this.bestScore_survival[4][2] = this.score;
										}
									}
									else if (this.score > this.bestScore_survival[4][0])
									{
										this.bestScore_survival[4][0] = this.score;
									}
									break;
								}
								case 10:
								{
									if (this.zombieMode == true)
									{
										if (this.score > this.bestScore_survival[5][1])
										{
											this.bestScore_survival[5][1] = this.score;
										}
									}
									else if (this.stinkyBeanMode == true)
									{
										if (this.score > this.bestScore_survival[5][2])
										{
											this.bestScore_survival[5][2] = this.score;
										}
									}
									else if (this.score > this.bestScore_survival[5][0])
									{
										this.bestScore_survival[5][0] = this.score;
									}
									break;
								}
								case 11:
								{
									if (this.zombieMode == true)
									{
										if (this.score > this.bestScore_survival[6][1])
										{
											this.bestScore_survival[6][1] = this.score;
										}
									}
									else if (this.stinkyBeanMode == true)
									{
										if (this.score > this.bestScore_survival[6][2])
										{
											this.bestScore_survival[6][2] = this.score;
										}
									}
									else if (this.score > this.bestScore_survival[6][0])
									{
										this.bestScore_survival[6][0] = this.score;
									}
									break;
								}
								case 12:
								{
									if (this.zombieMode == true)
									{
										if (this.score > this.bestScore_survival[7][1])
										{
											this.bestScore_survival[7][1] = this.score;
										}
									}
									else if (this.stinkyBeanMode == true)
									{
										if (this.score > this.bestScore_survival[7][2])
										{
											this.bestScore_survival[7][2] = this.score;
										}
									}
									else if (this.score > this.bestScore_survival[7][0])
									{
										this.bestScore_survival[7][0] = this.score;
									}
									break;
								}
								default:
								{
									break;
								}
							}
							this.saveData();
							this.pauseState = 2;
							this.deathScreenBuffer = new BitmapData(800, 600, true, 83886080);
							this.rect.width = 800;
							this.rect.height = 600;
							this.rect.x = 0;
							this.rect.y = 0;
							this.tempPoint.x = 0;
							this.tempPoint.y = 0;
							this.anim = 27;
							this.fr = 0;
						}
						else
						{
							this.rect.width = 800;
							this.rect.height = 600;
							this.rect.x = 0;
							this.rect.y = 0;
							this.tempPoint.x = 0;
							this.tempPoint.y = 0;
							this.bm.copyPixels(this.deathScreenBuffer, this.rect, this.tempPoint, null, null, true);
							if (this.fr < 82)
							{
								this.frOld = this.fr;
								this.fr = this.fr + 0.5;
							}
							else
							{
								if (this.mc.fade.currentFrame == 1)
								{
									this.mc.fade.gotoAndStop(2);
								}
								if (this.mc.fade.alpha < 0.9)
								{
									this.mc.fade.alpha = this.mc.fade.alpha + 0.01;
								}
								this.mc.fade.youDied.text = "MISSION OVER";
							}
							this.render_a_character(this.character_x - this.cameraX, this.character_y - this.cameraY, this.character_x - this.cameraX, this.character_y - this.cameraY, this.anim, this.fr, this.frOld, this.character_face, this.character_gunRot, this.character_gunRotOld, this.character_headRot, this.character_gunX, this.character_gunY, this.character_gunXOld, this.character_gunYOld, this.character_gunEquipped, this.character_gunFrame, 0, false, this.character_reloadTime);
						}
					}
					else
					{
						
						this.timeRemaining  -- ;
						
					}
					if (this.timeRemaining < -60)
					{
						Mouse.show();
						if (this.mouseDown == true)
						{
							this.game_removeAllTheThings();
							mc.gotoAndStop(15);
						}
					}
					else
					{
						this.mouseDown = false;
					}
				}
			}
			return;
		}// end function
		
		public function results_removeAllTheThings()
		{
			this.saveData();
			this.mc.returnToTitle.removeEventListener(MouseEvent.CLICK, this.fun_returnToTitle);
			return;
		}// end function
		
		public function fun_returnToTitle(event:MouseEvent)
		{
			this.results_removeAllTheThings();
			mc.gotoAndStop(5);
			return;
		}// end function
		
		public function fun_tryAgain(event:MouseEvent)
		{
			this.results_removeAllTheThings();
			mc.gotoAndStop(17);
			return;
		}// end function
		
		public function fun_moarResults(event:MouseEvent)
		{
			this.check_domain_for_cmg(1);
			return;
		}// end function
		
		public function onScoreResponse(event:*) : void
		{
			
			return;
		}// end function
		
		public function onMouseUpHandler_SubmitScore(event:MouseEvent) : void
		{
			
			return;
		}// end function
		
		public function viewScores(event:MouseEvent) : void
		{
			
			return;
		}// end function
		
		public function dieScreen_removeAllTheThings()
		{
			this.mc.returnToTitle.removeEventListener(MouseEvent.CLICK, this.dieScreen_returnToTitle);
			this.mc.btn_tryAgain.removeEventListener(MouseEvent.CLICK, this.dieScreen_tryAgain);
			this.mc.btn_playHax.removeEventListener(MouseEvent.CLICK, this.playHaxFun);
			return;
		}// end function
		
		public function dieScreen_returnToTitle(event:MouseEvent)
		{
			this.dieScreen_removeAllTheThings();
			mc.gotoAndStop(5);
			return;
		}// end function
		
		public function dieScreen_tryAgain(event:MouseEvent)
		{
			this.dieScreen_removeAllTheThings();
			mc.gotoAndStop(17);
			return;
		}// end function
		
		public function playHaxFun(event:MouseEvent)
		{
			this.check_domain_for_cmg(2);
			return;
		}// end function
		
		private function frame1():void
		{
			mc.gotoAndStop(1);
			this.sfx_0 = new gunshot0();
			this.sfx_1 = new gunshot1();
			this.sfx_2 = new gunshot2();
			this.sfx_3 = new gunshot3();
			this.sfx_4 = new gunshot4();
			this.sfx_5 = new gunshot5();
			this.sfx_6 = new gunshot6();
			this.sfx_7 = new gunshot7();
			this.sfx_8 = new gunshot8();
			this.sfx_9 = new gunshot9();
			this.sfx_10 = new gunshot10();
			this.sfx_11 = new gunshot11();
			this.sfx_12 = new artifact();
			this.sfx_13 = new rocket();
			this.sfx_14 = new gunshot12();
			this.sfx_15 = new airsoft();
			this.sfx_20 = new dry_fire();
			this.sfx_21 = new footstep1();
			this.sfx_22 = new footstep2();
			this.sfx_23 = new footstep3();
			this.sfx_24 = new footstep4();
			this.sfx_25 = new cd_break();
			this.sfx_26 = new pistol_shell0();
			this.sfx_27 = new pistol_shell1();
			this.sfx_28 = new pistol_shell2();
			this.sfx_29 = new rifle_shell0();
			this.sfx_30 = new rifle_shell1();
			this.sfx_31 = new rifle_shell2();
			this.sfx_32 = new shotgun_shell1();
			this.sfx_33 = new shotgun_shell2();
			this.sfx_34 = new shotgun_shell3();
			this.sfx_35 = new riccochet1();
			this.sfx_36 = new riccochet2();
			this.sfx_37 = new riccochet3();
			this.sfx_38 = new gore1();
			this.sfx_39 = new gore2();
			this.sfx_40 = new gore3();
			this.sfx_41 = new gore4();
			this.sfx_42 = new headshot1();
			this.sfx_43 = new headshot2();
			this.sfx_44 = new headshot3();
			this.sfx_45 = new bulletImpact1();
			this.sfx_46 = new bulletImpact2();
			this.sfx_47 = new bulletImpact3();
			this.sfx_48 = new bulletImpact4();
			this.sfx_49 = new mag_drop();
			this.sfx_50 = new reloaded();
			this.sfx_51 = new CMG_swoosh();
			this.sfx_52 = new CMG_thump();
			this.sfx_53 = new CMG_sparkle();
			this.sfx_54 = new dis_logoSound();
			this.sfx_55 = new gun_cock();
			this.sfx_56 = new collect_health();
			this.sfx_57 = new sfx_countdown();
			this.sfx_58 = new cant_submit();
			this.sfx_59 = new death_1();
			this.sfx_60 = new death_2();
			this.sfx_61 = new death_3();
			this.sfx_62 = new death_4();
			this.sfx_63 = new death_5();
			this.sfx_64 = new death_6();
			this.sfx_65 = new death_7();
			this.sfx_66 = new death_8();
			this.sfx_67 = new death_9();
			this.sfx_68 = new death_10();
			this.sfx_69 = new death_11();
			this.sfx_70 = new death_12();
			this.sfx_71 = new death_13();
			this.sfx_72 = new death_14();
			this.sfx_73 = new death_15();
			this.sfx_74 = new death_16();
			this.sfx_75 = new death_17();
			this.sfx_76 = new death_18();
			this.sfx_77 = new acid1();
			this.sfx_78 = new acid2();
			this.sfx_79 = new acid3();
			this.sfx_80 = new acid4();
			this.sfx_81 = new door();
			this.sfx_82 = new artifact_drone1();
			this.sfx_83 = new artifact_drone2();
			this.sfx_84 = new artifact_drone3();
			this.sfx_85 = new sfx_goalComplete();
			this.sfx_86 = new sfx_goalPart();
			this.sfx_87 = new sfx_explode();
			this.sfx_88 = new sfx_collect();
			this.sfx_89 = new sfx_time();
			this.sfx_90 = new sfx_beanDie_01();
			this.sfx_91 = new sfx_beanDie_02();
			this.sfx_92 = new sfx_beanDie_03();
			this.sfx_93 = new zombie_death_1();
			this.sfx_94 = new zombie_death_2();
			this.sfx_95 = new zombie_death_3();
			this.sfx_96 = new zombie_death_4();
			this.sfx_97 = new zombie_death_5();
			this.sfx_98 = new zombie_death_6();
			this.sfx_99 = new zombie_death_7();
			this.sfx_100 = new zombie_death_9();
			this.sfx_101 = new zombie_death_10();
			this.sfx_102 = new zombie_death_11();
			this.sfx_103 = new zombie_death_12();
			this.sfx_104 = new zombie_death_13();
			this.sfx_105 = new zombie_death_14();
			this.sfx_106 = new zombie_death_15();
			this.sfx_107 = new zombie_death_16();
			this.sfx_108 = new zombie_death_17();
			this.sfx_109 = new zombie_death_19();
			this.sfx_110 = new bean_die_1();
			this.sfx_111 = new bean_die_2();
			this.sfx_112 = new bean_die_3();
			this.sfx_113 = new bean_die_4();
			this.sfx_114 = new bean_die_5();
			this.sfxVolume = 0.5;
			this.sfxOn = true;
			this.tempVol = 0;
			this.sfxChannel_0 = new SoundChannel();
			this.sfxTransform_0 = this.sfxChannel_0.soundTransform;
			this.sfxChannel_0_playing = false;
			this.sfxChannel_1 = new SoundChannel();
			this.sfxTransform_1 = this.sfxChannel_1.soundTransform;
			this.sfxChannel_1_playing = false;
			this.sfxChannel_2 = new SoundChannel();
			this.sfxTransform_2 = this.sfxChannel_2.soundTransform;
			this.sfxChannel_2_playing = false;
			this.sfxChannel_3 = new SoundChannel();
			this.sfxTransform_3 = this.sfxChannel_3.soundTransform;
			this.sfxChannel_3_playing = false;
			this.sfxChannel_4 = new SoundChannel();
			this.sfxTransform_4 = this.sfxChannel_4.soundTransform;
			this.sfxChannel_4_playing = false;
			this.sfxChannel_5 = new SoundChannel();
			this.sfxTransform_5 = this.sfxChannel_5.soundTransform;
			this.sfxChannel_5_playing = false;
			this.sfxChannel_6 = new SoundChannel();
			this.sfxTransform_6 = this.sfxChannel_6.soundTransform;
			this.sfxChannel_6_playing = false;
			this.sfxChannel_7 = new SoundChannel();
			this.sfxTransform_7 = this.sfxChannel_7.soundTransform;
			this.sfxChannel_7_playing = false;
			this.sfxChannel_8 = new SoundChannel();
			this.sfxTransform_8 = this.sfxChannel_8.soundTransform;
			this.sfxChannel_8_playing = false;
			this.sfxChannel_9 = new SoundChannel();
			this.sfxTransform_9 = this.sfxChannel_9.soundTransform;
			this.sfxChannel_9_playing = false;
			this.sfxChannel_10 = new SoundChannel();
			this.sfxTransform_10 = this.sfxChannel_10.soundTransform;
			this.sfxChannel_10_playing = false;
			this.sfx_a = 0;
			this.sfx_b = 0;
			this.gameVersion = 1;
			this.isOnCMG = true;
			mc.stage.align = StageAlign.TOP_LEFT;
			mc.stage.scaleMode = StageScaleMode.NO_SCALE;
			this.my_menu = new ContextMenu();
			this.my_menu.hideBuiltInItems();
			mc.contextMenu = this.my_menu;
			mc.stop();
			this.musicOn = true;
			this.isHackedVersion = false;
			if (this.isHackedVersion == true)
			{
				this.mc.screenMask.gotoAndStop(2);
			}
			else
			{
				this.mc.screenMask.gotoAndStop(1);
			}
			this.addedCheatMenu = false;
			this.mc.btn_onlyOn.visible = false;
			this.gameData = SharedObject.getLocal("userData");
			this.dataExists = this.gameData.data.dataExists;
			mc.stage.addEventListener(KeyboardEvent.KEY_DOWN, this.cmg_keyPressed);
			if (this.dataExists == true)
			{
				this.soundToggle = this.gameData.data.soundToggle;
				this.gameData = null;
			}
			else
			{
				this.soundToggle = [0, 0, 0.5, 0.5];
			}
			this.musicVolume = this.soundToggle[2];
			this.sfxVolume = this.soundToggle[3];
			if (this.soundToggle[1] == 0)
			{
				this.mc.preloader_sfxToggle.gotoAndStop(1);
				this.sfxOn = true;
			}
			else
			{
				this.mc.preloader_sfxToggle.gotoAndStop(2);
				this.sfxOn = false;
			}
			if (this.soundToggle[0] == 0)
			{
				this.mc.preloader_musicToggle.gotoAndStop(1);
				this.musicOn = true;
			}
			else
			{
				this.mc.preloader_musicToggle.gotoAndStop(2);
				this.musicOn = false;
			}
			mc.stage.frameRate = 30;
			this.mc.btn_play.visible = false;
			mc.addEventListener(Event.ENTER_FRAME, this.cmgLogo);
			this.preLoaderPercent = 0;
			this.preloadComplete = false;
			this.mc.loaderInfo.addEventListener(Event.COMPLETE, this.loadComplete);
			this.mc.loaderInfo.addEventListener(ProgressEvent.PROGRESS, this.loadProgress);
			this.mc.btn_play.addEventListener(MouseEvent.CLICK, this.clickCMG);
			//this.cmg_logo.btn.addEventListener(MouseEvent.CLICK, this.cmgLinkFun);
			this.mc.preloader_sfxToggle.addEventListener(MouseEvent.CLICK, this.preloader_sfxFun);
			this.mc.preloader_musicToggle.addEventListener(MouseEvent.CLICK, this.preloader_musicFun);
			this.mc.btn_onlyOn.addEventListener(MouseEvent.CLICK, this.onlyOnFun);
			return;
		}// end function
		
		function frame2()
		{
			this.music0 = new music_title();
			this.music1 = new music_cryo();
			this.music2 = new music_hydroponic();
			this.music3 = new music_basement();
			this.music4 = new music_serviceTunnel();
			this.music5 = new music_blankCanvas();
			this.music6 = new music_levelComplete();
			this.music7 = new music_objective();
			this.musicChannel = new SoundChannel();
			this.musicTransform = this.musicChannel.soundTransform;
			this.musicVolume = this.soundToggle[2];
			this.musicFade = 1;
			this.musicTrackPlaying = -1;
			mc.addEventListener(Event.ENTER_FRAME, this.musicEnterframe);
			this.mc.dp_logo.alpha = 0;
			this.dpTime = 0;
			this.dpBlurStartX = this.mc.dp_logo.blur.x;
			this.dpBlurStartY = this.mc.dp_logo.blur.y;
			this.dpBlurStartX2 = this.mc.dp_logo.logo2.x;
			this.dpBlurStartY2 = this.mc.dp_logo.logo2.y;
			this.playSoundEffect(54, 1, 0);
			mc.addEventListener(Event.ENTER_FRAME, this.dpLogo);
			this.mc.dp_logo.btn.addEventListener(MouseEvent.CLICK, this.goTo_DP);
			return;
		}// end function
		
		function frame4()
		{
			if (this.isHackedVersion == true)
			{
				if (this.addedCheatMenu == false)
				{
					this.cheatMenu = new hud_back_hax();
					mc.addChild(this.cheatMenu);
					this.cheatMenu.y = 600;
					this.cheatMenu.cacheAsBitmap = true;
					this.addedCheatMenu = true;
				}
			}
			if (this.musicTrackPlaying != 0)
			{
				this.playMusic_title();
			}
			mc.stage.frameRate = 30;
			mc.stop();
			mc.addEventListener(MouseEvent.CLICK, this.goToTitleMenu);
			this.mc.btn_dp_title.addEventListener(MouseEvent.CLICK, this.dpFun);
			this.character_appearance_intro = new Array();
			this.character_weapons_intro = new Array();
			this.gameData_intro = SharedObject.getLocal("userData");
			this.dataExists_intro = this.gameData_intro.data.dataExists;
			if (this.dataExists_intro != true)
			{
				this.character_appearance_intro = new Array(9, 8, 2, 1, 1, 3);
				this.character_weapons_intro = new Array(0, 0);
				this.gameData_intro = null;
			}
			else
			{
				this.character_appearance_intro = this.gameData_intro.data.character_appearance;
				this.character_weapons_intro = this.gameData_intro.data.character_weapons;
				this.gameData_intro = null;
			}
			this.charLogo_changeAppearance_intro();
			return;
		}// end function
		
		function frame5()
		{
			mc.stop();
			mc.stage.align = StageAlign.TOP_LEFT;
			mc.stage.scaleMode = StageScaleMode.NO_SCALE;
			mc.stage.frameRate = 30;
			this.mc.char_title2.visible = false;
			this.mc.char_title3.visible = false;
			this.mc.toolTip.visible = false;
			this.wepNeeded = [9, 5, 6, 21, 2];
			this.noTooltip = false;
			this.k = [87, 83, 65, 68, 69, 70, 82, 80, 77, 192];//[w,s,a,d,e,f,r,p,m,Delete];
			this.kD = [false, false, false, false, false, false, false, false, false, false];
			mc.stage.addEventListener(KeyboardEvent.KEY_DOWN, this.title_keyPressed);
			mc.stage.addEventListener(KeyboardEvent.KEY_UP, this.title_keyUnpressed);
			this.mc.title_moar.addEventListener(MouseEvent.CLICK, this.title_moar_fun);
			this.mc.credits.gotoAndStop(2);
			this.mc.btn_credits.addEventListener(MouseEvent.CLICK, this.title_credits);
			this.stinkyBeanMode = false;
			this.zombieMode = false;
			this.levelToLoad = 2;
			if (this.gameVersion == 0)
			{
				this.mc.level_select_mc.gotoAndStop(1);
				this.mc.level_select_mc.btn_missionSelect1.addEventListener(MouseEvent.CLICK, this.playGame1);
				this.mc.level_select_mc.btn_missionSelect2.addEventListener(MouseEvent.CLICK, this.playGame2);
				this.mc.level_select_mc.btn_missionSelect3.addEventListener(MouseEvent.CLICK, this.playGame3);
				this.mc.level_select_mc.btn_missionSelect4.addEventListener(MouseEvent.CLICK, this.playGame4);
				this.mc.level_select_mc.btn_missionSelect5.addEventListener(MouseEvent.CLICK, this.playGame5);
				this.mc.btn_ttac_hax.visible = false;
			}
			else if (this.gameVersion == 1)
			{
				this.mc.level_select_mc.gotoAndStop(2);
				if (this.isHackedVersion == true)
				{
					this.mc.btn_ttac_hax.visible = false;
					this.mc.ttac_hax.visible = false;
				}
				else
				{
					this.mc.btn_ttac_hax.addEventListener(MouseEvent.CLICK, this.play_ttac_hax);
				}
			}
			this.mc.btn_cc.addEventListener(MouseEvent.CLICK, this.cc_fun);
			this.character_appearance = [];
			this.character_colors = [];
			this.character_color_values = [];
			this.character_weapons = new Array(0, 1);
			this.objectives_complete_arr = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.soundToggle = [0, 0, 0.5, 0.5];
			this.mapToggled = false;
			this.weaponsUnlocked = [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			this.weaponsNew = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
			this.bestScore = [0, 0, 0, 0, 0];
			this.bestScore_survival = [0, 0, 0, 0, 0, 0, 0, 0];
			this.levelsLocked = [0, 0, 0, 0, 0];
			this.character_appearance = new Array(9, 8, 2, 1, 1, 3);
			this.character_colors = new Array(0, 1, 0, 0, 0, 0, 0, 0, 0, 0);
			this.character_color_values = new Array(3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254);
			this.character_weapons = [0, 1];
			this.playerName = "ENTER NAME HERE";
			this.title_gun_names = ["SPECTRE 9MM", "M1370 PG", "M1370", "IL DUCE", "PDW-9", "XR-556", "UDP 10MM", "AP-1", "MODEL 6-357", "MODEL 5-454", "SS-500", "ACID LOBBER", "ARTIFACT 23", "GAUSS RIFLE", "GAUSS PISTOL", "M35 LAUNCHER", "M3-556 MINIGUN", "KRINKOV", "KRINKOV MOD-0", "MURDER SNUB", "HYPER DEATH BLASTER"];
			this.gameData = SharedObject.getLocal("userData");
			this.dataExists = this.gameData.data.dataExists;
			if (this.dataExists != true)
			{
				this.gameData.data.dataExists = true;
				this.c = int(Math.random() * 21);
				trace(this.c);
				switch(this.c)
				{
					case 0:
					{
						this.character_appearance = [9, 6, 1, 2, 1, 1];
						this.character_colors = [5, 0, 0, 0, 0, 5, 0, 0, 0, 5];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 1:
					{
						this.character_appearance = [39, 3, 10, 2, 2, 2];
						this.character_colors = [0, 8, 0, 0, 0, 12, 0, 0, 15, 16];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 5059584, 16766254, 16766254, 16766254, 6767104, 16766254, 16766254, 5910784, 4605510, 16766254, 16766254];
						break;
					}
					case 2:
					{
						this.character_appearance = [16, 9, 2, 4, 4, 11];
						this.character_colors = [7, 0, 9, 0, 0, 12, 13, 0, 0, 16];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 5474387, 16766254, 6404373, 16766254, 16766254, 5087565, 2711081, 16766254, 16766254, 3833656, 16766254, 16766254];
						break;
					}
					case 3:
					{
						this.character_appearance = [5, 7, 3, 3, 2, 1];
						this.character_colors = [3, 0, 0, 0, 0, 5, 0, 0, 0, 1];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 4:
					{
						this.character_appearance = [34, 5, 17, 1, 4, 1];
						this.character_colors = [4, 0, 0, 0, 0, 4, 0, 0, 0, 4];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 5:
					{
						this.character_appearance = [32, 8, 13, 1, 9, 1];
						this.character_colors = [7, 0, 0, 0, 11, 12, 0, 0, 15, 0];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16731262, 16766254, 16766254, 16766254, 16746649, 16731262, 16766254, 16766254, 16731262, 16766254, 16766254, 16766254];
						break;
					}
					case 6:
					{
						this.character_appearance = [44, 11, 22, 5, 7, 1];
						this.character_colors = [2, 8, 0, 0, 11, 2, 13, 0, 15, 1];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 5460819, 16766254, 16766254, 5460819, 16766254, 5460819, 16766254, 5460819, 16766254, 16766254, 16766254];
						break;
					}
					case 7:
					{
						this.character_appearance = [50, 1, 19, 5, 5, 1];
						this.character_colors = [0, 1, 0, 0, 0, 1, 0, 0, 0, 1];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 8:
					{
						this.character_appearance = [51, 1, 20, 5, 2, 1];
						this.character_colors = [1, 3, 0, 0, 1, 1, 1, 0, 1, 0];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 9:
					{
						this.character_appearance = [38, 6, 11, 1, 4, 1];
						this.character_colors = [0, 2, 0, 0, 2, 0, 0, 0, 0, 2];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 10:
					{
						this.character_appearance = [30, 6, 16, 2, 1, 1];
						this.character_colors = [3, 2, 3, 0, 3, 0, 3, 0, 3, 0];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 11:
					{
						this.character_appearance = [21, 2, 6, 5, 3, 1];
						this.character_colors = [0, 2, 3, 0, 0, 1, 0, 0, 0, 1];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 12:
					{
						this.character_appearance = [46, 7, 23, 4, 10, 14];
						this.character_colors = [0, 3, 3, 0, 0, 3, 0, 0, 0, 3];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 13:
					{
						this.character_appearance = [48, 1, 19, 5, 5, 1];
						this.character_colors = [2, 8, 3, 0, 11, 0, 13, 0, 15, 0];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 6974130, 16766254, 16766254, 6974130, 16766254, 6974130, 16766254, 6974130, 16766254, 16766254, 16766254];
						break;
					}
					case 14:
					{
						this.character_appearance = [52, 1, 7, 2, 8, 1];
						this.character_colors = [4, 0, 0, 0, 4, 0, 4, 0, 0, 4];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 15:
					{
						this.character_appearance = [26, 14, 5, 4, 10, 1];
						this.character_colors = [0, 0, 0, 2, 11, 0, 0, 0, 0, 1];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 6118749, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 16:
					{
						this.character_appearance = [40, 6, 21, 4, 3, 1];
						this.character_colors = [0, 8, 0, 0, 0, 12, 0, 0, 0, 16];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 7500402, 16766254, 16766254, 16766254, 7500402, 16766254, 16766254, 16766254, 7500402, 16766254, 16766254];
						break;
					}
					case 17:
					{
						this.character_appearance = [13, 5, 4, 3, 1, 1];
						this.character_colors = [3, 0, 0, 0, 0, 3, 0, 0, 0, 3];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 18:
					{
						this.character_appearance = [22, 2, 12, 1, 8, 1];
						this.character_colors = [0, 0, 0, 0, 0, 2, 0, 0, 0, 2];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 19:
					{
						this.character_appearance = [8, 2, 8, 1, 2, 1];
						this.character_colors = [0, 3, 0, 0, 0, 3, 0, 0, 0, 3];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					case 20:
					{
						this.character_appearance = [17, 10, 11, 2, 6, 1];
						this.character_colors = [6, 3, 0, 0, 0, 6, 6, 0, 0, 6];
						this.character_color_values = [3355443, 10066329, 16777215, 10027008, 8206257, 3702459, 4239974, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254, 16766254];
						break;
					}
					default:
					{
						break;
					}
				}
				this.character_weapons = [0, 1];
				this.objectives_complete_arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
				this.soundToggle = [0, 0, 0.5, 0.5];
				this.weaponsUnlocked = [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
				this.weaponsNew = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
				this.bestScore = [0, 0, 0, 0, 0];
				this.bestScore_survival = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]];
				this.gameData.data.character_appearance = this.character_appearance;
				this.gameData.data.character_colors = this.character_colors;
				this.gameData.data.character_color_values = this.character_color_values;
				this.gameData.data.character_weapons = this.character_weapons;
				this.gameData.data.character_id = "ENTER NAME HERE";
				this.gameData.data.objectives_complete = this.objectives_complete_arr;
				this.gameData.data.soundToggle = this.soundToggle;
				this.gameData.data.mapToggled = this.mapToggled;
				this.gameData.data.weaponsUnlocked = this.weaponsUnlocked;
				this.gameData.data.weaponsNew = this.weaponsNew;
				this.gameData.data.bestScore = this.bestScore;
				this.gameData.data.bestScore_survival = this.bestScore_survival;
				this.gameData.flush();
				this.gameData = null;
			}
			else
			{
				this.character_appearance = this.gameData.data.character_appearance;
				this.character_colors = this.gameData.data.character_colors;
				this.character_color_values = this.gameData.data.character_color_values;
				this.character_weapons = this.gameData.data.character_weapons;
				this.playerName = this.gameData.data.character_id;
				this.objectives_complete_arr = this.gameData.data.objectives_complete;
				this.soundToggle = this.gameData.data.soundToggle;
				this.mapToggled = this.gameData.data.mapToggled;
				this.weaponsUnlocked = this.gameData.data.weaponsUnlocked;
				this.weaponsNew = this.gameData.data.weaponsNew;
				this.bestScore = this.gameData.data.bestScore;
				this.bestScore_survival = this.gameData.data.bestScore_survival;
				this.gameData = null;
			}
			this.weaponsUnlocked = [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
			if (this.gameVersion == 1)
			{
				this.weaponsUnlocked = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
			}
			if (this.objectives_complete_arr[3] == 1)
			{
				trace("Cryogenics: Gun Parts Collected");
				this.weaponsUnlocked[17] = 1;
			}
			if (this.objectives_complete_arr[6] == 1)
			{
				trace("Cryogenics: Weapon Proficiency w/ 6-357");
				this.weaponsUnlocked[9] = 1;
			}
			if (this.objectives_complete_arr[8] == 1)
			{
				trace("Cryogenics: 9/9 Objectives");
				this.weaponsUnlocked[18] = 1;
			}
			if (this.objectives_complete_arr[12] == 1)
			{
				trace("Hydroponic: Gun Parts Collected");
				this.weaponsUnlocked[5] = 1;
			}
			if (this.objectives_complete_arr[15] == 1)
			{
				trace("Hydroponic: Weapon Proficiency w/ M1370 PG");
				this.weaponsUnlocked[2] = 1;
			}
			if (this.objectives_complete_arr[17] == 1)
			{
				trace("Hydroponic: 9/9 Objectives");
				this.weaponsUnlocked[3] = 1;
			}
			if (this.objectives_complete_arr[21] == 1)
			{
				trace("Basement: Gun Parts Collected");
				this.weaponsUnlocked[11] = 1;
			}
			if (this.objectives_complete_arr[24] == 1)
			{
				trace("Basement: Weapon Proficiency w/ PDW-9");
				this.weaponsUnlocked[7] = 1;
			}
			if (this.objectives_complete_arr[26] == 1)
			{
				trace("Basement: 9/9 Objectives");
				this.weaponsUnlocked[10] = 1;
			}
			if (this.objectives_complete_arr[30] == 1)
			{
				trace("Service Tunnel: Gun Parts Collected");
				this.weaponsUnlocked[15] = 1;
			}
			if (this.objectives_complete_arr[33] == 1)
			{
				trace("Service Tunnel: Weapon Proficiency w/ XR-556");
				this.weaponsUnlocked[16] = 1;
			}
			if (this.objectives_complete_arr[35] == 1)
			{
				trace("Service Tunnel: 9/9 Objectives");
				this.weaponsUnlocked[13] = 1;
			}
			if (this.objectives_complete_arr[8] == 1)
			{
			}
			if (this.objectives_complete_arr[17] == 1)
			{
			}
			if (this.objectives_complete_arr[26] == 1)
			{
			}
			if (this.objectives_complete_arr[35] == 1)
			{
				trace("9/9 on all levels except canvas");
				this.weaponsUnlocked[19] = 1;
				this.weaponsUnlocked[20] = 1;
			}
			if (this.objectives_complete_arr[39] == 1)
			{
				trace("Blank Canvas: Gun Parts Collected");
				this.weaponsUnlocked[6] = 1;
			}
			if (this.objectives_complete_arr[42] == 1)
			{
				trace("Blank Canvas: Weapon Proficiency w/ Hyper Death Blaster");
				this.weaponsUnlocked[14] = 1;
			}
			if (this.objectives_complete_arr[44] == 1)
			{
				trace("Blank Canvas: 9/9 Objectives");
				this.weaponsUnlocked[12] = 1;
			}
			this.mc.title_sfxToggle.addEventListener(MouseEvent.CLICK, this.title_sfxFun);
			this.mc.title_musicToggle.addEventListener(MouseEvent.CLICK, this.title_musicFun);
			if (this.soundToggle[1] == 0)
			{
				this.mc.title_sfxToggle.gotoAndStop(1);
			}
			else
			{
				this.mc.title_sfxToggle.gotoAndStop(2);
			}
			if (this.soundToggle[0] == 0)
			{
				this.mc.title_musicToggle.gotoAndStop(1);
			}
			else
			{
				this.mc.title_musicToggle.gotoAndStop(2);
			}
			this.mc.btn_moarGaems.addEventListener(MouseEvent.CLICK, this.moarGaemsFun);
			this.mc.btn_gameGuide.addEventListener(MouseEvent.CLICK, this.gameGuideFun);
			if (this.gameVersion == 0)
			{
				trace("objectives_complete_arr = [" + this.objectives_complete_arr + "];");
				this.mc.character_title_container.id.text = this.playerName;
				this.tempObjectivesComplete = 0;
				this.tempTotalObjectivesComplete = 0;
				this.a = 0;
				while (this.a < 9)
				{
					
					if (this.objectives_complete_arr[this.a] == 1)
					{
						
						this.tempObjectivesComplete  ++ ;
						
					}
					
					this.a  ++ ;
					
				}
				this.mc.level_select_mc.levelText0.text = "Cryogenics Lab - " + this.tempObjectivesComplete + "/9";
				this.levelsLocked[0] = 1;
				this.a = 0;
				while (this.a < 45)
				{
					
					if (this.objectives_complete_arr[this.a] == 1)
					{
						
						this.tempTotalObjectivesComplete  ++ ;
						
					}
					
					this.a  ++ ;
					
				}
				if (this.tempTotalObjectivesComplete < 4)
				{
					this.mc.level_select_mc.levelText1.text = "Locked - Complete " + (4 - this.tempTotalObjectivesComplete) + "";
				}
				else
				{
					this.tempObjectivesComplete = 0;
					this.a = 9;
					while (this.a < 18)
					{
						
						if (this.objectives_complete_arr[this.a] == 1)
						{
							
							this.tempObjectivesComplete  ++ ;
							
						}
						
						this.a  ++ ;
						
					}
					this.mc.level_select_mc.levelText1.text = "Hydroponic Garden - " + this.tempObjectivesComplete + "/9";
					this.levelsLocked[4] = 1;
				}
				if (this.tempTotalObjectivesComplete < 8)
				{
					this.mc.level_select_mc.levelText2.text = "Locked - Complete " + (8 - this.tempTotalObjectivesComplete) + "";
				}
				else
				{
					this.tempObjectivesComplete = 0;
					this.a = 18;
					while (this.a < 27)
					{
						
						if (this.objectives_complete_arr[this.a] == 1)
						{
							
							this.tempObjectivesComplete  ++ ;
							
						}
						
						this.a  ++ ;
						
					}
					this.mc.level_select_mc.levelText2.text = "Basement - " + this.tempObjectivesComplete + "/9";
					this.levelsLocked[1] = 1;
				}
				if (this.tempTotalObjectivesComplete < 12)
				{
					this.mc.level_select_mc.levelText3.text = "Locked - Complete " + (12 - this.tempTotalObjectivesComplete) + "";
				}
				else
				{
					this.tempObjectivesComplete = 0;
					this.a = 27;
					while (this.a < 36)
					{
						
						if (this.objectives_complete_arr[this.a] == 1)
						{
							
							this.tempObjectivesComplete  ++ ;
							
						}
						
						this.a  ++ ;
						
					}
					this.mc.level_select_mc.levelText3.text = "Service Tunnel - " + this.tempObjectivesComplete + "/9";
					this.levelsLocked[2] = 1;
				}
				if (this.tempTotalObjectivesComplete < 36)
				{
					this.mc.level_select_mc.levelText4.text = "Locked - Complete " + (36 - this.tempTotalObjectivesComplete) + "";
				}
				else
				{
					this.tempObjectivesComplete = 0;
					this.a = 36;
					while (this.a < 45)
					{
						
						if (this.objectives_complete_arr[this.a] == 1)
						{
							
							this.tempObjectivesComplete  ++ ;
							
						}
						
						this.a  ++ ;
						
					}
					this.mc.level_select_mc.levelText4.text = "Blank Canvas - " + this.tempObjectivesComplete + "/9";
					this.levelsLocked[3] = 1;
				}
			}
			else if (this.gameVersion == 1)
			{
				this.mc.character_title_container.id.text = this.playerName;
			}
			this.charLogo_changeAppearance();
			this.charModel_title = new character_create_model();
			this.mc.character_title_container.addChild(this.charModel_title);
			this.charModel_title.x = 330;
			this.charModel_title.y = 230;
			this.charModel_title.scaleX = 1.25;
			this.charModel_title.scaleY = 1.25;
			this.charModel_changeAppearance_title();
			if (this.weaponsNew[this.character_weapons[0]] == 0)
			{
				this.mc.character_title_container.weapon1.new_mc.visible = false;
			}
			else
			{
				this.mc.character_title_container.weapon1.new_mc.visible = true;
			}
			this.weaponsNew[this.character_weapons[0]] = 0;
			if (this.weaponsNew[this.character_weapons[1]] == 0)
			{
				this.mc.character_title_container.weapon2.new_mc.visible = false;
			}
			else
			{
				this.mc.character_title_container.weapon2.new_mc.visible = true;
			}
			this.weaponsNew[this.character_weapons[1]] = 0;
			this.mc.character_title_container.new_mc1.visible = false;
			this.mc.character_title_container.new_mc2.visible = false;
			this.title_mouseIsDown2 = false;
			mc.addEventListener(MouseEvent.MOUSE_DOWN, this.title_mouseDown2);
			mc.addEventListener(MouseEvent.MOUSE_UP, this.title_mouseUp2);
			mc.addEventListener(Event.ENTER_FRAME, this.title_enterFrame2);
			Mouse.show();
			//this.mc.loading.visible = false;
			return;
		}// end function
		
		function frame6()
		{
			mc.stage.align = StageAlign.TOP_LEFT;
			mc.stage.scaleMode = StageScaleMode.NO_SCALE;
			this.mc.char_title2.visible = false;
			this.mc.char_title3.visible = false;
			this.mc.btn_backToTitle.addEventListener(MouseEvent.CLICK, this.backToTitle);
			this.tempBtn = new character_create_btn();
			this.btnArr = new Array();
			this.btn_nextPage = new btn_cc_nextPage();
			this.btn_prevPage = new btn_cc_prevPage();
			mc.addChild(this.btn_nextPage);
			mc.addChild(this.btn_prevPage);
			this.btn_nextPage.visible = false;
			this.btn_prevPage.visible = false;
			this.f = 0;
			this.g = 0;
			this.characterCreate_partSelected = -1;
			this.characterCreate_rowLength = 12;
			this.characterCreate_rowOrigin_x = this.mc.character_create_container.x;
			this.characterCreate_rowOrigin_y = this.mc.character_create_container.y + this.mc.character_create_container.height + 55;
			this.characterCreate_pageOn = 0;
			this.mc.character_create_container.weapon1.gotoAndStop((this.character_weapons[0] + 1));
			this.mc.character_create_container.weapon2.gotoAndStop((this.character_weapons[1] + 1));
			this.mc.character_create_container.primary.text = this.title_gun_names[this.character_weapons[0]];
			this.mc.character_create_container.secondary.text = this.title_gun_names[this.character_weapons[1]];
			if (this.weaponsNew[this.character_weapons[0]] == 0)
			{
				this.mc.character_create_container.weapon1.new_mc.visible = false;
			}
			else
			{
				this.mc.character_create_container.weapon1.new_mc.visible = true;
			}
			this.weaponsNew[this.character_weapons[0]] = 0;
			if (this.weaponsNew[this.character_weapons[1]] == 0)
			{
				this.mc.character_create_container.weapon2.new_mc.visible = false;
			}
			else
			{
				this.mc.character_create_container.weapon2.new_mc.visible = true;
			}
			this.weaponsNew[this.character_weapons[1]] = 0;
			this.mc.colorPicker.x = this.mc.character_create_container.x + 126;
			this.mc.colorPicker.y = this.mc.character_create_container.y + 247;
			this.charModel = new character_create_model();
			this.mc.character_create_container.addChild(this.charModel);
			this.charModel.x = 350;
			this.charModel.y = 230;
			this.charModel.scaleX = 1.25;
			this.charModel.scaleY = 1.25;
			this.mc.character_create_container.id.text = this.playerName;
			this.mc.character_create_container.color1.visible = false;
			this.mc.character_create_container.color2.visible = false;
			this.mc.character_create_container.define1.visible = false;
			this.mc.character_create_container.define2.visible = false;
			this.mc.character_create_container.back1.visible = false;
			this.mc.character_create_container.back2.visible = false;
			this.mc.character_create_container.shine1.visible = false;
			this.mc.character_create_container.shine2.visible = false;
			this.f = 0;
			while (this.f < 8)
			{
				
				this.mc.character_create_container["c1_" + this.f].visible = false;
				this.mc.character_create_container["c2_" + this.f].visible = false;
				
				this.f  ++ ;
				
			}
			this.mc.colorPicker.visible = false;
			this.charModel_changeAppearance();
			this.characterCreate_pageOn = 1;
			this.mc.character_create_container.btn_head.addEventListener(MouseEvent.CLICK, this.characterCreate_click_head);
			this.mc.character_create_container.btn_eye.addEventListener(MouseEvent.CLICK, this.characterCreate_click_eye);
			this.mc.character_create_container.btn_face.addEventListener(MouseEvent.CLICK, this.characterCreate_click_face);
			this.mc.character_create_container.btn_body.addEventListener(MouseEvent.CLICK, this.characterCreate_click_body);
			this.mc.character_create_container.btn_foot.addEventListener(MouseEvent.CLICK, this.characterCreate_click_foot);
			this.mc.character_create_container.btn_hands.addEventListener(MouseEvent.CLICK, this.characterCreate_click_hand);
			this.mc.character_create_container.charCode.addEventListener(MouseEvent.CLICK, this.characterCreate_charCode);
			this.title_mouseIsDown = false;
			mc.addEventListener(MouseEvent.MOUSE_DOWN, this.title_mouseDown);
			mc.addEventListener(MouseEvent.MOUSE_UP, this.title_mouseUp);
			mc.addEventListener(Event.ENTER_FRAME, this.title_enterFrame);
			this.changeColor = false;
			this.mc.colorPicker.xx.addEventListener(MouseEvent.CLICK, this.colorPicker_x);
			this.mc.colorPicker.r.addEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_r_md);
			this.mc.colorPicker.rBar.addEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_r_md);
			this.mc.colorPicker.g.addEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_g_md);
			this.mc.colorPicker.gBar.addEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_g_md);
			this.mc.colorPicker.b.addEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_b_md);
			this.mc.colorPicker.bBar.addEventListener(MouseEvent.MOUSE_DOWN, this.colorPicker_b_md);
			this.btn_nextPage.addEventListener(MouseEvent.CLICK, this.nextPageFun);
			this.btn_prevPage.addEventListener(MouseEvent.CLICK, this.prevPageFun);
			this.mc.colorPicker.setRGB.addEventListener(MouseEvent.MOUSE_DOWN, this.setRGB_fun);
			mc.addEventListener(MouseEvent.MOUSE_UP, this.hsl_mu);
			this.colorPickerIsOn = false;
			this.whichColorPicker = 0;
			Mouse.show();
			return;
		}// end function
		
		function frame10()
		{
			this.tileSet = 0;
			this.tileSet1_collidable = new Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1);
			this.tileSet3_collidable = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.tileSet4_collidable = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.tileSet5_collidable = new Array(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
			this.tileSet6_collidable = new Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.tileSet7_collidable = new Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.tileSet8_collidable = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.tileSet9_collidable = new Array(0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.level0 = new Array(0, 5, 5, 13, 8, 10, 5, 7, 1, 15, 17, 16, 7, 15, 15, 3, 17, 17, 18, 8, 1, 3, 7, 46, 40, 42, 44, 46, 42, 44, 46, 48, 40, 42, 44, 46, 48, 9, 17, 17, 3, 17, 15, 16, 2, 5, 2, 16, 6, 16, 17, 46, 48, 18, 11, 9, 10, 2, 7, 13, 17, 18, 9, 14, 0, 0, 11, 4, 2, 6, 17, 15, 6, 48, 40, 42, 12, 11, 0, 10, 13, 4, 8, 2, 1, 18, 9, 18, 6, 6, 0, 13, 18, 15, 6, 7, 0, 0, 10, 1, 16, 12, 5, 1, 10, 8, 16, 8, 14, 11, 5, 9, 3, 7, 13, 9, 6, 0, 15, 15, 12, 7, 9, 7, 14, 7, 0, 13, 9, 13, 14, 42, 46, 40, 44, 48, 40, 46, 40, 44, 40, 44, 40, 44, 48, 44, 48, 42, 46, 40, 44, 40, 44, 48, 42, 46, 40, 44, 46, 46, 14, 44, 48, 46, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 47, 41, 43, 45, 47, 43, 45, 47, 49, 41, 43, 45, 47, 49, 46, 40, 46, 42, 44, 42, 44, 48, 46, 50, 40, 42, 44, 46, 47, 49, 40, 42, 48, 42, 46, 40, 44, 48, 42, 46, 40, 44, 48, 42, 46, 40, 53, 48, 42, 46, 49, 41, 43, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 42, 40, 44, 46, 48, 40, 42, 53, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 48, 46, 40, 42, 44, 48, 46, 40, 44, 46, 48, 40, 42, 44, 46, 50, 40, 43, 47, 41, 45, 49, 41, 47, 41, 45, 41, 45, 41, 45, 49, 45, 49, 43, 47, 41, 45, 41, 45, 49, 43, 47, 41, 45, 47, 47, 2, 45, 49, 47, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 46, 48, 40, 42, 40, 42, 44, 46, 48, 53, 42, 44, 46, 48, 47, 41, 47, 43, 45, 43, 45, 49, 47, 51, 41, 43, 45, 47, 42, 44, 41, 43, 49, 43, 47, 41, 45, 49, 43, 47, 41, 45, 49, 43, 47, 41, 52, 49, 43, 47, 42, 44, 46, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 43, 41, 45, 47, 49, 41, 43, 52, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 49, 47, 41, 43, 45, 49, 47, 41, 45, 47, 49, 41, 43, 45, 47, 51, 41, 44, 48, 42, 46, 42, 44, 48, 42, 48, 42, 46, 42, 46, 40, 46, 53, 44, 48, 42, 46, 42, 46, 40, 44, 48, 42, 48, 40, 48, 5, 40, 42, 50, 46, 48, 11, 0, 18, 9, 5, 2, 18, 42, 44, 48, 46, 40, 42, 44, 46, 48, 40, 47, 49, 41, 43, 41, 43, 45, 47, 49, 52, 43, 45, 47, 49, 40, 42, 44, 46, 48, 40, 40, 42, 44, 48, 40, 42, 44, 46, 43, 45, 44, 46, 40, 44, 48, 42, 46, 40, 50, 48, 42, 46, 40, 44, 48, 42, 46, 40, 44, 48, 43, 45, 47, 7, 13, 9, 13, 12, 0, 2, 4, 10, 7, 13, 8, 15, 15, 7, 15, 17, 17, 17, 6, 7, 17, 18, 10, 6, 3, 16, 7, 10, 6, 7, 10, 17, 1, 10, 3, 16, 11, 5, 18, 11, 18, 6, 6, 2, 0, 11, 17, 1, 0, 9, 5, 0, 16, 4, 45, 49, 43, 47, 43, 45, 49, 43, 49, 43, 47, 43, 47, 41, 47, 52, 45, 49, 43, 47, 43, 47, 41, 45, 49, 43, 49, 41, 49, 17, 41, 43, 51, 47, 49, 3, 70, 80, 77, 71, 79, 15, 43, 45, 49, 47, 41, 43, 45, 47, 49, 41, 48, 40, 42, 44, 5, 16, 8, 15, 4, 15, 7, 3, 3, 16, 41, 43, 45, 47, 49, 41, 41, 43, 45, 49, 41, 43, 45, 47, 48, 40, 45, 47, 41, 45, 49, 43, 47, 41, 51, 49, 43, 47, 41, 45, 49, 43, 47, 41, 45, 49, 46, 48, 40, 16, 70, 74, 75, 76, 72, 71, 81, 77, 72, 73, 72, 78, 74, 73, 72, 76, 72, 71, 72, 77, 74, 81, 72, 76, 80, 71, 72, 78, 72, 71, 74, 76, 72, 80, 72, 77, 72, 81, 72, 78, 72, 71, 72, 76, 74, 73, 72, 78, 81, 71, 72, 76, 79, 12, 18, 17, 0, 6, 7, 0, 3, 9, 11, 10, 1, 16, 17, 0, 1, 17, 2, 18, 10, 10, 14, 5, 16, 9, 2, 16, 42, 44, 40, 8, 15, 2, 2, 16, 14, 13, 19, 67, 19, 19, 19, 6, 10, 7, 16, 5, 16, 11, 18, 14, 0, 1, 49, 41, 43, 45, 2, 70, 76, 71, 72, 75, 74, 76, 79, 10, 9, 11, 7, 14, 14, 9, 9, 15, 2, 7, 18, 6, 14, 1, 49, 41, 1, 18, 4, 18, 1, 17, 16, 1, 14, 5, 3, 18, 10, 2, 7, 10, 16, 13, 3, 9, 47, 49, 41, 6, 20, 19, 20, 21, 20, 19, 38, 20, 20, 21, 20, 19, 21, 19, 20, 21, 19, 19, 60, 19, 21, 38, 19, 21, 66, 20, 20, 21, 20, 21, 21, 21, 19, 66, 20, 21, 20, 38, 20, 21, 21, 20, 21, 20, 19, 20, 21, 20, 38, 20, 20, 20, 21, 21, 70, 81, 73, 77, 72, 73, 72, 76, 81, 71, 72, 78, 72, 73, 72, 76, 74, 75, 72, 77, 72, 71, 74, 78, 79, 14, 43, 45, 41, 3, 70, 75, 78, 80, 79, 19, 19, 66, 20, 19, 20, 21, 70, 76, 71, 72, 71, 78, 74, 75, 79, 4, 4, 9, 11, 17, 13, 19, 21, 19, 21, 19, 20, 19, 20, 19, 70, 73, 74, 77, 73, 80, 73, 76, 73, 74, 73, 78, 79, 10, 15, 7, 8, 70, 73, 77, 71, 74, 73, 76, 71, 72, 75, 78, 73, 72, 73, 77, 73, 74, 79, 9, 40, 42, 44, 2, 21, 21, 19, 21, 19, 20, 37, 19, 20, 20, 20, 21, 21, 19, 19, 20, 21, 21, 20, 20, 21, 37, 21, 21, 33, 30, 32, 30, 30, 30, 31, 30, 30, 34, 21, 19, 21, 37, 19, 20, 20, 20, 19, 19, 20, 19, 20, 21, 37, 20, 21, 21, 20, 21, 19, 38, 20, 20, 20, 20, 19, 19, 38, 19, 20, 20, 19, 21, 19, 19, 21, 20, 21, 21, 19, 20, 19, 19, 21, 15, 46, 44, 42, 6, 20, 19, 19, 33, 30, 31, 30, 34, 19, 19, 21, 21, 19, 21, 21, 19, 20, 20, 19, 21, 20, 19, 70, 77, 75, 79, 20, 21, 19, 21, 21, 20, 20, 20, 19, 21, 21, 20, 19, 21, 19, 67, 20, 21, 21, 21, 19, 20, 19, 20, 66, 20, 21, 60, 19, 20, 21, 21, 21, 21, 19, 21, 21, 21, 19, 20, 19, 21, 20, 19, 21, 13, 41, 43, 45, 18, 21, 20, 19, 19, 19, 21, 37, 21, 60, 21, 21, 20, 21, 21, 19, 20, 20, 20, 21, 20, 21, 37, 19, 19, 19, 21, 19, 20, 20, 21, 21, 21, 19, 20, 20, 19, 21, 37, 20, 21, 21, 21, 19, 21, 20, 20, 19, 21, 37, 21, 21, 20, 21, 19, 20, 37, 20, 20, 19, 61, 19, 19, 37, 20, 20, 19, 19, 20, 20, 21, 20, 19, 19, 21, 21, 19, 19, 19, 21, 5, 47, 45, 43, 12, 19, 19, 19, 19, 20, 19, 19, 20, 20, 20, 19, 21, 20, 21, 21, 19, 19, 19, 19, 19, 20, 20, 21, 21, 20, 21, 20, 19, 19, 20, 21, 61, 19, 21, 19, 20, 21, 21, 20, 21, 21, 66, 19, 19, 19, 19, 20, 21, 20, 21, 68, 19, 20, 20, 20, 20, 20, 21, 21, 19, 20, 21, 19, 20, 20, 20, 20, 20, 21, 19, 35, 14, 44, 46, 48, 14, 32, 36, 19, 21, 19, 54, 58, 19, 20, 24, 23, 19, 19, 19, 20, 20, 21, 21, 21, 60, 21, 38, 21, 21, 20, 19, 20, 19, 20, 20, 20, 21, 21, 19, 19, 21, 21, 59, 55, 20, 19, 21, 20, 20, 19, 19, 20, 21, 38, 21, 20, 19, 21, 20, 20, 37, 19, 19, 21, 19, 21, 20, 37, 20, 20, 21, 20, 19, 22, 24, 19, 20, 20, 20, 21, 19, 19, 20, 19, 14, 48, 50, 42, 13, 20, 20, 21, 19, 20, 21, 21, 19, 21, 21, 20, 21, 20, 21, 19, 60, 19, 19, 20, 20, 19, 20, 20, 19, 21, 19, 21, 21, 20, 21, 19, 21, 21, 20, 20, 19, 21, 22, 23, 19, 20, 33, 30, 31, 30, 30, 30, 32, 30, 30, 34, 20, 21, 19, 21, 21, 20, 21, 19, 20, 21, 63, 62, 61, 63, 62, 20, 20, 20, 19, 66, 2, 45, 47, 49, 7, 20, 66, 21, 20, 21, 20, 19, 21, 22, 25, 61, 20, 20, 21, 19, 21, 20, 21, 20, 20, 20, 37, 20, 20, 21, 21, 21, 21, 20, 20, 20, 60, 19, 20, 20, 19, 20, 21, 20, 21, 20, 19, 19, 21, 20, 21, 21, 20, 37, 20, 19, 19, 20, 19, 20, 59, 55, 20, 21, 19, 20, 20, 38, 20, 20, 20, 21, 20, 61, 20, 20, 21, 21, 19, 20, 20, 21, 21, 21, 15, 49, 51, 43, 16, 36, 21, 21, 19, 20, 21, 21, 19, 19, 20, 19, 21, 19, 20, 21, 19, 20, 20, 19, 21, 20, 21, 20, 20, 21, 21, 19, 19, 20, 20, 20, 21, 20, 19, 21, 20, 19, 21, 60, 19, 19, 21, 20, 21, 20, 19, 21, 21, 21, 20, 20, 20, 20, 20, 19, 19, 20, 21, 19, 20, 20, 61, 25, 23, 19, 19, 21, 19, 20, 19, 68, 10, 44, 40, 42, 18, 19, 66, 19, 21, 19, 19, 21, 19, 19, 19, 19, 20, 20, 19, 20, 20, 19, 20, 19, 20, 21, 37, 21, 19, 20, 20, 19, 19, 20, 19, 21, 19, 21, 21, 20, 19, 19, 20, 20, 20, 20, 21, 19, 63, 62, 61, 20, 19, 37, 21, 21, 19, 20, 20, 21, 19, 20, 21, 20, 21, 20, 21, 37, 20, 21, 19, 19, 21, 19, 21, 61, 20, 16, 5, 3, 18, 17, 11, 4, 11, 44, 46, 48, 15, 33, 30, 31, 30, 30, 30, 32, 30, 36, 21, 19, 21, 21, 19, 19, 19, 19, 21, 20, 61, 19, 19, 20, 20, 19, 20, 60, 21, 21, 21, 21, 20, 20, 20, 19, 19, 60, 20, 21, 21, 19, 20, 20, 20, 21, 19, 20, 21, 19, 19, 20, 21, 19, 19, 60, 21, 21, 20, 19, 19, 60, 21, 19, 20, 21, 20, 19, 19, 19, 35, 34, 12, 45, 41, 43, 11, 19, 67, 19, 21, 20, 20, 21, 21, 19, 20, 19, 20, 19, 60, 19, 19, 19, 16, 13, 19, 21, 38, 20, 20, 7, 0, 10, 19, 20, 19, 21, 19, 21, 20, 19, 20, 20, 21, 21, 19, 21, 21, 22, 25, 19, 20, 19, 19, 38, 19, 21, 20, 21, 20, 21, 21, 21, 19, 20, 20, 20, 21, 37, 20, 21, 21, 20, 20, 19, 20, 21, 21, 13, 9, 17, 16, 18, 17, 1, 9, 45, 47, 49, 5, 19, 20, 20, 20, 19, 19, 21, 20, 67, 20, 21, 21, 20, 19, 19, 20, 21, 21, 61, 20, 20, 19, 20, 19, 20, 20, 21, 19, 19, 21, 21, 21, 20, 20, 20, 21, 21, 21, 21, 19, 21, 21, 21, 21, 20, 20, 21, 19, 21, 19, 20, 21, 21, 21, 19, 21, 21, 19, 20, 21, 20, 19, 20, 19, 19, 20, 19, 21, 21, 66, 19, 8, 48, 40, 42, 2, 60, 66, 21, 21, 20, 20, 20, 21, 20, 20, 20, 21, 21, 21, 19, 20, 20, 18, 7, 19, 20, 37, 20, 21, 2, 14, 5, 19, 20, 21, 21, 21, 21, 24, 20, 21, 19, 19, 20, 19, 19, 20, 19, 20, 19, 20, 20, 21, 37, 19, 21, 21, 19, 19, 21, 19, 21, 19, 20, 19, 20, 21, 38, 21, 19, 21, 19, 20, 21, 19, 21, 19, 19, 70, 77, 71, 74, 78, 79, 17, 40, 44, 42, 2, 15, 13, 0, 9, 5, 18, 2, 17, 13, 17, 11, 7, 15, 2, 6, 18, 1, 5, 18, 13, 16, 6, 14, 3, 21, 19, 20, 20, 21, 21, 21, 20, 21, 16, 3, 14, 2, 11, 13, 21, 20, 19, 21, 20, 19, 9, 13, 9, 14, 15, 15, 18, 3, 2, 7, 5, 20, 21, 19, 19, 19, 20, 20, 20, 11, 17, 14, 18, 17, 0, 4, 6, 49, 41, 43, 11, 12, 4, 15, 14, 1, 13, 3, 13, 8, 2, 11, 1, 21, 19, 21, 20, 19, 20, 21, 19, 19, 37, 19, 20, 70, 78, 79, 20, 19, 19, 19, 20, 61, 60, 60, 20, 19, 21, 20, 20, 19, 19, 20, 60, 20, 21, 19, 20, 37, 20, 20, 20, 21, 21, 21, 19, 20, 20, 21, 21, 19, 21, 37, 21, 20, 19, 20, 61, 20, 19, 21, 20, 19, 20, 20, 20, 21, 19, 19, 1, 41, 45, 43, 48, 40, 42, 44, 46, 48, 40, 42, 50, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 18, 19, 21, 21, 20, 20, 21, 19, 20, 20, 13, 48, 40, 42, 44, 14, 19, 19, 21, 63, 62, 19, 17, 44, 40, 50, 48, 40, 42, 44, 46, 48, 7, 21, 19, 19, 20, 20, 20, 19, 20, 7, 40, 48, 42, 44, 46, 48, 40, 50, 44, 46, 48, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 2, 21, 21, 20, 21, 20, 19, 19, 20, 21, 38, 19, 21, 20, 20, 20, 20, 21, 19, 19, 20, 20, 19, 20, 20, 19, 21, 20, 20, 20, 20, 21, 20, 21, 20, 21, 19, 38, 19, 21, 60, 19, 19, 21, 19, 19, 21, 20, 21, 20, 19, 37, 60, 19, 20, 19, 20, 20, 20, 21, 21, 20, 21, 19, 19, 21, 20, 19, 2, 46, 48, 40, 49, 41, 43, 45, 47, 49, 41, 43, 51, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 1, 19, 21, 19, 20, 19, 21, 21, 19, 21, 8, 49, 41, 43, 45, 3, 21, 20, 21, 20, 20, 21, 1, 45, 41, 51, 49, 41, 43, 45, 47, 49, 17, 20, 20, 60, 21, 21, 20, 19, 21, 14, 41, 49, 43, 45, 47, 49, 41, 51, 45, 47, 49, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 12, 21, 19, 21, 20, 21, 19, 20, 19, 19, 37, 20, 20, 21, 20, 19, 20, 21, 60, 21, 21, 21, 21, 19, 19, 21, 21, 21, 21, 19, 20, 20, 19, 21, 20, 20, 19, 37, 21, 20, 20, 19, 19, 19, 20, 20, 19, 21, 19, 21, 19, 38, 19, 21, 19, 20, 21, 19, 19, 20, 19, 19, 20, 19, 20, 20, 20, 20, 8, 47, 49, 41, 5, 4, 2, 12, 18, 11, 2, 15, 0, 10, 6, 15, 13, 4, 7, 10, 2, 13, 3, 2, 10, 17, 15, 18, 1, 20, 21, 22, 23, 21, 19, 21, 20, 20, 2, 10, 8, 17, 9, 11, 19, 20, 20, 21, 21, 19, 8, 7, 13, 1, 4, 4, 15, 17, 0, 4, 14, 21, 21, 21, 19, 19, 21, 21, 19, 11, 14, 10, 9, 13, 3, 9, 16, 8, 8, 9, 9, 7, 18, 15, 1, 15, 10, 12, 0, 11, 3, 48, 3, 20, 21, 21, 21, 60, 20, 21, 21, 19, 37, 20, 19, 19, 21, 19, 19, 21, 19, 20, 19, 20, 21, 17, 18, 12, 1, 19, 19, 21, 19, 21, 19, 20, 7, 0, 21, 37, 19, 21, 19, 20, 2, 6, 8, 13, 15, 8, 15, 12, 19, 37, 19, 19, 21, 20, 20, 15, 9, 14, 16, 8, 10, 19, 21, 19, 21, 19, 4, 46, 44, 42, 16, 70, 77, 75, 72, 71, 76, 73, 74, 80, 76, 73, 74, 75, 76, 73, 72, 73, 76, 75, 72, 71, 76, 79, 20, 19, 19, 21, 20, 60, 20, 21, 21, 21, 21, 70, 81, 76, 79, 20, 19, 20, 19, 21, 19, 19, 21, 70, 76, 21, 19, 76, 81, 21, 76, 79, 19, 20, 19, 21, 19, 22, 23, 19, 20, 20, 70, 76, 80, 73, 72, 76, 75, 72, 71, 76, 81, 73, 72, 76, 73, 74, 73, 76, 75, 79, 16, 49, 8, 19, 21, 21, 21, 20, 20, 21, 21, 19, 38, 20, 19, 19, 19, 19, 20, 19, 21, 19, 19, 20, 21, 14, 1, 10, 17, 19, 20, 19, 19, 21, 21, 20, 15, 18, 21, 38, 21, 20, 21, 19, 14, 3, 11, 17, 12, 7, 12, 0, 21, 37, 20, 21, 21, 19, 20, 14, 10, 0, 4, 14, 4, 21, 19, 22, 23, 19, 7, 47, 45, 43, 12, 21, 19, 20, 20, 60, 20, 20, 21, 66, 21, 19, 19, 19, 20, 19, 19, 20, 19, 19, 19, 20, 19, 21, 19, 20, 21, 20, 20, 19, 21, 20, 19, 21, 19, 20, 37, 20, 20, 20, 19, 60, 20, 21, 21, 21, 21, 20, 21, 19, 19, 19, 37, 20, 19, 21, 21, 21, 20, 20, 20, 20, 19, 21, 19, 19, 21, 20, 68, 20, 21, 20, 19, 21, 21, 19, 37, 20, 20, 21, 21, 20, 19, 21, 20, 20, 7, 40, 2, 21, 19, 20, 20, 20, 19, 21, 21, 21, 59, 55, 19, 19, 20, 20, 19, 21, 20, 60, 21, 19, 19, 6, 3, 20, 20, 20, 20, 20, 60, 20, 20, 21, 19, 21, 21, 37, 20, 20, 20, 21, 21, 70, 77, 71, 81, 78, 79, 20, 20, 38, 20, 21, 19, 21, 21, 21, 21, 20, 20, 8, 7, 20, 21, 60, 21, 20, 3, 48, 40, 42, 15, 20, 21, 19, 20, 20, 19, 19, 21, 67, 21, 20, 20, 21, 20, 21, 20, 20, 19, 21, 21, 20, 19, 21, 20, 21, 21, 19, 2, 3, 19, 19, 19, 20, 20, 19, 37, 21, 20, 20, 21, 21, 20, 20, 20, 21, 20, 21, 19, 19, 21, 21, 37, 21, 20, 20, 19, 21, 19, 19, 19, 20, 20, 19, 21, 21, 20, 19, 66, 20, 19, 19, 19, 20, 21, 19, 37, 19, 20, 21, 19, 20, 20, 21, 21, 21, 4, 41, 14, 21, 19, 20, 19, 19, 21, 21, 20, 19, 21, 20, 20, 21, 19, 21, 21, 19, 19, 21, 21, 20, 19, 16, 15, 20, 19, 19, 19, 20, 20, 19, 19, 21, 20, 21, 19, 37, 20, 19, 19, 20, 19, 21, 19, 20, 37, 19, 20, 20, 21, 37, 20, 19, 20, 21, 20, 19, 19, 60, 21, 5, 2, 20, 21, 20, 20, 21, 8, 49, 41, 43, 8, 30, 36, 21, 19, 21, 21, 21, 21, 66, 21, 20, 20, 21, 19, 20, 20, 60, 19, 20, 21, 19, 20, 19, 19, 21, 21, 19, 8, 2, 19, 19, 63, 62, 19, 21, 59, 55, 20, 19, 21, 20, 20, 20, 21, 20, 19, 19, 19, 21, 20, 54, 58, 19, 19, 20, 21, 19, 19, 20, 21, 20, 21, 19, 21, 21, 21, 21, 66, 21, 19, 19, 20, 20, 54, 57, 58, 21, 21, 20, 19, 19, 21, 21, 19, 19, 17, 42, 10, 20, 19, 19, 21, 20, 20, 19, 20, 20, 20, 20, 20, 20, 21, 20, 21, 19, 20, 21, 20, 19, 16, 1, 3, 19, 19, 19, 19, 20, 20, 20, 20, 21, 20, 54, 57, 58, 21, 20, 21, 19, 20, 19, 21, 21, 38, 20, 21, 19, 21, 59, 57, 55, 20, 19, 20, 20, 19, 20, 21, 13, 17, 21, 20, 20, 19, 12, 0, 3, 46, 48, 1, 20, 33, 30, 31, 30, 32, 30, 30, 34, 20, 20, 19, 19, 19, 19, 61, 63, 62, 19, 19, 21, 21, 20, 21, 20, 20, 20, 11, 8, 19, 19, 22, 25, 63, 62, 21, 20, 19, 19, 19, 20, 21, 20, 20, 20, 19, 19, 21, 20, 21, 19, 21, 21, 21, 21, 19, 20, 19, 61, 19, 21, 19, 21, 21, 20, 19, 20, 67, 63, 62, 21, 19, 21, 19, 20, 19, 19, 19, 21, 21, 20, 63, 62, 19, 19, 2, 43, 18, 20, 21, 21, 20, 19, 19, 19, 19, 20, 21, 61, 21, 20, 24, 21, 19, 19, 19, 20, 21, 19, 16, 2, 9, 19, 21, 20, 20, 20, 21, 19, 19, 20, 20, 19, 19, 19, 20, 20, 21, 19, 19, 21, 19, 21, 37, 19, 21, 19, 20, 20, 19, 20, 21, 19, 19, 21, 20, 35, 30, 15, 0, 36, 20, 61, 19, 5, 0, 4, 47, 49, 1, 20, 21, 21, 21, 20, 19, 20, 21, 19, 21, 19, 19, 21, 19, 19, 19, 20, 20, 20, 19, 19, 19, 19, 9, 10, 13, 0, 16, 2, 19, 19, 20, 19, 20, 19, 19, 20, 19, 20, 20, 19, 21, 19, 20, 19, 20, 19, 19, 19, 20, 19, 19, 21, 21, 19, 20, 20, 21, 20, 21, 19, 20, 20, 21, 35, 30, 30, 34, 19, 21, 19, 19, 20, 21, 21, 21, 19, 20, 19, 24, 62, 61, 19, 20, 20, 9, 4, 10, 19, 20, 19, 60, 20, 19, 20, 20, 19, 20, 20, 21, 22, 25, 20, 21, 21, 21, 21, 21, 20, 4, 3, 5, 21, 20, 61, 21, 20, 21, 19, 20, 19, 21, 60, 20, 20, 19, 20, 20, 21, 21, 19, 19, 21, 37, 21, 20, 20, 21, 19, 21, 20, 20, 21, 21, 20, 19, 66, 20, 12, 9, 68, 20, 20, 19, 70, 77, 5, 42, 40, 2, 21, 20, 19, 21, 21, 19, 63, 62, 19, 19, 21, 21, 20, 21, 19, 19, 20, 21, 20, 21, 19, 21, 21, 0, 40, 42, 44, 46, 4, 19, 19, 21, 20, 20, 20, 19, 19, 21, 20, 35, 30, 31, 30, 30, 32, 30, 30, 36, 20, 20, 21, 21, 19, 19, 20, 20, 20, 19, 20, 19, 21, 20, 21, 21, 66, 21, 21, 19, 19, 19, 19, 21, 21, 21, 20, 20, 21, 20, 61, 25, 21, 21, 19, 21, 20, 21, 21, 21, 21, 21, 21, 20, 20, 19, 20, 20, 21, 61, 22, 23, 19, 19, 20, 19, 21, 21, 21, 20, 19, 70, 76, 79, 20, 20, 20, 21, 22, 23, 21, 19, 19, 19, 21, 19, 19, 19, 19, 21, 21, 21, 21, 21, 21, 38, 19, 21, 21, 19, 60, 21, 19, 20, 20, 35, 30, 31, 34, 19, 16, 12, 66, 20, 21, 19, 19, 19, 6, 43, 41, 4, 19, 21, 20, 20, 20, 19, 21, 20, 20, 20, 21, 19, 19, 20, 19, 19, 19, 21, 19, 35, 30, 31, 30, 9, 41, 43, 45, 47, 13, 10, 13, 9, 0, 30, 30, 36, 19, 21, 21, 66, 20, 19, 60, 20, 20, 19, 20, 66, 19, 20, 21, 21, 21, 19, 21, 60, 21, 20, 21, 21, 21, 21, 19, 20, 67, 21, 21, 21, 19, 19, 21, 21, 21, 21, 20, 20, 21, 60, 19, 19, 21, 63, 62, 20, 20, 19, 19, 20, 20, 19, 20, 20, 21, 19, 21, 20, 20, 19, 61, 60, 63, 62, 19, 20, 20, 21, 21, 20, 19, 21, 20, 20, 19, 21, 19, 61, 25, 60, 21, 21, 19, 20, 19, 20, 21, 19, 20, 20, 21, 26, 27, 19, 21, 39, 21, 21, 19, 20, 21, 19, 21, 20, 21, 66, 21, 20, 20, 20, 9, 7, 33, 36, 63, 62, 60, 19, 7, 48, 40, 0, 20, 19, 21, 19, 21, 20, 19, 20, 19, 20, 21, 21, 19, 20, 20, 20, 21, 21, 20, 66, 21, 19, 21, 5, 44, 48, 40, 42, 48, 40, 42, 53, 10, 19, 19, 66, 21, 19, 20, 67, 19, 21, 19, 21, 19, 19, 19, 66, 19, 21, 19, 19, 20, 21, 19, 21, 21, 20, 21, 20, 21, 19, 21, 19, 66, 20, 20, 19, 19, 19, 20, 21, 20, 19, 21, 20, 21, 20, 19, 20, 21, 20, 21, 21, 19, 20, 20, 20, 19, 21, 19, 21, 20, 21, 21, 20, 21, 21, 21, 21, 19, 21, 21, 21, 20, 19, 20, 19, 21, 19, 20, 21, 20, 20, 19, 63, 62, 21, 21, 20, 19, 19, 21, 19, 20, 19, 20, 21, 21, 28, 29, 20, 21, 19, 21, 19, 19, 19, 21, 21, 19, 19, 19, 67, 20, 19, 20, 21, 18, 3, 21, 66, 19, 21, 21, 19, 8, 49, 41, 0, 20, 19, 21, 20, 19, 17, 12, 13, 2, 1, 12, 12, 17, 1, 6, 14, 17, 7, 2, 12, 16, 1, 1, 15, 45, 49, 41, 43, 49, 41, 43, 52, 15, 17, 13, 15, 18, 4, 6, 6, 15, 2, 18, 15, 6, 10, 14, 7, 18, 2, 14, 9, 15, 17, 6, 3, 13, 1, 8, 5, 3, 18, 11, 4, 4, 15, 7, 3, 12, 3, 18, 9, 6, 11, 2, 1, 5, 17, 6, 15, 13, 8, 3, 6, 2, 5, 17, 18, 14, 15, 21, 20, 20, 19, 19, 60, 21, 21, 0, 14, 5, 2, 7, 4, 11, 4, 18, 12, 11, 7, 9, 0, 6, 10, 8, 17, 0, 2, 17, 14, 9, 1, 13, 6, 16, 0, 5, 9, 13, 15, 11, 13, 2, 16, 9, 9, 11, 7, 4, 14, 12, 9, 9, 17, 12, 7, 5, 10, 8, 12, 7, 9, 10, 17, 15, 1, 9, 48, 40, 4, 20, 21, 21, 20, 20, 11, 15, 17, 42, 40, 48, 46, 44, 42, 40, 50, 46, 44, 42, 40, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 44, 42, 40, 53, 44, 42, 40, 48, 44, 46, 42, 40, 46, 42, 40, 46, 44, 42, 40, 48, 46, 44, 42, 40, 50, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 44, 12, 19, 20, 20, 20, 19, 19, 20, 21, 1, 2, 0, 18, 3, 18, 9, 8, 18, 11, 8, 12, 8, 12, 7, 15, 1, 18, 7, 2, 8, 7, 7, 7, 12, 16, 11, 9, 4, 0, 2, 1, 9, 8, 17, 1, 13, 18, 7, 12, 4, 0, 6, 6, 15, 9, 9, 11, 1, 2, 7, 9, 2, 4, 15, 6, 18, 0, 10, 49, 41, 0, 20, 19, 19, 19, 19, 21, 21, 3, 43, 41, 49, 47, 45, 43, 41, 51, 47, 45, 43, 41, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 45, 43, 41, 52, 45, 43, 41, 49, 45, 47, 43, 41, 47, 43, 41, 47, 45, 43, 41, 49, 47, 45, 43, 41, 51, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 45, 9, 30, 36, 21, 21, 21, 21, 19, 20, 8, 15, 44, 46, 42, 40, 48, 46, 53, 42, 40, 46, 48, 44, 42, 40, 48, 44, 46, 42, 48, 40, 46, 44, 42, 40, 48, 46, 44, 42, 48, 46, 44, 42, 40, 48, 46, 44, 40, 42, 48, 46, 42, 44, 40, 50, 46, 44, 42, 40, 48, 46, 40, 42, 40, 48, 46, 42, 44, 44, 40, 9, 21, 61, 20, 21, 21, 20, 20, 2, 8, 11, 9, 11, 17, 13, 6, 5, 11, 6, 4, 10, 13, 8, 0, 7, 17, 14, 3, 17, 2, 14, 16, 4, 11, 14, 0, 16, 11, 5, 12, 17, 8, 10, 2, 0, 17, 6, 1, 7, 5, 3, 3, 3, 8, 0, 11, 17, 12, 13, 10, 6, 18, 13, 2, 3, 12, 4, 6, 17, 7, 3, 10, 16, 13, 4, 4, 7, 1, 7, 18, 2, 12, 7, 2, 2, 3, 17, 13, 50, 42, 3, 20, 68, 19, 21, 21, 63, 62, 21, 13, 1, 45, 47, 43, 41, 49, 47, 52, 43, 41, 47, 49, 45, 43, 41, 49, 45, 47, 43, 49, 41, 47, 45, 43, 41, 49, 47, 45, 43, 49, 47, 45, 43, 41, 49, 47, 45, 41, 43, 49, 47, 43, 45, 41, 51, 47, 45, 43, 41, 49, 47, 41, 43, 41, 49, 47, 43, 45, 45, 41, 5, 20, 20, 20, 19, 19, 19, 20, 14, 9, 70, 77, 71, 74, 72, 78, 79, 19, 19, 19, 19, 19, 19, 19, 37, 19, 19, 19, 66, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 66, 19, 19, 19, 19, 37, 19, 19, 67, 19, 19, 19, 19, 19, 61, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 66, 19, 37, 19, 19, 19, 19, 70, 77, 71, 72, 73, 76, 73, 72, 75, 78, 73, 74, 75, 76, 79, 16, 51, 43, 15, 21, 66, 21, 21, 21, 21, 21, 19, 16, 14, 48, 40, 42, 44, 46, 48, 40, 46, 48, 40, 42, 44, 46, 40, 48, 42, 44, 46, 40, 44, 42, 46, 48, 40, 42, 44, 46, 48, 40, 42, 46, 46, 42, 48, 42, 48, 46, 48, 40, 42, 44, 46, 48, 42, 40, 44, 46, 48, 40, 53, 46, 44, 48, 40, 42, 44, 46, 46, 42, 14, 17, 5, 19, 21, 21, 19, 21, 16, 2, 21, 21, 21, 21, 21, 19, 20, 20, 19, 19, 19, 20, 20, 21, 38, 20, 21, 19, 69, 19, 19, 20, 19, 20, 19, 21, 20, 19, 19, 21, 66, 20, 19, 20, 20, 37, 19, 21, 66, 19, 19, 19, 20, 19, 63, 62, 19, 19, 61, 21, 20, 21, 20, 35, 30, 34, 19, 38, 20, 20, 19, 19, 21, 21, 20, 20, 19, 19, 19, 19, 20, 19, 20, 20, 20, 19, 35, 2, 40, 40, 10, 30, 34, 19, 20, 21, 21, 19, 19, 1, 0, 49, 41, 43, 45, 47, 49, 41, 47, 49, 41, 43, 45, 47, 41, 49, 43, 45, 47, 41, 45, 43, 47, 49, 41, 43, 45, 47, 49, 41, 43, 47, 47, 43, 49, 43, 49, 47, 49, 41, 43, 45, 47, 49, 43, 41, 45, 47, 49, 41, 52, 47, 45, 49, 41, 43, 45, 47, 47, 43, 4, 8, 2, 20, 21, 21, 21, 20, 20, 21, 21, 19, 20, 20, 19, 21, 20, 21, 19, 20, 21, 21, 20, 21, 37, 19, 19, 21, 66, 19, 21, 20, 61, 21, 19, 19, 19, 19, 21, 20, 68, 19, 20, 19, 21, 38, 19, 21, 33, 30, 31, 30, 30, 36, 20, 21, 20, 19, 21, 20, 19, 20, 21, 66, 21, 19, 20, 37, 21, 21, 19, 20, 20, 20, 21, 20, 19, 19, 19, 21, 20, 19, 19, 19, 20, 20, 67, 13, 41, 41, 0, 20, 19, 20, 21, 60, 21, 0, 10, 7, 10, 42, 44, 46, 48, 42, 40, 44, 48, 46, 42, 44, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 44, 44, 48, 40, 46, 44, 42, 40, 48, 46, 44, 40, 48, 44, 42, 40, 46, 48, 44, 42, 48, 46, 44, 42, 48, 48, 44, 16, 20, 19, 19, 21, 20, 19, 21, 19, 19, 19, 21, 21, 19, 19, 19, 21, 19, 19, 20, 19, 19, 20, 20, 37, 20, 20, 21, 66, 19, 20, 21, 19, 19, 20, 21, 19, 19, 19, 19, 66, 21, 19, 19, 19, 37, 19, 21, 19, 20, 21, 21, 21, 66, 21, 19, 21, 20, 21, 21, 21, 21, 20, 67, 19, 20, 21, 37, 20, 20, 20, 21, 60, 19, 20, 21, 20, 19, 20, 20, 21, 20, 20, 21, 19, 19, 33, 5, 48, 48, 6, 36, 21, 20, 19, 21, 19, 7, 17, 6, 12, 43, 45, 47, 49, 43, 41, 45, 49, 47, 43, 45, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 45, 45, 49, 41, 47, 45, 43, 41, 49, 47, 45, 41, 49, 45, 43, 41, 47, 49, 45, 43, 49, 47, 45, 43, 49, 49, 45, 7, 21, 20, 20, 21, 20, 21, 21, 21, 20, 20, 21, 21, 21, 20, 19, 21, 20, 21, 20, 19, 19, 21, 19, 38, 19, 19, 21, 66, 20, 20, 19, 20, 21, 20, 19, 21, 21, 20, 19, 66, 19, 20, 21, 19, 37, 21, 20, 21, 20, 21, 20, 20, 66, 20, 20, 19, 20, 19, 19, 19, 21, 20, 66, 20, 19, 21, 37, 20, 21, 19, 21, 21, 20, 19, 21, 20, 19, 20, 21, 21, 19, 60, 19, 20, 20, 19, 2, 49, 49, 3, 66, 21, 19, 20, 20, 21, 70, 77, 14, 17, 40, 42, 44, 46, 40, 42, 42, 44, 46, 48, 40, 42, 44, 1, 1, 18, 5, 18, 13, 14, 18, 14, 17, 7, 2, 13, 53, 44, 40, 48, 40, 4, 13, 6, 7, 3, 12, 16, 18, 3, 18, 14, 5, 13, 0, 16, 7, 8, 5, 0, 18, 14, 0, 2, 10, 14, 14, 11, 13, 2, 36, 21, 21, 19, 21, 61, 20, 21, 20, 21, 20, 19, 20, 19, 63, 62, 60, 20, 21, 20, 19, 20, 21, 37, 19, 19, 21, 66, 20, 21, 19, 19, 19, 20, 21, 21, 21, 19, 21, 66, 19, 20, 21, 19, 38, 19, 19, 21, 20, 20, 19, 19, 33, 31, 30, 30, 32, 30, 36, 21, 20, 20, 66, 20, 21, 21, 38, 20, 19, 20, 20, 20, 19, 20, 19, 19, 20, 19, 20, 20, 61, 19, 19, 20, 19, 20, 1, 46, 46, 3, 33, 30, 31, 30, 30, 32, 30, 30, 9, 1, 41, 43, 45, 47, 41, 43, 43, 45, 47, 49, 41, 43, 45, 10, 70, 76, 81, 71, 74, 77, 72, 73, 72, 78, 79, 10, 52, 45, 41, 49, 41, 0, 70, 77, 75, 72, 76, 79, 1, 5, 7, 2, 15, 16, 6, 70, 81, 77, 71, 72, 76, 80, 79, 16, 42, 44, 46, 48, 40, 9, 66, 21, 20, 20, 22, 23, 20, 21, 20, 21, 19, 21, 19, 20, 21, 19, 19, 19, 20, 21, 20, 21, 20, 59, 55, 21, 19, 66, 21, 19, 21, 21, 20, 20, 19, 20, 19, 19, 21, 67, 19, 19, 19, 54, 58, 19, 21, 20, 20, 19, 21, 19, 21, 20, 19, 19, 19, 20, 66, 21, 21, 20, 68, 21, 21, 54, 58, 21, 20, 19, 21, 21, 21, 19, 21, 21, 19, 21, 7, 12, 6, 1, 4, 16, 0, 18, 2, 47, 47, 14, 20, 20, 19, 21, 21, 19, 21, 19, 4, 14, 42, 44, 46, 48, 40, 9, 7, 13, 11, 12, 1, 14, 9, 10, 20, 20, 37, 20, 20, 19, 21, 21, 19, 20, 19, 2, 2, 10, 4, 17, 1, 3, 21, 20, 20, 19, 21, 19, 20, 70, 71, 78, 75, 79, 66, 21, 38, 19, 19, 19, 21, 68, 21, 0, 43, 45, 47, 49, 41, 8, 12, 12, 3, 15, 2, 10, 14, 0, 4, 8, 7, 21, 19, 20, 20, 19, 19, 21, 20, 19, 21, 20, 21, 20, 19, 20, 20, 69, 21, 21, 21, 21, 20, 21, 19, 19, 19, 21, 20, 66, 20, 20, 19, 21, 19, 21, 19, 19, 20, 20, 20, 19, 21, 19, 21, 21, 20, 19, 67, 19, 19, 19, 66, 19, 19, 19, 19, 19, 21, 19, 19, 20, 21, 21, 19, 21, 19, 20, 18, 18, 10, 4, 13, 11, 2, 5, 17, 44, 44, 2, 19, 19, 20, 19, 21, 20, 35, 30, 17, 4, 43, 45, 47, 49, 41, 10, 70, 78, 80, 71, 72, 77, 79, 19, 21, 19, 38, 20, 19, 19, 20, 21, 21, 20, 19, 20, 70, 74, 77, 71, 79, 66, 21, 20, 19, 20, 20, 20, 21, 21, 21, 19, 19, 21, 67, 20, 37, 21, 19, 19, 19, 66, 20, 1, 42, 44, 48, 46, 40, 6, 18, 15, 1, 9, 7, 1, 17, 15, 40, 42, 0, 20, 20, 20, 19, 21, 21, 20, 20, 19, 19, 21, 21, 21, 19, 21, 19, 66, 19, 21, 20, 19, 35, 30, 32, 32, 30, 30, 30, 34, 20, 19, 21, 21, 21, 21, 19, 20, 19, 20, 20, 20, 19, 21, 19, 19, 20, 19, 33, 30, 30, 32, 34, 20, 20, 21, 21, 21, 19, 63, 62, 21, 19, 21, 21, 19, 21, 19, 11, 18, 16, 70, 75, 78, 71, 79, 12, 45, 45, 9, 5, 6, 20, 19, 21, 20, 66, 21, 14, 6, 42, 44, 46, 48, 40, 13, 20, 21, 67, 19, 20, 19, 20, 20, 19, 19, 37, 20, 20, 19, 21, 20, 21, 21, 21, 20, 21, 19, 21, 20, 20, 67, 19, 21, 21, 21, 19, 20, 19, 19, 21, 20, 20, 19, 66, 20, 37, 20, 19, 20, 61, 66, 21, 17, 43, 45, 49, 47, 41, 16, 4, 4, 10, 7, 12, 6, 2, 1, 41, 43, 12, 21, 20, 21, 21, 19, 20, 19, 21, 21, 20, 61, 20, 19, 19, 19, 20, 68, 21, 20, 20, 20, 66, 19, 21, 20, 21, 21, 19, 20, 20, 19, 19, 20, 21, 20, 21, 19, 21, 21, 20, 21, 21, 19, 21, 21, 20, 21, 20, 20, 19, 19, 21, 21, 19, 19, 19, 21, 24, 23, 60, 19, 26, 27, 20, 21, 20, 21, 20, 82, 21, 19, 19, 19, 20, 20, 8, 42, 42, 0, 7, 14, 19, 20, 20, 21, 68, 19, 13, 0, 43, 45, 47, 49, 41, 7, 19, 19, 66, 19, 19, 19, 19, 61, 19, 19, 37, 19, 19, 19, 61, 24, 19, 19, 19, 19, 19, 19, 19, 19, 19, 66, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60, 19, 19, 66, 19, 38, 19, 19, 19, 19, 67, 19, 15, 12, 9, 5, 17, 42, 0, 70, 77, 75, 71, 73, 78, 79, 12, 44, 46, 4, 13, 21, 20, 20, 21, 21, 19, 19, 19, 20, 19, 20, 21, 21, 20, 19, 33, 30, 31, 30, 30, 34, 21, 20, 21, 21, 19, 19, 19, 19, 22, 23, 20, 20, 21, 19, 19, 21, 19, 19, 21, 21, 20, 60, 21, 19, 20, 20, 20, 21, 19, 20, 19, 20, 20, 21, 22, 25, 60, 20, 21, 28, 29, 20, 60, 19, 19, 21, 82, 21, 19, 20, 21, 20, 19, 2, 43, 43, 9, 76, 79, 21, 19, 19, 19, 33, 30, 4, 9, 42, 44, 46, 48, 40, 14, 30, 30, 34, 19, 19, 19, 19, 19, 20, 19, 38, 21, 21, 19, 22, 25, 20, 21, 21, 21, 20, 20, 61, 20, 20, 68, 19, 21, 20, 20, 20, 21, 20, 35, 30, 32, 30, 30, 34, 19, 37, 21, 19, 20, 20, 66, 21, 19, 70, 77, 79, 17, 43, 14, 19, 19, 21, 20, 21, 20, 19, 17, 45, 47, 5, 4, 19, 19, 20, 21, 19, 20, 21, 21, 20, 19, 22, 23, 19, 20, 20, 19, 20, 19, 19, 19, 20, 21, 20, 19, 21, 19, 20, 20, 61, 20, 19, 21, 63, 62, 19, 21, 21, 21, 20, 20, 21, 20, 20, 21, 20, 21, 21, 21, 19, 21, 20, 21, 20, 20, 61, 19, 21, 60, 21, 21, 19, 19, 21, 20, 20, 19, 21, 82, 19, 19, 20, 21, 21, 20, 9, 40, 40, 3, 21, 21, 19, 20, 21, 20, 20, 19, 0, 1, 43, 45, 47, 49, 41, 12, 19, 21, 20, 19, 20, 20, 21, 21, 19, 20, 37, 20, 19, 19, 20, 19, 20, 61, 19, 35, 30, 30, 30, 30, 31, 34, 20, 21, 19, 21, 21, 21, 21, 66, 20, 19, 20, 20, 20, 19, 37, 19, 20, 20, 21, 33, 30, 30, 31, 30, 30, 11, 44, 15, 21, 20, 20, 20, 21, 21, 21, 7, 48, 40, 11, 21, 19, 21, 21, 20, 19, 21, 21, 19, 21, 21, 60, 19, 21, 20, 20, 20, 21, 21, 20, 21, 21, 19, 20, 20, 21, 19, 19, 19, 20, 21, 19, 19, 19, 19, 20, 21, 20, 21, 21, 20, 19, 21, 1, 16, 1, 3, 16, 16, 18, 15, 0, 0, 18, 17, 15, 14, 18, 13, 4, 12, 14, 6, 11, 3, 0, 10, 0, 11, 9, 10, 2, 8, 2, 8, 2, 41, 41, 14, 23, 19, 19, 20, 21, 20, 19, 20, 18, 10, 42, 44, 40, 46, 53, 6, 19, 19, 20, 21, 20, 21, 19, 19, 19, 20, 59, 55, 21, 20, 19, 20, 20, 21, 20, 68, 21, 20, 19, 21, 20, 19, 20, 20, 21, 21, 19, 20, 19, 66, 21, 19, 21, 20, 21, 21, 38, 19, 19, 21, 19, 20, 21, 19, 19, 20, 20, 3, 45, 0, 30, 36, 20, 19, 20, 60, 19, 1, 49, 41, 6, 21, 20, 19, 20, 19, 20, 20, 21, 21, 21, 20, 21, 20, 20, 21, 21, 19, 19, 20, 19, 21, 21, 21, 21, 19, 21, 19, 21, 21, 19, 20, 20, 21, 20, 21, 20, 21, 21, 21, 19, 20, 21, 20, 14, 40, 42, 44, 46, 48, 53, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 50, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 3, 61, 19, 20, 19, 21, 20, 19, 20, 15, 8, 43, 45, 41, 47, 52, 11, 21, 19, 19, 21, 22, 23, 19, 19, 20, 21, 20, 20, 21, 20, 19, 20, 19, 20, 21, 66, 21, 21, 20, 19, 21, 21, 19, 20, 19, 19, 20, 21, 21, 68, 21, 21, 21, 54, 56, 56, 58, 20, 21, 21, 19, 20, 21, 19, 20, 20, 21, 9, 46, 13, 19, 66, 21, 7, 19, 21, 20, 13, 4, 18, 0, 19, 63, 62, 19, 20, 21, 18, 17, 4, 16, 16, 7, 16, 13, 12, 9, 9, 8, 8, 5, 6, 9, 19, 21, 19, 21, 19, 19, 11, 6, 15, 13, 5, 6, 14, 7, 0, 20, 20, 20, 21, 19, 21, 13, 41, 43, 45, 47, 49, 52, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 51, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 17, 36, 21, 20, 21, 20, 21, 7, 1, 12, 11, 42, 44, 46, 48, 40, 9, 4, 15, 21, 21, 21, 60, 21, 19, 20, 19, 19, 21, 21, 21, 19, 20, 19, 20, 19, 66, 21, 19, 20, 21, 19, 21, 19, 21, 20, 20, 19, 61, 19, 66, 19, 21, 19, 21, 19, 21, 20, 20, 21, 21, 21, 20, 19, 5, 4, 9, 7, 15, 47, 6, 20, 67, 19, 16, 20, 19, 21, 11, 14, 13, 17, 20, 21, 21, 21, 19, 20, 13, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 14, 19, 20, 60, 19, 20, 19, 10, 44, 46, 48, 42, 44, 46, 48, 4, 21, 20, 21, 20, 20, 21, 3, 42, 7, 2, 14, 18, 4, 5, 14, 8, 18, 5, 10, 16, 6, 7, 10, 6, 16, 13, 3, 13, 11, 2, 6, 16, 12, 12, 18, 15, 4, 9, 16, 17, 9, 13, 66, 19, 19, 21, 19, 19, 18, 2, 3, 0, 43, 45, 47, 49, 41, 7, 11, 11, 21, 19, 21, 21, 60, 21, 19, 21, 19, 21, 20, 19, 19, 19, 21, 19, 21, 66, 19, 20, 20, 21, 20, 19, 19, 19, 20, 20, 21, 21, 21, 66, 21, 21, 21, 21, 19, 20, 19, 21, 21, 21, 20, 19, 21, 9, 46, 50, 42, 40, 48, 0, 20, 68, 20, 20, 19, 19, 19, 20, 20, 37, 21, 20, 21, 21, 21, 60, 19, 6, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 0, 20, 20, 19, 21, 19, 19, 0, 45, 47, 49, 43, 45, 47, 49, 13, 19, 19, 19, 20, 19, 19, 9, 43, 12, 70, 74, 75, 81, 76, 72, 71, 72, 76, 74, 73, 72, 76, 72, 75, 74, 76, 81, 81, 72, 76, 72, 71, 72, 76, 74, 71, 72, 76, 72, 79, 17, 5, 67, 20, 20, 19, 21, 21, 70, 78, 7, 0, 42, 44, 46, 48, 40, 3, 76, 79, 21, 20, 20, 19, 19, 19, 19, 19, 19, 20, 19, 20, 11, 18, 16, 18, 8, 16, 21, 19, 19, 61, 19, 19, 19, 20, 20, 20, 19, 21, 19, 33, 30, 36, 19, 20, 19, 19, 19, 21, 19, 21, 20, 19, 21, 18, 47, 51, 43, 41, 49, 7, 21, 66, 19, 20, 21, 20, 21, 20, 21, 38, 21, 21, 20, 21, 20, 19, 21, 10, 42, 44, 50, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 14, 21, 21, 19, 21, 20, 19, 7, 40, 53, 42, 46, 48, 40, 42, 5, 20, 60, 19, 19, 19, 21, 16, 44, 10, 20, 20, 19, 37, 21, 20, 21, 21, 19, 21, 21, 19, 19, 19, 21, 21, 19, 37, 37, 21, 19, 19, 20, 19, 20, 20, 21, 19, 19, 20, 21, 11, 14, 68, 19, 60, 19, 19, 20, 20, 19, 8, 15, 43, 45, 47, 49, 41, 17, 19, 19, 21, 21, 61, 20, 21, 21, 20, 19, 21, 19, 21, 20, 15, 13, 8, 18, 13, 17, 19, 19, 20, 20, 21, 20, 19, 21, 19, 19, 20, 19, 19, 21, 21, 66, 20, 21, 19, 21, 20, 19, 19, 60, 20, 19, 21, 12, 48, 40, 42, 44, 46, 12, 31, 34, 19, 20, 20, 19, 19, 21, 20, 37, 20, 21, 21, 19, 21, 19, 20, 6, 43, 45, 51, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 15, 19, 19, 20, 20, 19, 19, 9, 41, 52, 43, 47, 49, 41, 43, 8, 20, 19, 21, 21, 21, 21, 13, 45, 2, 20, 21, 21, 38, 21, 21, 20, 21, 21, 21, 19, 21, 19, 19, 20, 20, 20, 38, 38, 19, 21, 21, 19, 21, 21, 19, 20, 19, 20, 21, 21, 11, 9, 66, 21, 19, 21, 21, 21, 19, 19, 4, 14, 42, 46, 48, 40, 42, 18, 19, 61, 21, 19, 21, 19, 19, 21, 21, 20, 61, 21, 19, 19, 20, 70, 77, 71, 79, 66, 21, 20, 21, 21, 19, 20, 20, 12, 15, 16, 21, 21, 20, 19, 21, 68, 19, 20, 21, 20, 21, 19, 20, 21, 21, 19, 21, 6, 49, 41, 43, 45, 47, 2, 21, 19, 21, 20, 19, 21, 20, 21, 20, 37, 21, 19, 20, 21, 21, 20, 19, 4, 46, 40, 48, 42, 15, 11, 11, 9, 1, 2, 9, 17, 8, 13, 9, 19, 19, 21, 20, 20, 19, 16, 13, 14, 18, 17, 3, 1, 40, 16, 19, 21, 19, 19, 21, 19, 18, 46, 7, 19, 19, 21, 37, 19, 19, 20, 19, 19, 19, 21, 20, 21, 19, 19, 19, 21, 37, 37, 19, 21, 21, 19, 19, 61, 21, 19, 20, 21, 20, 19, 12, 5, 66, 19, 19, 21, 60, 20, 21, 21, 13, 6, 43, 47, 49, 41, 43, 8, 19, 22, 24, 61, 19, 20, 21, 21, 20, 21, 19, 21, 19, 19, 21, 20, 21, 19, 20, 67, 21, 20, 19, 20, 19, 19, 21, 12, 7, 12, 20, 21, 21, 19, 19, 66, 21, 21, 20, 21, 19, 19, 19, 21, 20, 19, 21, 5, 46, 44, 42, 40, 48, 17, 11, 19, 19, 20, 19, 19, 61, 21, 54, 58, 19, 21, 19, 20, 21, 13, 2, 18, 47, 41, 49, 43, 12, 70, 77, 71, 80, 78, 75, 72, 76, 79, 19, 19, 20, 20, 20, 19, 19, 19, 70, 71, 77, 73, 79, 4, 41, 5, 3, 1, 19, 19, 20, 20, 17, 47, 18, 19, 19, 19, 37, 19, 20, 22, 23, 19, 21, 20, 21, 19, 21, 20, 19, 54, 58, 37, 20, 20, 19, 19, 21, 20, 21, 19, 35, 31, 30, 32, 8, 17, 15, 17, 19, 21, 19, 21, 4, 11, 2, 10, 3, 10, 9, 7, 16, 3, 21, 19, 61, 21, 21, 3, 4, 6, 9, 9, 1, 20, 19, 21, 21, 21, 21, 19, 20, 66, 20, 60, 21, 20, 20, 19, 19, 70, 76, 79, 21, 19, 20, 19, 19, 5, 2, 16, 8, 9, 14, 19, 20, 20, 21, 19, 21, 0, 47, 45, 43, 41, 49, 12, 18, 21, 20, 21, 21, 24, 19, 19, 20, 19, 21, 21, 21, 19, 19, 17, 15, 10, 13, 2, 10, 4, 13, 20, 20, 21, 67, 20, 20, 20, 19, 20, 21, 19, 19, 21, 20, 21, 19, 21, 21, 21, 19, 20, 20, 16, 8, 17, 3, 4, 20, 19, 19, 21, 11, 48, 15, 61, 20, 21, 37, 21, 20, 60, 21, 19, 19, 20, 21, 20, 21, 19, 19, 21, 21, 38, 19, 20, 20, 21, 21, 20, 20, 20, 66, 21, 21, 20, 8, 18, 17, 11, 20, 21, 20, 19, 18, 8, 9, 17, 11, 1, 13, 6, 11, 12, 19, 19, 19, 19, 19, 18, 11, 10, 6, 7, 9, 19, 19, 19, 19, 19, 19, 19, 19, 66, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 16, 15, 16, 9, 0, 19, 19, 19, 19, 19, 19, 1, 5, 4, 8, 0, 11, 8, 21, 19, 20, 21, 61, 25, 19, 20, 21, 21, 21, 19, 21, 19, 21, 21, 70, 77, 19, 20, 78, 79, 21, 20, 19, 19, 66, 20, 20, 21, 19, 21, 22, 23, 21, 19, 21, 21, 19, 20, 20, 19, 19, 21, 21, 19, 70, 78, 79, 21, 21, 19, 20, 35, 2, 49, 8, 30, 36, 21, 38, 20, 20, 19, 20, 20, 19, 20, 60, 20, 20, 19, 21, 21, 19, 37, 19, 19, 20, 21, 21, 20, 20, 20, 67, 21, 21, 20, 70, 73, 77, 79, 20, 21, 19, 21, 70, 76, 74, 75, 81, 78, 79, 9, 11, 2, 19, 21, 21, 21, 20, 19, 70, 74, 78, 79, 21, 21, 21, 21, 19, 19, 19, 19, 21, 33, 30, 30, 32, 31, 30, 30, 36, 19, 20, 20, 19, 19, 20, 19, 21, 66, 70, 75, 78, 79, 21, 19, 19, 19, 21, 21, 19, 21, 70, 77, 71, 79, 7, 14, 19, 20, 19, 20, 19, 19, 60, 19, 21, 21, 19, 21, 21, 20, 20, 21, 20, 21, 19, 19, 63, 62, 20, 21, 20, 19, 66, 21, 19, 21, 19, 20, 21, 61, 19, 26, 27, 21, 20, 21, 20, 21, 19, 19, 19, 20, 20, 19, 19, 20, 21, 19, 19, 66, 4, 50, 7, 20, 66, 20, 37, 19, 21, 21, 19, 20, 19, 20, 21, 19, 19, 20, 20, 20, 20, 37, 19, 21, 35, 32, 30, 30, 31, 30, 34, 20, 21, 20, 21, 21, 19, 19, 21, 19, 19, 21, 19, 21, 21, 21, 38, 20, 19, 19, 82, 19, 21, 19, 20, 20, 21, 19, 19, 21, 20, 20, 21, 20, 19, 21, 19, 19, 20, 63, 62, 20, 26, 27, 20, 21, 61, 20, 66, 21, 20, 20, 20, 20, 20, 19, 20, 66, 19, 19, 21, 21, 21, 21, 21, 19, 60, 20, 19, 19, 20, 20, 21, 20, 18, 16, 21, 20, 20, 19, 21, 20, 20, 21, 35, 32, 30, 30, 36, 20, 21, 21, 19, 19, 19, 19, 20, 60, 21, 21, 21, 21, 33, 32, 30, 36, 20, 19, 19, 21, 20, 28, 29, 19, 21, 19, 20, 19, 21, 20, 61, 20, 19, 20, 35, 30, 31, 30, 30, 34, 11, 51, 7, 19, 67, 19, 37, 21, 20, 21, 20, 20, 19, 19, 19, 19, 61, 21, 19, 19, 19, 39, 20, 20, 66, 19, 19, 20, 21, 19, 20, 21, 21, 61, 21, 19, 19, 21, 20, 19, 24, 23, 21, 21, 20, 19, 39, 20, 21, 21, 82, 19, 20, 19, 20, 21, 20, 19, 61, 19, 20, 19, 20, 20, 21, 21, 19, 20, 21, 61, 25, 23, 28, 29, 19, 19, 20, 19, 67, 19, 20, 20, 21, 20, 19, 60, 21, 33, 36, 20, 20, 20, 20, 19, 20, 61, 21, 20, 20, 20, 20, 21, 21, 35, 14, 5, 19, 20, 20, 20, 21, 20, 21, 19, 66, 20, 20, 20, 69, 19, 20, 19, 19, 21, 20, 19, 19, 19, 19, 20, 19, 20, 19, 20, 19, 66, 20, 19, 19, 21, 21, 20, 20, 19, 21, 20, 20, 21, 19, 19, 19, 60, 20, 19, 66, 19, 21, 21, 21, 20, 7, 40, 11, 19, 66, 19, 37, 20, 21, 21, 21, 20, 19, 19, 20, 19, 20, 21, 21, 21, 19, 19, 19, 19, 68, 21, 21, 20, 19, 21, 20, 19, 21, 19, 20, 19, 19, 20, 19, 61, 60, 19, 20, 60, 19, 19, 21, 21, 21, 21, 82, 20, 19, 19, 19, 19, 19, 19, 20, 19, 19, 20, 19, 21, 19, 19, 21, 20, 61, 20, 20, 19, 19, 21, 21, 60, 21, 21, 66, 20, 19, 20, 20, 21, 20, 21, 21, 19, 66, 20, 21, 20, 20, 21, 21, 19, 19, 19, 19, 19, 21, 21, 19, 66, 5, 16, 20, 19, 20, 21, 20, 3, 13, 11, 2, 13, 12, 6, 9, 2, 11, 11, 0, 1, 3, 12, 9, 7, 11, 2, 11, 17, 6, 16, 1, 13, 1, 7, 2, 13, 7, 6, 18, 18, 7, 0, 13, 15, 5, 13, 13, 2, 5, 1, 14, 1, 13, 4, 13, 7, 18, 41, 12, 20, 66, 19, 37, 21, 20, 21, 10, 14, 9, 2, 15, 18, 14, 5, 9, 17, 3, 10, 17, 16, 0, 11, 0, 1, 5, 7, 12, 11, 0, 17, 5, 16, 4, 16, 14, 7, 12, 12, 14, 0, 10, 12, 7, 3, 6, 5, 8, 5, 18, 15, 16, 12, 7, 4, 7, 5, 18, 2, 18, 10, 3, 16, 18, 16, 8, 15, 0, 0, 16, 1, 17, 0, 12, 4, 4, 8, 18, 17, 6, 7, 11, 12, 18, 2, 13, 12, 0, 6, 15, 7, 3, 7, 15, 16, 2, 6, 5, 5, 16, 5, 9, 9, 30, 36, 20, 20, 19, 15, 5, 11, 17, 9, 14, 10, 6, 5, 7, 11, 9, 15, 13, 3, 11, 16, 1, 15, 13, 0, 5, 6, 11, 11, 17, 13, 14, 13, 17, 10, 2, 0, 2, 7, 16, 8, 9, 12, 6, 2, 0, 16, 10, 5, 9, 17, 6, 11, 4, 42, 6, 21, 66, 19, 59, 55, 20, 19, 5, 44, 46, 40, 48, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 4, 6, 10, 6, 9, 4, 2, 12, 11, 1, 1, 11, 12, 14, 1, 7, 1, 8, 2, 5, 14, 10, 2, 9, 16, 10, 11, 8, 14, 7, 11, 8, 3, 14, 3, 9, 14, 11, 14, 17, 18, 4, 7, 10, 7, 9, 18, 17, 12, 15, 17, 7, 14, 16, 8, 10, 18, 0, 1, 2, 3, 5, 7, 17, 9, 12, 13, 11, 7, 48, 42, 46, 40, 44, 48, 42, 46, 40, 9, 20, 66, 19, 20, 21, 19, 70, 75, 80, 73, 77, 71, 80, 73, 78, 73, 74, 73, 76, 73, 72, 81, 77, 75, 72, 73, 78, 71, 72, 80, 76, 71, 72, 73, 78, 75, 74, 73, 76, 73, 81, 73, 78, 73, 74, 73, 77, 71, 80, 75, 76, 71, 81, 79, 1, 43, 8, 19, 69, 20, 19, 19, 19, 20, 10, 45, 47, 41, 49, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 12, 70, 75, 77, 81, 71, 72, 76, 73, 72, 73, 78, 74, 73, 72, 76, 72, 75, 72, 81, 78, 72, 71, 72, 77, 74, 73, 72, 76, 81, 71, 72, 77, 72, 73, 72, 78, 72, 81, 73, 76, 74, 75, 72, 77, 72, 73, 81, 78, 72, 75, 80, 76, 72, 73, 72, 77, 74, 71, 72, 76, 80, 71, 72, 78, 72, 71, 79, 15, 49, 43, 47, 41, 45, 49, 43, 47, 41, 0, 19, 68, 21, 21, 19, 19, 19, 61, 67, 19, 21, 21, 66, 20, 21, 21, 19, 20, 20, 19, 19, 37, 20, 21, 19, 21, 21, 21, 20, 69, 19, 21, 21, 20, 21, 20, 20, 19, 21, 19, 37, 19, 20, 20, 21, 20, 20, 21, 67, 19, 19, 21, 37, 21, 15, 44, 13, 19, 68, 21, 63, 62, 19, 20, 9, 46, 48, 7, 7, 18, 17, 16, 10, 3, 6, 16, 10, 2, 0, 18, 8, 14, 19, 19, 19, 38, 20, 20, 20, 20, 19, 20, 21, 19, 21, 21, 21, 20, 21, 20, 37, 19, 20, 21, 20, 20, 20, 20, 19, 21, 37, 19, 21, 19, 19, 20, 19, 21, 20, 37, 19, 19, 20, 21, 20, 19, 20, 20, 37, 19, 20, 19, 68, 19, 21, 19, 20, 19, 20, 20, 21, 19, 67, 20, 19, 19, 19, 19, 21, 3, 40, 44, 48, 53, 46, 40, 44, 48, 42, 13, 19, 67, 21, 19, 21, 19, 20, 21, 66, 19, 19, 21, 68, 19, 19, 21, 19, 21, 20, 19, 21, 37, 19, 21, 19, 20, 19, 20, 20, 33, 30, 30, 30, 32, 31, 30, 30, 30, 32, 30, 65, 30, 30, 30, 30, 31, 32, 30, 34, 19, 19, 19, 38, 20, 10, 45, 16, 19, 66, 20, 61, 19, 21, 21, 13, 47, 49, 11, 70, 71, 76, 72, 75, 72, 77, 72, 71, 74, 78, 73, 81, 79, 19, 19, 21, 37, 21, 20, 21, 21, 20, 20, 21, 20, 20, 20, 21, 20, 21, 21, 38, 20, 19, 19, 20, 20, 20, 20, 19, 19, 38, 21, 21, 19, 63, 62, 21, 19, 19, 38, 21, 21, 21, 20, 19, 19, 21, 19, 37, 20, 20, 19, 33, 30, 31, 30, 30, 30, 30, 32, 30, 30, 34, 20, 20, 19, 21, 20, 20, 6, 41, 45, 49, 52, 47, 41, 45, 49, 43, 14, 20, 66, 20, 19, 19, 20, 21, 20, 66, 20, 20, 19, 66, 21, 19, 21, 20, 19, 19, 20, 19, 38, 20, 19, 21, 20, 21, 20, 20, 21, 20, 19, 20, 20, 21, 19, 21, 20, 20, 21, 37, 19, 20, 19, 20, 20, 20, 20, 20, 61, 19, 19, 37, 19, 12, 46, 9, 21, 66, 21, 20, 21, 20, 21, 5, 40, 42, 1, 21, 19, 20, 19, 19, 21, 19, 21, 21, 19, 21, 19, 38, 20, 21, 21, 19, 37, 19, 21, 20, 20, 21, 21, 19, 19, 20, 20, 21, 19, 19, 20, 37, 21, 21, 21, 20, 20, 20, 19, 20, 20, 37, 21, 21, 19, 19, 19, 21, 20, 21, 37, 20, 19, 20, 21, 19, 21, 21, 21, 38, 21, 19, 21, 21, 19, 21, 21, 19, 19, 20, 21, 19, 19, 21, 19, 19, 19, 19, 19, 19, 3, 7, 2, 8, 7, 10, 6, 6, 10, 11, 10, 17, 11, 0, 16, 3, 16, 17, 4, 8, 18, 8, 12, 11, 3, 5, 21, 19, 20, 20, 20, 19, 59, 57, 55, 19, 19, 20, 21, 19, 21, 20, 21, 19, 19, 21, 19, 21, 21, 20, 20, 37, 21, 20, 21, 20, 21, 19, 19, 21, 20, 21, 21, 37, 35, 14, 47, 12, 30, 34, 19, 20, 20, 0, 9, 6, 41, 43, 2, 21, 21, 19, 21, 20, 20, 19, 19, 20, 19, 20, 19, 37, 19, 20, 20, 19, 38, 21, 19, 61, 19, 21, 19, 21, 20, 21, 20, 20, 19, 21, 20, 37, 19, 20, 19, 21, 19, 19, 19, 19, 19, 37, 20, 20, 21, 21, 20, 21, 21, 20, 37, 19, 21, 20, 19, 20, 20, 19, 21, 37, 19, 19, 19, 19, 20, 20, 60, 21, 19, 19, 19, 19, 19, 21, 21, 22, 23, 21, 19, 20, 19, 20, 21, 21, 21, 37, 19, 66, 21, 6, 0, 8, 15, 18, 7, 0, 15, 6, 6, 15, 40, 42, 44, 46, 48, 10, 21, 20, 20, 21, 21, 61, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 61, 20, 20, 19, 19, 21, 20, 19, 38, 20, 21, 20, 20, 19, 21, 21, 19, 20, 20, 20, 38, 66, 6, 48, 5, 21, 20, 19, 21, 19, 6, 16, 1, 10, 7, 4, 21, 21, 21, 20, 60, 20, 19, 21, 20, 21, 21, 20, 37, 21, 20, 19, 21, 37, 21, 19, 19, 19, 19, 19, 19, 20, 21, 19, 21, 19, 21, 20, 38, 20, 21, 21, 19, 19, 21, 21, 19, 21, 38, 20, 19, 20, 21, 21, 21, 20, 19, 37, 20, 21, 20, 21, 21, 19, 20, 19, 39, 20, 20, 21, 21, 19, 21, 21, 19, 21, 20, 21, 20, 21, 19, 19, 61, 19, 21, 19, 21, 20, 21, 19, 19, 19, 38, 21, 33, 30, 3, 9, 9, 6, 17, 14, 2, 14, 15, 4, 6, 41, 43, 45, 47, 49, 3, 21, 21, 21, 21, 20, 19, 20, 21, 21, 21, 20, 20, 20, 19, 20, 19, 19, 21, 24, 23, 19, 20, 20, 21, 19, 37, 19, 20, 21, 20, 19, 19, 20, 19, 21, 21, 21, 39, 69, 1, 49, 6, 20, 19, 21, 20, 19, 19, 19, 20, 20, 37, 19, 19, 20, 21, 21, 20, 19, 20, 21, 19, 21, 20, 19, 38, 19, 19, 20, 21, 37, 21, 20, 21, 19, 0, 8, 20, 21, 21, 20, 19, 20, 21, 54, 58, 20, 21, 19, 20, 60, 20, 19, 19, 20, 37, 21, 60, 19, 19, 21, 19, 19, 19, 59, 55, 20, 20, 20, 21, 20, 19, 19, 20, 19, 21, 20, 19, 21, 19, 20, 19, 19, 21, 20, 21, 19, 20, 20, 60, 19, 21, 19, 19, 20, 21, 21, 21, 54, 58, 19, 21, 20, 4, 5, 70, 73, 74, 77, 80, 75, 79, 14, 5, 48, 46, 44, 42, 40, 8, 21, 19, 21, 20, 21, 21, 21, 21, 20, 21, 20, 21, 19, 19, 21, 20, 19, 22, 25, 20, 19, 21, 20, 21, 21, 37, 19, 21, 20, 21, 21, 20, 21, 20, 19, 20, 20, 20, 66, 3, 40, 15, 21, 21, 21, 19, 19, 19, 21, 20, 19, 38, 20, 19, 19, 20, 19, 19, 19, 21, 20, 20, 21, 20, 54, 58, 19, 19, 21, 19, 37, 20, 19, 21, 21, 17, 6, 21, 19, 21, 19, 20, 19, 21, 20, 19, 20, 19, 20, 19, 20, 19, 20, 20, 20, 37, 21, 19, 21, 21, 20, 20, 21, 19, 21, 21, 19, 19, 21, 20, 19, 19, 20, 0, 4, 2, 15, 16, 16, 19, 20, 21, 20, 20, 21, 20, 21, 20, 19, 20, 20, 19, 19, 61, 21, 19, 20, 20, 20, 21, 21, 19, 21, 8, 4, 19, 20, 20, 20, 33, 30, 30, 11, 14, 49, 47, 45, 43, 41, 7, 21, 19, 60, 19, 20, 21, 20, 21, 21, 20, 21, 19, 19, 19, 20, 20, 60, 21, 19, 19, 19, 21, 20, 21, 20, 38, 60, 19, 20, 19, 20, 20, 20, 19, 19, 0, 3, 1, 9, 17, 41, 14, 21, 20, 61, 19, 21, 20, 21, 21, 21, 37, 20, 20, 19, 20, 21, 19, 61, 21, 19, 20, 21, 21, 19, 19, 19, 20, 19, 21, 38, 20, 20, 21, 20, 19, 21, 21, 20, 20, 19, 21, 21, 20, 21, 19, 20, 20, 20, 19, 19, 21, 20, 3, 1, 1, 15, 9, 19, 19, 21, 20, 19, 21, 21, 20, 19, 20, 20, 19, 21, 20, 19, 8, 5, 17, 15, 14, 3, 20, 20, 19, 20, 20, 18, 19, 21, 20, 19, 20, 21, 19, 19, 20, 20, 19, 19, 21, 19, 20, 35, 32, 30, 17, 12, 19, 20, 20, 21, 19, 20, 19, 16, 9, 40, 42, 44, 46, 48, 2, 20, 21, 19, 20, 21, 19, 20, 19, 20, 19, 21, 19, 19, 19, 21, 19, 20, 20, 20, 21, 20, 20, 20, 21, 20, 37, 21, 21, 21, 20, 19, 20, 21, 19, 21, 15, 42, 40, 44, 42, 44, 2, 19, 21, 21, 19, 20, 61, 19, 20, 20, 37, 19, 19, 21, 20, 21, 19, 19, 20, 20, 19, 19, 21, 20, 21, 21, 19, 19, 20, 37, 20, 20, 19, 19, 21, 20, 20, 20, 20, 20, 21, 20, 20, 19, 19, 20, 19, 19, 20, 19, 20, 21, 10, 13, 17, 6, 11, 20, 21, 19, 20, 20, 19, 19, 20, 19, 19, 63, 62, 19, 20, 19, 20, 19, 20, 19, 19, 19, 19, 21, 20, 19, 19, 10, 20, 20, 18, 19, 20, 21, 21, 21, 20, 20, 19, 19, 20, 19, 21, 66, 20, 21, 12, 18, 21, 21, 19, 19, 19, 19, 20, 1, 10, 41, 43, 45, 47, 49, 9, 19, 21, 21, 1, 13, 6, 11, 11, 14, 10, 13, 18, 14, 14, 5, 11, 19, 21, 19, 19, 19, 21, 21, 21, 20, 37, 21, 19, 20, 19, 11, 19, 19, 21, 19, 6, 43, 41, 45, 43, 45, 14, 15, 5, 21, 21, 20, 20, 21, 19, 54, 58, 20, 19, 19, 21, 20, 20, 21, 19, 20, 19, 19, 20, 20, 19, 19, 21, 21, 21, 37, 19, 19, 20, 19, 21, 19, 20, 63, 62, 19, 20, 21, 19, 1, 11, 4, 21, 20, 19, 21, 19, 19, 21, 19, 37, 20, 19, 21, 21, 19, 21, 20, 19, 20, 21, 21, 20, 21, 20, 21, 20, 19, 21, 19, 21, 21, 21, 21, 21, 19, 19, 19, 21, 19, 21, 21, 17, 19, 20, 21, 19, 21, 19, 63, 62, 21, 19, 20, 21, 66, 21, 21, 16, 13, 20, 21, 19, 19, 19, 21, 20, 7, 17, 48, 46, 44, 42, 40, 10, 19, 19, 20, 17, 12, 8, 9, 10, 14, 16, 14, 5, 9, 10, 3, 15, 19, 21, 20, 19, 20, 21, 19, 54, 57, 58, 20, 21, 21, 19, 16, 19, 19, 21, 21, 11, 46, 48, 40, 46, 48, 5, 11, 18, 20, 21, 19, 19, 21, 21, 21, 21, 19, 20, 20, 19, 20, 21, 21, 21, 19, 20, 21, 19, 20, 20, 21, 19, 19, 19, 38, 19, 19, 20, 21, 21, 19, 20, 19, 21, 19, 20, 20, 20, 17, 18, 15, 21, 20, 19, 20, 19, 20, 19, 20, 37, 20, 21, 20, 21, 19, 19, 21, 19, 9, 11, 6, 19, 21, 21, 19, 61, 21, 21, 21, 21, 19, 21, 21, 19, 20, 20, 20, 19, 21, 20, 20, 19, 20, 19, 19, 20, 20, 19, 20, 20, 20, 20, 21, 20, 68, 20, 19, 15, 1, 19, 21, 19, 19, 20, 3, 8, 17, 14, 49, 47, 45, 43, 41, 5, 19, 19, 20, 21, 70, 72, 71, 77, 73, 74, 73, 78, 71, 81, 79, 19, 20, 20, 19, 19, 19, 19, 19, 21, 19, 20, 21, 19, 21, 19, 20, 19, 19, 20, 19, 7, 47, 49, 41, 47, 49, 6, 19, 20, 21, 21, 19, 21, 20, 19, 20, 19, 21, 21, 19, 21, 20, 20, 20, 19, 20, 0, 17, 8, 13, 16, 12, 13, 20, 21, 37, 21, 19, 20, 61, 19, 19, 19, 19, 21, 20, 19, 19, 21, 21, 19, 21, 19, 20, 19, 21, 20, 20, 21, 21, 37, 19, 20, 19, 20, 20, 20, 20, 21, 14, 0, 2, 21, 19, 20, 20, 19, 19, 21, 21, 19, 20, 19, 19, 21, 21, 19, 20, 21, 20, 21, 20, 20, 19, 19, 20, 11, 16, 3, 10, 8, 18, 6, 9, 12, 4, 4, 1, 12, 15, 21, 19, 19, 21, 20, 0, 14, 11, 2, 40, 42, 44, 46, 48, 10, 21, 20, 20, 19, 21, 20, 20, 20, 20, 20, 21, 20, 20, 38, 21, 19, 19, 19, 19, 21, 19, 20, 20, 21, 20, 20, 20, 19, 19, 21, 20, 21, 19, 21, 20, 16, 42, 44, 46, 42, 40, 12, 20, 19, 20, 21, 19, 21, 19, 20, 21, 20, 60, 21, 20, 19, 19, 21, 21, 19, 20, 7, 14, 17, 15, 0, 13, 13, 21, 20, 37, 21, 20, 21, 21, 21, 20, 21, 20, 19, 21, 19, 20, 21, 21, 20, 21, 20, 21, 63, 62, 20, 19, 21, 21, 37, 19, 21, 20, 19, 21, 21, 21, 20, 20, 20, 20, 19, 20, 21, 19, 20, 21, 21, 20, 20, 20, 20, 19, 20, 21, 21, 21, 19, 21, 21, 20, 21, 20, 20, 19, 0, 46, 42, 44, 46, 48, 40, 42, 44, 50, 40, 46, 42, 8, 19, 60, 20, 20, 21, 20, 70, 77, 1, 41, 43, 45, 47, 49, 7, 20, 21, 21, 60, 20, 21, 21, 20, 21, 21, 21, 19, 19, 37, 19, 61, 19, 19, 21, 20, 19, 20, 21, 21, 19, 19, 19, 21, 19, 21, 35, 30, 32, 32, 30, 18, 43, 45, 47, 43, 41, 14, 30, 36, 20, 21, 19, 20, 21, 19, 20, 21, 21, 21, 22, 23, 21, 19, 20, 21, 19, 19, 19, 20, 21, 19, 19, 20, 19, 21, 38, 21, 21, 21, 21, 20, 21, 21, 21, 20, 19, 21, 20, 19, 20, 20, 19, 21, 21, 61, 20, 19, 20, 21, 20, 37, 19, 19, 20, 21, 63, 62, 61, 19, 19, 21, 20, 19, 19, 20, 19, 21, 20, 20, 21, 20, 20, 20, 19, 19, 21, 22, 23, 20, 21, 19, 21, 20, 19, 19, 21, 2, 47, 43, 45, 47, 49, 41, 43, 45, 51, 41, 47, 43, 15, 20, 19, 19, 19, 20, 20, 21, 19, 1, 48, 46, 44, 42, 40, 9, 31, 30, 36, 19, 20, 21, 19, 19, 20, 20, 19, 20, 21, 37, 63, 62, 19, 19, 20, 21, 20, 20, 21, 20, 21, 21, 20, 20, 21, 20, 66, 20, 19, 20, 21, 9, 48, 40, 50, 44, 46, 10, 20, 66, 19, 19, 20, 20, 20, 19, 21, 20, 19, 20, 19, 60, 19, 19, 19, 20, 21, 20, 21, 19, 19, 19, 19, 19, 21, 19, 37, 20, 19, 20, 20, 21, 19, 19, 19, 19, 19, 21, 19, 20, 19, 19, 19, 19, 19, 21, 21, 20, 20, 20, 21, 37, 21, 19, 19, 22, 25, 19, 19, 19, 21, 21, 20, 19, 20, 19, 21, 21, 19, 19, 20, 21, 21, 20, 20, 20, 21, 60, 19, 21, 20, 20, 19, 19, 21, 20, 20, 9, 40, 2, 8, 6, 8, 1, 1, 0, 6, 1, 0, 12, 7, 19, 20, 20, 21, 21, 20, 19, 20, 7, 49, 47, 45, 43, 41, 11, 21, 19, 66, 20, 19, 20, 21, 20, 20, 20, 21, 21, 19, 38, 20, 19, 21, 20, 14, 17, 13, 11, 10, 11, 10, 20, 19, 19, 20, 19, 66, 21, 60, 19, 19, 15, 49, 41, 51, 45, 47, 16, 21, 66, 60, 19, 10, 8, 7, 9, 7, 10, 17, 11, 15, 19, 20, 19, 20, 21, 21, 21, 21, 19, 20, 19, 21, 21, 20, 19, 37, 19, 19, 21, 20, 2, 15, 0, 18, 0, 9, 10, 20, 21, 20, 19, 20, 20, 20, 19, 21, 21, 19, 21, 19, 37, 21, 19, 60, 20, 20, 21, 21, 21, 20, 20, 20, 19, 20, 21, 20, 21, 20, 21, 21, 20, 20, 21, 20, 20, 21, 19, 20, 20, 19, 20, 21, 20, 21, 19, 21, 6, 41, 5, 70, 74, 71, 75, 77, 72, 71, 81, 79, 1, 16, 20, 20, 19, 21, 19, 60, 21, 21, 3, 40, 53, 44, 46, 48, 3, 21, 21, 67, 20, 19, 19, 19, 19, 21, 19, 21, 19, 19, 37, 20, 20, 20, 21, 5, 12, 15, 11, 11, 5, 10, 20, 21, 21, 21, 35, 34, 19, 21, 26, 27, 4, 42, 44, 46, 48, 40, 13, 21, 67, 21, 20, 8, 10, 2, 4, 13, 6, 18, 10, 5, 21, 19, 21, 19, 21, 20, 19, 19, 21, 20, 19, 54, 56, 56, 56, 58, 60, 19, 19, 20, 7, 4, 12, 8, 13, 14, 16, 21, 19, 21, 19, 21, 21, 21, 20, 20, 19, 20, 54, 56, 58, 19, 20, 20, 19, 21, 20, 60, 21, 19, 21, 21, 20, 19, 20, 19, 20, 20, 19, 19, 19, 20, 21, 19, 20, 19, 19, 19, 61, 21, 21, 19, 19, 21, 20, 21, 5, 5, 13, 21, 19, 21, 20, 19, 19, 21, 37, 35, 16, 3, 20, 20, 19, 16, 56, 57, 56, 56, 3, 41, 52, 45, 47, 49, 3, 20, 19, 68, 20, 21, 19, 21, 20, 21, 19, 20, 21, 19, 37, 20, 20, 19, 21, 20, 70, 74, 77, 73, 79, 19, 19, 20, 21, 20, 66, 22, 23, 21, 28, 29, 18, 43, 45, 47, 49, 41, 8, 21, 66, 19, 21, 20, 70, 77, 73, 74, 72, 78, 79, 19, 20, 19, 19, 19, 19, 20, 21, 20, 20, 20, 21, 20, 19, 19, 19, 19, 19, 21, 21, 21, 19, 70, 74, 77, 71, 79, 19, 20, 20, 20, 20, 21, 21, 19, 20, 20, 19, 20, 21, 19, 21, 21, 19, 19, 21, 19, 19, 19, 21, 20, 19, 19, 21, 21, 20, 20, 21, 20, 20, 60, 19, 21, 21, 20, 21, 19, 20, 21, 19, 21, 21, 19, 20, 20, 21, 21, 19, 82, 19, 20, 20, 61, 21, 20, 19, 21, 38, 66, 1, 1, 20, 20, 21, 5, 20, 21, 20, 20, 12, 48, 46, 44, 42, 40, 9, 21, 20, 66, 21, 20, 20, 21, 21, 20, 22, 23, 19, 21, 38, 19, 21, 19, 19, 21, 20, 21, 19, 21, 19, 20, 20, 21, 19, 19, 69, 20, 60, 7, 3, 6, 8, 48, 40, 42, 42, 44, 5, 21, 33, 30, 36, 21, 19, 20, 21, 20, 19, 20, 21, 20, 19, 19, 21, 19, 21, 21, 19, 19, 20, 21, 21, 19, 21, 21, 19, 19, 20, 20, 24, 62, 19, 19, 20, 21, 19, 19, 21, 21, 21, 19, 19, 20, 20, 19, 19, 21, 21, 20, 20, 20, 19, 19, 19, 21, 21, 20, 19, 20, 21, 19, 20, 21, 20, 19, 20, 21, 20, 20, 19, 19, 63, 62, 19, 21, 21, 20, 20, 20, 20, 20, 19, 19, 20, 19, 21, 20, 21, 82, 20, 21, 19, 60, 20, 21, 20, 19, 39, 67, 14, 1, 19, 21, 20, 38, 21, 19, 21, 19, 9, 49, 47, 45, 43, 41, 3, 30, 30, 34, 19, 20, 21, 19, 20, 20, 21, 61, 21, 21, 39, 20, 20, 20, 19, 21, 21, 19, 21, 19, 21, 20, 20, 60, 19, 20, 68, 35, 30, 11, 48, 14, 42, 49, 41, 43, 43, 45, 8, 36, 21, 21, 66, 20, 21, 21, 19, 20, 19, 20, 19, 20, 20, 21, 21, 60, 21, 21, 20, 21, 20, 21, 19, 21, 21, 19, 20, 21, 19, 61, 25, 60, 21, 21, 19, 19, 21, 21, 21, 20, 20, 20, 19, 20, 60, 19, 19, 20, 21, 20, 21, 20, 19, 20, 19, 19, 19, 19, 21, 26, 27, 19, 19, 21, 20, 21, 21, 20, 21, 19, 19, 21, 61, 21, 20, 21, 20, 21, 19, 19, 21, 20, 19, 20, 21, 21, 20, 20, 20, 82, 19, 21, 19, 20, 20, 20, 20, 21, 19, 66, 16, 0, 20, 19, 19, 37, 20, 21, 19, 20, 3, 40, 42, 44, 46, 48, 2, 19, 19, 19, 20, 21, 21, 20, 21, 21, 21, 20, 20, 20, 21, 19, 20, 21, 21, 21, 19, 20, 20, 19, 20, 20, 19, 20, 20, 21, 66, 66, 21, 15, 49, 48, 43, 44, 40, 48, 46, 48, 6, 66, 19, 20, 68, 21, 21, 20, 19, 21, 19, 21, 20, 20, 20, 20, 21, 19, 19, 21, 20, 20, 20, 19, 19, 20, 19, 21, 20, 20, 61, 19, 20, 19, 21, 20, 19, 63, 62, 19, 20, 19, 20, 19, 20, 21, 19, 21, 21, 20, 19, 19, 21, 19, 20, 21, 21, 19, 20, 19, 21, 28, 29, 19, 20, 20, 19, 19, 20, 21, 20, 19, 20, 20, 20, 21, 20, 19, 20, 21, 21, 8, 1, 2, 6, 9, 16, 9, 6, 4, 17, 9, 11, 6, 1, 14, 3, 6, 13, 13, 16, 5, 0, 4, 19, 21, 20, 37, 20, 19, 19, 20, 3, 41, 43, 45, 47, 49, 11, 20, 21, 19, 21, 20, 19, 21, 19, 20, 9, 6, 13, 16, 9, 18, 1, 14, 3, 16, 11, 18, 18, 7, 13, 6, 14, 0, 6, 11, 4, 15, 2, 3, 3, 49, 15, 45, 41, 49, 47, 49, 4, 18, 16, 4, 12, 8, 17, 11, 3, 10, 8, 16, 7, 9, 5, 4, 16, 17, 9, 0, 9, 7, 9, 1, 12, 3, 4, 6, 6, 13, 3, 15, 0, 2, 10, 4, 18, 9, 1, 8, 10, 16, 8, 16, 6, 8, 15, 0, 13, 16, 14, 2, 8, 15, 12, 18, 21, 21, 19, 19, 19, 19, 19, 19, 19, 19, 20, 21, 20, 19, 20, 21, 19, 20, 21, 20, 20, 21, 20, 20, 19, 9, 42, 40, 44, 46, 48, 50, 46, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 0, 19, 21, 19, 38, 20, 19, 19, 21, 1, 16, 14, 5, 11, 5, 14, 21, 19, 21, 19, 61, 20, 21, 20, 20, 12, 42, 40, 42, 44, 46, 48, 50, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 40, 42, 44, 46, 48, 40, 42, 44, 50, 48, 40, 44, 42, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 46, 44, 44, 46, 40, 42, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 53, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 5, 11, 12, 13, 6, 8, 17, 9, 16, 5, 0, 19, 21, 21, 20, 19, 19, 21, 19, 14, 4, 13, 18, 6, 11, 4, 5, 43, 41, 45, 47, 49, 51, 47, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 3, 15, 19, 19, 37, 21, 19, 21, 19, 19, 70, 74, 77, 81, 79, 19, 21, 21, 21, 21, 20, 20, 21, 20, 35, 18, 43, 41, 43, 45, 47, 49, 51, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 41, 43, 45, 47, 49, 41, 43, 45, 51, 49, 41, 45, 43, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 47, 45, 45, 47, 41, 43, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 52, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 42, 44, 46, 48, 10, 9, 5, 0, 7, 10, 5, 20, 20, 19, 20, 20, 21, 20, 20, 17, 8, 12, 14, 17, 5, 14, 15, 7, 8, 1, 16, 18, 18, 17, 16, 13, 17, 2, 2, 17, 9, 3, 11, 17, 5, 15, 3, 10, 1, 17, 20, 21, 37, 21, 19, 63, 62, 20, 20, 19, 19, 38, 19, 19, 20, 21, 60, 21, 19, 20, 21, 21, 66, 7, 40, 8, 9, 12, 6, 15, 3, 1, 4, 0, 4, 18, 44, 53, 40, 42, 44, 3, 1, 0, 11, 17, 12, 12, 8, 5, 11, 1, 8, 12, 9, 17, 6, 16, 17, 12, 1, 11, 17, 8, 8, 13, 3, 8, 18, 48, 40, 42, 46, 48, 17, 7, 17, 0, 15, 11, 12, 9, 8, 0, 0, 14, 2, 3, 14, 2, 7, 8, 8, 15, 5, 2, 1, 12, 12, 11, 3, 16, 0, 1, 5, 15, 2, 10, 15, 1, 43, 45, 47, 49, 12, 70, 71, 74, 78, 79, 19, 19, 21, 19, 21, 20, 21, 21, 21, 20, 70, 76, 75, 80, 73, 77, 73, 72, 71, 78, 73, 74, 73, 76, 73, 72, 71, 78, 73, 81, 73, 77, 73, 74, 75, 76, 79, 13, 3, 19, 21, 21, 38, 19, 21, 61, 20, 19, 21, 21, 19, 37, 19, 19, 20, 20, 21, 19, 19, 20, 21, 14, 13, 11, 41, 11, 70, 81, 76, 71, 74, 73, 76, 75, 79, 6, 45, 52, 41, 43, 45, 16, 70, 80, 76, 73, 74, 73, 77, 73, 72, 73, 78, 75, 72, 71, 76, 73, 72, 73, 77, 73, 74, 71, 76, 80, 81, 79, 6, 49, 41, 43, 47, 49, 9, 70, 80, 72, 77, 73, 72, 73, 78, 73, 74, 73, 76, 80, 81, 73, 76, 73, 72, 75, 77, 73, 72, 73, 76, 81, 72, 75, 78, 73, 74, 73, 77, 73, 79, 4, 40, 42, 46, 44, 2, 19, 21, 21, 19, 20, 21, 19, 20, 21, 20, 21, 20, 19, 20, 20, 21, 19, 19, 68, 19, 20, 21, 21, 19, 21, 19, 21, 19, 19, 21, 21, 20, 19, 20, 37, 21, 19, 20, 20, 20, 20, 20, 12, 17, 20, 21, 21, 37, 20, 24, 62, 19, 21, 21, 21, 19, 59, 56, 57, 55, 19, 21, 19, 21, 20, 21, 0, 40, 42, 44, 17, 36, 37, 20, 21, 21, 19, 19, 20, 19, 10, 46, 48, 44, 46, 48, 18, 21, 66, 20, 20, 19, 21, 19, 21, 21, 19, 19, 19, 21, 21, 21, 19, 19, 21, 20, 20, 21, 19, 20, 33, 65, 36, 9, 42, 40, 42, 40, 42, 15, 21, 67, 19, 21, 19, 20, 21, 19, 19, 20, 20, 19, 67, 38, 21, 21, 21, 20, 20, 21, 19, 20, 20, 21, 38, 19, 21, 21, 20, 19, 20, 19, 20, 19, 3, 41, 43, 47, 45, 8, 21, 19, 21, 19, 20, 20, 20, 20, 21, 20, 19, 19, 19, 21, 19, 20, 35, 30, 34, 21, 61, 21, 19, 19, 21, 20, 21, 20, 20, 21, 20, 19, 20, 19, 37, 21, 19, 21, 20, 19, 35, 30, 1, 15, 20, 21, 19, 37, 61, 25, 21, 19, 20, 19, 20, 21, 21, 20, 19, 19, 19, 19, 20, 11, 5, 14, 14, 41, 43, 45, 7, 66, 37, 21, 21, 21, 21, 21, 19, 19, 15, 47, 49, 45, 47, 49, 4, 30, 34, 21, 20, 19, 19, 20, 20, 21, 21, 21, 20, 20, 19, 21, 21, 20, 20, 21, 20, 61, 21, 20, 20, 38, 33, 17, 43, 41, 43, 41, 43, 0, 30, 34, 21, 19, 19, 60, 21, 20, 21, 21, 19, 19, 66, 37, 19, 19, 20, 20, 19, 19, 19, 19, 19, 19, 37, 20, 19, 19, 19, 21, 21, 20, 19, 19, 14, 48, 40, 44, 42, 16, 20, 21, 20, 19, 19, 19, 19, 19, 20, 21, 21, 21, 63, 62, 20, 20, 66, 19, 21, 21, 21, 20, 21, 20, 20, 21, 19, 20, 20, 19, 20, 21, 21, 21, 37, 21, 19, 20, 61, 20, 66, 21, 5, 0, 21, 21, 19, 38, 19, 21, 21, 21, 12, 2, 17, 21, 20, 19, 21, 19, 20, 19, 21, 15, 6, 5, 13, 8, 14, 7, 2, 34, 37, 20, 20, 21, 60, 21, 19, 21, 18, 9, 11, 10, 12, 12, 9, 21, 20, 21, 21, 21, 63, 62, 21, 21, 19, 19, 19, 21, 20, 19, 20, 21, 21, 21, 19, 19, 19, 21, 21, 59, 56, 10, 44, 48, 46, 53, 42, 4, 21, 20, 20, 19, 19, 19, 20, 21, 19, 35, 30, 31, 34, 37, 20, 21, 19, 21, 20, 20, 19, 20, 19, 21, 37, 19, 21, 19, 21, 19, 19, 19, 20, 20, 8, 49, 41, 45, 43, 12, 20, 19, 19, 19, 60, 21, 20, 20, 20, 7, 14, 8, 1, 18, 10, 15, 4, 3, 15, 5, 17, 21, 21, 19, 20, 19, 21, 21, 20, 19, 21, 21, 19, 20, 37, 19, 19, 20, 20, 21, 67, 21, 8, 1, 20, 19, 20, 37, 19, 19, 35, 30, 3, 40, 1, 36, 19, 20, 20, 20, 21, 21, 20, 20, 21, 20, 21, 21, 7, 8, 9, 20, 37, 19, 21, 20, 20, 21, 20, 19, 20, 70, 81, 77, 75, 79, 20, 21, 20, 21, 21, 61, 25, 21, 21, 20, 21, 20, 19, 21, 20, 22, 23, 20, 21, 19, 21, 21, 21, 20, 20, 21, 19, 6, 45, 49, 47, 52, 43, 17, 20, 19, 20, 21, 21, 21, 20, 21, 19, 66, 21, 20, 19, 38, 21, 20, 20, 60, 20, 19, 19, 21, 19, 19, 38, 19, 20, 20, 20, 19, 20, 19, 20, 20, 18, 12, 4, 16, 7, 9, 19, 21, 24, 23, 19, 21, 19, 21, 21, 6, 48, 40, 42, 44, 46, 48, 50, 46, 40, 42, 13, 19, 19, 20, 19, 20, 21, 20, 20, 20, 20, 20, 20, 19, 37, 21, 19, 20, 20, 20, 66, 19, 2, 8, 19, 21, 21, 37, 19, 19, 66, 21, 17, 41, 15, 66, 19, 21, 21, 20, 19, 21, 19, 20, 19, 20, 21, 20, 20, 82, 19, 20, 37, 21, 21, 19, 19, 19, 19, 19, 19, 20, 38, 19, 20, 20, 19, 19, 21, 19, 21, 20, 20, 19, 20, 20, 20, 20, 21, 63, 62, 61, 19, 21, 20, 19, 20, 21, 21, 21, 21, 21, 21, 15, 1, 7, 13, 16, 6, 4, 21, 21, 19, 20, 21, 21, 19, 19, 21, 66, 19, 19, 20, 37, 21, 21, 20, 20, 21, 20, 21, 21, 19, 19, 37, 19, 19, 21, 20, 20, 21, 19, 19, 19, 20, 70, 77, 74, 79, 19, 21, 22, 25, 19, 20, 19, 21, 20, 19, 5, 49, 41, 43, 45, 47, 49, 51, 47, 41, 43, 15, 19, 20, 19, 20, 20, 19, 19, 20, 19, 19, 61, 21, 21, 59, 55, 19, 20, 21, 21, 68, 20, 18, 16, 21, 20, 19, 38, 21, 21, 67, 19, 11, 42, 8, 33, 30, 32, 30, 36, 21, 21, 19, 20, 61, 19, 20, 19, 19, 82, 19, 21, 39, 21, 20, 19, 19, 20, 21, 19, 21, 20, 37, 20, 19, 20, 21, 21, 20, 21, 19, 21, 20, 19, 19, 21, 20, 20, 21, 21, 20, 19, 21, 19, 21, 20, 21, 21, 19, 19, 21, 20, 21, 19, 19, 19, 19, 37, 38, 19, 20, 21, 19, 20, 21, 19, 19, 20, 19, 66, 20, 19, 20, 37, 19, 20, 20, 20, 20, 21, 19, 20, 54, 57, 58, 19, 19, 21, 21, 21, 19, 20, 19, 20, 20, 21, 21, 21, 20, 21, 20, 20, 61, 19, 19, 21, 19, 21, 20, 7, 42, 44, 46, 6, 15, 4, 5, 11, 11, 3, 2, 19, 19, 19, 21, 20, 20, 19, 20, 21, 19, 21, 19, 21, 20, 21, 20, 21, 19, 20, 33, 30, 10, 16, 19, 20, 20, 37, 19, 21, 66, 21, 14, 43, 12, 20, 19, 20, 21, 66, 19, 21, 20, 19, 21, 21, 21, 21, 20, 82, 21, 21, 19, 20, 20, 21, 21, 21, 21, 20, 21, 21, 37, 20, 20, 21, 20, 19, 19, 20, 19, 19, 19, 19, 19, 21, 19, 19, 20, 21, 20, 19, 19, 19, 21, 11, 4, 12, 0, 21, 21, 20, 21, 20, 20, 21, 54, 58, 37, 21, 20, 21, 20, 21, 19, 9, 11, 18, 21, 67, 19, 21, 19, 39, 19, 19, 21, 20, 21, 21, 20, 19, 19, 20, 19, 20, 19, 20, 61, 19, 19, 19, 21, 19, 21, 19, 19, 21, 19, 19, 19, 20, 21, 21, 20, 21, 20, 21, 20, 17, 43, 45, 47, 15, 70, 74, 80, 77, 71, 79, 21, 19, 19, 21, 19, 21, 20, 21, 19, 20, 20, 21, 19, 20, 20, 20, 20, 19, 20, 21, 20, 19, 7, 13, 10, 19, 19, 59, 55, 19, 66, 21, 13, 44, 17, 4, 10, 0, 5, 16, 4, 14, 16, 18, 4, 6, 16, 3, 10, 15, 14, 3, 17, 11, 15, 21, 21, 19, 20, 19, 20, 19, 38, 21, 21, 19, 20, 20, 20, 21, 20, 19, 21, 21, 21, 21, 21, 19, 21, 20, 20, 19, 19, 19, 19, 12, 40, 42, 15, 20, 21, 20, 21, 20, 21, 21, 19, 19, 37, 21, 21, 20, 20, 20, 2, 1, 46, 18, 20, 68, 21, 19, 19, 19, 20, 21, 21, 21, 19, 21, 21, 19, 20, 21, 19, 21, 20, 61, 20, 21, 20, 19, 19, 19, 19, 20, 20, 21, 20, 19, 20, 20, 20, 19, 4, 2, 18, 5, 11, 17, 48, 42, 40, 18, 30, 36, 66, 20, 20, 20, 19, 20, 19, 20, 20, 19, 21, 19, 20, 19, 19, 20, 21, 21, 21, 19, 19, 20, 21, 20, 21, 20, 14, 9, 18, 20, 19, 19, 19, 20, 68, 20, 18, 45, 0, 10, 11, 14, 5, 15, 12, 15, 6, 5, 12, 0, 6, 5, 0, 4, 11, 4, 5, 9, 17, 20, 19, 21, 21, 19, 21, 54, 58, 20, 63, 62, 21, 20, 19, 10, 2, 10, 2, 8, 12, 7, 20, 21, 19, 19, 21, 21, 35, 10, 12, 7, 41, 43, 7, 30, 32, 30, 30, 36, 21, 20, 19, 21, 38, 24, 20, 19, 19, 20, 5, 44, 47, 10, 20, 66, 20, 19, 19, 8, 17, 13, 16, 14, 1, 20, 19, 20, 20, 20, 21, 20, 19, 21, 20, 20, 20, 19, 20, 19, 20, 21, 19, 19, 19, 21, 21, 21, 21, 19, 7, 48, 40, 42, 48, 46, 49, 43, 41, 11, 19, 66, 68, 21, 19, 21, 19, 19, 20, 19, 0, 12, 10, 20, 20, 20, 21, 20, 19, 60, 21, 19, 19, 19, 21, 19, 19, 20, 5, 12, 20, 21, 61, 19, 35, 30, 34, 19, 18, 46, 4, 70, 73, 74, 73, 80, 73, 77, 73, 81, 73, 72, 73, 79, 1, 15, 5, 70, 78, 79, 21, 19, 20, 21, 20, 20, 21, 19, 20, 21, 19, 19, 21, 19, 19, 0, 8, 8, 9, 14, 18, 10, 19, 20, 21, 35, 30, 30, 34, 9, 48, 50, 44, 46, 4, 20, 22, 23, 20, 66, 21, 19, 19, 21, 37, 61, 60, 19, 21, 19, 6, 45, 48, 0, 20, 66, 19, 20, 21, 5, 8, 2, 5, 2, 17, 21, 19, 20, 19, 20, 21, 19, 19, 19, 16, 13, 20, 21, 21, 19, 21, 21, 20, 63, 62, 20, 21, 35, 30, 31, 5, 49, 41, 43, 49, 47, 50, 46, 48, 11, 35, 34, 66, 21, 20, 21, 61, 21, 20, 19, 13, 40, 0, 21, 19, 20, 20, 21, 21, 19, 20, 24, 21, 20, 20, 21, 20, 19, 16, 15, 21, 60, 21, 19, 66, 19, 19, 21, 2, 47, 10, 21, 35, 30, 30, 34, 21, 19, 21, 38, 19, 60, 20, 20, 20, 82, 20, 19, 19, 20, 21, 21, 19, 20, 19, 19, 19, 21, 21, 20, 19, 61, 21, 19, 21, 21, 21, 21, 19, 21, 21, 20, 20, 21, 21, 66, 20, 21, 19, 7, 49, 52, 45, 47, 8, 21, 21, 60, 21, 68, 19, 20, 20, 21, 37, 21, 20, 21, 35, 30, 18, 40, 49, 7, 65, 34, 26, 27, 19, 21, 20, 20, 21, 21, 20, 21, 20, 20, 20, 21, 19, 21, 17, 4, 15, 14, 20, 20, 19, 19, 19, 21, 21, 61, 19, 21, 19, 67, 20, 19, 3, 50, 48, 46, 42, 42, 51, 47, 49, 11, 34, 19, 66, 19, 19, 20, 19, 19, 21, 35, 0, 41, 5, 30, 31, 30, 36, 21, 21, 19, 61, 60, 63, 62, 19, 19, 20, 20, 18, 9, 19, 21, 26, 27, 66, 20, 60, 20, 0, 48, 6, 19, 66, 21, 19, 19, 21, 21, 20, 39, 20, 61, 20, 21, 21, 82, 21, 20, 19, 21, 20, 21, 21, 19, 19, 19, 19, 20, 19, 20, 21, 21, 19, 20, 20, 21, 19, 21, 20, 21, 61, 20, 20, 21, 20, 66, 19, 20, 20, 8, 40, 48, 48, 50, 11, 9, 0, 19, 20, 67, 60, 21, 19, 20, 39, 20, 20, 20, 66, 19, 16, 41, 42, 4, 20, 20, 28, 29, 21, 20, 19, 20, 20, 19, 20, 20, 20, 21, 35, 31, 30, 30, 13, 40, 42, 5, 30, 36, 19, 21, 20, 19, 20, 20, 21, 20, 21, 66, 20, 20, 7, 51, 49, 47, 43, 43, 40, 42, 44, 2, 30, 32, 34, 21, 21, 20, 19, 20, 21, 66, 7, 46, 14, 21, 20, 19, 33, 30, 32, 36, 19, 60, 61, 21, 20, 19, 19, 20, 2, 7, 19, 21, 28, 29, 68, 19, 19, 19, 16, 49, 13, 19, 67, 20, 21, 21, 20, 20, 19, 21, 21, 19, 19, 20, 21, 82, 19, 20, 20, 19, 19, 60, 21, 21, 19, 19, 20, 21, 20, 20, 21, 21, 20, 21, 19, 20, 20, 21, 21, 21, 21, 19, 19, 20, 21, 66, 21, 19, 21, 1, 41, 49, 49, 51, 40, 48, 4, 19, 20, 66, 21, 19, 20, 20, 21, 19, 20, 21, 68, 20, 7, 44, 43, 12, 21, 21, 21, 20, 21, 19, 20, 21, 20, 19, 21, 19, 20, 20, 66, 20, 20, 21, 17, 41, 43, 16, 21, 33, 32, 30, 36, 20, 19, 20, 19, 20, 61, 68, 20, 20, 14, 40, 42, 48, 40, 40, 41, 43, 45, 9, 20, 19, 20, 19, 21, 19, 20, 20, 19, 66, 2, 47, 18, 19, 19, 19, 21, 20, 20, 66, 19, 21, 20, 20, 20, 19, 19, 19, 7, 2, 1, 9, 0, 9, 3, 2, 13, 6, 13, 48, 1, 16, 5, 6, 9, 7, 5, 13, 1, 17, 6, 5, 2, 2, 17, 16, 3, 14, 15, 11, 15, 11, 9, 6, 17, 10, 8, 13, 14, 0, 14, 15, 12, 8, 8, 18, 5, 10, 18, 0, 7, 8, 14, 13, 13, 14, 9, 0, 0, 1, 46, 40, 44, 48, 41, 49, 3, 6, 3, 16, 11, 2, 9, 1, 15, 17, 8, 10, 18, 8, 1, 45, 42, 12, 11, 16, 14, 18, 5, 5, 15, 8, 14, 11, 14, 16, 18, 14, 13, 9, 17, 0, 5, 46, 48, 13, 9, 17, 5, 4, 9, 13, 13, 18, 0, 16, 9, 3, 18, 7, 9, 41, 43, 49, 41, 41, 46, 48, 40, 5, 7, 6, 7, 7, 10, 13, 15, 0, 4, 13, 14, 42, 13, 5, 12, 9, 7, 0, 8, 7, 15, 10, 8, 4, 8, 13, 5, 4, 14, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 49, 42, 44, 46, 42, 46, 44, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 40, 48, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 47, 41, 45, 49, 42, 44, 48, 42, 40, 44, 40, 46, 48, 42, 44, 46, 48, 40, 42, 44, 48, 40, 43, 46, 40, 48, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 47, 49, 44, 46, 48, 40, 42, 44, 46, 48, 42, 40, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 47, 49, 41, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 43, 46, 48, 40, 42, 44, 48, 46, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 40, 43, 45, 47, 43, 47, 45, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 41, 49, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 48, 42, 46, 40, 43, 45, 49, 43, 41, 45, 41, 47, 49, 43, 45, 47, 49, 41, 43, 45, 49, 41, 44, 47, 41, 49, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 40, 42, 45, 47, 49, 41, 43, 45, 47, 49, 43, 41, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 42, 44, 46, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 44, 47, 49, 41, 43, 45, 49, 47, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 43, 47, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 45, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.level0_width = 160;
			this.level0_height = 103;
			this.level0_rect_x = new Array(0, 350, 600, 1100, 1400, 1800, 2500, 2700, 3600, 3250, 3850, 6500, 7800, 7750, 7250, 7450, 7300, 7700, 7900, 7700, 6950, 6650, 6300, 5750, 5350, 4950, 5200, 5250, 5350, 4850, 4550, 4850, 4850, 4450, 4350, 4450, 3950, 3950, 4000, 4300, 4700, 5050, 5550, 5550, 5500, 6100, 6500, 400, 1200, 1500, 1400, 300, 400, 0, 50, 50, 200, 50, 400, 450, 300, 50, 50, 50, 400, 400, 200, 800, 900, 1200, 2000, 2300, 300, 2750, 2900, 3250, 3250, 3150, 4150, 7950, 7500, 7950, 7350, 7350, 7400, 7950, 6900, 6550, 7000, 6450, 6000, 5450, 5000, 4550, 3850, 4550, 3100, 2900, 2550, 2400, 1850, 1250, 1000, 450, 600, 50, 7050, 6300, 6050, 6300, 7950, 5550, 5850, 2900, 5650, 3500, 4050, 4100, 3100, 3000, 3300, 2300, 1700, 950, 2300, 5600, 6050, 6700, 7100, 50, 1700, 2300, 4500, 5150, 5250, 7450, 7150, 1150, 1250, 1300, 1250, 1300);
			this.level0_rect_y = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 1000, 800, 900, 1300, 1750, 2000, 2200, 1300, 1300, 1300, 1300, 1300, 1300, 2600, 2650, 2200, 1600, 1900, 2200, 2500, 2500, 1300, 2300, 1800, 1900, 1950, 850, 550, 550, 800, 900, 1000, 800, 800, 1300, 1100, 1200, 950, 1300, 1500, 300, 4600, 4100, 3800, 3100, 3100, 3600, 3500, 2500, 1550, 1850, 2000, 2100, 2200, 2500, 2200, 2200, 2200, 2500, 2800, 2100, 2100, 2800, 3000, 3100, 2800, 2600, 2800, 3100, 3500, 3700, 3800, 3700, 3950, 4050, 3300, 3250, 3450, 3300, 3400, 3200, 3500, 3700, 3700, 3400, 3300, 3850, 4200, 4000, 4300, 4350, 4600, 4900, 4650, 4350, 4600, 4550, 4150, 4200, 4050, 4000, 4050, 4200, 4600, 4550, 4550, 4650, 4800, 4650, 3700, 3400, 3400, 2500, 2300, 2400, 2500, 650, 650, 650, 4650, 4750, 4700, 500, 3350, 4200, 4400, 4450, 4700, 4750);
			this.level0_rect_w = new Array(350, 250, 500, 300, 400, 700, 200, 900, 250, 1200, 2650, 1300, 200, 50, 300, 100, 700, 300, 100, 300, 350, 300, 350, 550, 400, 400, 150, 50, 100, 100, 100, 100, 100, 200, 200, 100, 400, 150, 50, 150, 100, 150, 200, 100, 150, 100, 400, 3950, 300, 200, 100, 100, 100, 50, 50, 50, 50, 350, 400, 350, 100, 50, 100, 550, 250, 200, 50, 100, 300, 500, 450, 250, 2450, 150, 1450, 900, 200, 300, 3350, 50, 500, 50, 650, 150, 50, 50, 1100, 350, 50, 300, 150, 250, 150, 100, 350, 350, 450, 100, 350, 150, 350, 1150, 150, 150, 1000, 7950, 150, 600, 500, 250, 50, 300, 300, 2750, 200, 350, 200, 150, 200, 300, 100, 350, 350, 650, 50, 300, 300, 150, 300, 1200, 300, 550, 300, 200, 100, 350, 50, 250, 150, 50, 150, 50);
			this.level0_rect_h = new Array(300, 200, 300, 350, 250, 300, 350, 300, 650, 200, 200, 250, 1300, 100, 100, 400, 450, 250, 200, 400, 500, 450, 550, 450, 550, 1300, 50, 150, 100, 100, 100, 100, 100, 100, 1000, 200, 100, 50, 150, 300, 100, 100, 100, 100, 150, 100, 100, 200, 200, 100, 150, 100, 100, 4650, 100, 100, 100, 150, 500, 500, 100, 100, 100, 150, 100, 200, 100, 100, 400, 300, 300, 100, 100, 1200, 200, 200, 100, 100, 100, 200, 300, 400, 200, 100, 150, 250, 200, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 900, 350, 200, 200, 100, 550, 100, 50, 250, 200, 300, 50, 750, 250, 100, 200, 150, 300, 300, 50, 100, 250, 100, 100, 100, 100, 100, 100, 100, 100, 100, 200, 200, 200, 100, 150, 50, 100, 100, 200, 50, 150, 50, 150);
			this.level0_item_type = new Array(10, 5, 0, 2, 2, 12, 6, 0, 7, 1, 13, 8, 4, 4, 13, 4, 4, 9, 11, 13, 12, 13, 11, 11, 13, 11, 13, 12, 13, 13, 13, 13, 11, 12);
			this.level0_item_x = new Array(73, 135, 147, 27, 27, 7, 52, 104, 85, 79, 84, 153, 49, 15, 17, 142, 66, 154, 107, 153, 79, 12, 69, 156, 156, 4, 60, 155, 157, 3, 84, 93, 1, 2);
			this.level0_item_y = new Array(97, 97, 78, 91, 97, 68, 65, 55, 41, 41, 32, 25, 92, 97, 96, 92, 79, 69, 43, 7, 11, 10, 12, 43, 54, 43, 48, 77, 96, 19, 18, 96, 97, 11);
			this.level0_tileSet = 1;
			this.level0_gameType = 0;
			this.level0_objective_names = ["Amateur Score: 5,000", "Pro Score: 10,000", "Operator Score: 15,000", "Collect 4 Gun Parts", "Find the secret briefcase", "Gib 50 enemies", "Get 50 kills with the PDW-9", "Destroy 10 Data Discs", "Complete all objectives in one round"];
			this.level0_objective_scores = new Array(5000, 1000, 15000);
			this.level0_objective_specialKills_needed = 50;
			this.level0_objective_specialKillType = 5;
			this.level0_objective_whichWeaponProficiency = 4;
			this.level2 = new Array(60, 60, 60, 60, 60, 64, 58, 64, 60, 60, 84, 60, 58, 59, 59, 101, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 100, 60, 101, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 100, 63, 60, 101, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 100, 60, 60, 60, 60, 60, 63, 59, 63, 60, 60, 74, 60, 60, 60, 60, 49, 0, 0, 0, 27, 31, 0, 86, 0, 27, 0, 27, 0, 0, 31, 86, 0, 32, 0, 0, 0, 27, 0, 86, 0, 27, 27, 0, 27, 31, 0, 86, 31, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 29, 0, 0, 0, 86, 0, 0, 27, 27, 0, 0, 0, 86, 0, 0, 48, 60, 49, 0, 0, 27, 27, 0, 86, 0, 0, 27, 0, 27, 0, 0, 27, 0, 86, 27, 0, 0, 0, 0, 27, 0, 27, 0, 86, 0, 0, 33, 0, 0, 0, 35, 38, 27, 86, 0, 0, 0, 0, 30, 0, 0, 48, 80, 60, 49, 33, 0, 0, 0, 86, 0, 27, 30, 0, 27, 0, 0, 86, 0, 35, 38, 0, 0, 0, 29, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 34, 27, 0, 0, 0, 48, 60, 84, 66, 66, 85, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 49, 0, 0, 0, 29, 27, 0, 0, 0, 27, 0, 27, 0, 0, 27, 0, 0, 27, 0, 0, 0, 27, 0, 0, 0, 27, 28, 0, 27, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 32, 35, 24, 19, 19, 19, 19, 22, 48, 60, 49, 0, 0, 27, 27, 0, 0, 0, 0, 27, 0, 27, 0, 0, 27, 0, 0, 27, 0, 0, 0, 0, 27, 0, 35, 38, 0, 0, 0, 35, 19, 38, 0, 0, 27, 29, 0, 0, 0, 37, 19, 36, 0, 0, 48, 74, 60, 49, 27, 0, 0, 0, 0, 0, 28, 27, 0, 35, 21, 19, 22, 38, 0, 27, 0, 0, 37, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 32, 0, 0, 0, 48, 60, 74, 60, 60, 74, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 49, 0, 0, 0, 27, 33, 0, 0, 0, 29, 0, 32, 0, 0, 27, 0, 0, 28, 0, 0, 0, 33, 0, 0, 0, 32, 27, 0, 30, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 19, 38, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 48, 64, 49, 0, 0, 27, 27, 0, 0, 0, 37, 36, 0, 27, 0, 0, 35, 38, 0, 27, 0, 0, 0, 0, 27, 0, 0, 27, 0, 0, 0, 0, 0, 17, 0, 0, 17, 17, 0, 0, 0, 17, 0, 0, 0, 0, 48, 82, 85, 49, 27, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 35, 22, 19, 19, 48, 60, 74, 60, 60, 82, 66, 66, 66, 66, 66, 83, 60, 60, 60, 60, 49, 0, 37, 20, 36, 27, 0, 0, 0, 27, 0, 27, 0, 0, 27, 0, 0, 27, 0, 0, 0, 27, 0, 0, 0, 27, 27, 0, 27, 27, 0, 37, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 19, 20, 19, 19, 36, 0, 0, 0, 0, 0, 0, 0, 48, 61, 49, 0, 37, 36, 35, 19, 38, 0, 27, 0, 0, 27, 0, 0, 0, 27, 0, 35, 38, 0, 37, 19, 36, 0, 0, 27, 0, 0, 0, 0, 0, 18, 0, 0, 18, 18, 0, 0, 0, 18, 0, 0, 0, 0, 48, 60, 74, 49, 31, 0, 0, 0, 0, 0, 27, 29, 0, 0, 0, 0, 0, 96, 97, 90, 91, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 23, 19, 21, 19, 48, 66, 83, 60, 60, 60, 60, 60, 64, 61, 61, 64, 60, 60, 60, 60, 49, 0, 27, 0, 0, 27, 0, 0, 0, 27, 0, 27, 0, 0, 35, 38, 0, 31, 0, 0, 0, 27, 0, 0, 0, 27, 34, 0, 27, 32, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 62, 49, 0, 27, 0, 0, 0, 27, 0, 27, 0, 0, 27, 0, 0, 0, 27, 0, 0, 27, 0, 27, 0, 0, 0, 0, 35, 38, 0, 0, 46, 40, 44, 42, 43, 40, 45, 40, 40, 40, 41, 47, 0, 0, 0, 48, 60, 74, 49, 27, 0, 0, 0, 0, 0, 32, 35, 21, 19, 19, 38, 0, 98, 99, 92, 93, 0, 92, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 60, 60, 63, 62, 62, 63, 60, 60, 60, 60, 49, 0, 27, 0, 0, 32, 0, 0, 0, 31, 0, 27, 0, 0, 0, 27, 0, 27, 0, 0, 0, 27, 0, 0, 0, 31, 27, 0, 27, 34, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 63, 49, 0, 27, 0, 0, 0, 88, 89, 88, 89, 0, 27, 0, 0, 0, 27, 0, 0, 88, 89, 88, 89, 0, 0, 0, 0, 27, 0, 0, 50, 55, 52, 52, 52, 52, 54, 53, 52, 100, 60, 49, 0, 0, 0, 48, 60, 81, 49, 35, 21, 19, 38, 0, 0, 35, 20, 19, 22, 38, 27, 0, 94, 95, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 101, 52, 54, 53, 52, 52, 52, 54, 53, 52, 55, 52, 60, 60, 60, 49, 0, 32, 0, 0, 27, 0, 0, 0, 27, 0, 28, 0, 0, 0, 27, 0, 27, 0, 0, 37, 36, 0, 0, 0, 34, 35, 38, 27, 27, 0, 27, 46, 47, 0, 0, 0, 0, 0, 46, 47, 0, 0, 0, 0, 0, 46, 47, 0, 0, 0, 0, 0, 46, 40, 40, 40, 40, 56, 60, 49, 0, 27, 0, 0, 0, 90, 91, 96, 97, 0, 27, 0, 0, 0, 27, 0, 0, 96, 97, 96, 97, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 48, 61, 49, 0, 0, 0, 48, 60, 74, 49, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 27, 34, 46, 40, 45, 40, 40, 44, 43, 40, 47, 0, 0, 0, 0, 0, 46, 40, 41, 40, 47, 0, 0, 0, 37, 25, 48, 49, 0, 0, 0, 0, 0, 86, 0, 0, 35, 21, 19, 48, 64, 60, 49, 19, 36, 0, 0, 27, 0, 0, 0, 27, 0, 27, 0, 0, 0, 32, 0, 35, 38, 0, 27, 0, 0, 0, 0, 27, 0, 27, 27, 27, 0, 27, 50, 51, 0, 0, 0, 0, 0, 50, 51, 0, 0, 0, 0, 0, 50, 51, 0, 0, 0, 0, 0, 50, 52, 52, 52, 52, 100, 60, 49, 0, 27, 0, 0, 0, 92, 93, 98, 99, 0, 35, 38, 0, 0, 27, 0, 0, 98, 99, 98, 99, 0, 0, 37, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 62, 57, 47, 0, 0, 48, 60, 64, 49, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 17, 17, 48, 60, 64, 61, 61, 64, 83, 60, 49, 0, 0, 0, 0, 0, 48, 84, 64, 60, 49, 0, 0, 0, 27, 0, 48, 49, 19, 20, 19, 38, 0, 0, 0, 0, 0, 0, 0, 48, 65, 60, 49, 0, 0, 0, 37, 36, 0, 0, 0, 27, 0, 27, 0, 0, 0, 27, 0, 0, 31, 0, 27, 0, 0, 0, 0, 27, 0, 27, 31, 27, 0, 35, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 35, 38, 0, 0, 94, 95, 94, 95, 0, 0, 27, 0, 0, 27, 0, 0, 94, 95, 94, 95, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 55, 51, 0, 0, 48, 60, 63, 49, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 18, 18, 48, 60, 63, 62, 62, 63, 85, 60, 49, 0, 0, 0, 0, 0, 48, 78, 63, 60, 49, 0, 0, 0, 27, 0, 48, 49, 19, 38, 0, 27, 0, 0, 0, 0, 0, 0, 0, 48, 63, 60, 49, 0, 0, 0, 27, 0, 0, 0, 0, 27, 0, 29, 0, 0, 0, 27, 0, 0, 27, 0, 29, 0, 37, 19, 19, 36, 0, 27, 27, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 63, 49, 0, 0, 27, 0, 46, 40, 40, 40, 40, 47, 0, 27, 0, 37, 36, 0, 46, 40, 40, 40, 40, 47, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 49, 38, 0, 0, 34, 0, 0, 0, 0, 0, 46, 40, 41, 56, 101, 52, 52, 52, 52, 55, 52, 51, 0, 0, 0, 0, 0, 50, 55, 52, 52, 51, 0, 0, 0, 27, 0, 48, 49, 0, 27, 0, 31, 0, 0, 0, 0, 0, 0, 0, 48, 61, 60, 49, 0, 0, 0, 30, 0, 0, 0, 37, 36, 0, 34, 0, 0, 0, 30, 0, 0, 32, 0, 27, 0, 27, 0, 0, 0, 0, 32, 27, 35, 19, 38, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 81, 49, 0, 0, 27, 0, 50, 52, 52, 52, 52, 51, 0, 27, 0, 27, 0, 0, 50, 52, 52, 52, 52, 51, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 64, 60, 49, 27, 0, 0, 27, 0, 0, 0, 0, 0, 48, 60, 65, 60, 49, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 35, 38, 48, 49, 38, 33, 0, 27, 0, 0, 0, 0, 0, 0, 0, 48, 62, 60, 49, 0, 0, 0, 27, 0, 0, 0, 27, 0, 0, 27, 0, 0, 0, 27, 0, 0, 27, 0, 27, 0, 28, 0, 0, 0, 0, 27, 27, 0, 0, 27, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 74, 49, 0, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 48, 61, 60, 49, 30, 0, 0, 35, 24, 38, 0, 0, 0, 50, 55, 55, 52, 51, 0, 0, 37, 20, 36, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 27, 48, 49, 30, 35, 38, 32, 0, 0, 46, 40, 40, 40, 40, 56, 60, 60, 49, 0, 0, 0, 35, 19, 38, 0, 27, 0, 0, 27, 0, 0, 37, 36, 0, 0, 27, 0, 31, 0, 27, 0, 0, 0, 46, 44, 43, 47, 0, 29, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 77, 49, 0, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 96, 97, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 48, 62, 60, 49, 27, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 37, 19, 36, 0, 0, 0, 0, 0, 0, 0, 27, 48, 49, 27, 0, 27, 27, 0, 0, 50, 55, 54, 53, 52, 55, 52, 52, 51, 0, 0, 0, 0, 0, 27, 0, 29, 0, 0, 35, 38, 0, 27, 37, 19, 19, 36, 0, 27, 0, 35, 38, 0, 0, 50, 52, 55, 51, 0, 27, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 64, 49, 0, 0, 92, 93, 0, 0, 0, 0, 0, 0, 0, 98, 99, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 48, 63, 60, 49, 31, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 35, 38, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 48, 49, 35, 38, 27, 35, 38, 0, 0, 0, 0, 37, 19, 36, 0, 102, 0, 0, 0, 0, 0, 0, 28, 0, 27, 0, 0, 0, 30, 0, 31, 27, 0, 0, 0, 0, 27, 0, 0, 30, 0, 0, 0, 27, 27, 0, 0, 27, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 94, 95, 0, 39, 0, 0, 39, 0, 0, 94, 95, 94, 95, 0, 0, 39, 0, 0, 39, 0, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 31, 48, 60, 60, 49, 27, 0, 0, 0, 39, 32, 0, 0, 0, 39, 0, 0, 27, 0, 39, 0, 27, 0, 0, 39, 0, 0, 0, 0, 39, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 49, 0, 17, 17, 0, 17, 0, 0, 0, 0, 31, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 31, 0, 35, 38, 0, 0, 27, 37, 36, 27, 0, 37, 19, 19, 36, 0, 0, 29, 0, 0, 0, 27, 35, 19, 38, 27, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 57, 40, 41, 40, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 40, 40, 41, 40, 40, 44, 43, 40, 45, 44, 42, 43, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 44, 43, 41, 40, 56, 60, 60, 57, 41, 40, 44, 43, 40, 41, 40, 45, 40, 44, 42, 42, 43, 40, 45, 40, 45, 40, 40, 45, 41, 44, 43, 40, 40, 41, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 57, 47, 18, 18, 0, 18, 0, 0, 0, 0, 27, 39, 0, 0, 102, 0, 39, 0, 0, 0, 0, 27, 0, 0, 32, 0, 0, 27, 27, 0, 30, 0, 27, 0, 39, 0, 0, 0, 27, 39, 0, 0, 35, 38, 39, 27, 32, 27, 0, 39, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 82, 64, 61, 61, 64, 60, 60, 60, 60, 84, 66, 71, 66, 66, 83, 60, 60, 60, 60, 84, 71, 60, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 61, 84, 66, 83, 60, 60, 64, 60, 64, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 84, 66, 64, 61, 61, 64, 67, 83, 60, 64, 60, 60, 78, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 59, 57, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 47, 0, 0, 35, 38, 0, 27, 0, 37, 36, 33, 0, 27, 0, 32, 46, 40, 40, 40, 40, 45, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 47, 0, 0, 0, 46, 44, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 84, 63, 62, 62, 63, 72, 66, 69, 66, 83, 60, 60, 60, 60, 60, 60, 60, 60, 60, 64, 60, 60, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 62, 74, 60, 59, 60, 60, 63, 60, 63, 60, 60, 60, 60, 77, 60, 60, 60, 60, 65, 71, 66, 83, 60, 63, 62, 62, 63, 60, 60, 60, 63, 60, 60, 77, 49, 0, 0, 0, 0, 0, 0, 0, 0, 37, 48, 101, 52, 52, 52, 52, 55, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 0, 0, 0, 27, 0, 31, 0, 27, 0, 32, 0, 35, 38, 27, 50, 52, 52, 52, 52, 55, 52, 52, 52, 52, 52, 52, 52, 52, 52, 100, 60, 49, 0, 0, 0, 50, 55, 51, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 101, 52, 55, 55, 55, 52, 52, 52, 55, 52, 52, 55, 52, 55, 52, 55, 53, 52, 52, 52, 100, 63, 101, 52, 54, 53, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 55, 55, 52, 55, 54, 53, 55, 52, 55, 52, 52, 52, 52, 55, 52, 52, 54, 53, 54, 53, 52, 52, 52, 55, 52, 52, 55, 52, 52, 52, 55, 52, 53, 55, 51, 0, 0, 0, 0, 0, 0, 0, 0, 27, 48, 49, 0, 0, 0, 0, 27, 0, 0, 0, 86, 27, 0, 0, 0, 35, 21, 19, 20, 38, 0, 0, 0, 88, 89, 88, 89, 88, 89, 88, 89, 0, 27, 31, 0, 0, 0, 0, 0, 27, 0, 0, 0, 86, 35, 38, 27, 33, 27, 48, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 40, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 32, 27, 0, 0, 0, 0, 28, 27, 86, 32, 0, 0, 0, 27, 0, 0, 0, 0, 48, 60, 49, 35, 38, 35, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 27, 0, 32, 0, 0, 27, 0, 35, 38, 0, 0, 0, 32, 0, 0, 0, 0, 0, 86, 0, 0, 0, 31, 0, 0, 35, 19, 38, 0, 35, 38, 0, 27, 0, 0, 0, 0, 0, 0, 0, 39, 37, 36, 48, 49, 0, 0, 0, 0, 31, 0, 0, 0, 0, 35, 19, 23, 19, 19, 26, 19, 38, 31, 0, 0, 0, 90, 91, 96, 97, 90, 91, 90, 91, 0, 34, 27, 0, 37, 21, 19, 22, 36, 0, 0, 0, 0, 0, 27, 27, 27, 31, 48, 64, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 55, 51, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 48, 64, 49, 0, 27, 27, 0, 0, 0, 0, 27, 27, 0, 27, 0, 0, 0, 27, 0, 0, 0, 0, 48, 60, 49, 0, 27, 0, 33, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 37, 36, 30, 0, 35, 38, 0, 29, 0, 0, 27, 0, 37, 20, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 19, 20, 38, 0, 32, 0, 0, 27, 0, 34, 0, 0, 0, 0, 0, 46, 40, 40, 45, 40, 56, 49, 38, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 92, 93, 98, 99, 92, 93, 92, 93, 0, 17, 17, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 30, 27, 35, 48, 61, 49, 19, 19, 19, 19, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 43, 47, 0, 0, 0, 0, 48, 63, 49, 0, 27, 31, 0, 0, 0, 0, 27, 30, 0, 27, 0, 0, 37, 36, 0, 0, 0, 0, 50, 55, 51, 0, 88, 89, 88, 89, 0, 0, 46, 41, 47, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 0, 0, 0, 50, 52, 52, 55, 52, 100, 49, 27, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 18, 18, 0, 0, 39, 94, 95, 94, 95, 94, 95, 94, 95, 39, 18, 18, 0, 18, 39, 0, 0, 0, 0, 0, 0, 0, 0, 27, 29, 35, 19, 48, 62, 49, 19, 19, 19, 38, 35, 19, 19, 19, 19, 19, 19, 38, 0, 0, 0, 50, 55, 51, 0, 0, 0, 0, 48, 80, 49, 0, 27, 27, 0, 0, 0, 37, 36, 34, 0, 35, 38, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 96, 97, 0, 0, 48, 64, 49, 0, 0, 0, 0, 0, 0, 90, 91, 96, 97, 0, 90, 91, 90, 91, 0, 96, 97, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 96, 97, 0, 90, 91, 90, 91, 0, 0, 0, 0, 0, 102, 0, 35, 20, 48, 49, 29, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 40, 40, 45, 44, 43, 40, 45, 40, 40, 45, 40, 40, 40, 44, 42, 42, 43, 40, 41, 41, 47, 0, 0, 0, 0, 0, 0, 0, 32, 27, 0, 0, 48, 63, 49, 0, 0, 0, 35, 19, 19, 19, 19, 38, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 64, 49, 0, 29, 27, 0, 0, 0, 27, 0, 32, 0, 0, 27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 93, 98, 99, 0, 0, 48, 63, 57, 41, 47, 0, 0, 0, 0, 92, 93, 98, 99, 0, 92, 93, 92, 93, 0, 98, 99, 92, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 98, 99, 0, 92, 93, 92, 93, 0, 0, 0, 0, 0, 102, 0, 0, 0, 48, 49, 27, 37, 19, 20, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 65, 65, 60, 60, 60, 64, 60, 60, 60, 60, 60, 60, 60, 63, 60, 49, 0, 0, 0, 0, 0, 0, 0, 27, 35, 20, 19, 48, 60, 49, 19, 19, 19, 19, 19, 38, 0, 0, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 63, 49, 0, 27, 32, 0, 0, 0, 33, 0, 27, 0, 0, 27, 0, 32, 0, 0, 0, 39, 0, 0, 0, 0, 39, 94, 95, 94, 95, 39, 0, 48, 60, 60, 64, 49, 0, 0, 0, 39, 94, 95, 94, 95, 39, 94, 95, 94, 95, 39, 94, 95, 94, 95, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 94, 95, 94, 95, 39, 94, 95, 94, 95, 39, 0, 0, 0, 0, 102, 0, 39, 0, 48, 49, 27, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 65, 101, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 100, 64, 49, 0, 0, 0, 0, 0, 0, 0, 35, 22, 19, 21, 48, 60, 49, 19, 19, 38, 0, 0, 35, 19, 38, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 37, 19, 48, 60, 49, 20, 36, 35, 19, 38, 0, 27, 0, 27, 0, 0, 31, 0, 27, 0, 0, 46, 40, 40, 44, 42, 43, 40, 40, 40, 40, 40, 44, 40, 56, 60, 60, 63, 57, 40, 40, 40, 40, 44, 43, 40, 41, 40, 40, 40, 45, 41, 40, 45, 40, 40, 44, 43, 40, 47, 0, 0, 0, 0, 0, 0, 0, 46, 40, 44, 43, 40, 40, 40, 40, 40, 41, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 41, 56, 49, 27, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 61, 49, 27, 0, 35, 38, 0, 0, 27, 33, 86, 35, 38, 0, 32, 0, 0, 31, 48, 65, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 64, 49, 0, 0, 27, 0, 0, 0, 0, 27, 27, 0, 0, 35, 19, 38, 0, 0, 0, 0, 0, 0, 46, 40, 56, 60, 49, 0, 0, 0, 0, 27, 0, 27, 0, 35, 24, 38, 30, 0, 35, 38, 0, 48, 60, 64, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 84, 66, 70, 66, 72, 83, 60, 60, 60, 82, 64, 60, 74, 60, 60, 60, 60, 65, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 64, 60, 60, 60, 60, 82, 66, 71, 64, 61, 61, 61, 64, 66, 73, 66, 83, 60, 49, 27, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 62, 49, 27, 0, 0, 27, 0, 37, 36, 27, 0, 0, 27, 0, 27, 37, 19, 36, 48, 63, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 65, 49, 0, 0, 27, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 39, 0, 48, 61, 61, 60, 49, 0, 0, 0, 0, 32, 0, 27, 0, 0, 0, 27, 27, 0, 0, 29, 0, 48, 60, 63, 66, 66, 71, 66, 85, 60, 60, 60, 60, 60, 60, 60, 60, 60, 84, 71, 66, 83, 60, 60, 60, 60, 60, 60, 60, 60, 60, 63, 67, 83, 60, 60, 60, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 84, 63, 60, 60, 60, 60, 60, 60, 60, 63, 62, 62, 62, 63, 60, 60, 60, 60, 60, 49, 34, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 40, 56, 60, 49, 35, 38, 0, 31, 0, 27, 0, 29, 0, 37, 36, 37, 36, 27, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 65, 49, 0, 0, 27, 0, 0, 0, 0, 27, 35, 19, 38, 0, 0, 27, 0, 0, 46, 40, 40, 40, 56, 62, 62, 60, 49, 21, 19, 38, 0, 27, 0, 35, 38, 0, 37, 36, 35, 38, 0, 27, 0, 50, 52, 52, 54, 53, 52, 52, 55, 52, 100, 60, 101, 52, 52, 52, 54, 53, 55, 52, 55, 52, 52, 52, 52, 52, 54, 53, 52, 55, 52, 52, 52, 52, 52, 52, 52, 100, 60, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 101, 55, 52, 55, 52, 54, 53, 52, 52, 52, 52, 52, 55, 55, 52, 54, 53, 52, 52, 100, 49, 27, 35, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 52, 52, 51, 0, 88, 89, 88, 89, 88, 89, 88, 89, 88, 89, 88, 89, 88, 89, 0, 50, 52, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 63, 49, 0, 0, 35, 19, 19, 38, 0, 27, 0, 0, 27, 0, 37, 36, 0, 0, 50, 52, 52, 52, 52, 52, 100, 60, 49, 0, 0, 31, 0, 28, 0, 0, 27, 0, 27, 0, 0, 27, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 35, 21, 48, 60, 49, 38, 0, 0, 37, 19, 36, 32, 86, 0, 0, 0, 27, 0, 27, 0, 0, 86, 0, 27, 0, 0, 27, 34, 0, 48, 60, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 28, 0, 27, 0, 33, 0, 0, 86, 0, 32, 0, 32, 27, 0, 0, 37, 19, 24, 48, 49, 35, 38, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 35, 38, 0, 90, 91, 96, 97, 90, 91, 96, 97, 90, 91, 96, 97, 96, 97, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 0, 27, 0, 0, 0, 27, 0, 48, 64, 49, 0, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 27, 0, 0, 30, 0, 0, 27, 0, 0, 0, 0, 27, 0, 29, 0, 0, 0, 0, 31, 0, 0, 32, 27, 0, 48, 60, 49, 39, 0, 0, 0, 0, 0, 39, 48, 60, 49, 27, 0, 34, 0, 27, 0, 0, 0, 0, 27, 0, 27, 35, 25, 19, 36, 37, 19, 48, 49, 0, 27, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 21, 36, 0, 27, 0, 92, 93, 98, 99, 92, 93, 98, 99, 92, 93, 98, 99, 98, 99, 0, 37, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 96, 97, 90, 91, 0, 96, 97, 96, 97, 0, 0, 35, 38, 0, 0, 27, 0, 48, 65, 49, 0, 0, 96, 97, 90, 91, 0, 90, 91, 90, 91, 0, 96, 97, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 35, 23, 21, 36, 0, 0, 27, 0, 0, 0, 0, 27, 0, 27, 0, 0, 0, 0, 32, 0, 0, 27, 30, 0, 48, 60, 57, 40, 47, 0, 0, 0, 46, 40, 56, 60, 49, 36, 0, 32, 0, 27, 0, 0, 0, 0, 27, 0, 35, 22, 19, 19, 21, 36, 0, 48, 49, 0, 27, 35, 38, 0, 0, 0, 0, 0, 0, 39, 0, 27, 0, 0, 39, 33, 0, 94, 95, 94, 95, 94, 95, 94, 95, 94, 95, 94, 95, 94, 95, 0, 27, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 98, 99, 92, 93, 0, 98, 99, 98, 99, 0, 0, 0, 27, 37, 19, 36, 0, 48, 63, 49, 0, 0, 98, 99, 92, 93, 0, 92, 93, 92, 93, 0, 98, 99, 98, 99, 0, 0, 0, 0, 0, 0, 37, 19, 26, 48, 60, 49, 0, 0, 0, 0, 37, 19, 36, 0, 0, 0, 37, 36, 0, 27, 0, 0, 0, 0, 27, 0, 37, 36, 27, 0, 50, 52, 52, 52, 51, 0, 0, 0, 50, 52, 52, 52, 51, 0, 0, 27, 0, 31, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 48, 49, 37, 36, 0, 27, 0, 0, 0, 0, 0, 46, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 47, 0, 0, 0, 0, 37, 22, 48, 60, 49, 38, 0, 0, 0, 39, 94, 95, 94, 95, 39, 94, 95, 94, 95, 39, 0, 0, 27, 27, 39, 0, 0, 48, 60, 49, 0, 39, 94, 95, 94, 95, 39, 94, 95, 94, 95, 39, 94, 95, 94, 95, 39, 0, 0, 0, 0, 0, 28, 0, 0, 48, 60, 49, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 27, 0, 0, 0, 0, 27, 0, 27, 0, 27, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 27, 31, 0, 0, 0, 0, 27, 0, 32, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 48, 49, 27, 0, 0, 30, 0, 0, 0, 0, 0, 48, 60, 60, 81, 60, 60, 60, 82, 67, 85, 60, 60, 60, 60, 60, 60, 60, 65, 84, 73, 66, 66, 72, 66, 83, 65, 60, 60, 60, 60, 60, 49, 0, 0, 0, 0, 27, 0, 48, 60, 49, 27, 0, 0, 0, 46, 40, 45, 40, 40, 40, 40, 40, 44, 43, 40, 41, 40, 40, 40, 45, 40, 40, 56, 60, 57, 40, 40, 40, 40, 40, 40, 40, 40, 44, 43, 40, 40, 41, 40, 40, 40, 40, 47, 0, 0, 0, 0, 27, 0, 0, 48, 60, 49, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 35, 38, 0, 33, 0, 0, 0, 0, 27, 0, 27, 0, 29, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 34, 27, 0, 0, 0, 0, 29, 0, 27, 0, 0, 0, 0, 35, 24, 19, 38, 0, 0, 0, 0, 0, 48, 49, 29, 0, 0, 27, 0, 0, 0, 0, 0, 50, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 0, 0, 0, 0, 31, 0, 48, 76, 49, 32, 0, 0, 0, 48, 60, 101, 52, 54, 53, 52, 52, 55, 52, 52, 52, 52, 55, 55, 52, 52, 52, 55, 52, 52, 54, 53, 55, 52, 55, 54, 53, 52, 55, 52, 52, 52, 52, 55, 54, 100, 60, 49, 0, 0, 0, 0, 27, 0, 0, 48, 60, 49, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 27, 37, 36, 0, 0, 0, 0, 35, 38, 27, 0, 27, 0, 0, 35, 38, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 27, 0, 30, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 48, 49, 27, 37, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 35, 38, 86, 0, 0, 0, 30, 0, 0, 27, 0, 86, 0, 37, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 48, 74, 49, 27, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 27, 27, 0, 0, 0, 27, 86, 0, 0, 0, 31, 0, 27, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 48, 75, 49, 0, 0, 0, 0, 32, 0, 0, 48, 60, 49, 0, 0, 0, 0, 35, 19, 19, 38, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 0, 27, 27, 0, 35, 19, 38, 0, 31, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 37, 36, 0, 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 48, 49, 31, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 37, 21, 19, 36, 0, 0, 35, 38, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 21, 19, 36, 0, 48, 74, 49, 27, 0, 0, 0, 48, 61, 49, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 33, 35, 38, 0, 0, 30, 0, 0, 0, 0, 27, 37, 36, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 48, 64, 49, 0, 0, 0, 0, 30, 46, 40, 56, 60, 57, 47, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 31, 27, 0, 46, 40, 40, 40, 47, 32, 35, 38, 0, 0, 27, 0, 27, 0, 46, 40, 40, 40, 47, 27, 32, 0, 0, 0, 27, 0, 0, 27, 46, 40, 40, 40, 47, 0, 0, 27, 0, 0, 0, 46, 40, 56, 49, 27, 32, 0, 0, 46, 45, 47, 0, 0, 0, 0, 0, 0, 31, 0, 27, 0, 0, 0, 0, 0, 0, 32, 0, 37, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 0, 0, 27, 0, 39, 1, 0, 48, 64, 49, 31, 0, 0, 0, 48, 62, 49, 0, 0, 0, 0, 0, 35, 19, 19, 38, 0, 27, 0, 27, 0, 0, 27, 0, 0, 0, 37, 36, 27, 0, 37, 19, 19, 36, 0, 0, 0, 0, 0, 0, 48, 63, 49, 0, 0, 0, 0, 27, 50, 52, 100, 60, 101, 51, 0, 0, 0, 0, 0, 0, 27, 0, 0, 37, 36, 27, 0, 50, 52, 52, 52, 51, 27, 0, 27, 0, 0, 32, 0, 27, 0, 50, 52, 52, 52, 51, 27, 35, 38, 0, 0, 31, 0, 0, 27, 50, 52, 52, 52, 51, 0, 0, 31, 0, 0, 0, 48, 60, 60, 49, 17, 17, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 40, 40, 40, 43, 41, 40, 40, 40, 40, 56, 63, 49, 27, 0, 0, 0, 50, 52, 51, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 88, 89, 0, 27, 0, 0, 0, 88, 89, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 50, 55, 51, 0, 0, 0, 0, 35, 38, 0, 48, 60, 49, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 28, 0, 0, 0, 86, 0, 0, 27, 0, 88, 89, 0, 88, 89, 27, 0, 0, 0, 86, 0, 0, 27, 0, 88, 89, 0, 88, 89, 0, 27, 0, 0, 86, 0, 0, 0, 0, 29, 0, 0, 0, 50, 52, 100, 49, 18, 18, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 0, 96, 97, 90, 91, 0, 0, 0, 0, 0, 90, 91, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 78, 74, 60, 60, 60, 60, 60, 60, 49, 35, 38, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 90, 91, 90, 91, 37, 36, 0, 0, 0, 96, 97, 90, 91, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 27, 37, 48, 60, 49, 20, 38, 0, 0, 0, 0, 0, 90, 91, 0, 90, 91, 27, 0, 0, 0, 0, 0, 0, 30, 0, 90, 91, 0, 90, 91, 35, 19, 38, 0, 0, 0, 0, 29, 0, 96, 97, 0, 90, 91, 0, 34, 0, 0, 0, 0, 0, 37, 20, 36, 0, 0, 0, 0, 0, 48, 57, 41, 44, 43, 40, 56, 60, 49, 0, 0, 0, 0, 0, 0, 98, 99, 92, 93, 0, 0, 0, 0, 0, 92, 93, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 41, 56, 58, 60, 60, 74, 77, 60, 60, 60, 60, 60, 60, 49, 0, 27, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 92, 93, 92, 93, 17, 0, 0, 0, 0, 98, 99, 92, 93, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 17, 17, 48, 60, 49, 0, 31, 0, 0, 0, 0, 0, 92, 93, 0, 92, 93, 35, 19, 38, 0, 0, 0, 0, 29, 0, 92, 93, 0, 92, 93, 0, 0, 27, 0, 0, 0, 0, 30, 0, 98, 99, 0, 92, 93, 0, 27, 0, 0, 0, 0, 0, 27, 0, 0, 17, 0, 17, 17, 0, 48, 60, 60, 60, 60, 61, 61, 61, 49, 0, 0, 0, 0, 0, 0, 94, 95, 94, 95, 0, 0, 0, 0, 0, 94, 95, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 61, 64, 85, 60, 60, 60, 60, 60, 49, 0, 33, 39, 0, 0, 102, 0, 39, 0, 0, 0, 0, 0, 0, 0, 94, 95, 94, 95, 94, 95, 18, 0, 39, 0, 0, 94, 95, 94, 95, 94, 95, 0, 0, 0, 0, 0, 0, 0, 39, 0, 102, 0, 0, 39, 0, 0, 0, 18, 18, 48, 60, 49, 0, 27, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 27, 0, 0, 0, 0, 27, 0, 94, 95, 0, 94, 95, 0, 0, 27, 0, 0, 0, 0, 27, 0, 94, 95, 0, 94, 95, 0, 35, 38, 0, 0, 0, 0, 27, 0, 0, 18, 0, 18, 18, 0, 48, 66, 66, 85, 60, 62, 62, 62, 49, 0, 0, 0, 0, 0, 46, 40, 44, 43, 40, 47, 0, 0, 0, 46, 40, 44, 43, 41, 47, 0, 0, 0, 0, 0, 0, 46, 40, 56, 60, 85, 60, 60, 60, 62, 63, 78, 60, 60, 60, 58, 59, 57, 40, 45, 40, 44, 43, 41, 40, 40, 47, 0, 0, 0, 0, 0, 46, 40, 45, 44, 40, 40, 44, 42, 43, 40, 40, 45, 40, 43, 41, 45, 45, 40, 47, 0, 0, 0, 0, 0, 46, 40, 40, 41, 40, 40, 40, 44, 43, 40, 40, 45, 56, 60, 49, 0, 35, 19, 38, 0, 0, 46, 40, 40, 40, 40, 40, 47, 0, 27, 0, 0, 37, 21, 36, 46, 40, 40, 40, 40, 40, 47, 0, 27, 0, 0, 37, 19, 36, 46, 40, 40, 40, 40, 40, 47, 0, 28, 0, 0, 37, 22, 36, 46, 41, 40, 40, 40, 40, 40, 56, 60, 60, 75, 60, 63, 63, 63, 49, 0, 0, 0, 0, 0, 50, 54, 52, 54, 53, 51, 0, 0, 0, 50, 52, 55, 52, 55, 51, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 78, 60, 60, 60, 60, 60, 74, 60, 60, 60, 82, 73, 66, 66, 83, 60, 60, 60, 60, 60, 60, 49, 0, 0, 0, 0, 0, 50, 53, 55, 52, 52, 52, 54, 53, 52, 52, 52, 54, 53, 55, 52, 54, 52, 52, 51, 0, 0, 0, 0, 0, 48, 60, 60, 64, 60, 60, 60, 84, 66, 66, 71, 72, 66, 85, 49, 0, 0, 0, 30, 0, 0, 50, 52, 52, 52, 52, 52, 51, 0, 32, 0, 0, 27, 0, 0, 50, 52, 52, 52, 52, 52, 51, 0, 32, 0, 0, 33, 0, 0, 50, 52, 52, 52, 52, 52, 51, 0, 27, 0, 0, 33, 0, 0, 48, 63, 101, 52, 52, 52, 100, 60, 101, 52, 55, 52, 52, 52, 52, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 52, 52, 52, 52, 52, 52, 52, 52, 55, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 54, 53, 52, 52, 52, 55, 52, 54, 53, 55, 52, 55, 51, 0, 0, 0, 88, 89, 0, 0, 0, 0, 86, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 86, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 86, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 50, 52, 51, 0, 0, 0, 48, 60, 49, 0, 31, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 35, 38, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 90, 91, 0, 0, 102, 0, 0, 0, 0, 48, 60, 49, 19, 36, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 19, 24, 19, 38, 0, 0, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 35, 38, 0, 0, 0, 92, 93, 0, 0, 17, 0, 0, 0, 0, 0, 0, 98, 99, 0, 92, 93, 17, 17, 0, 0, 0, 0, 0, 0, 0, 98, 99, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 17, 0, 98, 99, 0, 92, 93, 0, 0, 102, 0, 0, 0, 0, 48, 60, 49, 0, 0, 39, 0, 0, 102, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 27, 39, 0, 18, 18, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 31, 0, 0, 0, 39, 0, 0, 32, 0, 0, 0, 94, 95, 0, 0, 18, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 18, 18, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 18, 0, 94, 95, 0, 94, 95, 0, 0, 102, 0, 0, 0, 0, 48, 60, 57, 43, 40, 40, 40, 40, 40, 40, 40, 41, 40, 40, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 40, 40, 44, 42, 42, 43, 40, 41, 40, 40, 40, 40, 40, 41, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 41, 40, 40, 41, 47, 0, 0, 0, 0, 0, 0, 0, 46, 40, 44, 43, 40, 45, 40, 40, 40, 40, 41, 40, 44, 43, 40, 40, 40, 40, 45, 40, 44, 42, 43, 40, 40, 45, 40, 40, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 41, 40, 40, 40, 40, 40, 44, 40, 40, 40, 40, 40, 41, 40, 40, 43, 40, 40, 40, 41, 40, 40, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 40, 40, 41, 40, 40, 40, 40, 40, 40, 40, 56, 60, 64, 64, 66, 68, 66, 85, 60, 60, 60, 75, 60, 60, 64, 61, 61, 64, 60, 60, 60, 60, 60, 64, 64, 60, 60, 60, 60, 60, 60, 75, 60, 60, 60, 60, 60, 60, 64, 61, 61, 64, 60, 60, 60, 59, 59, 58, 59, 59, 60, 84, 85, 84, 66, 85, 60, 60, 84, 66, 69, 67, 85, 60, 60, 65, 65, 60, 82, 70, 85, 79, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 64, 60, 60, 60, 60, 61, 61, 60, 74, 60, 60, 60, 60, 60, 65, 58, 59, 65, 60, 60, 60, 60, 60, 82, 66, 85, 60, 60, 60, 60, 60, 84, 67, 70, 66, 85, 81, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 80, 60, 60, 60, 59, 59, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 63, 63, 60, 60, 60, 82, 66, 66, 67, 83, 60, 60, 63, 62, 62, 63, 60, 60, 60, 60, 60, 63, 63, 60, 60, 60, 60, 60, 60, 78, 60, 60, 60, 60, 60, 60, 63, 62, 62, 63, 60, 60, 60, 65, 65, 60, 65, 65, 60, 74, 61, 61, 60, 82, 71, 66, 83, 60, 60, 60, 61, 60, 60, 74, 60, 60, 64, 64, 74, 74, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 63, 85, 60, 60, 60, 62, 62, 60, 82, 72, 66, 69, 66, 70, 83, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 76, 60, 60, 60, 64, 61, 64, 60, 60, 60, 64, 61, 61, 64, 60, 60, 60, 60, 60, 84, 71, 66, 70, 83, 60, 60, 60, 63, 63, 60, 82, 71, 66, 66, 68, 66, 66, 64, 61, 61, 61, 64, 66, 67, 66, 83, 60, 60, 60, 60, 65, 60, 65, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 82, 71, 66, 66, 72, 70, 66, 83, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 82, 68, 83, 62, 62, 60, 60, 60, 60, 60, 60, 65, 84, 62, 60, 60, 79, 60, 60, 63, 63, 75, 77, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 76, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 82, 66, 71, 66, 63, 62, 63, 60, 60, 60, 63, 62, 62, 63, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 63, 62, 62, 62, 63, 71, 85, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 101, 52, 52, 52, 55, 54, 53, 52, 52, 52, 55, 52, 52, 52, 54, 53, 52, 55, 52, 52, 52, 52, 54, 52, 55, 52, 52, 52, 52, 53, 55, 52, 52, 52, 52, 55, 52, 52, 52, 54, 53, 55, 52, 52, 52, 52, 55, 52, 52, 52, 54, 55, 52, 52, 52, 52, 52, 52, 55, 55, 52, 54, 53, 55, 52, 100, 64, 64, 61, 61, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 64, 83, 60, 101, 55, 52, 52, 52, 52, 55, 54, 53, 52, 52, 52, 53, 55, 52, 52, 52, 52, 55, 52, 52, 52, 54, 53, 52, 55, 52, 54, 52, 52, 52, 55, 52, 52, 52, 54, 52, 55, 52, 52, 52, 53, 52, 55, 100, 60, 101, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 100, 49, 0, 0, 0, 29, 0, 0, 0, 86, 0, 27, 0, 0, 0, 0, 0, 0, 33, 0, 0, 86, 0, 0, 0, 32, 0, 0, 0, 0, 0, 27, 0, 86, 0, 0, 34, 0, 0, 0, 0, 0, 32, 0, 0, 86, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 27, 27, 0, 0, 0, 27, 0, 48, 63, 63, 62, 62, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 63, 60, 60, 49, 29, 0, 0, 86, 0, 27, 0, 0, 0, 0, 0, 0, 28, 0, 0, 86, 0, 27, 0, 0, 0, 0, 0, 0, 32, 0, 0, 86, 0, 0, 27, 0, 0, 0, 0, 0, 33, 0, 0, 86, 0, 0, 27, 48, 64, 49, 37, 36, 86, 0, 0, 0, 0, 0, 0, 0, 35, 38, 0, 30, 86, 31, 0, 29, 0, 32, 0, 37, 36, 0, 0, 0, 86, 32, 0, 48, 49, 20, 38, 0, 27, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 37, 20, 19, 36, 0, 0, 0, 0, 37, 36, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 35, 38, 0, 0, 28, 0, 48, 60, 60, 60, 60, 57, 40, 47, 0, 0, 0, 46, 41, 56, 60, 60, 60, 60, 49, 27, 0, 0, 0, 37, 36, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 37, 36, 0, 0, 0, 0, 0, 0, 35, 38, 0, 0, 37, 21, 36, 0, 0, 0, 0, 0, 35, 38, 0, 0, 0, 0, 32, 48, 63, 49, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 88, 89, 88, 89, 88, 89, 88, 89, 0, 0, 0, 0, 30, 0, 48, 49, 0, 32, 0, 32, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 35, 38, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 35, 38, 0, 0, 37, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 27, 0, 0, 27, 0, 48, 60, 101, 52, 52, 52, 52, 51, 0, 0, 0, 50, 52, 52, 52, 52, 100, 60, 49, 35, 38, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 35, 38, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 37, 19, 36, 48, 60, 49, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 90, 91, 90, 91, 96, 97, 96, 97, 90, 91, 0, 0, 0, 0, 27, 0, 48, 49, 0, 27, 0, 35, 19, 38, 0, 0, 37, 36, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 37, 19, 36, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 36, 0, 30, 37, 19, 36, 0, 50, 52, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 51, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 48, 64, 49, 35, 19, 20, 38, 0, 0, 0, 0, 0, 0, 0, 92, 93, 92, 93, 92, 93, 98, 99, 98, 99, 92, 93, 0, 0, 0, 0, 27, 0, 48, 49, 37, 36, 0, 0, 0, 27, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 0, 0, 0, 0, 0, 35, 38, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 27, 27, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 96, 97, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 96, 97, 0, 48, 63, 49, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 94, 95, 94, 95, 94, 95, 94, 95, 94, 95, 94, 95, 0, 0, 0, 0, 35, 38, 48, 49, 27, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 17, 17, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 98, 99, 0, 92, 93, 0, 0, 0, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 98, 99, 0, 92, 93, 0, 0, 0, 0, 0, 0, 0, 98, 99, 0, 98, 99, 0, 48, 60, 49, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 46, 40, 43, 41, 40, 40, 40, 44, 42, 42, 43, 40, 40, 47, 0, 0, 0, 0, 32, 48, 49, 29, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 18, 18, 0, 0, 0, 0, 102, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 102, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 48, 60, 49, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 48, 60, 60, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 49, 0, 0, 0, 0, 27, 48, 49, 36, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 0, 0, 0, 0, 0, 46, 40, 40, 44, 43, 40, 47, 0, 0, 0, 0, 0, 0, 98, 99, 0, 98, 99, 0, 0, 0, 0, 0, 0, 46, 45, 44, 43, 40, 40, 47, 0, 0, 0, 0, 0, 46, 41, 40, 40, 44, 43, 40, 40, 40, 44, 40, 40, 40, 40, 40, 40, 40, 40, 41, 40, 40, 40, 44, 42, 42, 43, 40, 40, 40, 40, 40, 40, 40, 44, 43, 41, 40, 47, 0, 0, 0, 0, 0, 46, 41, 41, 40, 40, 40, 47, 0, 0, 0, 0, 0, 46, 44, 43, 40, 40, 44, 47, 0, 0, 0, 0, 0, 46, 40, 44, 43, 40, 40, 40, 56, 60, 49, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 48, 60, 60, 101, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 0, 0, 0, 0, 27, 48, 49, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 48, 60, 60, 65, 65, 60, 49, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 48, 60, 65, 60, 60, 60, 49, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 64, 61, 61, 64, 60, 60, 59, 59, 60, 60, 60, 60, 60, 78, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 81, 60, 49, 0, 0, 0, 0, 0, 48, 80, 82, 66, 67, 85, 49, 0, 0, 0, 0, 0, 48, 65, 60, 60, 59, 60, 49, 0, 0, 0, 0, 0, 48, 60, 60, 59, 65, 65, 59, 60, 60, 49, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 48, 64, 64, 49, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 37, 36, 48, 49, 0, 0, 0, 0, 46, 44, 43, 40, 40, 40, 47, 0, 0, 0, 0, 0, 50, 54, 53, 52, 52, 55, 51, 0, 0, 0, 0, 0, 46, 43, 40, 40, 44, 43, 47, 0, 0, 0, 0, 0, 50, 52, 55, 52, 54, 52, 51, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 63, 62, 62, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 82, 66, 68, 66, 66, 72, 85, 60, 60, 60, 60, 64, 61, 61, 64, 66, 67, 83, 60, 49, 0, 0, 0, 0, 0, 50, 52, 52, 52, 52, 52, 51, 0, 0, 0, 0, 0, 50, 52, 52, 52, 52, 52, 51, 0, 0, 0, 0, 0, 50, 52, 52, 52, 52, 52, 52, 100, 58, 57, 44, 43, 40, 40, 47, 0, 0, 0, 0, 0, 48, 63, 63, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 38, 48, 49, 0, 0, 0, 0, 50, 52, 52, 52, 55, 52, 51, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 54, 52, 55, 52, 51, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 100, 60, 101, 54, 52, 52, 52, 52, 52, 54, 53, 52, 52, 52, 52, 52, 52, 53, 52, 52, 52, 52, 55, 52, 52, 100, 60, 63, 62, 62, 63, 60, 60, 60, 60, 49, 0, 0, 0, 0, 0, 0, 30, 0, 86, 37, 36, 0, 0, 0, 0, 0, 0, 0, 32, 0, 86, 31, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 86, 37, 36, 0, 48, 60, 60, 60, 60, 65, 65, 49, 0, 0, 0, 0, 37, 48, 60, 60, 49, 20, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 48, 49, 20, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 55, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 24, 19, 48, 60, 66, 85, 60, 60, 60, 60, 60, 60, 49, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 50, 52, 52, 52, 52, 52, 52, 51, 0, 0, 0, 0, 32, 48, 64, 64, 49, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 41, 56, 49, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 76, 60, 60, 60, 60, 60, 60, 57, 43, 47, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 0, 102, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 27, 48, 63, 63, 49, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 48, 60, 60, 49, 0, 35, 21, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 17, 17, 0, 17, 0, 0, 17, 0, 17, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 49, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 0, 102, 0, 0, 0, 0, 35, 19, 24, 38, 0, 0, 27, 48, 60, 60, 49, 0, 30, 0, 0, 0, 0, 0, 0, 0, 37, 24, 19, 36, 48, 60, 60, 49, 0, 0, 0, 27, 0, 39, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 39, 18, 18, 0, 18, 39, 0, 18, 0, 18, 39, 18, 18, 18, 0, 39, 0, 0, 0, 0, 39, 0, 48, 60, 60, 82, 85, 60, 60, 58, 59, 59, 58, 60, 49, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 102, 0, 39, 0, 0, 39, 0, 0, 27, 0, 37, 36, 48, 60, 60, 49, 0, 31, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 48, 60, 61, 57, 40, 40, 43, 45, 40, 40, 40, 40, 40, 40, 40, 44, 42, 43, 40, 40, 40, 40, 40, 40, 40, 40, 44, 40, 40, 41, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 43, 40, 40, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 40, 41, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 44, 43, 40, 40, 40, 40, 40, 44, 40, 40, 40, 40, 40, 44, 43, 40, 40, 56, 60, 60, 60, 78, 60, 60, 60, 60, 60, 60, 60, 57, 40, 41, 40, 40, 40, 40, 40, 40, 40, 41, 44, 43, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 43, 40, 41, 44, 40, 40, 40, 41, 40, 40, 40, 40, 40, 40, 40, 40, 40, 44, 43, 40, 40, 40, 41, 40, 56, 60, 60, 57, 43, 41, 40, 40, 40, 44, 43, 40, 40, 41, 40, 40, 40, 56, 60, 62, 60, 60, 60, 60, 78, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 77, 60, 60, 64, 61, 61, 61, 64, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 80, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 65, 60, 60, 60, 60, 60, 60, 60, 82, 68, 69, 71, 85, 60, 60, 60, 84, 70, 66, 67, 68, 83, 60, 60, 63, 58, 59, 59, 58, 63, 60, 60, 60, 60, 84, 66, 68, 85, 60, 60, 60, 60, 81, 60, 79, 60, 60, 60, 60, 60, 60, 77, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 64, 64, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 58, 59, 59, 58, 60, 60, 60, 84, 66, 71, 66, 83, 60, 60, 63, 62, 62, 62, 63, 60, 60, 60, 60, 60, 60, 60, 60, 65, 59, 59, 65, 60, 60, 84, 66, 71, 83, 60, 60, 60, 60, 60, 64, 61, 61, 64, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 84, 71, 66, 83, 60, 60, 60, 84, 66, 70, 85, 60, 60, 65, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 64, 61, 61, 61, 64, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 84, 71, 83, 60, 60, 80, 60, 60, 60, 60, 74, 60, 82, 66, 85, 60, 60, 60, 60, 74, 60, 65, 59, 59, 65, 60, 60, 82, 66, 66, 66, 66, 60, 60, 63, 63, 60, 60, 82, 71, 66, 73, 85, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 79, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 79, 60, 60, 60, 60, 60, 60, 60, 60, 63, 62, 62, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 76, 60, 60, 60, 60, 60, 60, 75, 60, 60, 74, 60, 60, 82, 70, 66, 67, 85, 60, 60, 60, 60, 60, 60, 60, 63, 62, 62, 62, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 78, 60, 60, 60, 60, 74, 60, 60, 60, 60, 78, 60, 60, 60, 82, 71, 66, 66, 72, 83, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 66, 66, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 74, 60, 60, 74, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 74, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60);
			this.level2_width = 160;
			this.level2_height = 75;
			this.level2_rect_x = new Array(0, 0, 0, 350, 600, 100, 700, 0, 0, 250, 300, 0, 0, 3250, 3400, 3550, 3800, 3900, 4050, 4200, 800, 2050, 2350, 2700, 3050, 3400, 3650, 3550, 3350, 3300, 3800, 4750, 4000, 4600, 5200, 5650, 5650, 5950, 5700, 7700, 7600, 7750, 7900, 7850, 7950, 7950, 7950, 7050, 6900, 6800, 6400, 6400, 5250, 5500, 4600, 5250, 5050, 4950, 5050, 4450, 4550, 4600, 3800, 2900, 2750, 2400, 1900, 1800, 1700, 2550, 2800, 3250, 2700, 3000, 1650, 750, 1700, 750, 650, 500, 650, 1100, 0, 0, 7850, 7950, 7000, 7650, 5500, 5900, 6200, 6600, 6900, 7300, 4800, 5400, 6000, 6350, 6500, 6400, 7000, 2650, 4550, 4000, 2750, 2800, 2050, 1450, 850, 250, 7450, 6750, 6600, 6750, 7750, 3300, 4100);
			this.level2_rect_y = new Array(0, 850, 400, 650, 400, 900, 750, 1000, 2100, 1950, 2350, 2350, 2500, 2750, 2750, 2800, 2800, 2500, 2500, 2500, 0, 650, 350, 350, 350, 350, 50, 1350, 1450, 1100, 800, 1000, 500, 500, 250, 400, 350, 50, 800, 1050, 2200, 2200, 2200, 1900, 2050, 50, 1500, 1300, 1300, 1600, 1600, 1300, 1200, 1300, 1300, 1100, 1500, 1900, 2000, 2200, 1750, 2050, 1750, 1750, 1750, 900, 2000, 2100, 2200, 2200, 2050, 2200, 900, 1000, 900, 1200, 1350, 1350, 1450, 1700, 2200, 2200, 2750, 3500, 3300, 2750, 3000, 2350, 2200, 1900, 2200, 1900, 2200, 1900, 3100, 3100, 3100, 2750, 3200, 3350, 3150, 3100, 3350, 3300, 3300, 3350, 3100, 3200, 3100, 3200, 350, 350, 500, 550, 1150, 2950, 2950);
			this.level2_rect_w = new Array(800, 100, 50, 450, 200, 850, 50, 50, 400, 150, 50, 50, 3550, 150, 150, 100, 100, 150, 150, 3800, 7200, 200, 100, 100, 100, 250, 150, 100, 200, 150, 1300, 150, 300, 300, 600, 200, 150, 200, 1800, 250, 150, 150, 100, 150, 50, 50, 50, 950, 150, 100, 250, 150, 250, 900, 650, 150, 150, 300, 150, 750, 150, 50, 750, 750, 150, 150, 650, 100, 100, 450, 50, 950, 150, 150, 750, 1100, 150, 150, 250, 1600, 300, 300, 50, 8000, 150, 50, 700, 50, 350, 250, 350, 250, 350, 250, 350, 350, 350, 150, 250, 50, 200, 1900, 100, 550, 150, 50, 350, 350, 350, 350, 250, 450, 150, 100, 50, 50, 50);
			this.level2_rect_h = new Array(400, 150, 450, 100, 250, 100, 150, 1100, 250, 150, 150, 150, 250, 200, 150, 100, 100, 400, 450, 250, 50, 100, 100, 100, 100, 100, 1800, 200, 100, 100, 200, 150, 100, 100, 100, 100, 50, 750, 200, 100, 150, 100, 300, 150, 150, 1250, 400, 200, 400, 100, 100, 300, 300, 200, 200, 100, 400, 100, 200, 150, 300, 150, 100, 100, 300, 1100, 350, 250, 150, 150, 150, 100, 100, 100, 100, 150, 200, 100, 100, 150, 100, 100, 750, 250, 200, 550, 150, 150, 100, 100, 100, 100, 100, 100, 150, 150, 150, 600, 150, 150, 350, 200, 150, 200, 50, 150, 150, 100, 150, 100, 200, 200, 150, 100, 150, 150, 150);
			this.level2_item_type = new Array(11, 13, 13, 13, 13, 7, 5, 6, 8, 13, 13, 4, 4, 12, 9, 10, 12, 13, 13, 1, 1, 3, 0, 2, 1, 3, 3, 1, 1, 11, 12, 13, 13, 11, 11, 11, 11);
			this.level2_item_x = new Array(157, 104, 157, 116, 70, 3, 156, 151, 9, 70, 2, 53, 95, 3, 147, 74, 131, 131, 16, 127, 152, 93, 81, 67, 55, 15, 7, 154, 55, 77, 75, 3, 78, 126, 124, 26, 76);
			this.level2_item_y = new Array(37, 35, 24, 6, 33, 49, 49, 6, 12, 4, 28, 43, 43, 40, 69, 43, 62, 56, 10, 69, 49, 43, 61, 61, 43, 17, 49, 25, 69, 69, 68, 57, 67, 61, 15, 33, 34);
			this.level2_tileSet = 3;
			this.level2_gameType = 0;
			this.level2_objective_names = ["Amateur Score: 3,000", "Pro Score: 6,500", "Operator Score: 10,000", "Collect 4 Gun Parts", "Find the secret briefcase", "Get at least 75 kills", "Get 50 kills with the Model 6 357", "Destroy 10 Data Discs", "Complete all objectives in one round"];
			this.level2_objective_scores = new Array(3000, 6500, 10000);
			this.level2_objective_specialKills_needed = 75;
			this.level2_objective_specialKillType = 0;
			this.level2_objective_whichWeaponProficiency = 8;
			this.level3 = new Array
			this.level3_width = 160;
			this.level3_height = 85;
			this.level3_rect_x = new Array(0, 7750, 0, 250, 1750, 2500, 2000, 2100, 2600, 1400, 250, 3000, 3250, 4000, 3750, 4500, 4850, 5000, 5100, 5250, 7150, 7250, 6750, 6500, 6250, 6100, 6000, 5650, 5500, 5000, 4000, 4100, 3500, 4000, 4100, 4250, 7000, 7200, 7000, 6000, 7250, 7350, 7150, 6750, 7350, 2500, 2250, 2350, 2250, 750, 750, 1350, 1500, 3150, 2350, 750, 6100, 250, 1000, 1750);
			this.level3_rect_y = new Array(0, 100, 100, 550, 550, 100, 100, 400, 1000, 850, 1150, 850, 550, 550, 850, 850, 300, 100, 1000, 450, 600, 450, 900, 900, 1150, 1450, 1750, 1750, 2050, 2350, 1750, 2500, 2650, 2650, 3100, 2650, 2700, 3000, 3550, 3700, 2400, 2100, 2000, 1750, 1450, 2650, 1750, 2500, 2650, 2650, 3250, 3550, 3250, 2950, 3100, 3700, 2500, 2050, 2350, 2050);
			this.level3_rect_w = new Array(8000, 250, 250, 1000, 750, 250, 250, 50, 50, 200, 5500, 250, 500, 500, 250, 250, 150, 250, 50, 1750, 100, 500, 1000, 250, 250, 400, 250, 250, 500, 250, 250, 50, 500, 250, 50, 2750, 100, 350, 250, 1750, 500, 100, 200, 250, 400, 500, 250, 50, 250, 1500, 500, 150, 5500, 200, 50, 1400, 50, 500, 500, 500);
			this.level3_rect_h = new Array(100, 4300, 4300, 150, 150, 900, 300, 150, 150, 150, 600, 150, 150, 150, 150, 150, 150, 900, 150, 150, 150, 250, 250, 1750, 300, 150, 750, 150, 300, 150, 750, 150, 150, 450, 150, 200, 150, 150, 150, 450, 150, 150, 150, 150, 150, 150, 750, 150, 450, 150, 150, 150, 450, 150, 150, 450, 150, 2100, 150, 150);
			this.level3_item_type = new Array(0, 4, 12, 10, 0, 4, 5, 1, 11, 3, 6, 11, 4, 2, 7, 11, 12, 11, 1, 3, 3, 9, 11, 8, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13);
			this.level3_item_x = new Array(41, 46, 47, 12, 51, 12, 82, 101, 98, 123, 117, 153, 124, 83, 152, 136, 153, 153, 81, 48, 48, 22, 17, 41, 67, 151, 144, 102, 102, 22, 106, 6, 152, 107);
			this.level3_item_y = new Array(10, 10, 9, 10, 22, 22, 10, 22, 5, 52, 8, 17, 52, 52, 47, 34, 27, 73, 64, 64, 52, 73, 64, 40, 9, 7, 38, 63, 45, 45, 3, 15, 67, 14);
			this.level3_tileSet = 4;
			this.level3_gameType = 0;
			this.level3_objective_names = ["Amateur Score: 5,000", "Pro Score: 10,000", "Operator Score: 15,000", "Collect 4 Gun Parts", "Find the secret briefcase", "Get at least 100 headshots", "Get 50 kills with the XR 556", "Destroy 10 Data Discs", "Complete all objectives in one round"];
			this.level3_objective_scores = new Array(5000, 10000, 15000);
			this.level3_objective_specialKills_needed = 100;
			this.level3_objective_specialKillType = 1;
			this.level3_objective_whichWeaponProficiency = 5;
			this.level4 = new Array(21, 21, 21, 21, 21, 21, 21, 21, 22, 47, 49, 38, 40, 20, 22, 56, 58, 11, 13, 47, 49, 20, 21, 21, 21, 22, 47, 48, 49, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 56, 57, 58, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 47, 48, 48, 48, 49, 41, 42, 42, 42, 42, 42, 42, 42, 42, 43, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 20, 21, 24, 24, 24, 24, 24, 24, 24, 24, 25, 47, 49, 38, 40, 23, 25, 56, 58, 11, 13, 47, 49, 23, 24, 24, 24, 25, 47, 48, 49, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 59, 60, 61, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 47, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 9, 10, 0, 0, 0, 0, 0, 0, 0, 50, 52, 38, 40, 0, 0, 56, 58, 11, 13, 50, 52, 0, 0, 0, 0, 0, 47, 48, 49, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 17, 18, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 40, 0, 0, 59, 61, 11, 13, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 20, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 40, 0, 0, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 34, 0, 0, 20, 21, 12, 13, 26, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 28, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 35, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 26, 27, 27, 28, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 31, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 32, 33, 33, 34, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 34, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 53, 54, 55, 0, 0, 0, 0, 0, 35, 36, 36, 36, 37, 0, 0, 0, 0, 0, 44, 45, 45, 45, 46, 0, 0, 0, 0, 0, 8, 9, 9, 9, 10, 0, 0, 0, 0, 0, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 56, 57, 58, 0, 0, 0, 0, 0, 41, 42, 42, 42, 43, 0, 0, 0, 0, 0, 50, 51, 51, 51, 52, 0, 0, 0, 0, 0, 14, 15, 15, 15, 16, 0, 0, 0, 0, 0, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 41, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 55, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 55, 0, 0, 0, 20, 21, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 38, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 61, 0, 0, 0, 20, 21, 36, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 25, 41, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 47, 48, 49, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 50, 51, 52, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 22, 35, 36, 36, 36, 36, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 45, 45, 45, 46, 38, 39, 39, 39, 39, 40, 0, 0, 17, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 25, 38, 39, 39, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 37, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 48, 48, 48, 49, 38, 39, 39, 39, 39, 40, 0, 0, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 47, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 43, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 51, 51, 51, 52, 38, 39, 39, 39, 39, 40, 0, 0, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 54, 54, 54, 54, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 18, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 50, 51, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 40, 0, 0, 23, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 60, 60, 60, 60, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 24, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 36, 36, 37, 26, 27, 28, 53, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 34, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 40, 0, 0, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 0, 0, 56, 57, 58, 0, 0, 0, 35, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 9, 10, 0, 0, 0, 0, 0, 38, 39, 39, 39, 40, 29, 30, 31, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 40, 0, 0, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 0, 0, 56, 57, 58, 0, 0, 0, 41, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 15, 15, 16, 0, 0, 0, 0, 0, 38, 39, 39, 39, 40, 29, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 40, 32, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 54, 54, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 40, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 57, 58, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 38, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 40, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 57, 58, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 38, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 57, 58, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 38, 39, 39, 39, 39, 40, 53, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 37, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 38, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 56, 57, 57, 57, 57, 58, 23, 24, 21, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 38, 39, 39, 39, 39, 40, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 43, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 41, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 56, 57, 57, 57, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 46, 0, 0, 38, 39, 42, 42, 42, 43, 44, 45, 45, 45, 45, 46, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 9, 9, 10, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 55, 17, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 59, 60, 60, 60, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 0, 0, 38, 39, 27, 27, 27, 28, 50, 51, 51, 51, 51, 52, 0, 0, 0, 0, 14, 15, 15, 15, 15, 15, 15, 15, 16, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 28, 0, 0, 0, 0, 0, 35, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 23, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 34, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 22, 0, 0, 0, 56, 57, 58, 0, 0, 0, 8, 9, 10, 0, 0, 0, 20, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 38, 39, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 22, 0, 0, 0, 56, 57, 58, 0, 0, 0, 14, 15, 16, 0, 0, 0, 23, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 55, 0, 0, 0, 0, 11, 13, 0, 0, 41, 42, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 25, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 46, 59, 61, 0, 0, 0, 0, 14, 16, 53, 54, 54, 54, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 17, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 23, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 0, 41, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 19, 0, 0, 0, 0, 0, 56, 57, 57, 57, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 44, 45, 46, 17, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 25, 0, 0, 0, 0, 0, 59, 60, 60, 60, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 25, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 47, 48, 49, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 47, 48, 49, 26, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 45, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 47, 48, 49, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 20, 22, 35, 36, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 47, 48, 49, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 16, 23, 25, 38, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 51, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 10, 53, 54, 54, 54, 54, 54, 54, 54, 55, 38, 39, 39, 39, 40, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 26, 27, 27, 27, 28, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 44, 45, 45, 45, 45, 45, 45, 45, 45, 46, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 8, 9, 9, 9, 9, 9, 9, 9, 10, 47, 48, 30, 30, 30, 31, 44, 46, 0, 0, 0, 0, 44, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 8, 10, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 12, 12, 13, 59, 60, 60, 60, 60, 60, 60, 60, 61, 41, 42, 42, 42, 43, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 29, 30, 30, 30, 31, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 50, 51, 51, 51, 51, 51, 51, 51, 51, 52, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 14, 15, 15, 15, 15, 15, 15, 15, 16, 50, 51, 30, 30, 30, 31, 50, 52, 0, 0, 0, 0, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 14, 16, 50, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 45, 46, 8, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 36, 37, 17, 18, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 51, 52, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 33, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 43, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 15, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 45, 45, 45, 45, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 0, 8, 9, 10, 56, 57, 58, 17, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 16, 0, 0, 0, 14, 15, 16, 56, 57, 58, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 27, 27, 28, 0, 0, 0, 0, 0, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 0, 0, 0, 0, 0, 17, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 33, 33, 34, 0, 0, 0, 0, 0, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 53, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 55, 0, 0, 0, 0, 0, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 55, 0, 0, 0, 0, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 0, 0, 0, 0, 53, 54, 55, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 61, 0, 0, 0, 0, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 0, 0, 0, 0, 59, 60, 61, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 44, 46, 0, 0, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 51, 51, 51, 51, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 50, 52, 0, 0, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 30, 30, 30, 31, 35, 36, 36, 36, 36, 36, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 30, 30, 30, 31, 41, 42, 42, 42, 42, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 25, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 39, 39, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 36, 36, 36, 36, 36, 36, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 18, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 13, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 39, 39, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 18, 18, 18, 19, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 54, 54, 55, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 15, 15, 16, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 0, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 0, 0, 0, 0, 0, 53, 54, 55, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 24, 24, 24, 25, 56, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 60, 60, 61, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 21, 21, 21, 22, 0, 0, 0, 0, 0, 44, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 0, 0, 0, 0, 0, 56, 57, 58, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 24, 24, 24, 25, 0, 0, 0, 0, 0, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 47, 48, 48, 48, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 47, 48, 48, 48, 33, 33, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 61, 47, 48, 48, 48, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 53, 54, 54, 54, 54, 54, 54, 55, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 35, 36, 36, 36, 36, 36, 36, 36, 37, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 47, 48, 48, 48, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 56, 57, 57, 57, 57, 57, 57, 58, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 38, 39, 39, 39, 39, 39, 39, 39, 40, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 47, 48, 48, 48, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 56, 57, 57, 57, 57, 57, 57, 58, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 38, 39, 39, 39, 39, 39, 39, 39, 40, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 50, 51, 51, 51);
			this.level4_width = 160;
			this.level4_height = 80;
			this.level4_rect_x = new Array();
			this.level4_rect_y = new Array();
			this.level4_rect_w = new Array();
			this.level4_rect_h = new Array();
			this.level4_item_type = new Array(10, 4, 12, 2, 2, 5, 11, 13, 0, 2, 4, 13, 12, 6, 13, 13, 13, 4, 2, 13, 12, 13, 11, 13, 13, 4, 13, 11, 13, 13, 2, 4, 13, 12, 11, 13, 13, 13, 8, 11, 13, 9, 2, 13, 13, 4, 12, 13, 4, 4, 7, 11);
			this.level4_item_x = new Array(88, 30, 32, 49, 44, 35, 34, 36, 150, 93, 137, 157, 155, 154, 89, 27, 51, 45, 87, 96, 57, 61, 156, 157, 121, 48, 28, 28, 51, 56, 25, 88, 21, 2, 24, 2, 25, 5, 14, 64, 64, 80, 108, 84, 152, 107, 106, 124, 91, 4, 49, 47);
			this.level4_item_y = new Array(39, 17, 16, 17, 10, 10, 17, 16, 28, 10, 10, 25, 27, 3, 14, 21, 35, 42, 22, 2, 41, 35, 50, 37, 36, 10, 47, 51, 65, 65, 75, 47, 37, 15, 14, 4, 4, 67, 25, 60, 54, 67, 57, 61, 54, 67, 66, 67, 39, 51, 42, 42);
			this.level4_tileSet = 5;
			this.level4_gameType = 0;
			this.level4_objective_names = ["Amateur Score: 10,000", "Pro Score: 20,000", "Operator Score: 30,000", "Collect 4 Gun Parts", "Find the secret briefcase", "Get at least 100 headshots", "5 kills with Hyper Death Blaster", "Destroy 20 Data Discs", "Complete all objectives in one round"];
			this.level4_objective_scores = new Array(10000, 20000, 30000);
			this.level4_objective_specialKills_needed = 100;
			this.level4_objective_specialKillType = 1;
			this.level4_objective_whichWeaponProficiency = 20;
			this.level5 = new Array(0, 4, 1, 3, 1, 1, 1, 1, 3, 3, 2, 2, 1, 1, 2, 4, 3, 2, 4, 3, 3, 4, 1, 4, 2, 4, 3, 3, 3, 4, 3, 3, 4, 4, 2, 2, 4, 4, 4, 1, 4, 1, 3, 2, 1, 3, 2, 4, 4, 4, 4, 3, 4, 1, 3, 3, 3, 3, 3, 1, 3, 2, 2, 4, 2, 2, 4, 2, 3, 1, 3, 4, 1, 4, 1, 4, 1, 1, 2, 1, 1, 4, 3, 4, 4, 1, 1, 4, 1, 1, 3, 4, 4, 2, 3, 4, 1, 4, 1, 4, 2, 3, 1, 2, 2, 2, 4, 2, 1, 3, 1, 4, 3, 3, 4, 3, 1, 2, 4, 1, 2, 2, 4, 3, 2, 4, 4, 3, 4, 2, 1, 2, 1, 3, 2, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 4, 2, 1, 4, 5, 15, 12, 11, 14, 13, 12, 13, 12, 13, 12, 11, 13, 11, 11, 12, 11, 11, 13, 11, 12, 13, 13, 13, 11, 13, 14, 14, 12, 14, 11, 12, 11, 13, 11, 14, 12, 11, 14, 14, 12, 14, 11, 12, 11, 12, 14, 12, 13, 14, 14, 14, 13, 11, 14, 12, 12, 12, 14, 11, 14, 14, 11, 13, 13, 11, 13, 13, 14, 11, 14, 13, 14, 13, 13, 14, 14, 14, 13, 14, 13, 12, 11, 14, 12, 14, 14, 13, 14, 14, 13, 13, 14, 11, 14, 14, 14, 11, 13, 13, 14, 11, 14, 12, 12, 12, 12, 14, 14, 12, 13, 13, 12, 14, 13, 14, 14, 12, 12, 14, 14, 13, 11, 14, 11, 11, 14, 14, 14, 12, 11, 12, 13, 11, 11, 12, 13, 11, 14, 12, 12, 14, 14, 11, 11, 11, 13, 12, 13, 11, 10, 3, 5, 20, 22, 20, 99, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 99, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 99, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 0, 1, 1, 2, 4, 3, 4, 3, 3, 1, 3, 2, 1, 3, 3, 2, 4, 2, 3, 1, 2, 2, 3, 1, 4, 1, 1, 2, 2, 5, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 99, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 100, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 0, 1, 21, 7, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 91, 20, 20, 20, 18, 21, 31, 9, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 97, 97, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 20, 20, 20, 20, 20, 20, 20, 20, 92, 20, 90, 92, 20, 90, 20, 20, 20, 18, 27, 21, 8, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 18, 23, 24, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 9, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 0, 2, 2, 1, 2, 2, 1, 1, 5, 17, 23, 21, 6, 97, 97, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 90, 20, 20, 20, 20, 20, 20, 96, 102, 88, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 17, 21, 27, 26, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 103, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 13, 11, 14, 13, 13, 13, 14, 10, 19, 21, 28, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 1, 5, 20, 20, 20, 20, 20, 96, 97, 94, 20, 20, 20, 20, 20, 20, 20, 20, 0, 2, 4, 5, 20, 20, 20, 20, 20, 20, 20, 89, 92, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 20, 16, 21, 21, 25, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 9, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 88, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 21, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 12, 10, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 15, 12, 11, 10, 20, 20, 20, 20, 20, 20, 0, 3, 2, 2, 1, 4, 4, 2, 3, 1, 1, 1, 2, 2, 4, 2, 4, 1, 5, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 23, 24, 9, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 103, 89, 90, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 21, 21, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 11, 11, 13, 11, 11, 11, 14, 11, 12, 14, 14, 12, 13, 11, 13, 11, 13, 10, 19, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 0, 2, 3, 4, 2, 3, 2, 3, 1, 2, 4, 4, 4, 1, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 2, 4, 2, 2, 4, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 28, 21, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 17, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 8, 15, 11, 14, 11, 13, 13, 12, 12, 13, 11, 14, 11, 14, 14, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 13, 11, 13, 11, 14, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 21, 21, 9, 20, 91, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 88, 103, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 26, 21, 21, 21, 8, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 18, 21, 21, 8, 92, 90, 20, 90, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 89, 20, 20, 90, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 97, 97, 97, 97, 97, 18, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 16, 21, 24, 9, 0, 4, 1, 1, 4, 2, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 2, 2, 1, 1, 3, 1, 1, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 20, 20, 20, 20, 20, 16, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 88, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 17, 21, 21, 6, 15, 14, 14, 14, 13, 11, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 13, 11, 14, 13, 11, 14, 13, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 97, 97, 97, 97, 97, 95, 20, 20, 20, 20, 20, 18, 21, 21, 29, 21, 21, 21, 21, 21, 21, 23, 24, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 26, 6, 97, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 90, 89, 20, 92, 92, 90, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 19, 29, 21, 9, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 103, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 21, 27, 21, 21, 21, 28, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 29, 21, 21, 21, 21, 25, 9, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 4, 2, 1, 1, 1, 4, 4, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 88, 104, 97, 95, 16, 30, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 88, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 14, 14, 12, 12, 14, 13, 13, 11, 11, 14, 11, 11, 13, 14, 13, 13, 13, 13, 11, 14, 11, 11, 13, 12, 11, 11, 14, 13, 10, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 23, 24, 27, 21, 21, 21, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 92, 20, 90, 89, 20, 92, 20, 19, 21, 21, 8, 98, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 90, 92, 20, 92, 89, 90, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 22, 20, 20, 20, 20, 0, 1, 3, 5, 20, 20, 20, 20, 22, 20, 20, 20, 20, 0, 4, 2, 4, 5, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 12, 11, 13, 13, 13, 12, 13, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 1, 1, 1, 1, 3, 4, 1, 2, 5, 16, 21, 21, 7, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 2, 1, 1, 1, 1, 3, 2, 2, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 16, 21, 21, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 27, 21, 21, 9, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 11, 11, 12, 13, 12, 13, 11, 13, 10, 16, 21, 21, 9, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 2, 2, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 14, 13, 11, 11, 14, 13, 14, 13, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 95, 20, 20, 20, 20, 20, 20, 17, 21, 29, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 21, 30, 31, 8, 20, 96, 97, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 16, 21, 21, 8, 20, 96, 97, 97, 97, 97, 94, 20, 20, 20, 20, 20, 17, 29, 21, 9, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 18, 21, 21, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 11, 11, 14, 10, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 27, 21, 8, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 18, 21, 26, 6, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 90, 92, 20, 20, 20, 20, 20, 104, 97, 97, 97, 97, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 16, 30, 31, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 105, 20, 20, 20, 20, 20, 103, 20, 20, 20, 20, 20, 20, 0, 1, 1, 1, 5, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 104, 97, 94, 20, 16, 23, 21, 6, 20, 91, 20, 20, 91, 88, 103, 20, 91, 91, 20, 20, 19, 21, 25, 8, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 0, 2, 4, 1, 3, 5, 20, 20, 20, 88, 20, 91, 20, 20, 20, 99, 20, 20, 20, 20, 20, 91, 20, 20, 20, 20, 20, 91, 91, 20, 20, 20, 20, 20, 20, 88, 103, 20, 20, 20, 20, 20, 20, 20, 17, 21, 21, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 105, 20, 20, 20, 91, 20, 20, 88, 91, 91, 20, 20, 20, 18, 28, 21, 21, 8, 20, 91, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 101, 91, 20, 0, 4, 1, 2, 5, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 88, 91, 20, 99, 20, 18, 21, 29, 7, 20, 90, 20, 92, 90, 89, 20, 20, 90, 90, 92, 20, 15, 12, 13, 10, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 15, 13, 12, 13, 13, 10, 20, 20, 92, 89, 20, 90, 20, 20, 20, 99, 20, 20, 92, 92, 20, 90, 20, 20, 20, 20, 20, 90, 90, 92, 20, 20, 20, 92, 20, 89, 20, 20, 20, 20, 20, 20, 20, 20, 16, 29, 21, 7, 20, 20, 20, 20, 20, 20, 20, 92, 20, 90, 20, 105, 20, 92, 92, 90, 20, 92, 89, 90, 90, 20, 20, 20, 15, 13, 13, 13, 10, 20, 90, 92, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 99, 90, 20, 15, 11, 14, 13, 10, 20, 20, 92, 92, 20, 20, 20, 90, 92, 20, 89, 90, 20, 96, 97, 17, 21, 31, 9, 0, 1, 4, 3, 2, 3, 2, 1, 1, 3, 4, 4, 1, 3, 2, 2, 3, 4, 1, 3, 4, 4, 1, 3, 1, 4, 3, 2, 1, 4, 3, 4, 1, 3, 2, 2, 4, 4, 3, 1, 2, 1, 3, 4, 4, 2, 2, 3, 2, 4, 1, 4, 2, 1, 3, 3, 4, 3, 1, 4, 1, 2, 1, 4, 5, 0, 5, 20, 20, 20, 20, 20, 20, 15, 13, 12, 10, 20, 20, 20, 20, 20, 20, 0, 5, 0, 2, 4, 2, 2, 1, 1, 1, 2, 4, 3, 2, 4, 1, 1, 2, 2, 2, 2, 4, 3, 4, 2, 3, 4, 2, 2, 2, 4, 4, 3, 3, 2, 2, 1, 2, 4, 3, 1, 2, 4, 2, 2, 1, 1, 4, 1, 2, 4, 2, 1, 4, 3, 3, 4, 2, 2, 1, 1, 3, 5, 16, 21, 21, 9, 17, 21, 28, 21, 21, 21, 21, 27, 23, 24, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 27, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 29, 21, 21, 21, 21, 21, 21, 27, 23, 24, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 27, 21, 21, 21, 21, 21, 21, 30, 31, 21, 8, 18, 8, 20, 20, 20, 20, 20, 20, 22, 0, 5, 22, 20, 20, 20, 20, 20, 20, 17, 6, 18, 21, 27, 21, 21, 21, 21, 21, 27, 21, 23, 24, 27, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 28, 21, 21, 21, 21, 21, 29, 21, 21, 21, 27, 23, 24, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 28, 21, 21, 30, 31, 29, 21, 28, 21, 6, 18, 21, 21, 6, 15, 12, 14, 12, 13, 13, 14, 11, 11, 11, 12, 13, 11, 13, 13, 12, 13, 14, 12, 11, 12, 11, 12, 14, 12, 12, 12, 12, 14, 13, 11, 12, 14, 11, 11, 12, 14, 12, 13, 12, 12, 13, 11, 11, 14, 14, 11, 12, 11, 13, 11, 11, 13, 11, 14, 13, 12, 12, 13, 14, 13, 14, 13, 13, 10, 19, 7, 20, 20, 91, 20, 20, 20, 20, 15, 10, 20, 20, 20, 20, 88, 104, 97, 19, 7, 15, 14, 12, 12, 13, 14, 12, 11, 14, 12, 12, 13, 13, 11, 14, 11, 14, 14, 13, 12, 12, 13, 12, 14, 12, 11, 13, 12, 13, 13, 11, 12, 11, 12, 13, 12, 14, 12, 13, 12, 14, 11, 13, 13, 14, 11, 14, 13, 13, 12, 12, 14, 11, 11, 14, 11, 13, 14, 12, 14, 10, 18, 21, 21, 6, 0, 4, 4, 1, 4, 2, 3, 3, 2, 3, 1, 1, 2, 3, 2, 4, 2, 2, 2, 1, 4, 1, 2, 4, 4, 5, 0, 1, 4, 3, 4, 2, 3, 1, 1, 3, 4, 1, 3, 4, 4, 1, 3, 1, 3, 5, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 99, 16, 6, 20, 92, 90, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 92, 20, 16, 6, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 99, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 99, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 19, 27, 21, 6, 17, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 6, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 97, 95, 16, 8, 0, 4, 3, 4, 5, 20, 20, 20, 20, 20, 20, 0, 2, 2, 3, 5, 18, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 21, 21, 8, 17, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 23, 24, 21, 6, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99, 20, 20, 15, 10, 15, 14, 13, 12, 10, 20, 20, 20, 20, 20, 20, 15, 14, 12, 14, 10, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 97, 97, 94, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 21, 24, 9, 16, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 17, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 26, 21, 8, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 103, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 21, 21, 7, 16, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 17, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 6, 20, 20, 91, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 91, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 23, 21, 6, 17, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 8, 18, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 21, 9, 20, 92, 90, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 20, 20, 92, 90, 20, 20, 92, 20, 20, 20, 20, 20, 90, 20, 20, 92, 92, 90, 20, 20, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 95, 20, 20, 20, 20, 20, 20, 20, 20, 96, 97, 97, 97, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 27, 21, 7, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 8, 19, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 0, 2, 3, 4, 2, 1, 1, 1, 4, 2, 1, 4, 4, 2, 2, 1, 2, 3, 2, 3, 4, 1, 1, 2, 3, 2, 4, 2, 1, 3, 4, 3, 3, 4, 2, 2, 4, 3, 3, 1, 1, 5, 20, 20, 20, 20, 0, 5, 20, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 99, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 16, 21, 21, 9, 16, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 6, 15, 14, 12, 14, 14, 14, 11, 13, 14, 11, 13, 14, 13, 12, 11, 13, 11, 12, 11, 10, 15, 12, 11, 11, 12, 12, 13, 11, 13, 12, 11, 11, 11, 14, 14, 14, 11, 11, 12, 12, 11, 13, 14, 14, 13, 14, 11, 14, 11, 14, 14, 14, 14, 13, 11, 14, 13, 14, 14, 13, 12, 10, 20, 20, 20, 20, 15, 10, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 99, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 103, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 18, 21, 21, 9, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 6, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 104, 98, 98, 98, 94, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 91, 103, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 91, 18, 21, 21, 6, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 98, 98, 98, 102, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 88, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 92, 92, 90, 16, 21, 21, 7, 17, 27, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27, 26, 7, 20, 20, 20, 20, 20, 96, 97, 97, 98, 102, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 2, 3, 1, 1, 2, 4, 1, 2, 2, 4, 1, 2, 2, 2, 4, 2, 4, 1, 3, 4, 4, 3, 4, 2, 4, 3, 1, 1, 1, 1, 2, 3, 2, 1, 4, 4, 2, 3, 2, 2, 4, 2, 1, 3, 3, 4, 3, 5, 16, 21, 21, 6, 16, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 8, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 15, 13, 14, 11, 11, 13, 13, 14, 14, 13, 13, 12, 11, 11, 13, 12, 13, 13, 11, 13, 13, 12, 13, 11, 11, 13, 13, 12, 14, 14, 12, 11, 12, 12, 11, 14, 14, 12, 11, 11, 11, 11, 12, 11, 11, 13, 12, 11, 10, 17, 21, 21, 8, 15, 13, 11, 13, 12, 14, 14, 14, 11, 14, 13, 12, 11, 12, 13, 12, 12, 11, 11, 11, 14, 13, 14, 13, 11, 10, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 3, 5, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 100, 20, 20, 20, 22, 20, 20, 93, 95, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 0, 5, 0, 3, 4, 2, 4, 2, 2, 5, 17, 23, 21, 6, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 99, 20, 20, 20, 20, 22, 20, 20, 99, 20, 20, 0, 3, 5, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 19, 27, 9, 101, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 97, 97, 97, 97, 97, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 6, 15, 13, 13, 13, 12, 12, 11, 10, 16, 21, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 17, 21, 8, 20, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 101, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 19, 21, 8, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 18, 7, 97, 97, 97, 97, 95, 20, 20, 20, 18, 21, 21, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 16, 27, 7, 20, 20, 20, 20, 0, 4, 3, 1, 4, 4, 4, 4, 4, 3, 3, 4, 5, 20, 99, 20, 20, 20, 0, 4, 2, 2, 4, 4, 1, 2, 2, 3, 4, 1, 5, 20, 20, 20, 20, 20, 0, 3, 1, 2, 4, 3, 2, 1, 4, 2, 3, 1, 5, 20, 20, 20, 20, 20, 0, 2, 1, 3, 4, 2, 1, 2, 3, 4, 2, 1, 5, 18, 21, 8, 95, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 99, 18, 9, 20, 20, 20, 20, 20, 20, 20, 20, 19, 28, 21, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 94, 20, 20, 20, 20, 20, 20, 99, 20, 20, 17, 21, 8, 20, 20, 20, 20, 15, 12, 11, 13, 14, 11, 14, 14, 14, 14, 14, 12, 10, 20, 99, 20, 20, 20, 15, 14, 14, 13, 11, 13, 13, 13, 12, 13, 12, 11, 10, 20, 20, 20, 20, 20, 15, 14, 11, 11, 13, 14, 14, 11, 12, 13, 12, 11, 10, 20, 20, 20, 20, 20, 15, 12, 14, 13, 11, 14, 14, 14, 13, 14, 14, 12, 10, 18, 26, 6, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 99, 16, 8, 20, 20, 20, 20, 20, 20, 20, 20, 15, 12, 31, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 96, 97, 94, 18, 21, 7, 102, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 104, 97, 97, 97, 97, 97, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 101, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 0, 5, 20, 20, 20, 20, 20, 0, 1, 1, 1, 1, 1, 5, 20, 20, 99, 20, 20, 99, 17, 25, 8, 20, 91, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 99, 17, 6, 20, 20, 20, 20, 20, 20, 20, 0, 1, 2, 21, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 99, 17, 21, 8, 88, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 104, 97, 97, 102, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 7, 20, 20, 20, 20, 20, 16, 27, 21, 21, 21, 28, 8, 20, 93, 95, 20, 20, 99, 15, 11, 10, 92, 90, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 20, 99, 16, 9, 20, 20, 20, 20, 20, 20, 20, 15, 11, 12, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 99, 16, 29, 8, 89, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 7, 20, 20, 20, 20, 20, 16, 21, 21, 30, 31, 21, 8, 20, 99, 20, 20, 20, 99, 0, 2, 3, 1, 3, 5, 20, 20, 0, 1, 4, 2, 1, 2, 1, 2, 1, 3, 4, 2, 1, 4, 4, 2, 1, 1, 2, 1, 1, 3, 4, 4, 4, 2, 5, 20, 20, 20, 103, 16, 6, 20, 20, 20, 20, 20, 20, 20, 20, 0, 1, 27, 7, 20, 20, 20, 20, 20, 20, 91, 20, 20, 91, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 88, 103, 17, 21, 8, 0, 5, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 10, 20, 20, 20, 20, 20, 15, 11, 11, 11, 11, 11, 10, 20, 99, 20, 20, 20, 99, 15, 13, 11, 13, 14, 10, 20, 20, 15, 11, 13, 13, 14, 13, 12, 14, 12, 11, 11, 14, 14, 14, 12, 11, 14, 11, 14, 12, 14, 13, 13, 14, 14, 12, 10, 20, 20, 20, 20, 19, 6, 20, 20, 20, 20, 20, 93, 102, 20, 17, 21, 24, 9, 20, 20, 20, 20, 20, 20, 90, 92, 20, 90, 88, 104, 98, 95, 20, 20, 20, 20, 92, 20, 20, 89, 20, 15, 14, 10, 15, 10, 20, 90, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 22, 20, 20, 96, 94, 20, 20, 99, 20, 20, 0, 1, 3, 5, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 99, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 6, 20, 20, 20, 20, 20, 99, 20, 20, 16, 27, 21, 7, 20, 20, 20, 20, 20, 0, 2, 4, 4, 4, 3, 5, 20, 20, 20, 20, 20, 0, 3, 2, 1, 2, 4, 4, 1, 1, 4, 0, 1, 3, 2, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 96, 94, 20, 18, 23, 24, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 10, 20, 20, 20, 20, 20, 99, 20, 20, 19, 21, 21, 7, 20, 20, 20, 20, 20, 15, 14, 13, 12, 12, 13, 10, 20, 20, 20, 20, 20, 15, 13, 13, 11, 13, 13, 12, 13, 11, 13, 16, 30, 31, 21, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 99, 20, 20, 20, 99, 20, 17, 21, 21, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 97, 97, 97, 97, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 1, 2, 3, 5, 20, 20, 20, 20, 99, 20, 20, 18, 21, 21, 7, 97, 97, 94, 20, 20, 20, 20, 20, 22, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 22, 20, 20, 15, 12, 12, 12, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 99, 20, 20, 20, 99, 20, 18, 21, 21, 7, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 103, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 15, 11, 12, 13, 10, 20, 20, 20, 20, 99, 20, 20, 18, 21, 21, 8, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 20, 20, 105, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 97, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 99, 20, 20, 20, 96, 98, 19, 21, 27, 7, 98, 102, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 105, 20, 20, 20, 20, 20, 20, 96, 97, 98, 17, 21, 27, 8, 20, 20, 103, 88, 20, 91, 20, 91, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 20, 20, 91, 105, 20, 20, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 90, 20, 20, 20, 20, 20, 20, 20, 90, 20, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 92, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 99, 20, 20, 20, 20, 20, 16, 28, 21, 6, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 91, 105, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 21, 26, 7, 20, 92, 20, 89, 20, 90, 20, 90, 92, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 20, 92, 92, 90, 105, 20, 92, 20, 20, 20, 90, 20, 92, 20, 20, 20, 20, 20, 20, 20, 0, 2, 5, 20, 20, 20, 20, 20, 20, 0, 2, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 2, 5, 20, 20, 20, 20, 20, 20, 20, 20, 0, 1, 2, 1, 2, 3, 3, 3, 1, 4, 3, 2, 1, 1, 5, 20, 99, 20, 20, 20, 20, 20, 15, 12, 14, 10, 92, 88, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 92, 90, 105, 20, 20, 92, 20, 20, 20, 20, 20, 20, 19, 27, 25, 7, 0, 4, 2, 1, 2, 1, 4, 1, 2, 2, 4, 1, 2, 3, 4, 3, 3, 4, 1, 4, 4, 2, 1, 4, 3, 4, 3, 3, 4, 4, 2, 4, 1, 2, 3, 1, 4, 3, 5, 20, 20, 20, 20, 20, 20, 15, 11, 10, 20, 20, 20, 20, 20, 20, 15, 11, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 11, 10, 20, 20, 20, 20, 20, 20, 20, 20, 16, 29, 21, 21, 21, 21, 21, 21, 21, 30, 31, 27, 21, 21, 9, 20, 99, 20, 20, 20, 20, 20, 0, 1, 3, 2, 3, 3, 4, 4, 1, 3, 2, 2, 2, 1, 3, 2, 4, 1, 4, 2, 2, 4, 3, 4, 4, 2, 3, 1, 1, 4, 3, 1, 2, 4, 2, 3, 3, 2, 3, 3, 3, 5, 20, 20, 20, 104, 97, 18, 26, 21, 7, 15, 12, 14, 13, 11, 14, 12, 13, 13, 13, 13, 11, 13, 12, 12, 13, 12, 13, 12, 11, 12, 11, 12, 11, 14, 11, 13, 12, 14, 13, 14, 13, 14, 13, 13, 14, 13, 14, 10, 97, 97, 94, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 99, 20, 20, 20, 20, 20, 20, 20, 20, 15, 11, 12, 13, 14, 11, 12, 13, 14, 11, 12, 13, 14, 11, 10, 20, 99, 20, 20, 20, 20, 20, 15, 14, 14, 12, 11, 13, 12, 13, 14, 11, 13, 14, 14, 14, 12, 14, 11, 13, 13, 11, 13, 13, 13, 14, 14, 14, 11, 13, 13, 11, 13, 14, 12, 14, 12, 14, 11, 14, 13, 11, 14, 10, 20, 20, 20, 20, 20, 17, 25, 21, 9, 20, 20, 20, 20, 22, 20, 20, 99, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 99, 20, 22, 20, 20, 20, 20, 0, 3, 2, 1, 2, 2, 4, 4, 3, 5, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 97, 97, 97, 102, 20, 20, 20, 20, 20, 93, 97, 97, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 21, 29, 9, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 104, 97, 17, 21, 21, 21, 21, 21, 21, 21, 27, 7, 92, 20, 103, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 93, 98, 95, 20, 20, 20, 20, 20, 20, 20, 93, 97, 97, 97, 97, 102, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 98, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 101, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 23, 31, 7, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 104, 17, 23, 24, 21, 21, 21, 21, 21, 21, 7, 0, 1, 1, 5, 20, 20, 20, 20, 20, 20, 20, 104, 97, 97, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 5, 17, 27, 21, 9, 0, 5, 20, 20, 20, 104, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 0, 5, 18, 21, 21, 26, 21, 21, 21, 21, 28, 8, 19, 23, 24, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 103, 88, 91, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 99, 20, 20, 20, 20, 20, 20, 20, 104, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 91, 20, 20, 99, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 8, 19, 21, 21, 6, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 15, 10, 19, 21, 21, 25, 21, 21, 30, 31, 21, 7, 15, 11, 12, 10, 20, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 90, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89, 90, 90, 20, 92, 20, 20, 20, 20, 20, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 103, 88, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 90, 90, 92, 20, 99, 90, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 90, 88, 104, 95, 92, 20, 20, 20, 20, 20, 20, 20, 92, 20, 20, 15, 10, 19, 21, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 16, 21, 21, 21, 27, 21, 21, 21, 21, 7, 0, 1, 4, 3, 3, 3, 3, 5, 20, 20, 20, 20, 20, 0, 4, 2, 3, 3, 4, 5, 20, 20, 20, 20, 20, 0, 2, 4, 1, 4, 2, 5, 20, 20, 20, 20, 20, 0, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 5, 20, 20, 20, 20, 20, 0, 4, 4, 1, 3, 4, 3, 1, 5, 20, 20, 20, 20, 20, 0, 2, 2, 2, 2, 2, 3, 2, 5, 20, 20, 20, 20, 20, 0, 4, 3, 4, 3, 4, 1, 4, 5, 20, 20, 20, 20, 20, 0, 2, 1, 2, 4, 5, 18, 27, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 15, 11, 13, 11, 11, 12, 13, 11, 12, 10, 15, 14, 13, 12, 14, 13, 11, 10, 20, 20, 20, 20, 20, 15, 14, 13, 14, 13, 14, 10, 20, 20, 20, 20, 20, 15, 11, 12, 13, 14, 11, 10, 20, 20, 20, 20, 20, 18, 21, 21, 29, 21, 21, 27, 21, 21, 21, 21, 21, 29, 21, 26, 27, 9, 20, 20, 20, 20, 20, 15, 12, 14, 11, 12, 14, 13, 13, 10, 20, 20, 20, 20, 20, 15, 11, 13, 13, 11, 12, 11, 11, 10, 20, 20, 20, 20, 20, 15, 13, 11, 12, 14, 12, 11, 14, 10, 20, 20, 20, 20, 20, 15, 12, 12, 12, 13, 10, 19, 21, 21, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 96, 97, 97, 94, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 17, 30, 31, 21, 21, 21, 21, 28, 21, 21, 23, 24, 21, 21, 25, 21, 7, 20, 20, 20, 20, 20, 0, 5, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 0, 3, 4, 5, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 16, 21, 21, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 88, 104, 94, 20, 20, 92, 20, 92, 20, 90, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 11, 12, 13, 14, 11, 13, 13, 14, 11, 12, 13, 14, 11, 12, 13, 10, 20, 20, 20, 20, 20, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 98, 98, 98, 98, 98, 98, 98, 98, 94, 20, 20, 20, 20, 16, 21, 21, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 23, 31, 9, 20, 20, 20, 20, 20, 20, 20, 0, 2, 4, 1, 3, 2, 3, 2, 2, 1, 4, 3, 5, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 1, 4, 5, 20, 20, 20, 20, 20, 20, 91, 91, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 16, 21, 21, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 28, 21, 6, 20, 20, 20, 20, 20, 20, 20, 15, 11, 11, 12, 12, 13, 13, 11, 12, 11, 13, 13, 10, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 98, 102, 19, 21, 27, 9, 20, 20, 20, 20, 20, 20, 90, 90, 92, 20, 90, 20, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 97, 97, 97, 94, 15, 12, 12, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 21, 24, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 100, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 19, 26, 21, 6, 20, 20, 20, 20, 20, 0, 3, 3, 2, 3, 3, 3, 1, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 0, 2, 4, 1, 3, 3, 5, 20, 20, 20, 20, 20, 104, 97, 97, 17, 21, 21, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 103, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 100, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 19, 25, 21, 6, 97, 97, 94, 20, 20, 15, 11, 13, 11, 13, 14, 13, 14, 10, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 99, 15, 14, 13, 13, 11, 12, 10, 20, 20, 20, 20, 93, 97, 97, 97, 16, 21, 26, 7, 20, 20, 20, 20, 20, 91, 20, 91, 20, 88, 104, 95, 20, 20, 91, 20, 20, 20, 91, 20, 20, 20, 91, 20, 20, 20, 20, 88, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 103, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 91, 20, 20, 91, 20, 91, 88, 104, 95, 20, 20, 17, 21, 21, 8, 20, 20, 96, 97, 102, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 19, 21, 25, 7, 20, 92, 20, 20, 92, 90, 20, 90, 20, 89, 20, 92, 20, 20, 90, 92, 20, 20, 90, 20, 20, 20, 90, 92, 20, 20, 20, 89, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 92, 20, 90, 92, 20, 90, 20, 90, 89, 20, 20, 92, 20, 17, 21, 27, 6, 20, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 103, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 18, 30, 21, 8, 0, 4, 1, 4, 3, 3, 1, 3, 4, 2, 2, 2, 4, 3, 1, 4, 4, 4, 1, 2, 4, 2, 2, 1, 4, 1, 2, 3, 2, 2, 2, 3, 2, 1, 1, 2, 3, 3, 3, 2, 3, 3, 1, 2, 1, 3, 2, 3, 2, 1, 4, 4, 2, 1, 3, 3, 3, 4, 1, 2, 1, 2, 1, 4, 3, 2, 4, 1, 1, 2, 3, 1, 2, 4, 4, 4, 4, 1, 3, 3, 2, 1, 4, 2, 2, 3, 2, 2, 4, 3, 4, 3, 1, 4, 1, 5, 19, 21, 21, 9, 20, 20, 20, 90, 20, 20, 20, 92, 20, 20, 20, 90, 20, 20, 88, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 20, 20, 20, 20, 20, 20, 92, 20, 20, 20, 20, 20, 99, 20, 20, 20, 18, 21, 21, 8, 19, 21, 21, 23, 24, 21, 21, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 28, 21, 21, 21, 29, 21, 21, 21, 21, 21, 21, 21, 21, 27, 23, 24, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 26, 21, 23, 24, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 27, 21, 21, 21, 23, 24, 9, 17, 21, 21, 6, 0, 1, 4, 2, 4, 3, 1, 3, 4, 4, 4, 4, 4, 4, 2, 3, 1, 3, 2, 1, 4, 3, 1, 4, 2, 3, 3, 1, 3, 3, 4, 4, 4, 3, 4, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 5, 19, 21, 21, 6, 19, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 21, 26, 27, 21, 21, 21, 21, 23, 24, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 21, 21, 27, 21, 21, 21, 27, 25, 21, 21, 21, 21, 21, 23, 24, 21, 21, 29, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 8, 19, 23, 24, 7, 19, 21, 30, 31, 21, 21, 21, 21, 26, 21, 21, 21, 27, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 26, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 7, 18, 21, 21, 6, 18, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 21, 21, 26, 21, 21, 21, 21, 29, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 9, 18, 21, 27, 9, 16, 21, 21, 21, 29, 21, 21, 21, 25, 21, 21, 21, 21, 23, 24, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 23, 24, 21, 25, 21, 21, 21, 21, 29, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 7, 19, 21, 27, 8, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 26, 27, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 21, 7, 19, 21, 21, 7, 18, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 30, 31, 21, 21, 27, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 18, 21, 21, 8, 19, 21, 21, 21, 27, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 18, 21, 21, 8, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 8, 19, 27, 13, 10, 15, 11, 11, 12, 11, 14, 11, 12, 14, 12, 11, 12, 12, 14, 12, 14, 11, 11, 11, 12, 13, 11, 12, 12, 13, 13, 14, 13, 13, 11, 13, 13, 11, 14, 14, 13, 11, 12, 14, 13, 13, 11, 13, 12, 14, 14, 11, 11, 12, 14, 12, 12, 11, 11, 11, 14, 11, 13, 13, 13, 13, 14, 12, 12, 14, 13, 11, 12, 12, 12, 14, 11, 12, 12, 11, 11, 13, 12, 13, 13, 13, 13, 13, 11, 13, 13, 14, 11, 11, 11, 11, 12, 11, 13, 13, 10, 15, 12, 13, 10, 15, 14, 14, 14, 14, 12, 14, 11, 14, 12, 13, 11, 13, 14, 11, 13, 11, 12, 12, 14, 13, 12, 11, 14, 13, 13, 14, 12, 13, 12, 13, 12, 11, 11, 12, 13, 14, 12, 14, 11, 14, 14, 12, 14, 11, 10, 15, 13);
			this.level5_width = 150;
			this.level5_height = 80;
			this.level5_rect_x = new Array(0, 0, 5100, 7400, 100, 6900, 7350, 6900, 6800, 5050, 5050, 5350, 7300, 7100, 6400, 6650, 6650, 5700, 5350, 4900, 5000, 5100, 3900, 3300, 2700, 1550, 1550, 2050, 1450, 100, 100, 450, 350, 100, 1250, 1400, 1600, 2500, 3400, 4300, 4950, 4950, 5100, 6950, 6900, 6350, 5650, 6400, 5150, 4250, 4250, 4000, 3800, 3750, 3350, 3450, 100, 100, 1550, 2200, 1100, 750, 100, 700, 1700, 2200, 3150, 4400, 4650, 4700, 3950, 1400, 1450, 950, 3950, 4300, 2350, 2800, 3400, 6900, 1550, 4500);
			this.level5_rect_y = new Array(0, 3600, 3650, 0, 0, 1850, 2200, 2050, 2500, 2400, 2750, 2300, 2950, 3100, 3100, 3200, 3400, 3100, 3400, 3300, 3100, 3100, 3100, 3100, 3100, 3100, 2750, 2950, 3000, 2750, 3000, 3300, 2450, 1650, 2000, 1650, 2100, 2100, 2100, 2100, 1850, 2300, 1850, 250, 850, 450, 750, 1100, 1050, 1200, 1350, 1400, 1250, 850, 1350, 1400, 1200, 1350, 1100, 900, 650, 350, 650, 950, 350, 400, 100, 850, 450, 1650, 2700, 2350, 2450, 2450, 2200, 2200, 2700, 2700, 2700, 2600, 2600, 1050);
			this.level5_rect_w = new Array(100, 5100, 2300, 100, 7300, 500, 50, 100, 250, 200, 2100, 1350, 100, 200, 450, 200, 350, 450, 450, 200, 100, 350, 850, 350, 350, 900, 500, 200, 100, 1450, 100, 650, 350, 1300, 150, 3100, 650, 650, 650, 650, 150, 300, 1800, 450, 500, 350, 450, 250, 250, 3150, 100, 250, 100, 200, 100, 250, 3350, 2300, 300, 500, 450, 150, 350, 200, 200, 950, 1500, 250, 750, 100, 750, 100, 250, 500, 100, 350, 150, 150, 150, 50, 50, 50);
			this.level5_rect_h = new Array(3600, 350, 300, 3950, 100, 200, 100, 450, 100, 350, 100, 100, 250, 100, 100, 200, 100, 100, 100, 300, 200, 100, 200, 100, 100, 100, 350, 150, 100, 100, 100, 100, 100, 350, 450, 100, 100, 100, 100, 100, 450, 100, 100, 100, 100, 100, 150, 100, 150, 150, 150, 100, 100, 400, 150, 100, 150, 300, 100, 100, 100, 100, 100, 250, 100, 100, 750, 200, 100, 100, 150, 100, 150, 100, 200, 200, 100, 100, 100, 150, 150, 150);
			this.level5_item_type = new Array(10, 5, 11, 12, 12, 7, 6, 11, 12, 11, 8, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 2, 4, 2, 4, 0, 4, 12, 11);
			this.level5_item_x = new Array(86, 22, 2, 147, 131, 120, 103, 93, 147, 61, 49, 16, 2, 80, 147, 146, 103, 146, 3, 30, 56, 65, 32, 15, 139, 111, 89, 48, 85, 87);
			this.level5_item_y = new Array(61, 48, 59, 42, 35, 45, 72, 8, 3, 7, 32, 6, 21, 18, 21, 33, 40, 65, 41, 58, 36, 28, 54, 71, 54, 67, 23, 17, 53, 53);
			this.level5_tileSet = 6;
			this.level5_gameType = 0;
			this.level5_objective_names = ["Amateur Score: 5,000", "Pro Score: 10,000", "Operator Score: 15,000", "Collect 4 Gun Parts", "Find the secret briefcase", "Get at least 50 headshots", "Get 50 kills with the M1370 PG", "Destroy 10 Data Discs", "Complete all objectives in one round"];
			this.level5_objective_scores = new Array(5000, 10000, 15000);
			this.level5_objective_specialKills_needed = 50;
			this.level5_objective_specialKillType = 1;
			this.level5_objective_whichWeaponProficiency = 1;
			this.level6 = new Array(36, 36, 35, 38, 35, 39, 37, 35, 37, 39, 37, 34, 34, 34, 37, 38, 35, 35, 36, 36, 38, 35, 35, 39, 36, 35, 36, 36, 39, 39, 39, 38, 34, 34, 35, 35, 36, 37, 38, 34, 34, 35, 35, 34, 34, 34, 37, 38, 36, 36, 34, 34, 34, 36, 35, 37, 39, 38, 35, 38, 34, 37, 38, 34, 34, 34, 34, 38, 38, 34, 36, 35, 39, 38, 34, 39, 39, 34, 37, 38, 6, 12, 10, 11, 14, 12, 10, 15, 12, 12, 13, 12, 15, 15, 13, 15, 10, 12, 15, 14, 11, 11, 12, 13, 11, 10, 15, 12, 13, 11, 14, 12, 14, 14, 13, 14, 11, 10, 15, 14, 10, 12, 13, 11, 14, 10, 12, 15, 11, 11, 14, 10, 10, 10, 10, 10, 15, 10, 12, 11, 10, 15, 11, 13, 14, 13, 12, 14, 10, 13, 14, 15, 11, 13, 11, 10, 13, 10, 4, 39, 23, 64, 58, 66, 64, 60, 62, 64, 63, 61, 63, 60, 61, 62, 64, 64, 63, 65, 67, 61, 59, 60, 66, 60, 65, 65, 58, 59, 62, 58, 60, 59, 58, 58, 62, 78, 86, 82, 86, 79, 59, 65, 59, 59, 62, 66, 67, 61, 58, 67, 62, 63, 61, 67, 59, 66, 59, 62, 59, 59, 59, 64, 58, 67, 59, 63, 64, 62, 63, 60, 61, 63, 62, 62, 64, 62, 66, 64, 32, 36, 22, 65, 58, 60, 68, 59, 59, 67, 66, 63, 61, 68, 59, 67, 65, 65, 58, 62, 68, 63, 64, 66, 58, 63, 58, 68, 65, 58, 67, 63, 60, 67, 68, 67, 58, 62, 78, 82, 79, 62, 68, 59, 63, 61, 66, 65, 58, 68, 65, 59, 64, 59, 67, 66, 68, 63, 66, 63, 65, 62, 64, 68, 59, 63, 67, 58, 59, 58, 68, 67, 61, 67, 62, 62, 63, 68, 65, 64, 31, 36, 25, 58, 60, 65, 66, 58, 76, 66, 60, 76, 64, 60, 65, 76, 67, 60, 76, 60, 59, 62, 76, 63, 59, 76, 61, 66, 63, 76, 65, 60, 76, 65, 59, 61, 76, 67, 62, 64, 76, 79, 58, 59, 76, 60, 59, 76, 62, 61, 63, 76, 60, 60, 76, 66, 65, 62, 76, 66, 64, 76, 59, 59, 61, 76, 63, 62, 76, 61, 64, 63, 76, 63, 61, 76, 64, 63, 65, 63, 33, 39, 1, 4, 62, 59, 66, 61, 77, 69, 62, 77, 64, 61, 65, 77, 58, 59, 77, 63, 65, 63, 77, 61, 65, 77, 62, 58, 64, 77, 62, 59, 77, 61, 58, 67, 77, 63, 69, 59, 77, 58, 63, 58, 77, 65, 59, 77, 63, 59, 61, 77, 66, 61, 77, 62, 64, 64, 77, 62, 63, 77, 58, 67, 67, 77, 64, 61, 77, 61, 61, 62, 77, 59, 67, 77, 58, 64, 62, 78, 28, 36, 39, 26, 63, 65, 59, 59, 63, 70, 58, 65, 66, 58, 65, 63, 64, 59, 65, 67, 58, 69, 63, 59, 58, 60, 66, 64, 59, 62, 59, 62, 62, 67, 61, 62, 64, 69, 70, 65, 59, 66, 63, 69, 64, 65, 60, 64, 59, 62, 59, 62, 59, 66, 62, 58, 78, 87, 79, 62, 66, 64, 69, 58, 58, 66, 58, 61, 59, 60, 60, 66, 61, 58, 65, 61, 63, 60, 67, 61, 29, 37, 38, 24, 61, 66, 60, 66, 63, 71, 59, 66, 69, 60, 64, 62, 59, 67, 66, 63, 67, 72, 66, 63, 64, 64, 60, 58, 69, 66, 60, 65, 66, 65, 63, 69, 58, 72, 71, 67, 69, 65, 66, 70, 62, 65, 67, 67, 64, 63, 67, 69, 67, 64, 62, 61, 60, 78, 79, 66, 64, 60, 70, 69, 64, 58, 6, 17, 16, 17, 19, 16, 21, 16, 9, 65, 65, 63, 66, 0, 2, 36, 36, 27, 66, 58, 64, 67, 64, 72, 65, 59, 72, 63, 63, 67, 61, 63, 58, 59, 62, 63, 66, 63, 60, 61, 64, 65, 70, 59, 65, 62, 61, 61, 58, 72, 66, 60, 70, 62, 70, 58, 64, 72, 65, 60, 61, 62, 65, 66, 63, 72, 65, 62, 67, 62, 59, 58, 78, 79, 67, 67, 72, 72, 64, 59, 31, 39, 37, 36, 35, 39, 39, 39, 27, 61, 65, 64, 66, 8, 5, 39, 37, 22, 63, 65, 67, 59, 5, 4, 20, 21, 19, 20, 17, 20, 6, 64, 64, 58, 67, 59, 8, 2, 1, 4, 6, 66, 72, 58, 65, 58, 4, 5, 5, 1, 0, 58, 71, 64, 72, 65, 5, 19, 18, 20, 17, 18, 18, 17, 17, 16, 16, 18, 21, 18, 17, 18, 19, 21, 20, 19, 19, 19, 16, 20, 3, 39, 39, 39, 38, 37, 35, 38, 26, 66, 66, 61, 61, 65, 30, 35, 35, 24, 67, 65, 65, 60, 5, 6, 36, 38, 36, 39, 35, 35, 22, 66, 61, 61, 66, 65, 5, 4, 9, 5, 2, 62, 64, 59, 60, 59, 9, 3, 4, 0, 8, 59, 72, 67, 67, 64, 29, 36, 35, 38, 35, 39, 34, 38, 38, 39, 35, 34, 34, 34, 36, 36, 38, 34, 39, 37, 35, 36, 35, 34, 36, 39, 38, 37, 38, 35, 37, 39, 27, 62, 63, 66, 63, 59, 33, 35, 37, 25, 59, 62, 58, 66, 67, 29, 36, 39, 39, 39, 37, 34, 26, 59, 59, 78, 79, 63, 61, 67, 78, 79, 66, 66, 63, 64, 65, 59, 61, 67, 60, 60, 61, 67, 66, 58, 58, 65, 33, 39, 36, 0, 12, 13, 14, 10, 13, 15, 10, 12, 12, 14, 15, 14, 13, 13, 15, 14, 13, 14, 12, 12, 6, 37, 34, 39, 36, 34, 38, 35, 26, 58, 59, 65, 78, 82, 32, 35, 39, 27, 64, 62, 63, 65, 78, 32, 39, 36, 36, 35, 38, 39, 26, 67, 67, 61, 78, 79, 61, 78, 88, 79, 62, 64, 67, 63, 67, 62, 61, 60, 64, 61, 60, 65, 67, 66, 63, 94, 32, 34, 39, 25, 95, 63, 61, 58, 65, 65, 58, 63, 63, 66, 65, 64, 62, 62, 63, 63, 67, 62, 62, 65, 31, 38, 35, 34, 34, 36, 37, 34, 0, 8, 64, 65, 78, 84, 28, 38, 36, 22, 59, 64, 60, 78, 89, 32, 38, 36, 36, 36, 38, 37, 23, 64, 61, 61, 59, 64, 78, 83, 86, 79, 63, 65, 63, 62, 58, 61, 59, 67, 65, 78, 79, 59, 60, 59, 58, 92, 30, 38, 37, 26, 92, 66, 65, 67, 67, 66, 65, 59, 62, 63, 68, 61, 66, 64, 58, 78, 79, 64, 66, 59, 33, 37, 38, 39, 37, 35, 34, 38, 5, 6, 65, 78, 84, 84, 29, 35, 35, 7, 0, 58, 67, 78, 89, 28, 38, 37, 34, 34, 37, 34, 27, 60, 61, 62, 67, 64, 78, 88, 87, 83, 66, 62, 61, 63, 67, 61, 63, 78, 87, 79, 60, 59, 67, 64, 65, 92, 30, 38, 36, 27, 91, 58, 62, 58, 59, 59, 61, 58, 58, 60, 59, 67, 60, 58, 78, 87, 87, 79, 60, 59, 29, 34, 34, 38, 35, 35, 35, 38, 26, 61, 64, 78, 82, 79, 33, 39, 35, 2, 2, 65, 61, 61, 78, 33, 38, 34, 37, 38, 34, 38, 8, 19, 8, 95, 63, 60, 78, 83, 83, 79, 62, 69, 62, 63, 69, 58, 78, 82, 85, 88, 79, 58, 62, 63, 3, 16, 0, 37, 35, 24, 90, 93, 62, 64, 67, 60, 59, 59, 62, 64, 59, 60, 58, 64, 78, 82, 79, 58, 59, 58, 30, 38, 35, 35, 38, 39, 39, 34, 24, 60, 63, 60, 78, 82, 31, 37, 37, 26, 65, 63, 64, 59, 61, 31, 34, 38, 35, 37, 38, 34, 36, 35, 24, 92, 93, 58, 64, 78, 79, 66, 59, 71, 58, 60, 72, 65, 78, 86, 89, 86, 82, 82, 79, 61, 33, 38, 37, 37, 37, 24, 90, 92, 67, 67, 61, 60, 60, 61, 60, 67, 58, 64, 67, 78, 79, 65, 64, 66, 67, 58, 28, 37, 37, 38, 36, 36, 36, 34, 22, 62, 64, 64, 66, 78, 29, 35, 35, 27, 65, 60, 64, 64, 65, 31, 35, 38, 37, 34, 35, 38, 39, 39, 23, 90, 92, 66, 66, 59, 61, 63, 59, 72, 66, 60, 60, 78, 84, 89, 86, 83, 85, 79, 66, 61, 30, 35, 39, 37, 34, 1, 7, 5, 4, 5, 8, 0, 3, 64, 60, 65, 60, 67, 58, 58, 65, 67, 67, 2, 3, 2, 3, 34, 35, 38, 36, 36, 37, 38, 23, 59, 67, 67, 60, 3, 2, 38, 39, 26, 58, 58, 60, 62, 67, 29, 39, 38, 36, 35, 39, 35, 39, 35, 5, 17, 18, 17, 21, 19, 18, 16, 19, 21, 20, 20, 20, 20, 19, 17, 18, 20, 16, 20, 19, 18, 1, 35, 36, 36, 34, 5, 5, 2, 3, 9, 8, 5, 4, 62, 59, 62, 63, 60, 67, 64, 66, 66, 64, 4, 4, 8, 5, 36, 39, 34, 34, 35, 39, 38, 26, 59, 60, 61, 65, 0, 9, 39, 37, 24, 61, 63, 66, 58, 5, 3, 5, 38, 34, 39, 37, 34, 35, 37, 34, 38, 35, 37, 36, 35, 34, 37, 34, 34, 34, 38, 34, 38, 36, 35, 35, 38, 39, 38, 38, 34, 38, 37, 35, 38, 37, 27, 58, 63, 60, 67, 64, 61, 64, 67, 65, 60, 62, 65, 62, 64, 62, 61, 59, 63, 65, 67, 30, 39, 37, 35, 38, 35, 36, 35, 27, 59, 60, 61, 66, 63, 31, 35, 37, 24, 59, 58, 65, 67, 5, 0, 2, 37, 37, 39, 36, 38, 39, 38, 36, 37, 35, 39, 35, 39, 36, 37, 35, 35, 35, 36, 39, 38, 34, 37, 38, 35, 34, 38, 34, 39, 38, 36, 36, 38, 37, 24, 82, 79, 64, 59, 66, 58, 67, 60, 58, 58, 60, 66, 58, 58, 58, 61, 59, 66, 67, 59, 32, 36, 34, 39, 38, 36, 35, 34, 24, 59, 60, 66, 61, 61, 32, 35, 35, 27, 64, 62, 59, 65, 63, 61, 32, 36, 9, 13, 10, 10, 13, 14, 15, 13, 13, 11, 15, 11, 10, 14, 13, 12, 12, 12, 10, 13, 15, 15, 12, 10, 10, 13, 12, 13, 15, 10, 13, 12, 13, 0, 66, 78, 89, 87, 79, 59, 62, 64, 60, 61, 66, 66, 61, 60, 63, 64, 67, 65, 64, 65, 33, 34, 37, 34, 39, 34, 36, 37, 26, 66, 61, 65, 66, 59, 29, 35, 34, 24, 84, 79, 66, 59, 65, 64, 28, 35, 22, 59, 61, 61, 61, 61, 58, 67, 58, 62, 63, 66, 67, 66, 58, 64, 65, 66, 66, 59, 67, 62, 60, 59, 66, 67, 63, 67, 62, 65, 66, 59, 66, 63, 58, 58, 78, 87, 82, 79, 59, 67, 60, 66, 64, 58, 67, 63, 59, 62, 60, 67, 78, 84, 31, 38, 36, 36, 36, 37, 37, 37, 3, 8, 62, 67, 65, 62, 29, 34, 36, 22, 78, 87, 79, 61, 63, 62, 28, 36, 24, 58, 68, 58, 58, 66, 65, 62, 66, 68, 66, 59, 60, 66, 61, 58, 68, 60, 64, 65, 66, 62, 60, 68, 59, 66, 66, 58, 58, 61, 68, 60, 59, 64, 62, 78, 84, 87, 79, 66, 60, 64, 66, 63, 3, 8, 4, 7, 61, 65, 59, 78, 86, 87, 2, 13, 14, 12, 12, 14, 12, 14, 4, 7, 61, 66, 59, 66, 30, 39, 36, 26, 58, 78, 79, 60, 69, 65, 31, 35, 25, 67, 63, 66, 59, 62, 61, 67, 63, 65, 58, 59, 63, 63, 59, 67, 63, 61, 62, 59, 59, 59, 61, 58, 62, 64, 60, 59, 61, 59, 61, 62, 65, 61, 60, 61, 60, 62, 62, 61, 63, 64, 64, 60, 2, 4, 4, 4, 62, 58, 59, 63, 78, 85, 82, 79, 62, 63, 68, 65, 66, 61, 66, 60, 64, 64, 65, 58, 28, 39, 38, 0, 3, 61, 64, 60, 71, 67, 7, 15, 4, 61, 67, 63, 58, 64, 67, 63, 60, 78, 79, 61, 76, 60, 76, 65, 63, 59, 65, 78, 79, 65, 63, 76, 67, 76, 60, 76, 64, 76, 65, 58, 63, 63, 61, 60, 78, 79, 76, 62, 76, 59, 59, 61, 61, 59, 62, 63, 58, 60, 60, 78, 83, 82, 79, 65, 59, 62, 58, 59, 63, 67, 66, 59, 66, 64, 65, 63, 32, 36, 39, 35, 24, 66, 63, 69, 70, 66, 61, 67, 64, 61, 62, 61, 64, 60, 67, 61, 78, 82, 82, 79, 77, 69, 77, 69, 60, 58, 58, 78, 86, 79, 65, 77, 58, 77, 63, 77, 69, 77, 64, 62, 61, 61, 58, 67, 58, 64, 77, 69, 77, 66, 61, 66, 66, 64, 65, 63, 63, 61, 65, 78, 79, 60, 69, 64, 61, 64, 62, 66, 60, 65, 60, 65, 63, 66, 61, 60, 28, 34, 35, 39, 23, 93, 66, 71, 72, 67, 58, 59, 60, 69, 61, 62, 65, 60, 59, 78, 83, 83, 79, 60, 59, 71, 59, 72, 62, 67, 63, 63, 78, 79, 62, 63, 69, 66, 60, 62, 70, 59, 59, 64, 59, 67, 59, 67, 64, 69, 58, 70, 60, 62, 64, 67, 64, 60, 61, 60, 58, 62, 67, 69, 60, 66, 70, 61, 64, 67, 61, 58, 65, 64, 62, 93, 63, 63, 1, 20, 2, 35, 36, 39, 23, 92, 66, 72, 59, 64, 64, 65, 62, 72, 65, 59, 60, 64, 78, 83, 79, 63, 61, 61, 64, 72, 63, 65, 59, 58, 66, 67, 66, 62, 61, 61, 72, 60, 67, 62, 72, 65, 64, 61, 64, 62, 63, 60, 65, 72, 59, 72, 66, 66, 65, 62, 66, 64, 65, 60, 65, 65, 60, 72, 61, 64, 72, 63, 62, 63, 63, 60, 64, 65, 67, 92, 94, 97, 31, 36, 38, 37, 38, 38, 3, 17, 21, 16, 17, 17, 21, 20, 17, 17, 21, 16, 0, 63, 78, 79, 58, 61, 59, 9, 17, 21, 20, 7, 62, 62, 58, 62, 58, 63, 3, 17, 18, 18, 16, 20, 18, 21, 2, 60, 63, 61, 62, 65, 66, 7, 19, 20, 16, 5, 65, 58, 58, 64, 58, 62, 65, 62, 9, 20, 18, 21, 20, 16, 19, 16, 21, 19, 16, 21, 20, 17, 19, 21, 2, 39, 37, 36, 34, 38, 37, 34, 39, 38, 37, 36, 39, 36, 35, 35, 38, 38, 23, 59, 58, 64, 64, 62, 60, 31, 38, 39, 38, 26, 65, 65, 66, 59, 63, 62, 32, 38, 35, 37, 39, 34, 35, 34, 27, 62, 62, 58, 61, 61, 67, 32, 34, 34, 37, 27, 61, 60, 67, 65, 59, 61, 65, 62, 29, 35, 39, 38, 34, 39, 35, 36, 38, 35, 35, 34, 35, 37, 34, 39, 35, 39, 35, 36, 39, 1, 11, 10, 15, 12, 11, 15, 15, 12, 15, 13, 11, 12, 4, 63, 64, 66, 59, 59, 67, 5, 15, 12, 12, 2, 61, 64, 67, 59, 62, 66, 7, 15, 10, 10, 10, 14, 12, 12, 2, 61, 67, 65, 59, 64, 61, 2, 14, 10, 11, 2, 66, 67, 62, 67, 67, 59, 63, 67, 7, 14, 10, 11, 12, 14, 10, 14, 11, 10, 14, 12, 11, 10, 11, 13, 10, 7, 36, 37, 36, 24, 65, 66, 67, 66, 62, 60, 63, 65, 65, 62, 66, 58, 67, 58, 58, 67, 78, 79, 63, 60, 61, 58, 60, 67, 60, 58, 61, 66, 66, 66, 64, 60, 60, 59, 65, 58, 65, 66, 63, 63, 65, 63, 62, 58, 62, 66, 62, 64, 58, 66, 58, 65, 63, 58, 61, 58, 65, 63, 60, 63, 58, 61, 78, 83, 88, 87, 79, 58, 63, 64, 59, 63, 63, 60, 60, 30, 36, 34, 34, 26, 59, 59, 63, 68, 62, 58, 58, 62, 63, 68, 63, 59, 61, 65, 62, 78, 83, 79, 58, 61, 67, 68, 64, 59, 60, 65, 66, 58, 64, 62, 63, 60, 62, 58, 68, 61, 61, 64, 63, 61, 62, 59, 58, 65, 61, 67, 64, 68, 59, 61, 61, 61, 58, 59, 64, 59, 63, 60, 67, 67, 78, 86, 89, 82, 79, 65, 65, 68, 65, 58, 66, 62, 64, 66, 78, 30, 36, 37, 35, 23, 61, 60, 64, 60, 62, 60, 58, 66, 62, 61, 62, 64, 61, 63, 78, 79, 61, 78, 87, 79, 64, 66, 63, 67, 58, 63, 59, 66, 64, 66, 58, 58, 64, 62, 62, 58, 67, 60, 65, 78, 83, 79, 58, 67, 60, 63, 60, 66, 65, 61, 60, 65, 66, 59, 64, 59, 60, 58, 64, 67, 62, 78, 79, 63, 67, 65, 65, 59, 63, 58, 66, 67, 60, 64, 63, 32, 35, 37, 34, 22, 66, 60, 66, 66, 64, 66, 65, 63, 59, 62, 64, 65, 58, 59, 59, 59, 66, 78, 79, 59, 59, 64, 66, 67, 61, 64, 61, 59, 61, 59, 66, 65, 61, 62, 61, 64, 59, 63, 59, 58, 63, 78, 79, 63, 58, 63, 66, 66, 65, 63, 62, 65, 4, 21, 19, 1, 64, 65, 62, 62, 59, 67, 63, 66, 60, 67, 60, 67, 67, 67, 63, 66, 66, 59, 78, 32, 38, 34, 35, 25, 67, 59, 58, 61, 67, 66, 60, 63, 63, 63, 65, 61, 63, 59, 59, 59, 60, 64, 59, 62, 66, 67, 62, 63, 58, 61, 66, 58, 64, 66, 58, 58, 62, 65, 59, 67, 65, 60, 60, 67, 63, 60, 78, 83, 85, 89, 79, 67, 59, 65, 59, 58, 29, 37, 35, 27, 67, 59, 58, 65, 58, 63, 64, 62, 63, 61, 65, 59, 67, 64, 60, 66, 78, 87, 87, 31, 35, 37, 37, 0, 7, 5, 7, 61, 59, 66, 58, 58, 64, 66, 69, 58, 62, 61, 66, 60, 62, 66, 63, 63, 63, 65, 64, 62, 59, 67, 58, 58, 76, 61, 67, 67, 76, 64, 59, 60, 76, 58, 69, 67, 76, 78, 84, 86, 76, 86, 88, 82, 76, 58, 62, 63, 30, 39, 34, 27, 64, 66, 58, 76, 65, 60, 63, 76, 67, 63, 64, 59, 64, 58, 63, 78, 88, 84, 87, 32, 36, 35, 35, 4, 6, 7, 5, 58, 63, 66, 61, 60, 60, 69, 70, 67, 65, 67, 69, 58, 64, 61, 64, 59, 63, 61, 61, 67, 62, 61, 67, 59, 77, 69, 67, 67, 77, 58, 63, 65, 77, 69, 70, 67, 77, 84, 89, 87, 77, 84, 86, 88, 77, 59, 61, 64, 32, 36, 37, 27, 66, 69, 66, 77, 60, 62, 66, 77, 67, 60, 64, 60, 66, 66, 64, 67, 69, 78, 84, 32, 37, 39, 39, 26, 58, 62, 65, 58, 61, 59, 63, 59, 60, 72, 71, 62, 61, 60, 71, 63, 61, 58, 67, 61, 60, 64, 65, 66, 59, 65, 61, 65, 62, 72, 62, 64, 63, 61, 69, 63, 65, 70, 71, 63, 78, 79, 58, 78, 87, 82, 83, 79, 63, 58, 69, 59, 28, 39, 37, 27, 65, 70, 64, 65, 69, 62, 66, 61, 66, 65, 64, 63, 59, 59, 62, 65, 72, 60, 78, 33, 35, 39, 38, 22, 65, 66, 59, 62, 66, 62, 66, 67, 60, 60, 72, 58, 61, 65, 72, 67, 61, 59, 66, 61, 63, 65, 63, 60, 63, 60, 59, 62, 61, 63, 67, 61, 61, 63, 72, 67, 58, 72, 72, 65, 64, 63, 60, 66, 78, 84, 79, 58, 64, 65, 72, 65, 29, 37, 37, 27, 66, 72, 62, 67, 72, 67, 67, 64, 61, 67, 65, 62, 66, 60, 59, 62, 65, 66, 63, 30, 34, 36, 36, 23, 62, 63, 63, 63, 64, 67, 67, 59, 8, 5, 6, 2, 6, 5, 0, 7, 64, 58, 64, 62, 60, 60, 58, 61, 60, 64, 62, 3, 18, 18, 16, 18, 20, 17, 21, 18, 17, 17, 17, 17, 17, 21, 17, 16, 19, 18, 17, 16, 18, 19, 17, 17, 8, 37, 39, 5, 20, 19, 21, 18, 17, 20, 21, 4, 1, 63, 63, 66, 58, 58, 59, 6, 20, 16, 18, 2, 34, 34, 36, 22, 61, 64, 64, 64, 64, 61, 66, 63, 6, 4, 9, 0, 1, 6, 3, 5, 65, 64, 63, 59, 67, 61, 62, 64, 78, 83, 83, 33, 37, 34, 37, 37, 38, 36, 37, 34, 39, 34, 35, 37, 39, 34, 35, 36, 34, 38, 36, 35, 39, 36, 39, 35, 34, 37, 38, 39, 37, 38, 39, 37, 38, 39, 36, 7, 8, 62, 66, 67, 60, 67, 60, 29, 37, 35, 38, 37, 37, 39, 34, 24, 66, 67, 58, 66, 62, 60, 59, 61, 64, 64, 63, 62, 64, 58, 65, 63, 67, 59, 65, 58, 58, 64, 66, 67, 62, 78, 83, 32, 38, 36, 39, 37, 34, 35, 36, 39, 39, 34, 36, 39, 38, 35, 34, 36, 37, 38, 35, 35, 34, 39, 35, 36, 35, 34, 39, 35, 34, 37, 39, 34, 38, 39, 39, 26, 62, 62, 61, 62, 59, 66, 65, 32, 35, 38, 38, 39, 36, 35, 38, 25, 60, 60, 65, 60, 63, 62, 67, 61, 64, 60, 67, 58, 65, 62, 62, 67, 64, 62, 59, 65, 67, 60, 63, 78, 87, 79, 61, 32, 38, 34, 34, 4, 11, 11, 14, 10, 12, 12, 11, 13, 13, 11, 10, 15, 12, 15, 14, 15, 10, 11, 15, 12, 12, 14, 12, 10, 5, 38, 39, 36, 38, 35, 37, 24, 61, 62, 61, 59, 64, 66, 66, 29, 39, 34, 35, 36, 38, 38, 36, 25, 61, 63, 60, 61, 59, 78, 89, 82, 79, 61, 65, 63, 65, 65, 58, 67, 66, 61, 58, 62, 61, 63, 66, 60, 64, 63, 67, 32, 35, 36, 35, 24, 60, 62, 60, 66, 66, 64, 62, 64, 60, 58, 59, 63, 65, 64, 61, 60, 62, 67, 64, 67, 58, 62, 62, 59, 31, 35, 37, 34, 38, 34, 34, 22, 65, 66, 65, 63, 65, 60, 67, 33, 36, 38, 36, 34, 34, 37, 39, 26, 67, 63, 65, 65, 67, 64, 78, 82, 83, 88, 79, 65, 60, 67, 66, 64, 61, 58, 64, 58, 65, 65, 67, 62, 58, 60, 60, 33, 36, 38, 36, 22, 60, 62, 62, 76, 76, 65, 68, 58, 59, 65, 61, 65, 65, 59, 60, 58, 66, 68, 66, 76, 76, 58, 65, 66, 32, 38, 39, 39, 36, 39, 36, 23, 65, 64, 66, 62, 62, 66, 0, 0, 37, 36, 35, 34, 38, 34, 37, 24, 65, 68, 64, 62, 67, 67, 63, 78, 87, 83, 82, 79, 63, 64, 63, 62, 65, 60, 78, 79, 62, 59, 4, 16, 21, 21, 21, 8, 39, 35, 39, 24, 64, 65, 59, 77, 77, 67, 63, 67, 62, 65, 78, 88, 82, 79, 60, 64, 61, 65, 60, 77, 77, 59, 61, 60, 33, 37, 38, 35, 39, 37, 37, 26, 66, 58, 62, 58, 58, 65, 9, 8, 35, 38, 39, 36, 39, 35, 39, 26, 58, 63, 61, 59, 66, 76, 78, 89, 82, 82, 79, 64, 76, 64, 59, 66, 65, 78, 87, 76, 64, 67, 30, 39, 38, 37, 37, 36, 39, 37, 38, 26, 66, 62, 67, 58, 60, 62, 59, 60, 63, 66, 78, 83, 79, 60, 67, 67, 78, 79, 59, 61, 61, 58, 64, 67, 28, 34, 37, 34, 38, 38, 35, 22, 62, 63, 64, 64, 62, 64, 61, 32, 34, 34, 39, 39, 37, 38, 37, 24, 61, 66, 67, 59, 67, 77, 65, 67, 78, 79, 60, 63, 77, 60, 67, 69, 58, 78, 85, 77, 60, 65, 33, 39, 37, 37, 36, 34, 36, 39, 34, 25, 62, 60, 58, 58, 58, 60, 66, 64, 78, 88, 86, 87, 79, 78, 86, 79, 67, 66, 61, 60, 66, 60, 65, 60, 33, 32, 37, 38, 37, 36, 36, 24, 61, 67, 64, 62, 67, 58, 64, 28, 39, 38, 38, 36, 39, 34, 36, 25, 64, 65, 65, 65, 60, 59, 69, 58, 63, 59, 78, 79, 60, 67, 59, 71, 69, 64, 78, 79, 64, 62, 30, 34, 38, 34, 36, 37, 36, 39, 37, 4, 5, 0, 5, 5, 4, 66, 65, 64, 78, 83, 84, 79, 62, 60, 78, 89, 79, 59, 63, 1, 9, 7, 2, 7, 8, 36, 38, 37, 36, 39, 35, 26, 60, 63, 62, 58, 66, 60, 59, 31, 37, 35, 39, 38, 34, 39, 36, 25, 60, 63, 59, 64, 62, 62, 72, 63, 63, 60, 78, 87, 79, 58, 60, 72, 72, 62, 58, 59, 58, 58, 33, 34, 38, 36, 35, 35, 39, 39, 36, 9, 7, 8, 9, 9, 5, 59, 66, 78, 84, 76, 76, 88, 79, 76, 76, 78, 79, 65, 63, 9, 5, 7, 3, 6, 1, 35, 37, 35, 39, 38, 36, 3, 6, 64, 61, 62, 65, 78, 87, 31, 36, 38, 35, 38, 37, 38, 36, 22, 67, 63, 62, 1, 5, 21, 21, 20, 20, 18, 17, 18, 21, 19, 18, 17, 17, 17, 16, 19, 20, 20, 6, 38, 38, 37, 35, 36, 35, 35, 38, 27, 60, 62, 67, 59, 60, 60, 78, 88, 84, 77, 77, 84, 79, 77, 77, 64, 58, 59, 67, 66, 58, 61, 78, 86, 31, 35, 37, 35, 36, 34, 37, 5, 7, 58, 61, 78, 86, 84, 85, 28, 38, 38, 35, 39, 39, 36, 36, 24, 64, 66, 64, 0, 4, 37, 37, 38, 35, 38, 35, 37, 38, 38, 35, 35, 35, 37, 34, 34, 39, 39, 37, 38, 39, 37, 36, 35, 39, 37, 38, 24, 65, 64, 61, 63, 61, 66, 59, 78, 86, 89, 79, 65, 58, 66, 59, 61, 59, 59, 62, 66, 78, 84, 83, 82, 33, 39, 39, 35, 37, 35, 37, 23, 60, 59, 60, 60, 78, 88, 83, 30, 36, 35, 39, 37, 37, 37, 34, 26, 65, 63, 58, 67, 29, 35, 35, 35, 34, 35, 39, 39, 34, 34, 38, 38, 38, 39, 36, 38, 38, 39, 35, 35, 36, 38, 35, 34, 34, 38, 35, 26, 67, 64, 61, 64, 78, 88, 84, 87, 83, 79, 64, 64, 59, 60, 66, 63, 58, 63, 66, 61, 67, 62, 78, 86, 30, 38, 38, 37, 37, 34, 37, 25, 66, 67, 62, 63, 78, 87, 85, 32, 37, 37, 37, 37, 36, 35, 36, 25, 65, 60, 60, 67, 31, 36, 37, 37, 35, 4, 14, 10, 10, 11, 13, 11, 11, 14, 14, 14, 10, 11, 10, 14, 10, 11, 12, 9, 37, 38, 38, 24, 65, 64, 61, 61, 62, 65, 67, 78, 82, 8, 16, 21, 20, 21, 1, 64, 59, 58, 64, 62, 78, 87, 79, 58, 33, 38, 38, 35, 38, 39, 35, 23, 58, 63, 59, 66, 67, 61, 78, 31, 35, 36, 38, 36, 34, 37, 38, 27, 66, 59, 62, 58, 33, 35, 39, 35, 34, 26, 65, 66, 62, 66, 60, 65, 65, 67, 61, 66, 60, 59, 60, 60, 62, 64, 67, 31, 38, 37, 38, 25, 61, 61, 64, 65, 59, 66, 60, 64, 59, 32, 38, 39, 38, 37, 27, 62, 67, 67, 63, 64, 58, 60, 61, 65, 28, 35, 36, 38, 35, 38, 38, 24, 61, 61, 63, 62, 59, 65, 5, 0, 37, 37, 37, 38, 36, 36, 38, 7, 3, 60, 64, 65, 28, 35, 36, 34, 35, 24, 63, 58, 64, 68, 64, 61, 64, 67, 61, 58, 68, 63, 65, 62, 66, 63, 66, 30, 34, 37, 39, 24, 58, 65, 67, 76, 76, 65, 59, 64, 61, 5, 12, 14, 14, 13, 2, 60, 67, 66, 61, 76, 76, 60, 58, 67, 31, 37, 36, 36, 34, 35, 34, 27, 63, 58, 65, 61, 59, 67, 2, 9, 37, 35, 36, 38, 35, 34, 34, 4, 6, 62, 59, 61, 29, 39, 4, 11, 10, 6, 61, 66, 60, 65, 67, 66, 59, 65, 65, 63, 59, 62, 65, 63, 62, 59, 66, 30, 37, 35, 39, 27, 63, 60, 58, 77, 77, 61, 58, 58, 66, 66, 60, 63, 59, 63, 59, 62, 58, 64, 63, 77, 77, 63, 65, 61, 31, 37, 35, 37, 35, 37, 36, 25, 79, 62, 58, 61, 63, 59, 65, 29, 34, 34, 37, 38, 35, 35, 36, 25, 64, 62, 60, 60, 29, 36, 26, 82, 79, 66, 58, 66, 65, 58, 62, 76, 59, 64, 76, 65, 67, 59, 63, 58, 58, 58, 9, 5, 34, 38, 35, 26, 66, 58, 64, 59, 65, 67, 67, 58, 66, 65, 66, 64, 62, 61, 59, 62, 61, 67, 58, 63, 67, 67, 60, 65, 32, 36, 37, 34, 38, 36, 35, 25, 88, 87, 79, 64, 62, 62, 66, 28, 34, 34, 35, 39, 39, 38, 36, 25, 79, 64, 62, 58, 33, 39, 22, 88, 88, 89, 79, 67, 62, 65, 60, 77, 67, 60, 77, 66, 61, 59, 62, 65, 66, 67, 4, 7, 36, 36, 36, 24, 60, 59, 59, 61, 67, 67, 60, 66, 64, 65, 65, 58, 63, 63, 64, 59, 65, 62, 58, 67, 66, 59, 61, 60, 30, 34, 38, 35, 35, 35, 34, 22, 67, 62, 64, 65, 60, 67, 66, 32, 36, 38, 35, 39, 38, 35, 38, 27, 85, 79, 63, 58, 33, 39, 22, 84, 79, 58, 67, 59, 65, 67, 67, 59, 64, 59, 61, 60, 66, 58, 64, 59, 66, 64, 64, 33, 39, 34, 39, 6, 7, 1, 7, 7, 9, 63, 61, 64, 58, 58, 64, 64, 58, 65, 62, 64, 66, 67, 64, 0, 6, 2, 0, 5, 8, 37, 35, 37, 35, 35, 38, 7, 5, 64, 58, 61, 67, 65, 66, 28, 36, 34, 37, 36, 34, 38, 39, 22, 83, 79, 67, 8, 9, 38, 25, 79, 61, 64, 59, 60, 64, 66, 66, 64, 58, 67, 62, 65, 65, 67, 65, 64, 63, 66, 62, 8, 15, 15, 14, 8, 3, 8, 8, 1, 9, 64, 66, 65, 62, 76, 76, 65, 65, 76, 76, 67, 62, 58, 65, 8, 8, 4, 1, 4, 7, 10, 15, 13, 15, 13, 10, 2, 5, 60, 60, 61, 65, 63, 65, 1, 13, 10, 13, 14, 1, 37, 38, 25, 87, 86, 79, 9, 5, 35, 24, 65, 63, 59, 60, 67, 59, 8, 5, 2, 2, 0, 3, 8, 9, 89, 79, 65, 61, 60, 67, 63, 68, 65, 67, 59, 61, 58, 68, 60, 61, 63, 67, 59, 60, 77, 77, 63, 66, 77, 77, 59, 59, 64, 62, 65, 60, 68, 59, 65, 78, 88, 83, 79, 59, 61, 68, 65, 67, 66, 67, 64, 59, 64, 67, 62, 63, 68, 66, 63, 29, 37, 36, 23, 86, 87, 82, 79, 28, 34, 26, 64, 61, 59, 58, 61, 61, 6, 4, 1, 6, 7, 9, 5, 9, 62, 78, 82, 79, 60, 66, 61, 65, 59, 65, 59, 65, 67, 63, 63, 65, 62, 62, 62, 59, 64, 62, 62, 62, 58, 59, 61, 58, 64, 61, 63, 63, 64, 59, 62, 61, 78, 86, 79, 67, 59, 63, 65, 63, 60, 66, 65, 60, 65, 58, 60, 58, 65, 64, 67, 33, 35, 38, 25, 66, 78, 86, 86, 33, 39, 26, 65, 66, 62, 67, 65, 61, 62, 67, 67, 63, 64, 60, 64, 60, 78, 86, 82, 85, 79, 61, 63, 59, 59, 65, 63, 65, 65, 60, 59, 67, 58, 60, 58, 63, 60, 67, 63, 61, 63, 61, 64, 62, 62, 67, 63, 64, 64, 59, 60, 63, 58, 78, 79, 78, 79, 59, 60, 66, 65, 63, 61, 62, 65, 65, 62, 67, 65, 63, 61, 28, 35, 39, 27, 62, 60, 78, 88, 28, 39, 26, 59, 67, 65, 63, 61, 64, 64, 65, 61, 65, 63, 62, 64, 64, 65, 78, 79, 61, 59, 63, 69, 62, 63, 67, 58, 58, 61, 78, 85, 82, 84, 79, 66, 66, 5, 20, 19, 20, 21, 6, 64, 58, 59, 64, 60, 69, 64, 60, 67, 59, 66, 63, 78, 84, 79, 58, 67, 63, 61, 5, 18, 8, 64, 64, 62, 62, 78, 79, 61, 32, 36, 38, 2, 2, 63, 60, 78, 33, 39, 26, 67, 64, 63, 64, 64, 65, 64, 58, 61, 65, 63, 62, 69, 63, 67, 62, 59, 65, 59, 62, 71, 69, 67, 61, 67, 78, 86, 87, 88, 79, 64, 59, 62, 66, 31, 38, 35, 36, 37, 27, 59, 66, 69, 62, 60, 71, 67, 58, 66, 59, 58, 64, 78, 83, 83, 79, 60, 69, 63, 30, 36, 27, 65, 67, 59, 78, 89, 82, 79, 28, 35, 37, 9, 4, 62, 78, 86, 29, 35, 25, 61, 60, 64, 59, 58, 66, 66, 58, 59, 66, 63, 66, 72, 58, 63, 61, 60, 61, 64, 66, 72, 72, 61, 66, 78, 89, 84, 87, 83, 79, 62, 78, 79, 65, 30, 36, 34, 35, 34, 27, 60, 60, 72, 58, 62, 72, 64, 60, 59, 60, 63, 78, 82, 79, 62, 64, 64, 72, 60, 31, 37, 27, 60, 78, 82, 88, 84, 80, 82, 29, 38, 34, 23, 66, 59, 65, 78, 29, 35, 9, 20, 19, 2, 60, 62, 66, 58, 64, 62, 59, 1, 20, 16, 17, 16, 18, 16, 21, 18, 20, 20, 20, 19, 21, 19, 18, 17, 17, 18, 16, 17, 19, 16, 18, 2, 39, 35, 39, 39, 8, 21, 20, 18, 20, 21, 18, 17, 18, 17, 20, 20, 20, 18, 17, 21, 21, 19, 17, 21, 0, 39, 0, 20, 18, 17, 16, 18, 16, 16, 0, 36, 34, 25, 66, 59, 60, 61, 30, 34, 36, 35, 34, 22, 59, 66, 67, 62, 64, 65, 61, 32, 37, 36, 34, 38, 38, 38, 34, 35, 34, 34, 35, 36, 34, 36, 39, 35, 34, 39, 37, 38, 38, 36, 37, 39, 39, 34, 37, 37, 37, 35, 36, 35, 35, 34, 34, 35, 38, 35, 38, 34, 36, 38, 39, 34, 37, 34, 37, 39, 35, 38, 38, 35, 36, 34, 38, 37, 37, 38, 34, 39, 35, 27, 65, 60, 63, 60, 31, 36, 7, 10, 14, 7, 62, 64, 78, 79, 64, 67, 63, 30, 35, 39, 34, 39, 38, 37, 37, 38, 34, 34, 34, 39, 34, 34, 34, 35, 38, 39, 35, 34, 39, 39, 37, 36, 34, 39, 35, 39, 35, 37, 37, 34, 38, 38, 39, 34, 37, 34, 37, 35, 39, 39, 38, 37, 35, 39, 38, 38, 36, 34, 36, 39, 37, 37, 34, 38, 35, 38, 36, 37, 35, 22, 63, 60, 62, 7, 7, 39, 23, 67, 68, 67, 59, 78, 88, 85, 83, 79, 61, 32, 39, 35, 35, 34, 36, 38, 39, 34, 34, 35, 38, 35, 37, 37, 36, 38, 36, 38, 36, 37, 34, 35, 37, 37, 39, 34, 36, 37, 37, 39, 39, 35, 36, 35, 37, 37, 34, 38, 35, 36, 38, 35, 37, 39, 36, 38, 34, 39, 34, 37, 36, 35, 34, 35, 39, 37, 39, 34, 35, 37, 39, 24, 78, 79, 61, 9, 4, 13, 5, 63, 66, 69, 60, 63, 78, 89, 79, 62, 58, 30, 37, 35, 36, 39, 38, 36, 37, 38, 35, 36, 36, 39, 38, 37, 35, 38, 38, 34, 37, 38, 34, 38, 39, 35, 38, 35, 34, 39, 34, 38, 34, 34, 38, 34, 36, 36, 34, 35, 37, 35, 38, 37, 36, 35, 35, 36, 38, 37, 35, 37, 34, 34, 37, 38, 39, 36, 37, 37, 34, 39, 37, 27, 82, 79, 67, 67, 69, 63, 64, 69, 62, 71, 64, 69, 67, 64, 78, 84, 79, 30, 36, 38, 34, 37, 37, 38, 39, 38, 35, 37, 37, 34, 36, 36, 38, 35, 36, 36, 39, 37, 39, 36, 37, 38, 39, 37, 35, 35, 39, 34, 36, 39, 34, 34, 36, 39, 34, 39, 35, 37, 35, 35, 35, 34, 34, 37, 34, 37, 38, 37, 37, 39, 39, 38, 35, 35, 38, 37, 34, 38, 37, 25, 84, 82, 79, 66, 72, 69, 63, 71, 69, 72, 58, 71, 61, 69, 65, 9, 19, 5, 36, 39, 34, 39, 38, 39, 34, 36, 37, 38, 38, 34, 37, 39, 37, 38, 38, 36, 37, 35, 39, 34, 36, 37, 35, 39, 35, 38, 34, 35, 39, 36, 38, 36, 37, 36, 38, 37, 37, 39, 35, 37, 36, 39, 37, 38, 38, 34, 39, 38, 34, 36, 36, 38, 35, 38, 35, 36, 37, 36, 36, 22, 78, 86, 79, 61, 64, 72, 60, 72, 72, 65, 61, 72, 63, 72, 59, 28, 34, 39, 38, 38, 35, 36, 39, 35, 39, 36, 37, 38, 35, 39, 39, 35, 37, 38, 37, 35, 37, 38, 39, 39, 38, 34, 35, 38, 36, 38, 37, 36, 37, 36, 38, 39, 34, 35, 37, 38, 38, 35, 39, 36, 36, 38, 37, 36, 34, 35, 39, 39, 38, 39, 34, 38, 35, 39, 38, 38, 37, 39, 39, 4, 16, 21, 18, 17, 19, 21, 20, 16, 19, 18, 21, 20, 16, 18, 19, 2, 36, 38, 39, 39, 35, 34, 34, 36, 35, 39, 39, 37, 39, 35, 34, 35, 37, 36, 36, 39, 38, 34, 39, 37, 37, 36, 35, 35, 38, 38, 38, 35, 35, 39, 34, 35, 36, 38, 38, 39, 39, 37, 37, 37, 37, 36, 37, 39, 38, 35, 35, 38, 36, 37, 35, 34, 39, 36, 39, 35, 39, 37, 39, 36, 36, 36, 38, 36, 39, 37, 37, 34, 39, 36, 39, 37, 34, 36, 38, 35, 37, 34, 34, 38, 34, 36, 35, 35, 35, 35, 35, 38, 37, 35, 36, 37, 39, 37, 35, 34, 37, 38, 39, 35, 34, 39, 35, 35, 35, 38, 36, 34, 35, 36, 35, 35, 38, 37, 35, 35, 35, 36, 34, 37, 37, 38, 34, 35, 35, 36, 39, 34, 36, 38, 34, 37, 36, 38, 34, 38, 39, 36, 38, 38, 34, 39, 39, 36, 37, 36, 38, 34, 36, 37, 34, 37, 34, 35, 34, 38, 36, 38, 38, 38, 35, 37, 39, 36, 35, 35, 36, 36, 34, 35, 34, 35, 35, 39, 34, 34, 36, 39, 34, 36, 39, 38, 38, 34, 34, 36, 35, 35, 37, 34, 38, 36, 37, 35, 35, 38, 35, 38, 39, 38, 37, 35, 36, 34, 38, 37, 36, 37, 34, 34, 37, 35, 37, 36, 37, 38, 34, 34, 37, 35, 35, 35, 37, 36, 35, 36, 36, 37, 35, 34, 35, 34, 34, 38, 38, 37, 36, 36, 38, 39, 37, 37, 38, 37, 37, 39, 36, 34, 36, 39, 34, 37, 39, 35, 39, 35, 38, 39, 36, 35, 39, 39, 39, 38, 35, 36, 34, 37, 38, 39, 34, 39, 38, 36, 35, 38, 35, 36, 39, 37, 36, 38, 35, 39, 35, 34, 39, 36, 36, 37, 35, 36, 38, 36, 34, 38, 35, 38, 37, 34, 36, 36, 34, 38, 34, 39, 37, 35, 36, 35, 38, 38, 35, 34, 36, 39, 39, 37, 39, 35, 36, 35, 37, 37, 38, 34, 39, 35, 35, 38, 35, 36, 39, 36, 39, 37, 34, 36, 39, 37, 35, 35, 38, 37, 37, 35, 37, 36, 35, 35, 39, 36, 35, 39, 34, 39, 37, 39, 34, 39, 39, 36, 38, 37, 35, 38, 35, 39, 38, 34, 39, 39, 34, 39, 36, 35, 37, 39, 38, 35, 34, 36, 34, 36, 36, 38, 37, 37, 35, 39, 37, 35, 39, 38, 35, 34, 34, 38, 37, 39, 38, 39, 39, 39, 38, 38, 37, 38, 37, 34, 34, 36, 34, 34, 39, 37, 38, 38, 36, 37, 37, 39, 34, 39, 39, 38, 34, 37, 39, 36, 38, 34, 39, 36, 34, 39, 39, 36, 36, 35, 34, 38, 34, 39, 39, 39, 36, 35, 37, 35, 37, 36, 34, 35, 38, 38, 37, 37);
			this.level6_width = 80;
			this.level6_height = 84;
			this.level6_rect_x = new Array(0, 3900, 3850, 3650, 3850, 3200, 3650, 3050, 2000, 2000, 1900, 2200, 2700, 3000, 3800, 3850, 3650, 3600, 3600, 3900, 950, 850, 0, 0, 0, 100, 400, 750, 750, 1000, 1500, 2350, 1600, 1050, 0, 0, 0, 0, 0, 100, 300, 300, 450, 250, 250, 100, 250, 600, 1200, 1700, 1450, 1450, 1400, 750, 2150, 2150, 2650, 1450, 1700, 2700, 2900, 3300, 3300, 3300, 2650, 500, 3400, 400, 300, 350, 300);
			this.level6_rect_y = new Array(0, 100, 850, 600, 350, 350, 1100, 850, 450, 600, 750, 850, 1150, 1450, 1350, 1600, 2050, 2300, 2800, 3150, 3450, 3750, 3850, 100, 250, 700, 1100, 750, 900, 450, 450, 1450, 1450, 1450, 1250, 1450, 1600, 1850, 1950, 3350, 2600, 2950, 3450, 3600, 3100, 2850, 2600, 2600, 2350, 2500, 2800, 3050, 2950, 3150, 3300, 2750, 2500, 2050, 2050, 1750, 2050, 2050, 2550, 3050, 3050, 2050, 3300, 1050, 950, 450, 450);
			this.level6_rect_w = new Array(4000, 100, 50, 50, 50, 450, 50, 150, 1200, 200, 300, 350, 200, 800, 200, 150, 350, 50, 50, 100, 3050, 100, 850, 50, 100, 50, 150, 100, 1150, 250, 250, 250, 450, 250, 150, 750, 100, 250, 100, 50, 300, 150, 150, 50, 50, 50, 50, 600, 500, 250, 250, 500, 50, 400, 300, 300, 250, 250, 1000, 200, 400, 50, 50, 50, 250, 400, 150, 350, 450, 400, 50);
			this.level6_rect_h = new Array(100, 1250, 100, 100, 100, 850, 100, 100, 150, 150, 350, 100, 100, 150, 250, 450, 1100, 100, 100, 300, 500, 200, 100, 150, 1000, 100, 200, 150, 200, 100, 100, 150, 150, 150, 200, 150, 250, 100, 1900, 100, 350, 750, 150, 100, 100, 100, 100, 200, 450, 100, 250, 100, 100, 100, 150, 150, 100, 300, 200, 500, 1100, 100, 100, 100, 100, 100, 150, 50, 100, 500, 100);
			this.level6_item_type = new Array(10, 11, 11, 11, 11, 11);
			this.level6_item_x = new Array(68, 56, 45, 3, 28, 1);
			this.level6_item_y = new Array(6, 49, 16, 36, 58, 4);
			this.level6_tileSet = 7;
			this.level6_gameType = 1;
			this.level7 = new Array(48, 40, 41, 42, 40, 55, 56, 56, 57, 34, 35, 35, 35, 35, 36, 41, 42, 40, 40, 41, 42, 40, 55, 56, 56, 56, 57, 40, 40, 41, 42, 40, 40, 55, 56, 57, 40, 40, 40, 40, 44, 40, 41, 42, 52, 53, 53, 53, 54, 41, 42, 40, 40, 40, 41, 42, 40, 40, 40, 55, 56, 56, 57, 40, 40, 41, 42, 40, 41, 42, 55, 56, 57, 40, 40, 41, 42, 40, 40, 55, 40, 0, 1, 2, 84, 2, 4, 5, 43, 37, 38, 38, 38, 38, 39, 40, 0, 1, 80, 83, 84, 82, 3, 2, 82, 3, 2, 80, 3, 84, 3, 83, 2, 82, 80, 2, 83, 3, 84, 80, 3, 2, 4, 5, 55, 56, 56, 56, 57, 0, 1, 3, 2, 3, 82, 84, 80, 83, 2, 3, 2, 3, 3, 84, 3, 83, 2, 83, 2, 82, 3, 84, 3, 82, 2, 3, 80, 4, 5, 43, 40, 69, 12, 13, 58, 8, 10, 9, 44, 41, 42, 40, 40, 41, 42, 40, 12, 11, 70, 30, 58, 29, 6, 6, 29, 7, 10, 75, 7, 58, 7, 30, 9, 29, 71, 11, 30, 8, 58, 70, 13, 12, 12, 11, 6, 76, 59, 29, 6, 7, 10, 13, 9, 12, 29, 59, 72, 30, 8, 9, 11, 7, 7, 59, 7, 30, 8, 30, 7, 29, 6, 59, 9, 29, 10, 6, 75, 6, 7, 44, 40, 76, 7, 13, 10, 10, 6, 12, 9, 29, 75, 40, 31, 32, 33, 43, 11, 7, 74, 30, 12, 29, 10, 13, 29, 6, 9, 70, 6, 6, 8, 30, 12, 29, 70, 13, 30, 8, 10, 73, 14, 7, 8, 11, 6, 70, 58, 29, 12, 11, 13, 7, 8, 13, 29, 58, 74, 30, 11, 13, 6, 13, 13, 58, 13, 30, 9, 30, 13, 29, 11, 58, 12, 29, 9, 6, 78, 68, 62, 40, 43, 70, 10, 12, 6, 13, 7, 12, 12, 29, 70, 40, 34, 35, 36, 44, 9, 9, 72, 30, 13, 29, 12, 10, 29, 60, 68, 79, 10, 13, 8, 30, 11, 29, 78, 69, 30, 8, 8, 71, 10, 6, 11, 60, 68, 79, 6, 29, 6, 7, 9, 9, 11, 7, 29, 60, 79, 30, 12, 12, 6, 9, 13, 7, 10, 30, 6, 30, 13, 29, 12, 10, 10, 29, 8, 6, 6, 11, 11, 43, 44, 79, 8, 6, 13, 8, 11, 7, 9, 29, 73, 43, 37, 38, 39, 40, 10, 8, 70, 30, 8, 29, 8, 12, 29, 72, 12, 8, 9, 8, 7, 30, 10, 29, 8, 72, 30, 12, 9, 70, 7, 6, 6, 74, 10, 8, 8, 29, 7, 11, 7, 6, 8, 10, 29, 70, 12, 30, 12, 11, 8, 7, 11, 13, 12, 30, 12, 30, 13, 29, 9, 11, 9, 29, 11, 8, 10, 41, 42, 44, 42, 41, 42, 11, 12, 11, 9, 11, 9, 29, 74, 44, 40, 40, 41, 42, 11, 60, 79, 30, 10, 29, 11, 12, 29, 70, 9, 7, 6, 10, 13, 30, 6, 29, 11, 70, 30, 6, 9, 70, 8, 6, 6, 70, 7, 7, 6, 29, 13, 6, 7, 6, 11, 8, 29, 78, 69, 30, 8, 8, 12, 9, 7, 13, 9, 30, 9, 30, 11, 29, 10, 11, 9, 29, 6, 7, 11, 7, 11, 40, 40, 69, 10, 8, 8, 12, 13, 9, 8, 29, 70, 8, 30, 30, 6, 60, 67, 79, 11, 30, 9, 29, 12, 11, 29, 74, 12, 11, 41, 42, 40, 30, 8, 29, 6, 70, 30, 10, 10, 78, 69, 8, 60, 79, 9, 13, 9, 29, 7, 6, 9, 11, 13, 23, 24, 25, 70, 21, 85, 12, 9, 6, 11, 11, 12, 30, 6, 30, 9, 29, 7, 12, 10, 29, 8, 13, 60, 62, 68, 40, 46, 78, 69, 11, 11, 10, 8, 10, 7, 29, 78, 69, 30, 30, 10, 70, 10, 9, 9, 30, 8, 29, 8, 6, 29, 78, 69, 7, 40, 41, 42, 30, 13, 29, 6, 70, 30, 9, 13, 11, 70, 13, 70, 11, 11, 9, 11, 29, 7, 9, 9, 13, 13, 26, 27, 28, 76, 22, 86, 6, 6, 10, 11, 10, 13, 30, 7, 30, 8, 29, 8, 11, 12, 29, 12, 9, 72, 12, 12, 43, 48, 67, 79, 7, 15, 16, 12, 9, 9, 29, 9, 70, 30, 30, 13, 70, 10, 6, 8, 30, 6, 29, 11, 12, 29, 7, 70, 11, 12, 9, 9, 30, 13, 29, 10, 71, 30, 8, 11, 8, 72, 10, 70, 7, 15, 16, 6, 29, 8, 9, 12, 14, 13, 41, 42, 45, 46, 43, 40, 40, 13, 10, 10, 12, 13, 21, 6, 21, 23, 24, 25, 85, 23, 24, 25, 13, 75, 8, 11, 44, 40, 7, 85, 10, 17, 18, 7, 12, 23, 24, 25, 70, 21, 21, 85, 71, 6, 8, 7, 21, 23, 24, 25, 23, 24, 25, 78, 69, 7, 10, 13, 21, 23, 24, 25, 74, 21, 43, 40, 41, 42, 69, 70, 8, 17, 18, 23, 24, 25, 10, 9, 10, 12, 40, 40, 47, 48, 44, 41, 42, 7, 11, 11, 13, 8, 22, 11, 22, 26, 27, 28, 86, 26, 27, 28, 13, 70, 9, 10, 43, 40, 7, 86, 6, 19, 20, 7, 7, 26, 27, 28, 76, 22, 22, 86, 77, 10, 9, 13, 22, 26, 27, 28, 26, 27, 28, 9, 77, 12, 12, 6, 22, 26, 27, 28, 70, 22, 44, 31, 33, 40, 77, 71, 10, 19, 20, 26, 27, 28, 11, 6, 6, 8, 13, 12, 11, 8, 13, 8, 7, 10, 13, 7, 12, 41, 42, 40, 40, 43, 49, 50, 51, 40, 41, 42, 7, 74, 11, 13, 44, 41, 42, 40, 40, 45, 46, 40, 41, 42, 40, 40, 45, 46, 43, 40, 40, 43, 40, 40, 41, 42, 45, 46, 41, 42, 43, 40, 40, 40, 40, 45, 46, 40, 40, 41, 42, 40, 40, 37, 39, 40, 41, 42, 40, 40, 43, 41, 42, 45, 46, 14, 8, 8, 6, 13, 7, 8, 11, 13, 13, 7, 7, 12, 9, 40, 45, 46, 40, 44, 52, 53, 54, 43, 40, 40, 60, 79, 12, 7, 40, 32, 32, 32, 33, 47, 48, 40, 40, 41, 42, 40, 47, 48, 44, 41, 42, 44, 40, 40, 40, 40, 47, 48, 40, 40, 44, 41, 42, 40, 40, 47, 48, 31, 32, 32, 32, 33, 49, 50, 51, 45, 46, 31, 32, 33, 44, 43, 40, 47, 48, 8, 8, 10, 11, 13, 12, 9, 13, 9, 6, 7, 12, 7, 6, 40, 47, 48, 41, 42, 55, 56, 57, 44, 45, 46, 70, 11, 12, 11, 40, 35, 35, 35, 36, 43, 0, 1, 80, 84, 3, 80, 2, 3, 3, 82, 3, 83, 84, 83, 3, 3, 80, 3, 3, 80, 81, 84, 83, 83, 4, 5, 40, 37, 38, 38, 38, 39, 52, 53, 54, 47, 48, 37, 38, 39, 40, 44, 11, 13, 14, 9, 6, 13, 8, 7, 8, 11, 11, 11, 6, 13, 6, 13, 8, 6, 0, 1, 82, 84, 2, 82, 80, 4, 47, 48, 79, 6, 60, 63, 40, 35, 35, 35, 36, 44, 8, 7, 74, 58, 10, 72, 6, 13, 9, 29, 6, 30, 58, 30, 10, 9, 70, 11, 6, 76, 10, 58, 30, 30, 8, 10, 40, 41, 42, 40, 40, 40, 55, 56, 57, 40, 40, 40, 41, 42, 41, 42, 10, 13, 9, 13, 13, 10, 11, 8, 13, 11, 11, 8, 6, 9, 11, 10, 9, 10, 6, 7, 29, 59, 6, 29, 75, 9, 43, 40, 69, 9, 70, 11, 43, 38, 38, 38, 39, 40, 68, 62, 79, 12, 9, 70, 10, 7, 6, 29, 7, 30, 7, 30, 7, 10, 72, 6, 6, 70, 13, 11, 30, 30, 7, 10, 77, 0, 1, 82, 84, 81, 82, 3, 83, 80, 81, 84, 82, 4, 5, 12, 9, 13, 13, 10, 12, 12, 6, 12, 9, 11, 7, 8, 12, 11, 11, 8, 9, 13, 12, 13, 29, 58, 13, 29, 70, 9, 44, 43, 76, 7, 72, 13, 44, 42, 40, 40, 41, 42, 8, 10, 6, 13, 12, 78, 65, 68, 69, 29, 7, 30, 13, 30, 11, 60, 79, 11, 60, 79, 13, 12, 30, 30, 7, 6, 70, 13, 11, 29, 58, 9, 29, 10, 30, 74, 9, 58, 29, 10, 7, 6, 10, 6, 8, 10, 7, 10, 8, 9, 10, 7, 10, 8, 6, 12, 11, 11, 6, 10, 13, 10, 29, 7, 11, 29, 70, 13, 40, 44, 45, 46, 70, 12, 40, 51, 8, 13, 10, 9, 13, 7, 7, 12, 12, 6, 8, 11, 70, 29, 12, 30, 7, 30, 12, 70, 8, 12, 72, 6, 10, 11, 30, 30, 6, 12, 70, 6, 10, 29, 8, 12, 29, 12, 30, 70, 11, 6, 29, 9, 9, 7, 11, 6, 6, 12, 6, 10, 6, 9, 9, 12, 7, 12, 10, 8, 11, 6, 12, 13, 8, 12, 29, 6, 10, 29, 78, 68, 63, 69, 47, 48, 70, 60, 40, 54, 10, 10, 6, 10, 7, 6, 11, 7, 12, 11, 11, 12, 74, 29, 11, 30, 14, 30, 9, 75, 7, 9, 71, 13, 6, 10, 30, 30, 12, 10, 75, 12, 10, 29, 8, 6, 29, 6, 30, 78, 69, 10, 29, 13, 10, 6, 6, 7, 12, 10, 13, 9, 8, 6, 11, 7, 6, 13, 11, 9, 7, 12, 12, 12, 11, 9, 29, 10, 10, 29, 7, 10, 8, 72, 70, 12, 73, 71, 40, 54, 13, 9, 13, 7, 12, 9, 11, 12, 12, 11, 8, 60, 79, 29, 6, 30, 14, 30, 60, 79, 13, 8, 78, 68, 69, 13, 30, 30, 15, 16, 78, 69, 12, 29, 7, 13, 29, 13, 30, 6, 70, 9, 29, 13, 9, 10, 11, 7, 10, 13, 11, 10, 6, 15, 16, 13, 7, 13, 12, 6, 9, 10, 6, 6, 13, 13, 29, 6, 9, 29, 10, 8, 12, 70, 74, 6, 70, 70, 43, 54, 10, 7, 7, 6, 8, 7, 7, 7, 7, 10, 9, 70, 23, 24, 25, 21, 85, 21, 70, 9, 10, 11, 10, 12, 74, 9, 21, 21, 17, 18, 12, 70, 23, 24, 25, 23, 24, 25, 21, 60, 79, 23, 24, 25, 9, 85, 11, 13, 10, 13, 11, 10, 12, 17, 18, 85, 9, 13, 11, 7, 9, 10, 6, 12, 9, 23, 24, 25, 23, 24, 25, 12, 10, 70, 70, 60, 79, 70, 44, 54, 61, 68, 65, 68, 69, 6, 9, 6, 12, 8, 10, 76, 26, 27, 28, 22, 86, 22, 77, 9, 13, 8, 6, 11, 70, 9, 22, 22, 19, 20, 10, 74, 26, 27, 28, 26, 27, 28, 22, 72, 9, 26, 27, 28, 7, 86, 9, 7, 10, 10, 8, 7, 11, 19, 20, 86, 6, 10, 10, 7, 8, 11, 10, 6, 10, 26, 27, 28, 26, 27, 28, 7, 13, 71, 77, 70, 10, 74, 40, 57, 6, 10, 13, 10, 78, 64, 68, 67, 69, 6, 6, 40, 41, 42, 43, 40, 40, 43, 40, 8, 10, 6, 6, 7, 75, 41, 42, 40, 40, 43, 40, 40, 41, 42, 40, 40, 40, 40, 41, 42, 40, 40, 41, 42, 40, 49, 50, 51, 12, 10, 11, 9, 41, 42, 40, 43, 40, 6, 10, 9, 7, 13, 6, 14, 43, 40, 40, 43, 40, 41, 42, 40, 40, 43, 45, 46, 49, 50, 51, 43, 7, 6, 6, 13, 13, 8, 12, 12, 78, 69, 10, 49, 50, 51, 44, 45, 46, 44, 43, 6, 11, 13, 10, 6, 78, 40, 45, 46, 40, 44, 40, 41, 42, 43, 40, 40, 41, 42, 31, 32, 32, 32, 32, 32, 33, 52, 53, 54, 12, 12, 13, 14, 40, 45, 46, 44, 43, 7, 11, 7, 7, 9, 7, 11, 44, 45, 46, 44, 40, 40, 40, 40, 43, 44, 47, 48, 52, 53, 54, 44, 12, 13, 60, 66, 68, 68, 62, 69, 11, 78, 62, 52, 53, 54, 40, 47, 48, 40, 44, 11, 6, 7, 8, 6, 8, 40, 47, 48, 41, 42, 40, 40, 40, 44, 49, 50, 51, 40, 34, 35, 35, 35, 35, 35, 36, 55, 56, 57, 8, 10, 8, 6, 40, 47, 48, 40, 44, 11, 9, 8, 13, 7, 13, 8, 40, 47, 48, 40, 40, 40, 41, 42, 44, 41, 42, 40, 55, 56, 57, 40, 6, 60, 79, 11, 7, 6, 11, 78, 64, 68, 61, 55, 56, 57, 1, 3, 84, 4, 5, 11, 8, 7, 9, 6, 8, 0, 1, 84, 2, 3, 4, 43, 31, 33, 52, 53, 54, 43, 37, 38, 38, 38, 38, 38, 39, 43, 9, 12, 9, 7, 11, 11, 6, 74, 59, 78, 68, 68, 69, 12, 12, 9, 12, 6, 41, 42, 40, 0, 1, 80, 3, 84, 3, 80, 4, 5, 43, 40, 40, 40, 63, 79, 10, 6, 7, 6, 9, 40, 40, 43, 41, 42, 43, 40, 7, 7, 58, 11, 12, 13, 10, 8, 10, 11, 11, 12, 10, 58, 7, 8, 12, 44, 34, 36, 55, 56, 57, 44, 40, 45, 46, 41, 42, 40, 40, 44, 67, 68, 68, 66, 65, 68, 63, 79, 59, 10, 11, 13, 73, 12, 11, 10, 11, 12, 49, 50, 51, 13, 11, 74, 13, 58, 7, 70, 7, 8, 44, 31, 32, 43, 69, 8, 6, 12, 6, 11, 9, 41, 42, 44, 40, 40, 44, 40, 12, 12, 13, 7, 9, 13, 12, 9, 6, 12, 12, 13, 9, 6, 7, 8, 11, 40, 34, 36, 40, 30, 70, 41, 42, 47, 48, 30, 43, 31, 33, 40, 68, 69, 12, 8, 10, 10, 13, 8, 59, 10, 6, 6, 78, 67, 68, 68, 61, 68, 52, 53, 54, 68, 66, 79, 9, 6, 9, 73, 7, 60, 40, 34, 35, 44, 78, 69, 13, 13, 8, 6, 9, 9, 29, 11, 60, 79, 29, 12, 6, 12, 10, 8, 10, 9, 8, 11, 7, 6, 13, 11, 12, 6, 12, 13, 60, 40, 37, 39, 43, 30, 70, 12, 59, 77, 7, 30, 44, 34, 36, 40, 11, 70, 11, 13, 6, 12, 8, 9, 58, 7, 7, 9, 7, 10, 12, 8, 6, 7, 55, 56, 57, 12, 9, 7, 13, 6, 12, 70, 10, 76, 40, 34, 35, 40, 68, 79, 7, 15, 16, 10, 6, 10, 29, 8, 74, 9, 29, 13, 9, 9, 12, 10, 13, 13, 9, 12, 11, 12, 8, 11, 11, 6, 11, 7, 70, 41, 42, 40, 44, 30, 76, 10, 58, 70, 13, 30, 40, 37, 39, 43, 10, 76, 9, 9, 11, 10, 7, 13, 7, 12, 11, 9, 8, 6, 10, 9, 6, 12, 70, 29, 6, 6, 13, 10, 11, 13, 13, 78, 69, 70, 40, 37, 38, 40, 7, 85, 85, 17, 18, 13, 6, 23, 24, 25, 70, 23, 24, 25, 6, 6, 9, 11, 7, 9, 12, 11, 10, 9, 7, 10, 12, 6, 12, 13, 70, 13, 29, 7, 30, 30, 70, 10, 10, 75, 12, 30, 41, 42, 40, 44, 12, 70, 12, 9, 12, 10, 9, 10, 7, 11, 12, 13, 10, 13, 60, 63, 68, 67, 79, 29, 7, 12, 8, 8, 7, 13, 8, 10, 72, 70, 41, 42, 40, 40, 8, 86, 86, 19, 20, 7, 9, 26, 27, 28, 72, 26, 27, 28, 7, 10, 13, 9, 8, 12, 12, 8, 13, 7, 12, 6, 7, 10, 8, 60, 79, 13, 29, 12, 30, 30, 78, 69, 12, 70, 8, 30, 9, 29, 12, 9, 12, 70, 11, 13, 8, 10, 6, 6, 12, 7, 7, 12, 6, 10, 70, 6, 11, 7, 9, 29, 12, 9, 6, 8, 10, 11, 13, 6, 70, 74, 49, 50, 51, 45, 46, 41, 42, 43, 40, 40, 41, 42, 45, 46, 40, 40, 40, 40, 41, 42, 6, 9, 8, 9, 13, 10, 8, 11, 9, 11, 11, 6, 7, 70, 9, 11, 29, 8, 30, 30, 10, 70, 6, 78, 69, 30, 13, 29, 7, 7, 8, 73, 11, 10, 8, 14, 7, 7, 12, 10, 6, 7, 11, 6, 70, 13, 9, 13, 6, 29, 11, 7, 13, 11, 9, 13, 43, 45, 46, 40, 52, 53, 54, 47, 48, 40, 40, 44, 40, 41, 42, 40, 47, 48, 31, 32, 32, 32, 33, 40, 6, 6, 12, 6, 10, 7, 45, 46, 41, 42, 8, 8, 12, 78, 69, 8, 29, 8, 30, 30, 60, 79, 6, 9, 74, 30, 7, 29, 9, 60, 66, 79, 12, 14, 8, 10, 9, 11, 11, 6, 11, 6, 13, 13, 75, 13, 11, 9, 10, 29, 8, 10, 9, 10, 10, 7, 44, 47, 48, 40, 55, 56, 57, 40, 0, 1, 80, 3, 84, 3, 3, 82, 4, 40, 34, 35, 35, 35, 36, 43, 67, 69, 12, 13, 10, 10, 47, 48, 40, 40, 7, 8, 7, 12, 70, 8, 29, 8, 30, 30, 70, 13, 8, 11, 70, 30, 11, 29, 6, 70, 6, 11, 12, 12, 10, 13, 13, 9, 8, 11, 10, 11, 8, 13, 78, 69, 11, 13, 7, 29, 7, 10, 6, 13, 9, 12, 13, 0, 1, 84, 80, 4, 40, 51, 7, 9, 76, 10, 58, 8, 11, 29, 13, 40, 34, 35, 35, 35, 36, 44, 69, 70, 8, 11, 8, 6, 12, 10, 6, 13, 9, 10, 8, 6, 70, 9, 29, 8, 30, 30, 70, 13, 13, 10, 70, 30, 11, 29, 7, 70, 11, 12, 6, 8, 6, 11, 12, 6, 9, 12, 10, 12, 13, 7, 12, 74, 15, 16, 9, 29, 11, 7, 6, 10, 10, 10, 13, 6, 10, 58, 75, 6, 43, 54, 12, 7, 70, 11, 10, 10, 6, 29, 11, 43, 34, 35, 35, 35, 36, 40, 74, 70, 7, 7, 13, 7, 8, 9, 9, 11, 12, 9, 12, 10, 70, 23, 24, 25, 21, 21, 77, 85, 9, 6, 70, 21, 23, 24, 25, 78, 69, 13, 11, 9, 11, 8, 12, 7, 9, 12, 12, 7, 6, 8, 6, 70, 17, 18, 23, 24, 25, 8, 12, 7, 10, 11, 9, 7, 8, 7, 70, 60, 44, 54, 12, 11, 75, 12, 13, 9, 12, 29, 11, 44, 34, 35, 35, 35, 36, 40, 70, 76, 8, 9, 6, 11, 8, 8, 11, 13, 6, 13, 12, 13, 70, 26, 27, 28, 22, 22, 70, 86, 12, 6, 76, 22, 26, 27, 28, 13, 75, 6, 8, 8, 12, 7, 9, 12, 12, 10, 12, 11, 6, 12, 9, 77, 19, 20, 26, 27, 28, 12, 10, 13, 8, 12, 12, 8, 11, 8, 70, 70, 43, 54, 67, 68, 79, 8, 9, 8, 9, 40, 41, 42, 37, 38, 38, 38, 39, 45, 46, 40, 40, 13, 9, 14, 11, 11, 10, 14, 8, 12, 14, 45, 46, 41, 42, 40, 43, 40, 40, 43, 45, 46, 43, 40, 40, 41, 42, 43, 40, 40, 7, 6, 9, 13, 13, 12, 13, 9, 8, 8, 12, 43, 45, 46, 41, 42, 40, 40, 40, 43, 40, 10, 7, 12, 12, 8, 60, 68, 79, 70, 44, 57, 69, 11, 6, 9, 12, 13, 10, 40, 40, 41, 42, 40, 40, 41, 42, 47, 48, 41, 42, 11, 13, 8, 9, 9, 13, 9, 9, 13, 10, 47, 48, 40, 41, 42, 44, 41, 42, 44, 47, 48, 44, 41, 42, 40, 40, 44, 41, 42, 9, 8, 6, 10, 10, 13, 13, 8, 7, 8, 6, 44, 47, 48, 40, 41, 42, 40, 40, 44, 40, 11, 6, 9, 10, 11, 74, 6, 13, 76, 40, 40, 70, 13, 8, 7, 7, 7, 6, 29, 0, 1, 80, 3, 84, 80, 80, 3, 4, 5, 10, 6, 9, 12, 6, 9, 13, 7, 11, 8, 7, 10, 0, 1, 82, 3, 83, 83, 2, 3, 84, 80, 2, 82, 3, 3, 82, 4, 5, 11, 7, 8, 13, 7, 12, 11, 6, 9, 6, 7, 60, 79, 29, 59, 12, 29, 11, 30, 59, 30, 6, 13, 7, 11, 7, 11, 70, 6, 9, 78, 40, 40, 73, 10, 12, 9, 13, 12, 10, 29, 6, 60, 79, 7, 58, 71, 70, 9, 9, 7, 9, 10, 11, 11, 13, 13, 11, 9, 13, 10, 8, 10, 12, 9, 29, 13, 30, 30, 9, 12, 58, 78, 69, 29, 9, 6, 29, 12, 7, 7, 10, 9, 12, 8, 11, 8, 10, 10, 13, 11, 74, 11, 29, 58, 12, 29, 6, 30, 58, 30, 12, 10, 10, 12, 9, 9, 72, 11, 8, 7, 43, 46, 71, 11, 6, 6, 13, 9, 8, 29, 11, 72, 10, 6, 11, 70, 78, 69, 10, 11, 11, 8, 6, 13, 12, 13, 7, 12, 8, 11, 9, 10, 6, 8, 29, 14, 30, 30, 7, 7, 11, 13, 74, 29, 12, 7, 29, 8, 10, 7, 12, 10, 7, 6, 13, 7, 9, 13, 7, 7, 70, 7, 29, 11, 6, 29, 9, 30, 7, 30, 13, 8, 9, 6, 6, 12, 78, 68, 69, 10, 44, 48, 70, 9, 12, 11, 11, 10, 11, 29, 9, 70, 13, 60, 68, 79, 11, 74, 12, 6, 13, 10, 13, 11, 9, 7, 12, 9, 8, 11, 9, 11, 11, 7, 29, 9, 30, 30, 11, 13, 11, 13, 70, 29, 11, 13, 29, 8, 7, 8, 6, 9, 6, 9, 8, 10, 8, 10, 6, 8, 70, 9, 29, 9, 10, 29, 11, 30, 11, 30, 11, 6, 10, 11, 13, 8, 12, 12, 70, 10, 40, 41, 42, 40, 9, 6, 7, 12, 12, 29, 9, 70, 10, 75, 6, 7, 13, 70, 12, 12, 13, 13, 12, 10, 43, 40, 41, 42, 9, 9, 12, 11, 6, 10, 29, 9, 30, 30, 6, 11, 11, 12, 75, 29, 10, 13, 29, 13, 7, 9, 6, 8, 9, 41, 42, 40, 40, 43, 6, 8, 75, 8, 29, 12, 8, 29, 13, 30, 6, 30, 8, 11, 12, 12, 11, 9, 13, 7, 78, 65, 40, 40, 75, 8, 13, 7, 8, 11, 10, 29, 7, 78, 69, 70, 11, 6, 8, 70, 9, 13, 11, 60, 68, 68, 44, 31, 33, 40, 68, 69, 7, 12, 13, 11, 29, 9, 30, 30, 45, 46, 40, 40, 43, 29, 11, 13, 29, 8, 10, 13, 60, 68, 63, 43, 31, 32, 33, 44, 66, 69, 71, 6, 29, 7, 7, 29, 6, 30, 13, 30, 12, 6, 8, 11, 11, 12, 13, 11, 13, 13, 43, 40, 70, 11, 7, 6, 6, 8, 11, 29, 6, 12, 71, 70, 6, 12, 11, 70, 11, 9, 10, 70, 12, 7, 40, 34, 36, 40, 13, 70, 7, 13, 7, 10, 29, 6, 30, 30, 47, 48, 41, 42, 44, 29, 8, 11, 29, 7, 12, 7, 70, 9, 7, 44, 34, 35, 36, 40, 7, 70, 70, 7, 29, 6, 9, 29, 8, 30, 10, 30, 9, 6, 9, 10, 10, 11, 9, 13, 13, 7, 44, 40, 79, 11, 9, 15, 16, 10, 13, 29, 11, 8, 70, 70, 7, 9, 7, 76, 11, 7, 6, 78, 69, 9, 40, 34, 36, 43, 60, 79, 13, 12, 13, 12, 29, 12, 30, 30, 9, 11, 60, 68, 79, 29, 8, 8, 29, 8, 8, 60, 79, 10, 60, 40, 34, 35, 36, 40, 60, 79, 70, 13, 29, 6, 12, 29, 11, 30, 7, 30, 9, 7, 8, 9, 9, 7, 13, 8, 10, 8, 40, 43, 12, 11, 10, 17, 18, 85, 23, 24, 25, 9, 70, 78, 69, 6, 45, 46, 43, 10, 6, 7, 70, 10, 43, 34, 36, 44, 70, 12, 85, 85, 13, 23, 24, 25, 21, 21, 12, 10, 70, 6, 23, 24, 25, 23, 24, 25, 6, 73, 8, 10, 70, 43, 34, 35, 36, 40, 75, 60, 79, 23, 24, 25, 23, 24, 25, 21, 13, 21, 85, 8, 12, 12, 6, 13, 11, 10, 9, 13, 43, 44, 6, 9, 10, 19, 20, 86, 26, 27, 28, 10, 77, 41, 42, 40, 47, 48, 44, 8, 10, 7, 70, 12, 44, 34, 36, 40, 70, 12, 86, 86, 6, 26, 27, 28, 22, 22, 11, 7, 77, 13, 26, 27, 28, 26, 27, 28, 7, 70, 11, 13, 75, 44, 34, 35, 36, 43, 70, 77, 12, 26, 27, 28, 26, 27, 28, 22, 7, 22, 86, 8, 12, 13, 9, 11, 10, 7, 10, 8, 44, 49, 50, 51, 40, 41, 42, 40, 41, 42, 40, 40, 41, 42, 31, 32, 32, 33, 45, 46, 40, 40, 41, 42, 40, 34, 36, 49, 50, 51, 40, 40, 43, 40, 40, 40, 41, 42, 40, 40, 41, 42, 40, 40, 40, 41, 42, 41, 42, 40, 40, 40, 45, 46, 34, 35, 36, 44, 40, 40, 40, 40, 43, 40, 40, 41, 42, 40, 40, 40, 49, 50, 51, 11, 8, 13, 9, 6, 11, 45, 46, 52, 53, 54, 31, 32, 32, 33, 43, 45, 46, 40, 40, 40, 34, 35, 35, 36, 47, 48, 49, 50, 51, 45, 46, 34, 36, 52, 53, 54, 40, 40, 44, 31, 32, 32, 32, 33, 40, 40, 40, 31, 32, 32, 32, 32, 32, 32, 32, 33, 45, 46, 47, 48, 34, 35, 36, 49, 50, 51, 43, 40, 44, 31, 32, 32, 32, 32, 33, 40, 52, 53, 54, 69, 11, 8, 12, 8, 12, 47, 48, 55, 56, 57, 37, 38, 38, 39, 44, 47, 48, 40, 45, 46, 37, 38, 38, 39, 40, 40, 52, 53, 54, 47, 48, 37, 39, 55, 56, 57, 45, 46, 40, 37, 38, 38, 38, 39, 43, 45, 46, 34, 35, 35, 35, 35, 35, 35, 35, 36, 47, 48, 40, 40, 37, 38, 39, 52, 53, 54, 44, 40, 40, 37, 38, 38, 38, 38, 39, 43, 55, 56, 57, 76, 12, 12, 7, 8, 6, 8, 40, 43, 40, 41, 42, 40, 40, 41, 42, 40, 40, 40, 47, 48, 40, 40, 40, 40, 40, 40, 55, 56, 57, 40, 40, 40, 40, 40, 40, 40, 47, 48, 41, 42, 40, 40, 40, 40, 44, 47, 48, 34, 35, 35, 35, 35, 35, 35, 35, 36, 40, 41, 42, 40, 40, 41, 42, 55, 56, 57, 40, 40, 41, 42, 40, 41, 42, 40, 40, 44, 41, 42, 40, 79, 9, 9, 6, 11, 9, 9, 40, 44, 0, 1, 80, 3, 84, 3, 3, 4, 5, 41, 42, 40, 0, 1, 84, 83, 3, 80, 82, 3, 83, 3, 80, 82, 84, 3, 82, 3, 83, 83, 3, 80, 3, 3, 84, 80, 4, 5, 40, 34, 35, 35, 35, 35, 35, 35, 35, 36, 40, 0, 1, 80, 84, 3, 3, 80, 80, 3, 3, 3, 3, 3, 80, 84, 80, 4, 5, 45, 46, 41, 42, 9, 12, 13, 13, 10, 60, 68, 43, 40, 68, 69, 70, 13, 58, 7, 12, 8, 60, 40, 41, 42, 11, 7, 59, 30, 10, 75, 29, 13, 30, 12, 72, 29, 59, 8, 29, 10, 30, 30, 11, 75, 7, 8, 59, 70, 13, 12, 40, 34, 35, 35, 35, 35, 35, 35, 35, 36, 43, 11, 10, 74, 58, 11, 6, 70, 71, 10, 7, 7, 9, 13, 74, 58, 75, 8, 12, 47, 48, 40, 45, 46, 7, 7, 8, 9, 70, 7, 44, 43, 11, 70, 76, 7, 12, 9, 9, 8, 72, 49, 50, 51, 11, 13, 59, 30, 10, 70, 29, 10, 30, 12, 73, 29, 59, 12, 29, 8, 30, 30, 7, 70, 6, 10, 59, 70, 6, 13, 40, 34, 35, 35, 35, 35, 35, 35, 35, 36, 44, 12, 13, 70, 11, 6, 11, 73, 78, 68, 69, 9, 8, 12, 70, 11, 70, 9, 6, 40, 43, 40, 47, 48, 12, 7, 8, 7, 70, 13, 40, 44, 64, 79, 70, 6, 9, 9, 45, 46, 40, 52, 53, 54, 13, 13, 59, 30, 10, 70, 29, 10, 30, 8, 70, 29, 59, 11, 29, 6, 30, 30, 8, 70, 8, 11, 59, 76, 8, 12, 43, 37, 38, 38, 38, 38, 38, 38, 38, 39, 40, 12, 10, 75, 6, 8, 60, 79, 6, 7, 70, 6, 10, 11, 70, 9, 70, 8, 9, 40, 44, 40, 40, 13, 8, 8, 7, 12, 78, 69, 43, 40, 7, 8, 70, 9, 13, 13, 47, 48, 40, 55, 56, 57, 9, 12, 59, 30, 7, 70, 29, 8, 30, 9, 70, 29, 59, 13, 29, 7, 30, 30, 12, 78, 69, 12, 59, 71, 7, 7, 44, 40, 41, 42, 40, 40, 40, 41, 42, 45, 46, 62, 68, 79, 10, 7, 70, 13, 12, 10, 74, 9, 60, 68, 79, 7, 78, 68, 69, 40, 31, 33, 40, 6, 8, 11, 9, 13, 10, 78, 44, 40, 7, 7, 78, 69, 12, 7, 6, 8, 75, 70, 71, 6, 7, 9, 59, 30, 10, 70, 29, 6, 30, 60, 79, 29, 59, 14, 29, 6, 30, 30, 13, 8, 70, 9, 59, 70, 11, 10, 12, 0, 1, 3, 3, 2, 82, 3, 4, 47, 48, 69, 13, 13, 11, 12, 70, 6, 12, 10, 77, 7, 75, 11, 12, 13, 9, 12, 71, 43, 34, 36, 40, 6, 7, 9, 9, 7, 13, 9, 40, 43, 13, 12, 13, 70, 13, 10, 60, 68, 79, 74, 70, 9, 6, 8, 59, 30, 6, 74, 29, 12, 30, 70, 8, 29, 59, 12, 29, 6, 30, 30, 10, 6, 74, 9, 59, 70, 6, 8, 12, 11, 7, 7, 10, 7, 29, 13, 11, 43, 40, 74, 8, 8, 10, 60, 79, 9, 40, 40, 40, 40, 72, 11, 12, 11, 10, 13, 70, 44, 34, 36, 43, 12, 12, 8, 9, 7, 7, 45, 46, 44, 11, 6, 13, 75, 12, 10, 70, 7, 11, 70, 78, 68, 69, 8, 59, 30, 6, 71, 29, 8, 30, 75, 11, 29, 59, 8, 29, 12, 30, 30, 7, 13, 73, 12, 59, 75, 13, 9, 12, 7, 11, 10, 13, 9, 29, 9, 7, 44, 40, 70, 13, 11, 10, 70, 13, 12, 40, 40, 40, 40, 70, 12, 11, 13, 7, 8, 74, 40, 34, 36, 44, 9, 13, 12, 6, 11, 13, 47, 48, 41, 42, 13, 11, 70, 9, 10, 70, 13, 60, 79, 9, 13, 70, 12, 58, 30, 60, 79, 29, 10, 30, 77, 6, 29, 58, 9, 29, 13, 30, 30, 12, 11, 70, 8, 58, 70, 9, 10, 11, 9, 12, 10, 6, 10, 29, 7, 12, 40, 40, 78, 69, 6, 6, 78, 68, 68, 69, 13, 70, 7, 75, 11, 13, 9, 12, 9, 78, 40, 34, 36, 40, 69, 8, 12, 12, 7, 11, 10, 43, 43, 8, 8, 6, 70, 13, 60, 79, 7, 70, 8, 13, 11, 73, 6, 7, 30, 75, 6, 29, 10, 30, 70, 12, 29, 7, 7, 29, 12, 30, 30, 10, 11, 70, 6, 10, 70, 10, 7, 8, 10, 13, 10, 12, 9, 29, 11, 9, 41, 42, 11, 70, 10, 8, 8, 10, 8, 76, 60, 79, 7, 70, 12, 9, 7, 10, 6, 13, 40, 37, 39, 43, 70, 9, 8, 10, 8, 8, 9, 44, 44, 68, 67, 68, 79, 10, 71, 13, 6, 74, 9, 10, 7, 75, 13, 10, 30, 70, 13, 29, 13, 30, 78, 69, 29, 13, 7, 29, 7, 30, 30, 10, 8, 78, 61, 69, 70, 11, 12, 9, 7, 12, 6, 9, 10, 29, 13, 12, 40, 43, 7, 72, 8, 6, 10, 10, 7, 75, 70, 6, 9, 70, 6, 7, 13, 12, 13, 13, 49, 50, 51, 44, 79, 10, 12, 8, 10, 7, 60, 40, 40, 8, 8, 6, 9, 6, 70, 12, 11, 75, 10, 9, 9, 70, 7, 11, 30, 70, 6, 29, 7, 30, 9, 74, 29, 10, 7, 29, 9, 30, 30, 11, 12, 10, 13, 71, 70, 8, 6, 10, 8, 8, 8, 11, 11, 29, 9, 13, 40, 44, 40, 45, 46, 13, 6, 8, 6, 70, 73, 10, 13, 70, 7, 7, 8, 41, 42, 40, 52, 53, 54, 45, 46, 13, 11, 60, 63, 68, 79, 40, 40, 68, 69, 6, 6, 8, 70, 6, 6, 70, 7, 8, 8, 78, 69, 6, 30, 76, 12, 29, 9, 30, 11, 70, 29, 11, 6, 29, 7, 30, 30, 9, 6, 6, 6, 70, 72, 6, 10, 9, 10, 9, 12, 13, 7, 29, 6, 7, 41, 42, 40, 47, 48, 7, 10, 8, 7, 70, 72, 12, 8, 78, 69, 8, 8, 40, 41, 42, 55, 56, 57, 47, 48, 9, 6, 75, 10, 12, 7, 43, 40, 12, 78, 64, 69, 6, 76, 11, 12, 72, 6, 12, 12, 6, 74, 9, 30, 70, 13, 29, 13, 30, 9, 72, 29, 10, 13, 29, 12, 30, 30, 12, 8, 8, 60, 79, 70, 8, 12, 12, 7, 9, 12, 8, 11, 29, 6, 7, 7, 10, 8, 70, 10, 7, 12, 6, 12, 74, 70, 13, 6, 7, 70, 7, 7, 7, 9, 11, 29, 13, 13, 29, 9, 8, 9, 70, 60, 68, 64, 44, 45, 46, 40, 41, 42, 40, 45, 46, 6, 78, 64, 69, 12, 40, 45, 46, 41, 42, 9, 29, 6, 30, 6, 41, 42, 40, 43, 40, 11, 30, 30, 10, 6, 45, 46, 43, 40, 40, 8, 10, 11, 6, 10, 10, 7, 29, 8, 13, 10, 13, 60, 79, 9, 8, 13, 11, 11, 71, 70, 8, 11, 7, 70, 7, 11, 13, 8, 8, 29, 6, 8, 29, 6, 12, 8, 70, 71, 6, 12, 40, 47, 48, 41, 42, 40, 40, 47, 48, 13, 12, 8, 70, 13, 40, 47, 48, 40, 40, 6, 29, 13, 30, 60, 40, 41, 42, 44, 40, 9, 30, 30, 7, 11, 47, 48, 44, 41, 42, 9, 10, 13, 8, 10, 12, 23, 24, 25, 8, 11, 8, 74, 8, 6, 6, 6, 6, 12, 70, 70, 10, 7, 6, 71, 11, 6, 12, 12, 23, 24, 25, 23, 24, 25, 60, 67, 79, 70, 11, 10, 40, 43, 13, 8, 8, 70, 10, 74, 11, 10, 6, 13, 70, 13, 8, 70, 58, 30, 73, 8, 29, 11, 30, 74, 6, 29, 8, 11, 29, 6, 30, 30, 9, 11, 9, 70, 58, 74, 6, 8, 9, 12, 9, 13, 12, 26, 27, 28, 6, 13, 9, 77, 12, 13, 10, 13, 10, 8, 70, 76, 8, 8, 12, 77, 9, 13, 7, 10, 26, 27, 28, 26, 27, 28, 70, 11, 13, 76, 13, 8, 40, 44, 61, 68, 69, 70, 9, 70, 15, 16, 8, 12, 71, 13, 12, 70, 6, 30, 71, 6, 29, 13, 30, 70, 12, 29, 9, 10, 29, 8, 30, 30, 9, 8, 11, 75, 7, 78, 69, 6, 9, 9, 6, 11, 43, 41, 42, 40, 40, 41, 42, 40, 40, 43, 40, 41, 42, 49, 50, 51, 45, 46, 40, 43, 41, 42, 40, 41, 42, 40, 40, 41, 42, 41, 42, 40, 40, 40, 40, 41, 42, 40, 8, 11, 70, 78, 69, 70, 17, 18, 85, 7, 70, 9, 6, 72, 13, 21, 70, 23, 24, 25, 21, 70, 23, 24, 25, 23, 24, 25, 21, 21, 10, 10, 9, 70, 8, 14, 70, 13, 6, 85, 85, 8, 44, 31, 32, 32, 32, 33, 40, 40, 40, 44, 41, 42, 43, 52, 53, 54, 47, 48, 40, 44, 40, 43, 40, 40, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 43, 9, 10, 70, 9, 70, 75, 19, 20, 86, 13, 77, 10, 9, 76, 13, 22, 77, 26, 27, 28, 22, 75, 26, 27, 28, 26, 27, 28, 22, 22, 7, 8, 10, 77, 11, 13, 73, 10, 12, 86, 86, 8, 40, 34, 35, 35, 35, 36, 45, 46, 40, 40, 40, 40, 44, 55, 56, 57, 40, 41, 42, 40, 40, 44, 40, 40, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 44, 41, 42, 40, 40, 40, 41, 42, 40, 40, 43, 40, 41, 42, 40, 40, 40, 45, 46, 40, 41, 42, 49, 50, 51, 43, 40, 41, 42, 40, 40, 41, 42, 41, 42, 40, 40, 41, 42, 43, 40, 40, 41, 42, 34, 35, 35, 35, 36, 47, 48, 49, 50, 51, 31, 32, 32, 32, 32, 32, 32, 32, 33, 41, 42, 40, 40, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 33, 49, 50, 51, 44, 41, 42, 45, 46, 41, 42, 47, 48, 41, 42, 40, 52, 53, 54, 44, 43, 40, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 44, 43, 49, 50, 51, 34, 35, 35, 35, 36, 40, 40, 52, 53, 54, 34, 35, 35, 35, 35, 35, 35, 35, 36, 40, 49, 50, 51, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 52, 53, 54, 40, 43, 40, 47, 48, 40, 31, 32, 32, 32, 32, 33, 55, 56, 57, 40, 44, 40, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 40, 44, 52, 53, 54, 34, 35, 35, 35, 36, 40, 40, 55, 56, 57, 34, 35, 35, 35, 35, 35, 35, 35, 36, 43, 52, 53, 54, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 55, 56, 57, 40, 44, 40, 40, 41, 42, 34, 35, 35, 35, 35, 36, 40, 40, 41, 42, 40, 40, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 40, 40, 55, 56, 57, 37, 38, 38, 38, 39, 40, 41, 42, 40, 40, 34, 35, 35, 35, 35, 35, 35, 35, 36, 44, 55, 56, 57, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35);
			this.level7_width = 80;
			this.level7_height = 80;
			this.level7_rect_x = new Array(0, 3950, 0, 2150, 0, 50, 50, 650, 1150, 1650, 350, 500, 50, 2600, 1950, 2400, 2500, 2850, 3250, 3400, 3600, 3900, 3900, 3000, 3650, 3250, 3400, 3850, 2650, 1300, 1600, 1800, 1900, 2150, 600, 400, 600, 50, 400, 500, 1150, 1500, 50, 600, 1150, 1850, 50, 50, 400, 550, 1400, 250, 1550, 1850, 2050, 2350, 2650, 3200, 3650, 3750, 3850, 2200, 750);
			this.level7_rect_y = new Array(0, 50, 3750, 3600, 50, 3150, 3450, 3450, 3450, 3450, 2900, 2750, 2550, 2250, 2750, 3000, 3300, 3050, 3300, 2750, 2800, 3050, 2550, 1950, 1650, 1150, 1150, 1300, 1150, 1150, 1300, 1300, 1400, 1400, 1150, 1350, 1300, 1650, 1950, 1750, 1700, 1950, 2250, 2500, 2250, 2300, 600, 300, 50, 150, 350, 600, 600, 500, 600, 600, 450, 550, 700, 850, 250, 50, 2450);
			this.level7_rect_w = new Array(4000, 50, 2150, 1800, 50, 50, 350, 250, 250, 250, 300, 150, 3550, 250, 550, 100, 150, 200, 400, 200, 50, 50, 50, 500, 300, 150, 550, 100, 250, 1150, 200, 550, 200, 200, 400, 350, 150, 800, 600, 350, 200, 950, 100, 150, 200, 250, 200, 100, 400, 250, 150, 1300, 300, 200, 300, 150, 350, 550, 100, 100, 100, 250, 150);
			this.level7_rect_h = new Array(50, 3900, 200, 350, 3700, 50, 100, 100, 100, 100, 100, 150, 200, 300, 250, 400, 100, 100, 100, 550, 100, 100, 100, 100, 100, 350, 150, 350, 150, 150, 250, 100, 50, 200, 150, 100, 50, 100, 100, 200, 100, 100, 50, 50, 300, 100, 300, 50, 100, 200, 100, 100, 200, 300, 200, 100, 100, 150, 200, 100, 50, 50, 100);
			this.level7_item_type = new Array(10, 11, 11, 11, 11, 11);
			this.level7_item_x = new Array(39, 1, 78, 75, 9, 9);
			this.level7_item_y = new Array(38, 5, 4, 32, 38, 57);
			this.level7_tileSet = 8;
			this.level7_gameType = 1;
			this.level8 = new Array(60, 60, 60, 60, 60, 79, 60, 60, 75, 60, 60, 60, 60, 60, 78, 60, 74, 60, 60, 60, 60, 74, 60, 60, 79, 60, 60, 74, 60, 60, 81, 60, 60, 60, 60, 60, 60, 60, 64, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 78, 74, 63, 74, 60, 60, 60, 60, 76, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 84, 83, 60, 60, 60, 101, 52, 52, 52, 52, 54, 53, 52, 52, 54, 53, 52, 52, 52, 52, 54, 52, 54, 53, 52, 55, 52, 52, 52, 52, 52, 55, 52, 52, 55, 52, 52, 52, 55, 100, 60, 60, 63, 62, 62, 60, 101, 52, 52, 52, 52, 52, 52, 52, 52, 55, 52, 53, 52, 52, 52, 55, 52, 55, 55, 53, 52, 55, 52, 52, 53, 54, 100, 60, 60, 60, 60, 61, 61, 64, 74, 60, 60, 60, 60, 49, 27, 0, 0, 34, 0, 0, 27, 0, 0, 86, 0, 0, 27, 0, 32, 0, 0, 0, 0, 28, 0, 0, 27, 86, 0, 27, 0, 0, 29, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 60, 49, 0, 32, 0, 0, 86, 0, 0, 31, 0, 0, 0, 0, 0, 27, 27, 0, 34, 0, 86, 0, 0, 27, 0, 0, 31, 48, 60, 60, 60, 60, 62, 62, 63, 79, 60, 60, 60, 64, 49, 32, 0, 0, 27, 0, 0, 27, 0, 0, 0, 0, 0, 33, 0, 27, 0, 0, 0, 0, 27, 0, 0, 27, 0, 0, 28, 0, 0, 27, 0, 0, 0, 0, 48, 60, 60, 101, 52, 52, 52, 51, 0, 27, 0, 0, 0, 0, 0, 35, 38, 0, 0, 0, 0, 29, 35, 38, 27, 0, 0, 0, 37, 36, 0, 0, 27, 50, 52, 54, 52, 55, 53, 52, 52, 52, 52, 100, 60, 63, 49, 36, 0, 0, 27, 0, 0, 35, 22, 38, 0, 0, 0, 27, 0, 27, 0, 0, 0, 0, 27, 0, 0, 27, 37, 23, 36, 0, 0, 27, 0, 0, 0, 0, 48, 60, 60, 49, 35, 38, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 27, 0, 32, 27, 0, 0, 0, 33, 0, 0, 37, 36, 0, 34, 0, 0, 0, 86, 0, 0, 31, 0, 48, 60, 60, 49, 0, 0, 0, 35, 38, 0, 0, 0, 27, 0, 0, 37, 36, 0, 27, 0, 0, 0, 0, 27, 0, 37, 36, 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 48, 64, 60, 49, 0, 27, 0, 37, 19, 36, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 27, 0, 27, 35, 19, 38, 0, 35, 38, 0, 28, 0, 0, 35, 38, 0, 0, 0, 0, 0, 27, 0, 48, 60, 60, 49, 20, 19, 19, 38, 27, 0, 0, 37, 36, 0, 0, 27, 0, 0, 29, 0, 0, 0, 37, 36, 0, 27, 0, 27, 0, 0, 37, 19, 36, 0, 0, 0, 0, 48, 63, 60, 49, 37, 36, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 37, 36, 0, 31, 0, 0, 29, 0, 0, 27, 0, 35, 38, 0, 0, 27, 0, 0, 37, 19, 22, 36, 0, 48, 60, 60, 49, 0, 0, 0, 29, 27, 0, 0, 27, 0, 0, 0, 31, 0, 0, 27, 0, 0, 0, 27, 0, 0, 27, 0, 35, 38, 0, 27, 0, 0, 0, 0, 0, 39, 48, 60, 60, 49, 27, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 0, 0, 48, 60, 60, 57, 40, 47, 0, 27, 35, 38, 0, 32, 0, 0, 37, 36, 0, 0, 27, 0, 0, 0, 35, 38, 0, 27, 0, 0, 33, 0, 34, 0, 0, 0, 0, 46, 45, 56, 60, 60, 49, 33, 37, 20, 36, 0, 0, 0, 0, 0, 0, 37, 19, 36, 0, 0, 0, 90, 91, 0, 96, 97, 0, 96, 97, 0, 90, 91, 0, 90, 91, 0, 96, 97, 0, 96, 97, 0, 0, 0, 48, 60, 60, 101, 53, 51, 0, 30, 0, 27, 0, 27, 0, 0, 27, 0, 37, 19, 36, 0, 0, 0, 0, 28, 0, 27, 0, 0, 27, 0, 27, 0, 0, 0, 0, 50, 54, 52, 54, 100, 49, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 98, 99, 0, 92, 93, 0, 92, 93, 0, 98, 99, 0, 98, 99, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 32, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 48, 49, 18, 18, 39, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 0, 0, 48, 60, 60, 49, 38, 0, 0, 27, 0, 90, 91, 96, 97, 0, 90, 91, 90, 91, 0, 0, 0, 0, 0, 96, 97, 90, 91, 0, 96, 97, 96, 97, 0, 0, 0, 0, 0, 0, 0, 48, 57, 40, 40, 40, 47, 0, 0, 0, 0, 0, 0, 27, 0, 0, 46, 41, 40, 40, 41, 40, 43, 40, 44, 42, 40, 40, 40, 40, 40, 45, 40, 40, 40, 40, 43, 41, 44, 45, 40, 41, 56, 60, 60, 49, 31, 0, 0, 33, 0, 92, 93, 98, 99, 0, 92, 93, 92, 93, 0, 0, 0, 0, 0, 98, 99, 92, 93, 0, 98, 99, 98, 99, 0, 0, 0, 0, 0, 0, 0, 50, 52, 52, 52, 52, 51, 0, 0, 0, 0, 0, 0, 35, 38, 0, 50, 53, 52, 52, 52, 54, 52, 52, 55, 55, 55, 53, 52, 52, 52, 52, 53, 52, 52, 52, 52, 52, 54, 52, 52, 52, 100, 60, 60, 49, 27, 0, 0, 27, 0, 94, 95, 94, 95, 0, 94, 95, 94, 95, 0, 0, 0, 0, 0, 94, 95, 94, 95, 0, 94, 95, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 35, 38, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 27, 29, 0, 0, 0, 34, 0, 86, 0, 27, 0, 0, 29, 0, 0, 0, 27, 0, 86, 0, 37, 22, 36, 0, 48, 60, 60, 49, 35, 38, 0, 27, 46, 40, 40, 40, 40, 40, 44, 40, 40, 40, 47, 0, 0, 0, 46, 40, 40, 40, 41, 40, 40, 45, 45, 44, 47, 0, 0, 0, 0, 0, 0, 0, 35, 38, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 37, 36, 35, 38, 0, 0, 27, 0, 0, 0, 30, 0, 0, 27, 0, 0, 0, 35, 38, 0, 0, 27, 0, 0, 0, 48, 60, 60, 49, 0, 27, 0, 31, 50, 52, 54, 52, 52, 52, 53, 52, 54, 53, 51, 0, 0, 0, 50, 52, 52, 55, 54, 52, 52, 52, 52, 54, 51, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 35, 38, 0, 0, 0, 0, 39, 0, 0, 33, 0, 0, 27, 0, 0, 27, 0, 37, 36, 0, 0, 0, 35, 38, 0, 35, 19, 38, 0, 0, 31, 0, 0, 32, 0, 0, 37, 48, 60, 60, 49, 0, 27, 37, 36, 0, 0, 0, 0, 0, 86, 0, 37, 36, 0, 0, 0, 0, 0, 0, 27, 0, 33, 0, 86, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 27, 0, 0, 46, 45, 44, 40, 47, 27, 0, 37, 36, 0, 0, 31, 0, 31, 0, 0, 0, 0, 0, 27, 0, 0, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 28, 48, 84, 60, 49, 0, 29, 27, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 35, 38, 27, 0, 0, 37, 20, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 19, 38, 29, 0, 0, 48, 60, 60, 60, 49, 31, 0, 27, 37, 19, 20, 36, 0, 27, 0, 0, 0, 0, 0, 28, 0, 0, 0, 90, 91, 0, 96, 97, 0, 96, 97, 0, 31, 48, 74, 60, 49, 0, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 0, 0, 48, 64, 61, 60, 49, 17, 0, 17, 17, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 27, 0, 0, 0, 92, 93, 0, 98, 99, 0, 98, 99, 0, 27, 48, 82, 60, 49, 0, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 18, 18, 39, 0, 48, 63, 62, 60, 49, 18, 39, 18, 18, 39, 0, 0, 0, 27, 0, 0, 0, 37, 19, 36, 0, 0, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 32, 48, 60, 60, 57, 45, 40, 43, 40, 45, 43, 40, 40, 44, 42, 43, 40, 40, 40, 40, 40, 40, 40, 40, 40, 43, 43, 40, 41, 41, 40, 40, 40, 44, 40, 40, 40, 47, 0, 0, 0, 46, 43, 44, 43, 45, 40, 43, 56, 60, 60, 60, 57, 40, 45, 42, 44, 43, 42, 47, 0, 35, 19, 38, 0, 27, 0, 0, 0, 46, 44, 45, 40, 43, 40, 40, 44, 42, 43, 40, 40, 56, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 84, 66, 67, 68, 66, 66, 72, 66, 83, 63, 60, 60, 60, 60, 60, 60, 101, 51, 0, 0, 0, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 49, 0, 0, 0, 27, 0, 30, 0, 0, 0, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 62, 62, 60, 60, 60, 60, 60, 60, 60, 60, 78, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 49, 0, 0, 0, 0, 48, 60, 101, 55, 52, 52, 52, 52, 52, 54, 52, 52, 52, 52, 55, 52, 52, 55, 51, 0, 0, 0, 27, 37, 36, 0, 0, 0, 50, 54, 53, 55, 52, 52, 55, 54, 52, 52, 52, 52, 100, 60, 60, 101, 55, 54, 54, 100, 101, 52, 52, 52, 52, 52, 52, 52, 53, 52, 52, 55, 52, 52, 52, 53, 55, 52, 52, 52, 55, 54, 53, 55, 52, 100, 60, 49, 0, 0, 0, 0, 48, 64, 49, 35, 38, 31, 0, 0, 33, 0, 0, 86, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 28, 27, 0, 0, 0, 0, 0, 28, 33, 0, 0, 34, 0, 86, 0, 0, 0, 28, 48, 60, 60, 49, 0, 86, 0, 48, 49, 27, 0, 0, 0, 0, 27, 86, 0, 0, 0, 33, 0, 86, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 39, 48, 63, 49, 0, 27, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 17, 17, 0, 0, 0, 0, 0, 27, 27, 0, 0, 27, 0, 0, 0, 0, 37, 36, 48, 64, 60, 49, 0, 0, 0, 48, 49, 35, 38, 0, 0, 0, 27, 0, 37, 19, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 46, 56, 60, 49, 0, 30, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 35, 38, 0, 0, 0, 39, 18, 18, 0, 39, 0, 0, 0, 27, 35, 19, 38, 27, 0, 0, 0, 0, 27, 0, 48, 63, 64, 49, 0, 0, 0, 50, 51, 0, 34, 0, 0, 0, 27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 50, 100, 60, 49, 37, 36, 27, 0, 0, 35, 38, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 46, 43, 40, 40, 40, 40, 47, 0, 0, 34, 0, 0, 31, 35, 38, 0, 0, 0, 35, 26, 48, 60, 63, 49, 0, 0, 0, 0, 0, 0, 27, 0, 0, 37, 36, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 48, 60, 49, 27, 0, 32, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 48, 60, 60, 60, 60, 60, 49, 37, 19, 36, 0, 0, 27, 0, 27, 0, 0, 0, 0, 0, 48, 60, 60, 49, 20, 21, 19, 38, 0, 0, 27, 0, 0, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 48, 60, 49, 27, 37, 36, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 35, 19, 38, 50, 55, 100, 60, 101, 53, 51, 27, 0, 0, 0, 0, 29, 0, 32, 0, 0, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 27, 37, 19, 36, 0, 0, 27, 0, 0, 35, 19, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 64, 49, 39, 0, 0, 0, 48, 60, 49, 34, 27, 0, 37, 20, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 48, 60, 49, 35, 38, 30, 0, 0, 37, 19, 36, 0, 35, 38, 0, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 27, 27, 0, 0, 0, 0, 28, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 63, 57, 47, 0, 0, 0, 48, 60, 49, 17, 17, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 48, 60, 49, 0, 17, 17, 0, 0, 17, 0, 0, 0, 0, 27, 0, 0, 0, 0, 48, 60, 60, 57, 40, 41, 40, 40, 40, 40, 47, 0, 0, 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 53, 51, 0, 0, 0, 48, 60, 49, 18, 18, 39, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 18, 0, 0, 48, 60, 49, 0, 18, 18, 39, 0, 18, 0, 0, 0, 0, 33, 0, 0, 0, 39, 48, 60, 60, 101, 52, 52, 54, 53, 55, 52, 51, 0, 0, 27, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 57, 45, 40, 40, 40, 47, 0, 0, 0, 0, 0, 0, 0, 46, 43, 40, 40, 40, 40, 42, 56, 60, 57, 40, 40, 43, 44, 41, 45, 47, 0, 0, 0, 27, 0, 0, 46, 40, 56, 60, 60, 49, 0, 0, 0, 30, 27, 0, 0, 0, 0, 31, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 63, 60, 49, 0, 0, 0, 27, 0, 0, 48, 60, 60, 60, 60, 49, 0, 0, 0, 27, 27, 0, 0, 0, 0, 33, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 39, 0, 0, 39, 48, 60, 101, 52, 55, 52, 54, 51, 0, 0, 0, 0, 0, 0, 0, 50, 52, 52, 52, 53, 54, 52, 53, 52, 54, 52, 54, 52, 54, 52, 52, 51, 0, 0, 0, 30, 0, 0, 50, 54, 100, 60, 60, 49, 0, 0, 0, 27, 34, 0, 0, 0, 0, 27, 0, 0, 0, 0, 35, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 41, 40, 41, 40, 40, 45, 40, 44, 56, 60, 49, 0, 0, 27, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 30, 0, 0, 0, 86, 0, 0, 0, 0, 34, 0, 0, 0, 0, 37, 19, 36, 0, 0, 0, 0, 48, 60, 64, 49, 0, 0, 0, 27, 27, 0, 0, 37, 19, 36, 0, 0, 0, 0, 39, 27, 0, 39, 0, 0, 39, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 49, 0, 0, 32, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 35, 38, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 48, 60, 63, 49, 0, 0, 0, 28, 27, 0, 0, 27, 0, 0, 0, 0, 0, 46, 45, 41, 43, 40, 40, 40, 40, 47, 0, 0, 0, 0, 0, 48, 60, 101, 52, 52, 52, 52, 52, 53, 100, 60, 49, 0, 37, 36, 27, 0, 0, 0, 46, 45, 47, 0, 0, 37, 19, 36, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 48, 64, 60, 49, 0, 0, 0, 27, 35, 19, 38, 27, 0, 0, 0, 0, 0, 50, 54, 53, 52, 55, 52, 52, 52, 51, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 0, 48, 64, 49, 0, 27, 0, 27, 0, 0, 0, 48, 60, 49, 0, 0, 27, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 27, 46, 47, 0, 0, 37, 20, 48, 63, 60, 49, 37, 19, 19, 36, 0, 0, 27, 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 0, 48, 63, 49, 0, 30, 0, 35, 38, 0, 0, 48, 60, 49, 0, 0, 32, 37, 21, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 38, 0, 0, 29, 48, 49, 0, 0, 27, 0, 48, 60, 60, 49, 27, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 17, 0, 0, 17, 0, 0, 48, 60, 49, 0, 0, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 17, 48, 49, 0, 0, 17, 0, 48, 60, 60, 49, 29, 0, 0, 0, 0, 0, 27, 30, 0, 0, 0, 0, 0, 37, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 39, 0, 0, 0, 0, 0, 48, 60, 49, 0, 18, 39, 0, 18, 39, 0, 48, 60, 49, 0, 39, 18, 18, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 18, 0, 39, 18, 48, 49, 0, 39, 18, 0, 48, 60, 60, 49, 31, 0, 0, 0, 0, 37, 36, 27, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 57, 40, 47, 0, 0, 0, 0, 48, 60, 57, 40, 40, 40, 44, 41, 44, 40, 56, 60, 57, 44, 42, 43, 40, 40, 41, 41, 47, 1, 1, 1, 1, 1, 46, 40, 44, 40, 41, 40, 40, 40, 100, 57, 40, 44, 42, 42, 56, 59, 60, 49, 27, 0, 0, 0, 46, 40, 40, 40, 40, 47, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 54, 54, 51, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 60, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 63, 63, 49, 1, 0, 0, 0, 0, 48, 60, 60, 60, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 49, 27, 0, 0, 0, 50, 52, 52, 52, 52, 51, 0, 37, 26, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 48, 60, 101, 52, 55, 52, 54, 52, 53, 52, 52, 52, 52, 52, 52, 52, 55, 53, 100, 60, 49, 1, 1, 1, 1, 1, 48, 60, 101, 55, 55, 55, 52, 52, 54, 52, 55, 52, 52, 52, 100, 58, 60, 49, 35, 38, 0, 0, 0, 27, 0, 27, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 48, 60, 49, 1, 1, 1, 0, 0, 48, 60, 49, 27, 0, 0, 0, 29, 27, 0, 0, 0, 27, 0, 48, 60, 85, 49, 0, 27, 0, 0, 0, 27, 0, 30, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 19, 38, 0, 0, 0, 0, 0, 48, 60, 49, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 27, 48, 60, 49, 0, 0, 0, 0, 0, 48, 60, 49, 27, 0, 0, 0, 27, 27, 0, 0, 0, 35, 38, 48, 60, 78, 49, 0, 32, 0, 37, 19, 36, 0, 27, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 39, 48, 60, 49, 39, 0, 0, 35, 19, 38, 0, 0, 0, 37, 36, 0, 0, 37, 36, 48, 60, 49, 39, 0, 0, 0, 39, 48, 60, 49, 35, 38, 0, 0, 27, 35, 38, 0, 0, 0, 27, 48, 60, 74, 49, 0, 27, 0, 27, 0, 0, 0, 35, 19, 38, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 46, 45, 56, 60, 57, 40, 47, 0, 0, 0, 27, 0, 0, 0, 34, 0, 0, 37, 36, 0, 48, 60, 57, 47, 0, 0, 0, 46, 56, 60, 49, 0, 27, 0, 0, 27, 0, 27, 0, 37, 19, 36, 48, 60, 74, 49, 0, 27, 0, 27, 0, 0, 0, 0, 0, 27, 0, 28, 0, 0, 46, 40, 40, 40, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 50, 52, 54, 52, 53, 55, 51, 0, 0, 0, 35, 38, 0, 0, 27, 0, 0, 27, 0, 0, 50, 54, 55, 51, 0, 0, 0, 50, 52, 53, 51, 0, 27, 0, 37, 36, 0, 27, 0, 27, 0, 0, 48, 60, 80, 49, 0, 88, 89, 88, 89, 0, 0, 0, 0, 88, 89, 88, 89, 0, 48, 60, 64, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 21, 19, 38, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 48, 60, 83, 49, 0, 90, 91, 96, 97, 0, 0, 0, 0, 90, 91, 90, 91, 0, 48, 60, 61, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 0, 90, 91, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 96, 97, 0, 90, 91, 90, 91, 0, 48, 60, 60, 49, 0, 92, 93, 98, 99, 0, 0, 0, 0, 92, 93, 92, 93, 0, 48, 60, 62, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 93, 0, 92, 93, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 93, 98, 99, 0, 92, 93, 92, 93, 0, 48, 60, 60, 49, 39, 94, 95, 94, 95, 39, 0, 0, 39, 94, 95, 94, 95, 39, 48, 60, 63, 60, 49, 0, 0, 39, 0, 0, 39, 0, 0, 39, 0, 0, 39, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 94, 95, 0, 94, 95, 94, 95, 0, 48, 60, 60, 57, 40, 40, 44, 42, 43, 40, 45, 40, 40, 40, 40, 44, 41, 40, 56, 60, 60, 60, 57, 40, 40, 40, 41, 44, 40, 43, 40, 40, 40, 40, 45, 47, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 46, 43, 40, 40, 40, 40, 41, 40, 40, 41, 40, 40, 44, 40, 40, 40, 41, 40, 42, 44, 45, 40, 43, 44, 40, 40, 44, 43, 43, 45, 40, 40, 43, 56, 58, 60, 60, 64, 60, 60, 60, 60, 60, 61, 61, 60, 60, 60, 60, 60, 60, 60, 60, 82, 68, 66, 67, 66, 72, 83, 60, 60, 60, 60, 60, 60, 63, 60, 49, 0, 37, 36, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 60, 60, 60, 81, 60, 60, 82, 67, 85, 60, 60, 60, 60, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 63, 60, 60, 60, 60, 60, 62, 62, 60, 101, 52, 52, 54, 52, 53, 52, 52, 52, 54, 55, 52, 52, 52, 55, 52, 52, 52, 52, 52, 52, 52, 51, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 52, 52, 52, 52, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 52, 52, 52, 52, 54, 54, 54, 52, 53, 52, 52, 52, 52, 52, 54, 100, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 49, 0, 0, 34, 0, 0, 0, 86, 0, 0, 27, 0, 0, 0, 27, 0, 0, 0, 0, 0, 86, 35, 38, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 86, 37, 25, 19, 36, 0, 0, 0, 0, 34, 0, 0, 0, 86, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 101, 52, 54, 52, 52, 52, 52, 52, 52, 52, 51, 0, 0, 27, 0, 0, 0, 0, 37, 19, 36, 0, 0, 0, 35, 19, 38, 0, 0, 0, 0, 0, 27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 37, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 19, 38, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 35, 19, 38, 0, 0, 37, 36, 0, 27, 46, 42, 41, 43, 43, 40, 47, 0, 0, 37, 36, 0, 27, 0, 0, 0, 0, 0, 0, 0, 35, 19, 38, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 27, 0, 0, 31, 50, 55, 52, 52, 53, 53, 51, 0, 0, 30, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 48, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 42, 56, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 96, 97, 0, 0, 0, 0, 0, 90, 91, 0, 96, 97, 0, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 100, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 0, 92, 93, 0, 0, 0, 0, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 98, 99, 0, 0, 0, 0, 0, 92, 93, 0, 98, 99, 0, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 0, 92, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 94, 95, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 40, 42, 40, 40, 45, 47, 0, 0, 0, 0, 0, 0, 46, 40, 45, 45, 44, 42, 43, 40, 40, 44, 40, 40, 43, 40, 40, 42, 42, 43, 41, 40, 40, 41, 47, 0, 0, 0, 0, 0, 0, 46, 40, 45, 40, 44, 43, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 0, 0, 39, 0, 39, 0, 0, 0, 0, 0, 50, 52, 54, 55, 52, 52, 51, 0, 0, 0, 0, 0, 0, 50, 52, 52, 52, 54, 53, 52, 52, 52, 52, 52, 52, 52, 54, 52, 52, 54, 52, 53, 52, 53, 52, 51, 0, 0, 0, 0, 0, 0, 50, 52, 54, 53, 52, 52, 51, 0, 0, 0, 0, 0, 39, 0, 39, 0, 0, 0, 0, 0, 0, 48, 60, 60, 49, 0, 0, 0, 0, 46, 40, 40, 40, 47, 0, 0, 0, 0, 27, 35, 38, 86, 37, 36, 0, 0, 0, 0, 0, 0, 0, 0, 35, 38, 86, 27, 0, 27, 0, 0, 37, 36, 86, 27, 0, 37, 36, 35, 38, 0, 0, 86, 27, 0, 0, 0, 0, 0, 0, 0, 35, 38, 0, 86, 27, 37, 36, 0, 0, 0, 0, 46, 40, 40, 41, 47, 0, 0, 0, 0, 0, 48, 60, 85, 49, 0, 0, 0, 0, 50, 52, 55, 52, 51, 0, 0, 0, 0, 31, 0, 27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 29, 0, 35, 38, 0, 32, 0, 0, 34, 0, 27, 0, 0, 27, 0, 37, 19, 36, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 37, 36, 33, 0, 0, 0, 0, 0, 50, 53, 52, 52, 51, 0, 0, 0, 0, 0, 48, 60, 76, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 88, 89, 88, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 74, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 96, 97, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 96, 97, 0, 90, 91, 90, 91, 0, 96, 97, 96, 97, 0, 90, 91, 96, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 91, 90, 91, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 78, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 99, 98, 99, 92, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 93, 98, 99, 0, 92, 93, 92, 93, 0, 98, 99, 98, 99, 0, 92, 93, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 93, 92, 93, 92, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 60, 83, 49, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 94, 95, 94, 95, 94, 95, 0, 0, 1, 0, 39, 0, 0, 0, 0, 94, 95, 94, 95, 0, 94, 95, 94, 95, 0, 94, 95, 94, 95, 0, 94, 95, 94, 95, 0, 0, 0, 0, 39, 0, 0, 0, 0, 94, 95, 94, 95, 94, 95, 0, 39, 0, 0, 0, 0, 39, 0, 0, 0, 0, 39, 0, 0, 48, 60, 59, 57, 40, 44, 45, 45, 40, 40, 44, 44, 42, 40, 45, 41, 40, 40, 40, 44, 44, 40, 40, 44, 40, 41, 45, 40, 45, 40, 40, 40, 40, 41, 44, 40, 40, 40, 43, 44, 42, 43, 45, 41, 45, 40, 40, 40, 43, 43, 41, 40, 40, 40, 41, 40, 44, 43, 40, 40, 44, 40, 45, 40, 43, 42, 40, 40, 45, 40, 43, 43, 41, 40, 45, 40, 40, 43, 40, 43, 56, 58, 60, 60, 60, 60, 60, 61, 61, 60, 60, 60, 60, 60, 60, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 82, 67, 85, 60, 60, 60, 60, 60, 82, 85, 60, 60, 60, 60, 60, 60, 60, 60, 79, 60, 64, 64, 60, 60, 60, 65, 58, 59, 58, 65, 60, 60, 60, 84, 66, 68, 71, 85, 60, 60, 60, 60, 60, 60, 60, 60, 60, 64, 61, 61, 64, 66, 70, 66, 85, 60, 60, 60, 60, 60, 60, 60, 62, 62, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 64, 64, 60, 60, 60, 60, 60, 60, 61, 60, 60, 60, 60, 60, 60, 76, 60, 60, 84, 66, 71, 66, 73, 66, 83, 60, 63, 63, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 78, 60, 60, 60, 82, 70, 69, 66, 60, 59, 59, 58, 60, 60, 63, 62, 62, 63, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 63, 63, 60, 60, 60, 60, 60, 60, 62, 60, 60, 60, 60, 60, 60, 74, 60, 60, 75, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 82, 66, 72, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 74, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 84, 66, 66, 83, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 81, 60, 60, 74, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 80, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60);
			this.level8_width = 80;
			this.level8_height = 80;
			this.level8_rect_x = new Array(3400, 0, 1750, 1750, 1650, 1850, 1850, 1000, 300, 0, 0, 3900, 3800, 3400, 2850, 1400, 1800, 750, 300, 100, 800, 600, 2250, 3150, 2800, 2800, 3200, 3200, 3600, 2050, 2400, 1900, 1800, 1450, 1450, 1450, 750, 100, 250, 100, 1700, 1850, 1550, 1550, 300, 2650, 3000, 2900, 3300, 2050, 2250, 2600, 100, 3800, 2050);
			this.level8_rect_y = new Array(0, 0, 100, 200, 400, 550, 500, 700, 700, 100, 3650, 200, 3050, 3350, 3250, 3250, 2950, 3250, 3350, 2700, 2450, 2700, 2700, 2400, 2400, 2250, 2250, 2100, 1900, 2100, 1850, 1000, 2400, 2100, 1750, 1900, 1850, 1550, 1200, 1000, 1000, 1250, 1500, 1200, 2150, 1600, 1450, 1300, 1000, 1000, 800, 550, 400, 1600, 1600);
			this.level8_rect_w = new Array(600, 3400, 400, 200, 100, 300, 100, 550, 550, 100, 4000, 100, 100, 250, 350, 1150, 350, 350, 250, 500, 250, 1100, 1650, 200, 200, 150, 150, 700, 100, 900, 150, 150, 350, 250, 450, 150, 450, 350, 100, 1600, 50, 50, 200, 150, 300, 850, 150, 350, 600, 800, 250, 1300, 100, 100, 250);
			this.level8_rect_h = new Array(200, 100, 100, 300, 100, 100, 50, 100, 100, 3550, 300, 3450, 100, 100, 100, 100, 100, 100, 100, 250, 250, 150, 150, 100, 100, 150, 150, 150, 200, 150, 250, 1400, 100, 100, 150, 200, 100, 100, 150, 200, 100, 100, 100, 300, 100, 150, 150, 150, 150, 150, 200, 100, 100, 150, 150);
			this.level8_item_type = new Array(10, 11, 11, 11, 11, 11);
			this.level8_item_x = new Array(39, 2, 32, 76, 77, 3);
			this.level8_item_y = new Array(72, 7, 41, 19, 60, 30);
			this.level8_tileSet = 3;
			this.level8_gameType = 1;
			this.level9 = new Array(17, 21, 21, 25, 21, 21, 21, 21, 21, 23, 24, 21, 21, 25, 21, 21, 23, 24, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 31, 21, 27, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 23, 24, 21, 21, 21, 21, 21, 21, 23, 24, 21, 21, 21, 21, 8, 15, 14, 11, 12, 13, 12, 14, 12, 13, 14, 12, 11, 11, 12, 13, 14, 14, 11, 14, 12, 11, 12, 14, 13, 11, 13, 13, 12, 11, 12, 14, 13, 11, 11, 13, 14, 11, 14, 13, 11, 12, 13, 12, 12, 13, 13, 11, 12, 12, 12, 12, 13, 12, 13, 12, 12, 11, 14, 12, 11, 12, 14, 13, 12, 14, 12, 12, 11, 11, 11, 12, 12, 12, 11, 11, 12, 12, 11, 12, 10, 2, 5, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 99, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 99, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 0, 5, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 0, 2, 21, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 96, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 93, 97, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 93, 97, 16, 21, 29, 9, 20, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 99, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 18, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 99, 20, 19, 21, 21, 8, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 103, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 103, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 18, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 91, 103, 88, 18, 30, 21, 9, 20, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 18, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 92, 89, 15, 14, 26, 6, 20, 20, 20, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 18, 9, 20, 20, 20, 20, 20, 20, 20, 0, 3, 3, 1, 2, 4, 2, 1, 1, 4, 3, 2, 4, 1, 4, 3, 4, 1, 4, 3, 4, 25, 8, 20, 20, 20, 20, 20, 0, 3, 4, 1, 2, 1, 4, 2, 2, 4, 3, 3, 1, 1, 3, 4, 4, 3, 1, 1, 1, 4, 3, 4, 1, 2, 2, 4, 4, 2, 1, 1, 2, 2, 3, 1, 3, 3, 1, 3, 4, 4, 5, 17, 9, 20, 20, 20, 20, 20, 20, 20, 19, 21, 21, 27, 29, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 27, 31, 21, 21, 9, 20, 20, 20, 20, 20, 16, 21, 21, 28, 29, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 31, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 9, 18, 9, 20, 20, 20, 20, 20, 20, 20, 15, 14, 14, 11, 12, 12, 13, 14, 14, 14, 12, 12, 14, 14, 11, 13, 13, 12, 14, 13, 14, 21, 8, 20, 20, 20, 20, 20, 15, 12, 13, 14, 12, 14, 13, 11, 12, 14, 12, 14, 11, 12, 11, 11, 11, 12, 12, 12, 13, 12, 14, 11, 11, 13, 12, 11, 14, 11, 11, 11, 14, 12, 14, 13, 14, 12, 11, 12, 12, 13, 10, 16, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 22, 20, 20, 0, 4, 21, 9, 20, 20, 20, 20, 20, 0, 3, 4, 5, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 22, 20, 20, 20, 18, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 21, 21, 6, 20, 20, 20, 20, 20, 15, 12, 13, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 10, 20, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 21, 21, 8, 20, 20, 20, 0, 4, 1, 4, 1, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 4, 3, 2, 1, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 26, 21, 8, 20, 20, 20, 15, 13, 14, 11, 14, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 13, 11, 14, 13, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 21, 21, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 21, 29, 9, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 21, 21, 8, 97, 102, 88, 20, 20, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 91, 88, 104, 19, 21, 21, 9, 20, 92, 89, 20, 20, 90, 92, 92, 20, 20, 20, 20, 20, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 90, 90, 89, 20, 15, 12, 21, 8, 0, 3, 2, 4, 1, 4, 4, 1, 1, 5, 20, 20, 20, 20, 20, 0, 4, 2, 2, 4, 4, 2, 2, 3, 1, 1, 4, 4, 3, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 1, 4, 2, 1, 1, 4, 1, 2, 4, 3, 4, 2, 3, 5, 20, 20, 20, 20, 20, 0, 3, 1, 2, 4, 1, 4, 4, 1, 4, 5, 21, 8, 19, 27, 21, 21, 21, 21, 21, 28, 21, 7, 20, 20, 20, 20, 20, 19, 27, 21, 21, 21, 21, 29, 21, 21, 21, 21, 21, 30, 31, 7, 20, 20, 20, 20, 20, 20, 20, 91, 20, 91, 20, 20, 20, 20, 20, 20, 20, 16, 27, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 9, 20, 20, 20, 20, 20, 19, 21, 28, 21, 21, 23, 24, 21, 21, 21, 8, 21, 9, 15, 14, 14, 14, 11, 12, 14, 11, 14, 10, 20, 20, 20, 20, 20, 15, 14, 11, 12, 11, 13, 11, 13, 13, 11, 13, 11, 14, 11, 10, 20, 20, 20, 20, 20, 20, 92, 90, 20, 90, 20, 20, 20, 20, 20, 20, 20, 15, 12, 11, 12, 12, 12, 14, 14, 14, 14, 14, 11, 12, 14, 10, 20, 20, 20, 20, 20, 15, 13, 14, 12, 14, 12, 14, 11, 13, 13, 10, 21, 6, 20, 22, 20, 20, 20, 20, 20, 100, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 99, 20, 20, 22, 20, 20, 20, 20, 20, 20, 0, 3, 2, 3, 1, 4, 5, 20, 20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 100, 20, 20, 20, 22, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 22, 20, 20, 0, 21, 9, 20, 20, 20, 20, 20, 20, 20, 96, 94, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 21, 21, 21, 23, 24, 7, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 100, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 16, 28, 6, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 21, 28, 21, 21, 21, 8, 20, 20, 20, 20, 20, 20, 20, 93, 97, 97, 97, 95, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 15, 21, 9, 20, 20, 20, 20, 20, 20, 20, 20, 103, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18, 21, 21, 21, 21, 21, 9, 20, 20, 20, 20, 20, 20, 20, 100, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 0, 1, 21, 8, 20, 20, 20, 20, 20, 20, 91, 20, 88, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 96, 102, 88, 20, 20, 20, 20, 91, 91, 20, 18, 23, 24, 30, 31, 21, 9, 20, 20, 20, 91, 20, 88, 104, 95, 91, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 91, 20, 20, 20, 88, 104, 95, 20, 20, 20, 20, 20, 17, 21, 21, 8, 20, 20, 20, 20, 20, 92, 90, 20, 89, 90, 92, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 92, 90, 20, 20, 89, 92, 20, 20, 92, 90, 90, 92, 17, 21, 21, 21, 21, 21, 7, 20, 92, 20, 90, 92, 89, 20, 20, 90, 92, 92, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 90, 92, 20, 92, 89, 20, 20, 20, 20, 20, 20, 20, 17, 28, 26, 6, 20, 20, 20, 20, 0, 3, 3, 2, 1, 3, 1, 3, 2, 2, 5, 20, 20, 20, 20, 20, 20, 20, 0, 3, 4, 3, 3, 1, 4, 2, 3, 3, 1, 3, 5, 18, 21, 21, 21, 21, 21, 8, 0, 3, 2, 4, 1, 2, 1, 2, 2, 3, 4, 1, 5, 20, 20, 20, 20, 20, 20, 0, 3, 2, 1, 3, 2, 1, 3, 2, 4, 5, 20, 20, 20, 20, 16, 21, 25, 8, 20, 20, 20, 20, 19, 26, 21, 21, 28, 21, 21, 31, 21, 21, 9, 20, 20, 20, 20, 20, 20, 20, 17, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 6, 17, 21, 21, 21, 27, 21, 8, 17, 21, 21, 21, 23, 24, 21, 21, 21, 21, 21, 21, 9, 20, 20, 20, 20, 20, 20, 16, 27, 21, 21, 21, 21, 21, 30, 31, 21, 8, 20, 20, 20, 20, 17, 21, 21, 6, 20, 20, 20, 20, 18, 25, 21, 27, 21, 21, 21, 21, 21, 21, 6, 20, 20, 20, 20, 20, 20, 20, 17, 21, 21, 21, 21, 21, 21, 27, 21, 27, 21, 21, 9, 15, 14, 14, 13, 14, 14, 10, 19, 21, 23, 24, 21, 30, 31, 21, 21, 21, 27, 21, 6, 20, 20, 20, 93, 98, 98, 19, 21, 21, 21, 21, 23, 24, 21, 21, 21, 6, 20, 20, 20, 20, 16, 21, 21, 9, 20, 20, 20, 20, 15, 11, 12, 14, 14, 14, 12, 12, 11, 14, 10, 97, 97, 94, 20, 20, 20, 20, 18, 28, 21, 21, 21, 21, 21, 21, 21, 21, 31, 21, 9, 98, 94, 20, 22, 20, 20, 20, 17, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 20, 20, 20, 99, 20, 20, 15, 11, 13, 13, 13, 12, 11, 12, 11, 13, 10, 20, 20, 20, 20, 18, 21, 27, 7, 20, 20, 0, 4, 4, 4, 2, 2, 2, 2, 4, 2, 3, 4, 5, 20, 20, 99, 20, 20, 20, 20, 18, 21, 21, 23, 24, 21, 21, 21, 21, 21, 30, 31, 6, 20, 99, 20, 20, 20, 20, 20, 17, 28, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 7, 20, 20, 20, 99, 20, 20, 0, 4, 3, 2, 2, 2, 3, 1, 2, 1, 1, 1, 5, 20, 20, 18, 21, 13, 10, 20, 20, 15, 13, 14, 12, 11, 13, 11, 13, 11, 14, 13, 13, 10, 20, 20, 99, 20, 20, 20, 20, 15, 14, 12, 11, 13, 13, 13, 12, 11, 12, 13, 14, 10, 20, 99, 20, 20, 20, 20, 20, 15, 13, 14, 14, 12, 11, 14, 13, 13, 13, 12, 14, 10, 20, 20, 20, 99, 20, 20, 15, 11, 14, 14, 12, 13, 11, 12, 14, 13, 14, 14, 10, 20, 20, 17, 21, 5, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 96, 97, 94, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 99, 20, 20, 20, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 20, 99, 20, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 20, 19, 21, 7, 20, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 20, 20, 100, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 96, 98, 98, 102, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 104, 95, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 20, 20, 17, 21, 6, 20, 91, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 91, 91, 88, 103, 91, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 20, 20, 88, 91, 20, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 20, 20, 88, 20, 91, 91, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 91, 20, 19, 21, 10, 20, 90, 92, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 92, 90, 90, 89, 92, 90, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 92, 92, 20, 20, 89, 90, 92, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 92, 20, 89, 92, 90, 90, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 92, 15, 14, 2, 2, 2, 1, 4, 1, 2, 4, 3, 1, 2, 3, 4, 1, 4, 4, 2, 2, 2, 3, 2, 3, 1, 1, 4, 3, 1, 3, 3, 4, 1, 2, 2, 1, 1, 2, 3, 1, 1, 1, 4, 2, 3, 4, 1, 3, 1, 1, 2, 4, 1, 3, 4, 1, 1, 4, 2, 3, 1, 2, 1, 2, 1, 3, 2, 3, 1, 3, 3, 4, 1, 2, 3, 1, 2, 3, 2, 2, 4, 1, 27, 21, 21, 21, 21, 28, 21, 21, 21, 28, 27, 21, 21, 21, 21, 21, 21, 21, 30, 31, 21, 21, 21, 21, 21, 21, 21, 21, 23, 31, 21, 31, 21, 21, 21, 21, 21, 21, 21, 31, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 21, 21, 21, 21, 26, 21, 21, 21, 21, 23, 24, 21, 21, 21, 21, 21, 21, 26, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 31, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 25, 29, 21, 21, 21, 29, 21, 21, 21, 21, 21, 21, 31, 25, 29, 23, 24, 21, 21, 21, 21, 21, 27, 27, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 31, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 26, 23, 24, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29, 30, 31, 21, 21, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 26, 21, 21, 21, 21, 21, 26, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 31, 21, 21, 26, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 23, 24, 21, 21, 21, 21, 23, 24, 21, 21, 21, 21, 21, 21, 21, 21, 21, 31, 21, 25, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 27, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21);
			this.level9_width = 80;
			this.level9_height = 46;
			this.level9_rect_x = new Array(0, 3900, 2950, 3900, 3450, 3950, 3900, 3150, 3150, 2200, 1850, 1200, 300, 200, 0, 0, 100, 850, 250, 350, 350, 2500, 2500, 2450, 0);
			this.level9_rect_y = new Array(0, 100, 350, 500, 950, 1100, 1250, 1600, 1400, 1400, 1100, 1400, 1400, 1600, 1700, 100, 950, 950, 650, 550, 400, 100, 650, 950, 1900);
			this.level9_rect_w = new Array(4000, 100, 1050, 100, 550, 50, 100, 650, 550, 650, 350, 650, 550, 650, 50, 100, 500, 750, 300, 200, 2150, 100, 300, 750, 4000);
			this.level9_rect_h = new Array(100, 250, 150, 450, 150, 150, 650, 100, 200, 300, 450, 300, 200, 100, 200, 1600, 150, 150, 100, 100, 150, 550, 100, 150, 300);
			this.level9_item_type = new Array(10, 11, 11, 11, 11);
			this.level9_item_x = new Array(40, 76, 78, 1, 49);
			this.level9_item_y = new Array(37, 6, 24, 37, 7);
			this.level9_tileSet = 6;
			this.level9_gameType = 1;
			this.level10 = new Array(40, 42, 44, 46, 48, 50, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 42, 40, 44, 46, 48, 42, 40, 44, 46, 40, 48, 42, 44, 46, 48, 40, 42, 44, 50, 46, 40, 42, 44, 46, 48, 40, 42, 46, 48, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 53, 40, 48, 46, 44, 41, 43, 45, 47, 49, 51, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 43, 41, 45, 47, 49, 43, 41, 45, 47, 41, 49, 43, 45, 47, 49, 41, 43, 45, 51, 47, 41, 43, 45, 47, 49, 41, 43, 47, 49, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 52, 41, 49, 47, 45, 10, 13, 17, 6, 7, 9, 10, 3, 17, 7, 18, 17, 2, 16, 2, 18, 13, 4, 2, 11, 14, 3, 4, 5, 6, 1, 15, 13, 10, 4, 13, 18, 7, 7, 9, 6, 15, 4, 9, 13, 10, 6, 5, 11, 6, 10, 4, 18, 12, 15, 4, 7, 12, 11, 2, 13, 12, 4, 6, 1, 15, 13, 8, 14, 15, 3, 13, 11, 10, 15, 1, 3, 12, 8, 5, 15, 8, 14, 40, 42, 15, 70, 72, 71, 78, 73, 74, 81, 72, 77, 72, 75, 72, 73, 76, 73, 72, 71, 72, 78, 74, 73, 72, 71, 77, 73, 74, 75, 72, 76, 72, 71, 72, 73, 76, 73, 72, 71, 72, 77, 81, 71, 74, 75, 76, 73, 74, 73, 78, 73, 72, 71, 72, 77, 74, 71, 72, 73, 76, 73, 72, 71, 74, 78, 72, 75, 72, 71, 77, 73, 81, 71, 72, 78, 74, 71, 79, 8, 41, 43, 15, 19, 19, 21, 21, 21, 19, 38, 60, 19, 19, 21, 21, 21, 19, 19, 20, 19, 19, 19, 19, 20, 19, 19, 21, 20, 19, 21, 20, 19, 19, 20, 21, 19, 21, 19, 20, 19, 19, 19, 38, 19, 21, 19, 21, 20, 21, 20, 19, 19, 20, 20, 20, 21, 20, 19, 19, 21, 19, 19, 20, 20, 19, 19, 20, 20, 19, 19, 19, 19, 37, 19, 20, 20, 21, 19, 21, 11, 44, 48, 3, 19, 19, 21, 21, 21, 19, 37, 20, 20, 19, 21, 19, 20, 61, 19, 19, 20, 21, 20, 19, 20, 20, 21, 21, 20, 19, 19, 20, 20, 20, 21, 20, 19, 21, 19, 19, 19, 21, 20, 37, 20, 19, 21, 60, 19, 19, 19, 20, 21, 20, 20, 21, 20, 21, 19, 19, 19, 20, 20, 19, 21, 63, 24, 20, 21, 19, 21, 20, 21, 37, 21, 21, 21, 19, 19, 21, 11, 45, 49, 3, 14, 0, 21, 21, 21, 20, 37, 21, 20, 21, 20, 63, 24, 21, 20, 20, 20, 20, 19, 20, 20, 19, 19, 21, 20, 20, 19, 60, 21, 21, 20, 19, 20, 21, 19, 21, 21, 21, 21, 37, 20, 19, 19, 21, 63, 62, 20, 19, 20, 20, 21, 21, 21, 20, 20, 20, 19, 19, 21, 20, 61, 61, 25, 60, 21, 21, 21, 19, 21, 37, 20, 60, 19, 21, 20, 20, 17, 46, 48, 40, 42, 7, 30, 31, 36, 20, 38, 21, 19, 19, 21, 22, 25, 23, 20, 20, 19, 21, 20, 20, 20, 19, 21, 20, 21, 22, 23, 21, 21, 21, 19, 21, 19, 20, 19, 19, 19, 19, 21, 38, 21, 60, 21, 20, 61, 25, 20, 20, 21, 20, 19, 20, 20, 21, 21, 19, 20, 20, 20, 19, 21, 21, 21, 60, 19, 19, 21, 19, 19, 37, 20, 20, 20, 19, 35, 32, 1, 47, 49, 41, 43, 13, 21, 21, 66, 19, 39, 20, 20, 21, 19, 21, 61, 21, 20, 20, 19, 60, 21, 21, 21, 21, 21, 21, 19, 61, 19, 21, 19, 21, 19, 20, 19, 20, 19, 19, 20, 21, 21, 37, 21, 19, 21, 20, 61, 20, 20, 19, 20, 19, 35, 30, 31, 30, 30, 36, 19, 21, 20, 20, 20, 21, 19, 19, 19, 21, 19, 21, 20, 39, 19, 21, 21, 20, 66, 21, 18, 44, 46, 44, 46, 9, 21, 19, 66, 20, 21, 21, 20, 19, 21, 20, 19, 19, 20, 19, 19, 19, 19, 19, 21, 19, 19, 20, 19, 21, 19, 21, 21, 20, 19, 19, 21, 19, 21, 21, 21, 20, 21, 37, 21, 19, 20, 19, 19, 19, 35, 30, 30, 32, 34, 20, 21, 20, 20, 66, 20, 21, 20, 20, 21, 60, 20, 19, 20, 19, 19, 19, 19, 20, 20, 19, 19, 21, 67, 21, 14, 45, 47, 45, 47, 10, 1, 17, 11, 17, 8, 8, 8, 8, 7, 12, 16, 16, 0, 11, 13, 8, 10, 16, 18, 6, 5, 8, 6, 1, 12, 17, 1, 18, 2, 2, 15, 13, 19, 20, 21, 19, 19, 38, 21, 21, 21, 9, 5, 13, 3, 4, 15, 8, 0, 5, 0, 3, 2, 2, 13, 9, 15, 16, 6, 4, 1, 9, 5, 13, 12, 12, 8, 9, 2, 7, 18, 3, 7, 14, 5, 40, 42, 48, 40, 18, 14, 18, 18, 10, 10, 0, 0, 17, 13, 16, 8, 14, 7, 11, 3, 14, 14, 10, 15, 13, 7, 13, 11, 0, 7, 8, 7, 0, 9, 5, 42, 16, 19, 21, 21, 20, 21, 37, 21, 19, 19, 11, 40, 6, 14, 9, 6, 12, 14, 12, 8, 11, 18, 3, 15, 18, 5, 15, 15, 4, 2, 14, 0, 12, 1, 7, 15, 9, 15, 18, 1, 16, 15, 15, 8, 41, 43, 49, 41, 14, 2, 8, 18, 16, 13, 9, 14, 11, 8, 5, 10, 7, 2, 7, 3, 3, 5, 7, 4, 1, 9, 2, 18, 18, 4, 18, 1, 16, 7, 16, 43, 14, 3, 10, 19, 20, 21, 37, 19, 17, 11, 14, 41, 10, 6, 8, 2, 13, 14, 13, 8, 14, 7, 18, 10, 7, 5, 0, 2, 6, 6, 0, 6, 14, 7, 11, 9, 13, 14, 3, 14, 10, 3, 9, 8, 0, 9, 42, 44, 9, 70, 76, 80, 74, 71, 72, 76, 72, 73, 81, 73, 76, 73, 74, 75, 72, 76, 74, 71, 72, 73, 76, 73, 72, 71, 72, 76, 79, 21, 14, 0, 18, 7, 17, 21, 19, 54, 58, 19, 18, 7, 0, 7, 2, 70, 76, 73, 74, 71, 72, 76, 72, 75, 80, 73, 76, 72, 71, 72, 73, 76, 80, 74, 81, 72, 76, 72, 71, 74, 75, 76, 73, 80, 73, 79, 19, 3, 43, 45, 1, 19, 21, 66, 19, 63, 62, 19, 21, 19, 37, 20, 19, 20, 20, 21, 20, 20, 21, 21, 20, 20, 21, 20, 19, 19, 19, 20, 19, 19, 19, 19, 21, 21, 19, 19, 20, 21, 19, 21, 19, 19, 21, 20, 20, 21, 19, 21, 19, 19, 20, 19, 20, 19, 33, 31, 30, 30, 36, 20, 19, 21, 69, 21, 37, 20, 19, 20, 19, 21, 20, 19, 20, 33, 30, 31, 30, 15, 46, 53, 5, 20, 19, 67, 20, 21, 60, 19, 21, 19, 38, 21, 20, 21, 20, 20, 20, 21, 20, 21, 21, 21, 20, 21, 20, 19, 19, 21, 20, 20, 21, 20, 19, 21, 21, 21, 20, 21, 21, 20, 19, 21, 19, 60, 21, 21, 19, 21, 21, 20, 20, 21, 19, 19, 21, 20, 20, 19, 68, 19, 19, 19, 66, 20, 37, 19, 19, 20, 19, 60, 21, 19, 19, 21, 20, 19, 19, 10, 47, 52, 5, 21, 21, 66, 21, 20, 21, 21, 19, 19, 37, 20, 21, 20, 21, 20, 21, 21, 21, 20, 19, 19, 19, 20, 21, 20, 20, 20, 19, 20, 21, 21, 19, 20, 20, 19, 21, 20, 20, 19, 20, 21, 19, 21, 22, 23, 20, 21, 20, 19, 20, 21, 60, 21, 20, 19, 21, 21, 33, 32, 30, 30, 34, 20, 37, 21, 19, 21, 19, 21, 19, 19, 20, 19, 21, 19, 19, 6, 40, 42, 8, 20, 19, 68, 21, 20, 20, 19, 19, 54, 58, 20, 20, 21, 21, 20, 20, 19, 60, 21, 20, 19, 20, 20, 20, 20, 21, 19, 21, 20, 20, 20, 21, 19, 21, 21, 21, 19, 19, 20, 21, 19, 20, 61, 20, 60, 20, 20, 19, 19, 19, 19, 20, 19, 19, 21, 21, 19, 19, 20, 20, 21, 19, 21, 59, 55, 19, 19, 21, 19, 21, 21, 20, 21, 20, 9, 1, 17, 41, 43, 15, 35, 32, 34, 19, 19, 19, 21, 20, 20, 21, 19, 21, 20, 20, 20, 20, 22, 24, 19, 19, 21, 19, 19, 21, 19, 0, 4, 8, 16, 9, 5, 14, 17, 16, 14, 11, 18, 13, 4, 5, 1, 11, 13, 13, 7, 14, 0, 18, 19, 21, 20, 21, 20, 19, 19, 19, 20, 20, 20, 20, 19, 19, 20, 21, 20, 21, 20, 20, 21, 21, 21, 21, 21, 20, 16, 46, 48, 44, 46, 6, 66, 19, 19, 19, 19, 21, 21, 20, 19, 19, 21, 20, 21, 19, 61, 22, 25, 25, 60, 21, 19, 19, 20, 20, 20, 18, 46, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 46, 44, 48, 53, 42, 18, 21, 21, 19, 19, 20, 21, 19, 19, 21, 21, 19, 21, 19, 20, 20, 20, 20, 21, 21, 20, 19, 19, 19, 19, 20, 63, 1, 47, 49, 45, 47, 0, 66, 19, 20, 21, 21, 19, 21, 21, 20, 20, 21, 19, 21, 19, 20, 20, 19, 21, 19, 21, 19, 18, 3, 9, 9, 6, 47, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 47, 45, 49, 52, 43, 10, 3, 5, 7, 10, 19, 19, 19, 21, 21, 20, 21, 20, 21, 20, 21, 20, 19, 60, 19, 19, 19, 21, 21, 20, 22, 25, 10, 42, 44, 48, 40, 6, 68, 19, 20, 20, 21, 19, 20, 19, 19, 21, 20, 20, 20, 19, 21, 20, 19, 21, 20, 21, 19, 16, 53, 48, 4, 10, 12, 12, 11, 15, 8, 13, 12, 10, 4, 18, 9, 16, 1, 2, 14, 11, 9, 10, 8, 16, 14, 1, 6, 44, 46, 11, 20, 21, 21, 19, 19, 21, 19, 20, 20, 19, 21, 20, 21, 21, 20, 20, 19, 20, 19, 19, 20, 19, 17, 43, 45, 49, 41, 10, 66, 20, 19, 21, 21, 13, 6, 8, 4, 9, 2, 1, 20, 20, 20, 20, 19, 15, 7, 6, 6, 16, 52, 49, 1, 19, 19, 20, 21, 68, 20, 21, 21, 19, 20, 21, 21, 38, 20, 20, 20, 19, 38, 19, 20, 21, 21, 20, 11, 45, 47, 11, 2, 16, 17, 11, 21, 19, 20, 21, 20, 11, 13, 18, 3, 9, 5, 11, 6, 20, 19, 19, 60, 21, 10, 48, 40, 42, 44, 9, 34, 21, 19, 20, 21, 16, 48, 40, 42, 44, 46, 14, 21, 20, 60, 20, 21, 14, 42, 44, 14, 15, 2, 6, 13, 20, 19, 19, 19, 66, 19, 20, 21, 21, 19, 19, 19, 37, 21, 20, 20, 20, 37, 19, 19, 20, 20, 19, 1, 18, 4, 6, 5, 48, 40, 6, 21, 21, 20, 21, 21, 0, 42, 44, 46, 50, 40, 42, 2, 19, 20, 19, 21, 21, 1, 49, 41, 43, 45, 9, 20, 19, 19, 21, 19, 8, 49, 41, 43, 45, 47, 15, 20, 21, 19, 21, 20, 9, 43, 45, 6, 37, 19, 21, 20, 21, 21, 35, 30, 34, 19, 19, 20, 19, 21, 20, 54, 58, 20, 19, 20, 19, 37, 20, 22, 23, 20, 21, 21, 20, 19, 37, 9, 49, 41, 17, 19, 20, 21, 19, 19, 8, 43, 45, 47, 51, 41, 43, 17, 19, 21, 21, 20, 19, 0, 44, 46, 46, 48, 4, 19, 19, 21, 20, 19, 11, 12, 2, 11, 16, 16, 13, 20, 20, 19, 20, 20, 0, 2, 10, 15, 37, 19, 20, 20, 19, 20, 66, 20, 21, 21, 19, 21, 60, 21, 20, 21, 20, 20, 19, 20, 19, 37, 19, 19, 60, 19, 21, 20, 21, 21, 37, 9, 17, 12, 3, 21, 19, 21, 20, 21, 17, 7, 10, 5, 17, 6, 0, 12, 19, 19, 21, 20, 19, 15, 45, 47, 47, 49, 7, 21, 21, 19, 20, 20, 19, 19, 21, 21, 21, 37, 21, 19, 20, 19, 21, 21, 19, 20, 19, 20, 38, 20, 21, 21, 20, 20, 69, 21, 19, 20, 19, 19, 20, 19, 19, 21, 19, 21, 19, 19, 20, 38, 60, 20, 21, 21, 20, 20, 19, 21, 38, 19, 21, 21, 19, 21, 19, 19, 21, 20, 19, 19, 20, 20, 37, 19, 21, 21, 19, 21, 19, 21, 21, 3, 40, 42, 40, 42, 12, 20, 20, 20, 19, 19, 19, 19, 21, 20, 19, 37, 21, 21, 21, 21, 19, 20, 20, 19, 19, 19, 37, 21, 20, 21, 20, 20, 66, 20, 21, 21, 19, 21, 20, 19, 20, 19, 19, 19, 20, 19, 21, 37, 21, 21, 20, 19, 19, 21, 19, 20, 37, 21, 20, 20, 21, 21, 60, 19, 20, 20, 21, 20, 19, 19, 37, 19, 21, 20, 19, 19, 19, 20, 19, 14, 41, 43, 41, 43, 13, 16, 19, 19, 20, 19, 19, 19, 21, 21, 54, 58, 20, 20, 20, 21, 19, 20, 20, 19, 19, 21, 59, 55, 19, 20, 20, 19, 66, 21, 21, 19, 19, 7, 5, 16, 3, 1, 10, 18, 15, 13, 21, 37, 20, 21, 20, 19, 20, 20, 19, 54, 58, 19, 19, 19, 20, 20, 19, 20, 21, 19, 21, 19, 20, 54, 58, 21, 21, 19, 19, 21, 19, 19, 4, 17, 1, 16, 3, 0, 0, 14, 21, 20, 20, 19, 19, 19, 19, 20, 20, 19, 20, 21, 60, 20, 19, 21, 20, 21, 21, 20, 19, 21, 19, 19, 20, 19, 33, 32, 30, 30, 36, 16, 3, 7, 2, 18, 10, 14, 0, 7, 20, 38, 20, 21, 19, 19, 60, 21, 19, 20, 20, 21, 20, 19, 21, 19, 20, 19, 19, 21, 19, 20, 19, 19, 20, 20, 21, 19, 21, 19, 20, 21, 14, 2, 17, 8, 3, 19, 19, 20, 19, 21, 20, 21, 19, 20, 20, 21, 19, 19, 21, 21, 21, 60, 19, 19, 20, 21, 20, 20, 21, 20, 60, 21, 21, 21, 20, 20, 20, 19, 66, 21, 19, 19, 19, 19, 19, 19, 19, 21, 19, 37, 19, 19, 21, 20, 20, 19, 20, 19, 19, 21, 21, 19, 21, 20, 22, 23, 60, 21, 20, 19, 21, 19, 19, 19, 20, 20, 19, 21, 21, 21, 19, 38, 19, 0, 18, 19, 19, 19, 21, 20, 19, 20, 20, 21, 19, 19, 20, 21, 19, 19, 20, 20, 19, 21, 20, 19, 21, 19, 20, 20, 19, 19, 21, 20, 19, 20, 21, 19, 67, 19, 19, 19, 19, 19, 19, 19, 21, 19, 19, 39, 20, 21, 21, 20, 20, 19, 21, 19, 20, 20, 21, 20, 19, 21, 19, 60, 21, 19, 19, 19, 20, 21, 19, 19, 20, 20, 20, 20, 19, 19, 20, 37, 19, 14, 12, 30, 36, 21, 21, 21, 20, 20, 21, 21, 21, 21, 19, 20, 19, 20, 19, 19, 20, 19, 20, 21, 21, 21, 0, 17, 17, 14, 19, 20, 26, 27, 19, 19, 66, 20, 21, 19, 19, 19, 19, 19, 19, 21, 19, 19, 21, 20, 21, 19, 21, 3, 3, 3, 15, 20, 20, 20, 20, 21, 19, 19, 19, 21, 20, 19, 20, 19, 19, 20, 19, 21, 60, 20, 19, 21, 20, 39, 19, 11, 12, 19, 68, 20, 20, 20, 60, 20, 21, 20, 20, 21, 19, 20, 19, 20, 19, 21, 19, 21, 19, 19, 21, 21, 2, 53, 46, 17, 21, 21, 28, 29, 20, 21, 68, 21, 19, 19, 19, 19, 19, 19, 20, 20, 21, 21, 21, 19, 35, 31, 30, 9, 44, 46, 11, 36, 19, 21, 19, 19, 20, 21, 21, 20, 19, 21, 21, 21, 21, 20, 20, 21, 20, 20, 21, 20, 21, 19, 19, 8, 2, 9, 14, 10, 19, 19, 19, 19, 4, 9, 16, 2, 7, 12, 3, 10, 10, 15, 14, 5, 8, 7, 4, 16, 8, 52, 47, 17, 14, 13, 9, 1, 0, 11, 18, 9, 11, 15, 4, 15, 1, 17, 0, 7, 10, 16, 2, 15, 16, 13, 17, 3, 45, 47, 9, 3, 15, 2, 0, 8, 16, 4, 0, 17, 18, 16, 13, 3, 10, 14, 18, 17, 19, 19, 19, 19, 12, 2, 2, 9, 44, 46, 2, 17, 19, 19, 19, 19, 17, 40, 48, 46, 44, 42, 40, 48, 46, 44, 42, 40, 48, 46, 44, 40, 48, 40, 42, 48, 46, 44, 42, 40, 48, 46, 44, 40, 42, 48, 46, 42, 44, 40, 46, 48, 44, 42, 40, 48, 44, 50, 40, 48, 42, 40, 48, 46, 44, 42, 40, 48, 46, 42, 44, 40, 48, 46, 44, 40, 48, 46, 44, 12, 19, 19, 19, 19, 0, 3, 46, 48, 45, 47, 10, 19, 19, 19, 19, 19, 13, 41, 49, 47, 45, 43, 41, 49, 47, 45, 43, 41, 49, 47, 45, 41, 49, 41, 43, 49, 47, 45, 43, 41, 49, 47, 45, 41, 43, 49, 47, 43, 45, 41, 47, 49, 45, 43, 41, 49, 45, 51, 41, 49, 43, 41, 49, 47, 45, 43, 41, 49, 47, 43, 45, 41, 49, 47, 45, 41, 49, 47, 45, 18, 19, 19, 19, 19, 19, 14, 47, 49, 48, 40, 13, 19, 19, 19, 19, 19, 16, 42, 50, 46, 48, 0, 8, 17, 2, 13, 7, 7, 17, 10, 10, 11, 12, 3, 13, 4, 12, 15, 15, 15, 3, 3, 16, 14, 0, 1, 12, 1, 14, 17, 10, 11, 18, 4, 13, 1, 14, 14, 7, 15, 3, 7, 7, 10, 7, 17, 18, 12, 1, 9, 4, 13, 44, 42, 46, 48, 40, 42, 44, 5, 19, 19, 19, 19, 19, 1, 42, 44, 49, 41, 18, 19, 19, 20, 19, 21, 15, 43, 51, 47, 49, 8, 70, 75, 76, 73, 74, 71, 72, 73, 77, 73, 72, 71, 81, 73, 78, 73, 72, 71, 74, 73, 76, 73, 72, 71, 72, 73, 77, 73, 72, 71, 74, 73, 78, 81, 72, 71, 72, 73, 76, 73, 72, 71, 72, 73, 77, 75, 74, 73, 79, 5, 45, 43, 47, 49, 41, 43, 45, 7, 19, 19, 20, 19, 21, 10, 43, 45, 42, 44, 0, 60, 21, 21, 21, 5, 3, 40, 42, 44, 46, 14, 20, 21, 19, 20, 60, 21, 19, 20, 21, 20, 20, 21, 37, 20, 20, 21, 21, 21, 21, 21, 21, 21, 20, 19, 21, 21, 21, 19, 21, 21, 20, 19, 21, 37, 20, 19, 21, 20, 21, 19, 19, 19, 21, 19, 19, 21, 19, 19, 21, 13, 48, 46, 44, 42, 40, 53, 46, 2, 18, 19, 19, 19, 19, 3, 40, 48, 43, 45, 6, 21, 19, 19, 19, 4, 17, 41, 43, 45, 47, 7, 20, 19, 19, 20, 19, 20, 19, 20, 19, 21, 19, 20, 38, 21, 20, 20, 20, 19, 21, 21, 20, 61, 20, 24, 20, 21, 19, 21, 21, 19, 21, 20, 20, 38, 20, 19, 21, 19, 21, 19, 20, 20, 19, 21, 19, 21, 21, 35, 32, 2, 49, 47, 45, 43, 41, 52, 47, 6, 4, 19, 19, 21, 20, 11, 41, 49, 48, 46, 0, 19, 19, 19, 21, 20, 7, 44, 42, 40, 48, 13, 19, 19, 19, 19, 20, 21, 20, 20, 19, 21, 20, 20, 37, 20, 19, 19, 20, 19, 19, 20, 21, 20, 61, 25, 60, 20, 19, 20, 20, 21, 19, 20, 21, 37, 19, 20, 20, 19, 19, 19, 19, 20, 21, 20, 19, 20, 20, 66, 19, 2, 40, 42, 44, 46, 48, 40, 42, 3, 20, 20, 19, 60, 19, 1, 44, 46, 49, 47, 6, 21, 21, 19, 21, 19, 10, 45, 43, 41, 49, 4, 1, 15, 14, 16, 13, 21, 20, 20, 21, 21, 19, 21, 37, 19, 20, 19, 20, 19, 19, 19, 19, 19, 19, 21, 20, 61, 19, 20, 19, 21, 21, 20, 19, 37, 21, 20, 19, 19, 20, 20, 20, 19, 20, 35, 31, 30, 30, 34, 20, 18, 41, 43, 45, 47, 49, 41, 43, 17, 19, 61, 20, 21, 21, 1, 45, 47, 40, 42, 5, 21, 19, 20, 20, 60, 13, 46, 10, 7, 17, 4, 18, 11, 6, 3, 10, 21, 19, 60, 19, 19, 20, 54, 58, 20, 21, 20, 20, 20, 20, 20, 20, 19, 60, 20, 19, 19, 21, 19, 19, 21, 20, 19, 54, 58, 21, 19, 20, 19, 14, 0, 15, 10, 1, 16, 13, 13, 0, 16, 13, 15, 15, 5, 3, 1, 4, 5, 44, 7, 24, 23, 21, 21, 20, 3, 42, 40, 41, 43, 5, 2, 20, 21, 20, 22, 0, 47, 14, 70, 76, 75, 74, 81, 77, 79, 20, 21, 20, 21, 19, 19, 20, 19, 19, 21, 21, 20, 21, 19, 19, 20, 11, 10, 14, 18, 13, 8, 10, 21, 20, 19, 19, 20, 20, 20, 20, 20, 20, 19, 2, 2, 8, 2, 5, 0, 2, 15, 14, 7, 11, 6, 3, 7, 10, 14, 7, 17, 45, 18, 25, 61, 19, 19, 5, 1, 43, 41, 48, 46, 5, 1, 19, 20, 21, 61, 13, 48, 5, 19, 21, 21, 20, 37, 19, 21, 20, 19, 19, 21, 21, 21, 21, 20, 20, 21, 19, 60, 19, 21, 21, 19, 2, 7, 1, 10, 10, 12, 9, 19, 20, 20, 21, 19, 19, 20, 19, 21, 19, 19, 20, 70, 76, 71, 74, 80, 76, 73, 72, 71, 76, 73, 72, 75, 76, 71, 79, 9, 46, 4, 60, 21, 20, 20, 6, 17, 46, 50, 49, 47, 4, 20, 21, 20, 20, 19, 15, 49, 1, 19, 19, 19, 21, 37, 20, 20, 20, 19, 19, 21, 20, 19, 21, 20, 21, 19, 21, 21, 21, 19, 20, 21, 21, 21, 21, 21, 20, 20, 20, 20, 21, 21, 21, 20, 19, 21, 19, 20, 20, 19, 19, 21, 21, 20, 19, 67, 21, 21, 19, 21, 20, 21, 21, 20, 19, 21, 21, 13, 47, 12, 19, 19, 21, 60, 19, 18, 47, 51, 40, 42, 12, 19, 21, 20, 19, 19, 5, 40, 0, 21, 20, 21, 20, 37, 20, 19, 20, 19, 20, 20, 21, 19, 19, 19, 19, 19, 19, 21, 19, 19, 21, 19, 21, 21, 20, 21, 20, 21, 21, 20, 21, 21, 21, 20, 21, 20, 19, 19, 21, 21, 20, 20, 21, 20, 19, 66, 19, 19, 20, 20, 20, 19, 20, 21, 60, 20, 21, 14, 48, 15, 19, 21, 20, 20, 22, 0, 44, 42, 41, 43, 11, 19, 19, 20, 21, 21, 10, 41, 15, 21, 61, 21, 21, 37, 19, 21, 21, 21, 3, 9, 14, 7, 4, 7, 1, 0, 15, 14, 3, 10, 21, 19, 20, 20, 21, 19, 19, 20, 20, 21, 61, 20, 19, 19, 8, 3, 3, 12, 10, 0, 15, 16, 8, 3, 2, 6, 0, 4, 20, 21, 21, 19, 21, 21, 21, 20, 22, 15, 49, 12, 19, 21, 21, 19, 21, 18, 45, 43, 44, 46, 15, 19, 20, 60, 20, 0, 15, 12, 12, 20, 19, 22, 23, 37, 21, 19, 19, 21, 6, 18, 5, 8, 9, 16, 16, 7, 4, 9, 10, 17, 20, 21, 20, 21, 20, 19, 19, 20, 19, 21, 21, 19, 21, 19, 18, 16, 8, 14, 8, 14, 8, 6, 3, 3, 12, 5, 7, 12, 20, 19, 20, 19, 21, 19, 63, 62, 61, 3, 7, 12, 2, 19, 19, 35, 32, 7, 48, 40, 45, 47, 6, 24, 23, 20, 20, 11, 10, 12, 11, 21, 19, 61, 20, 37, 21, 19, 20, 20, 20, 20, 21, 20, 21, 20, 20, 20, 20, 21, 21, 20, 19, 20, 20, 21, 19, 21, 19, 19, 20, 20, 19, 19, 21, 20, 21, 20, 21, 20, 20, 20, 21, 21, 19, 20, 21, 66, 21, 21, 19, 19, 20, 19, 21, 20, 21, 60, 21, 9, 15, 2, 13, 19, 21, 66, 21, 12, 49, 41, 40, 48, 9, 25, 60, 21, 21, 20, 19, 20, 21, 21, 20, 20, 21, 37, 21, 60, 19, 19, 20, 20, 20, 20, 19, 21, 21, 19, 20, 21, 20, 19, 19, 21, 19, 20, 19, 21, 19, 60, 19, 20, 20, 20, 63, 24, 19, 21, 20, 21, 20, 19, 19, 20, 20, 19, 20, 33, 30, 32, 31, 30, 36, 21, 19, 26, 27, 20, 21, 21, 21, 20, 20, 20, 21, 66, 19, 14, 44, 46, 41, 49, 1, 60, 19, 19, 20, 20, 19, 19, 20, 20, 21, 21, 19, 39, 21, 21, 19, 21, 20, 20, 21, 21, 20, 20, 20, 20, 20, 19, 20, 21, 20, 19, 20, 19, 21, 21, 20, 19, 21, 21, 63, 62, 22, 25, 21, 21, 19, 21, 20, 20, 19, 21, 20, 21, 19, 21, 21, 20, 20, 20, 68, 21, 21, 28, 29, 20, 21, 21, 20, 20, 19, 20, 20, 68, 19, 6, 45, 47, 42, 44, 13, 20, 60, 20, 19, 20, 20, 19, 20, 19, 19, 20, 20, 20, 21, 21, 20, 19, 20, 21, 21, 19, 20, 21, 19, 21, 19, 19, 19, 21, 19, 19, 21, 19, 20, 20, 20, 19, 20, 19, 19, 20, 60, 21, 21, 20, 19, 21, 21, 21, 19, 20, 20, 21, 21, 21, 20, 20, 20, 21, 66, 21, 19, 20, 20, 21, 21, 20, 19, 20, 19, 35, 30, 34, 21, 16, 40, 42, 43, 45, 1, 2, 14, 12, 3, 0, 5, 11, 14, 2, 16, 4, 10, 0, 10, 9, 6, 7, 4, 14, 10, 9, 3, 5, 13, 3, 12, 2, 18, 13, 11, 12, 10, 0, 8, 3, 6, 7, 10, 16, 5, 12, 17, 12, 9, 2, 11, 8, 11, 11, 8, 3, 10, 14, 10, 12, 12, 2, 5, 8, 9, 17, 9, 0, 13, 14, 9, 5, 17, 16, 9, 12, 10, 4, 9, 7, 41, 43, 50, 48, 40, 42, 44, 46, 40, 48, 42, 44, 46, 48, 40, 42, 46, 48, 40, 42, 44, 46, 48, 42, 40, 44, 46, 48, 40, 42, 44, 46, 48, 42, 50, 44, 46, 40, 42, 46, 48, 40, 44, 42, 46, 48, 42, 40, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 42, 44, 46, 48, 40, 51, 49, 41, 43, 45, 47, 41, 49, 43, 45, 47, 49, 41, 43, 47, 49, 41, 43, 45, 47, 49, 43, 41, 45, 47, 49, 41, 43, 45, 47, 49, 43, 51, 45, 47, 41, 43, 47, 49, 41, 45, 43, 47, 49, 43, 41, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 43, 45, 47, 49, 41, 13, 2, 1, 9, 4, 0, 7, 7, 1, 9, 14, 15, 3, 5, 7, 13, 14, 13, 11, 8, 3, 18, 0, 5, 1, 14, 16, 13, 10, 3, 16, 12, 5, 8, 14, 1, 17, 1, 11, 11, 14, 10, 13, 17, 12, 0, 2, 9, 17, 5, 2, 13, 0, 14, 17, 6, 18, 16, 2, 6, 10, 3, 2, 15, 0, 11, 12, 9, 18, 18, 7, 2, 9, 4, 12, 12, 2, 1, 6, 12, 2, 0, 9, 11, 4, 4, 2, 4, 18, 12, 7, 2, 5, 6, 11, 11, 14, 18, 4, 6, 15, 3, 3, 14, 12, 4, 8, 13, 10, 1, 12, 12, 8, 3, 3, 0, 16, 3, 16, 10, 4, 14, 16, 9, 11, 11, 3, 17, 6, 18, 8, 11, 7, 11, 5, 8, 8, 12, 6, 8, 13, 15, 11, 11, 17, 17, 14, 11, 3, 14, 1, 0, 5, 13, 18, 7, 11, 5, 18, 18, 16, 11, 7, 16, 15, 3, 18, 9, 0, 6, 5, 8, 3, 2, 17, 13, 4, 9, 5, 15, 3, 1, 5, 18, 6, 5, 15, 9, 12, 7, 9, 3, 10, 15, 0, 10, 3, 1, 8, 16, 0, 8, 8, 7, 18, 18, 2, 13, 6, 2, 6, 17, 5, 7, 2, 5, 0, 4, 14, 15, 2, 3, 10, 10, 16, 15, 11, 3, 4, 2, 1, 5, 18, 18, 11, 11, 16, 12, 16, 15, 12, 7, 9, 12, 3, 18, 13, 18, 14, 4, 9, 13, 5, 14, 18, 3, 12, 10, 9, 17, 16, 5, 8, 9, 17, 1, 16, 6, 6, 16, 0, 18, 15, 3, 10, 1, 8, 14, 11, 15, 15, 11, 17, 2, 6, 11, 1, 4, 5, 3, 8, 7, 13, 2, 11, 18, 3, 8, 10, 18, 0, 6, 3, 3, 17, 17, 0, 11, 1, 13, 12, 17, 3, 15, 18, 17, 14, 5, 10, 13, 19, 19, 19, 19, 20, 19, 19, 20, 19, 19, 21, 20, 19, 20, 19, 20, 20, 21, 21, 19, 20, 20, 21, 19, 20, 20, 20, 19, 21, 19, 21, 19, 20, 19, 20, 19, 19, 20, 20, 19, 20, 21, 21, 19, 20, 20, 21, 20, 20, 21, 20, 21, 21, 19, 21, 20, 21, 19, 21, 20, 19, 21, 20, 21, 20, 19, 19, 19, 19, 20, 21, 20, 19, 21, 19, 21, 20, 19, 19, 19, 19, 19, 19, 21, 20, 21, 19, 20, 19, 20, 21, 21, 20, 19, 20, 19, 20, 21, 20, 19, 21, 20, 21, 19, 19, 19, 20, 20, 20, 21, 21, 21, 19, 21, 21, 21, 21, 20, 20, 21, 21, 21, 21, 19, 19, 19, 19, 19, 21, 21, 21, 19, 21, 20, 20, 21, 19, 21, 19, 19, 21, 20, 19, 19, 19, 21, 19, 19, 20, 21, 21, 20, 21, 20, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 21, 20, 21, 20, 19, 19, 20, 19, 20, 19, 21, 19, 21, 19, 20, 20, 20, 21, 21, 20, 19, 19, 21, 20, 21, 20, 20, 21, 19, 21, 21, 21, 21, 21, 21, 21, 20, 20, 20, 19, 20, 20, 21, 19, 19, 20, 21, 19, 20, 20, 21, 19, 19, 21, 19, 21, 21, 21, 19, 20, 21, 20, 21, 21, 21, 20, 19, 19, 21, 21, 21, 20, 20, 19, 19, 19, 19, 19, 19, 21, 21, 20, 19, 20, 19, 20, 21, 21, 19, 19, 19, 20, 20, 20, 21, 21, 19, 20, 21, 20, 20, 19, 21, 21, 21, 21, 19, 19, 21, 20, 19, 19, 21, 19, 19, 21, 20, 19, 20, 19, 20, 21, 19, 21, 19, 21, 20, 19, 20, 20, 21, 20, 19, 21, 20, 20, 21, 19, 21, 19, 21, 20, 21, 21, 19, 19, 21, 19, 19, 21, 20, 20, 19, 19, 19, 19, 19, 19, 19, 20, 19, 21, 19, 19, 20, 21, 19, 20, 19, 20, 19, 20, 20, 21, 21, 20, 19, 21, 19, 21, 20, 20, 19, 20, 19, 19, 20, 21, 21, 20, 21, 19, 21, 19, 20, 21, 19, 20, 19, 20, 20, 21, 19, 19, 20, 20, 19, 20, 21, 20, 20, 21, 21, 19, 21, 20, 21, 19, 20, 19, 20, 21, 19, 19, 21, 21, 21, 21, 19, 19, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 20, 21, 20, 21, 21, 21, 19, 21, 21, 21, 21, 20, 19, 21, 19, 20, 19, 19, 19, 20, 21, 20, 21, 20, 20, 19, 19, 20, 19, 20, 20, 21, 20, 19, 19, 21, 20, 21, 21, 20, 21, 19, 21, 20, 21, 20, 21, 19, 21, 19, 21, 21, 19, 20, 21, 21, 21, 19, 19, 21, 19, 21, 21, 20, 19, 20, 20, 21, 21, 19, 21, 21, 21, 19, 19, 19, 19, 19, 19, 19, 20, 20, 21, 21, 20, 21, 19, 20, 20, 19, 20, 19, 21, 19, 19, 19, 19, 21, 19, 19, 19, 19, 19, 20, 21, 19, 20, 20, 21, 19, 20, 20, 20, 21, 19, 19, 21, 19, 19, 19, 21, 20, 21, 19, 20, 20, 21, 20, 20, 21, 20, 20, 20, 19, 21, 21, 20, 19, 19, 19, 21, 20, 21, 19, 19, 20, 20, 19, 20, 21, 20, 19, 21, 19, 19, 19, 19, 19, 19, 19, 20, 21, 19, 21, 21, 21, 19, 21, 20, 21, 19, 19, 19, 21, 21, 21, 20, 20, 20, 19, 21, 19, 19, 20, 19, 21, 21, 19, 19, 20, 20, 19, 20, 20, 20, 19, 20, 21, 19, 20, 21, 20, 21, 21, 19, 20, 21, 19, 21, 21, 20, 20, 21, 20, 21, 19, 19, 21, 20, 19, 19, 21, 19, 21, 19, 20, 21, 21, 20, 20, 20, 19, 19, 19, 19, 19);
			this.level10_width = 80;
			this.level10_height = 70;
			this.level10_rect_x = new Array(0, 2200, 3850, 2100, 2200, 150, 1750, 1600, 0, 0, 0, 0, 150, 400, 400, 350, 350, 700, 700, 3150, 3600, 3800, 1400, 2550, 2750, 1200, 1000, 400, 1200, 1750, 2550, 3200, 3950, 3850, 3800, 3450, 3450, 2600, 2300, 1700, 1000, 0, 0, 0, 3850, 3800, 3950);
			this.level10_rect_y = new Array(0, 500, 150, 600, 650, 500, 600, 650, 150, 1700, 1800, 2700, 2200, 1700, 2200, 2450, 1950, 2100, 1700, 1700, 1950, 1700, 900, 1000, 1100, 1000, 1100, 1100, 1600, 1400, 1600, 1100, 650, 1800, 2200, 2250, 2450, 2150, 2400, 2200, 2400, 300, 1400, 1500, 850, 1400, 1500);
			this.level10_rect_w = new Array(4000, 1650, 150, 100, 150, 1600, 100, 150, 50, 200, 150, 4000, 50, 300, 150, 50, 50, 250, 2450, 450, 50, 200, 1150, 200, 200, 200, 200, 350, 200, 450, 200, 400, 50, 150, 50, 150, 200, 550, 700, 350, 600, 150, 200, 50, 150, 200, 50);
			this.level10_rect_h = new Array(150, 150, 500, 100, 50, 150, 100, 50, 150, 100, 900, 350, 100, 500, 350, 100, 100, 100, 200, 550, 100, 100, 200, 200, 200, 200, 200, 200, 100, 100, 100, 200, 200, 900, 100, 200, 100, 100, 100, 100, 100, 1100, 100, 200, 550, 100, 200);
			this.level10_item_type = new Array(10, 11, 11, 11, 11);
			this.level10_item_x = new Array(39, 1, 78, 61, 15);
			this.level10_item_y = new Array(17, 5, 16, 42, 41);
			this.level10_tileSet = 1;
			this.level10_gameType = 1;
			this.level11 = new Array
			this.level11_width = 80;
			this.level11_height = 50;
			this.level11_rect_x = new Array(0, 3950, 3850, 3700, 3750, 3700, 3850, 0, 0, 0, 500, 1000, 1750, 1850, 3250, 3250, 3250, 2750, 2250, 450, 500, 500, 0, 0, 0, 150, 1750, 1750, 1850, 2250, 2750, 2750, 2650, 1650, 1750);
			this.level11_rect_y = new Array(0, 100, 250, 1150, 1300, 1750, 1900, 2050, 1900, 1750, 1600, 1750, 1500, 1150, 1150, 1450, 1600, 1750, 1750, 1450, 1300, 1150, 1150, 1300, 100, 550, 700, 550, 100, 100, 550, 700, 850, 850, 1000);
			this.level11_rect_w = new Array(4000, 50, 150, 300, 250, 300, 150, 4000, 150, 300, 250, 500, 250, 1400, 250, 300, 250, 250, 250, 300, 250, 1350, 300, 250, 150, 1350, 150, 750, 150, 150, 1100, 150, 250, 250, 150);
			this.level11_rect_h = new Array(100, 150, 900, 150, 450, 150, 150, 350, 150, 150, 300, 150, 400, 350, 300, 150, 300, 150, 150, 150, 150, 150, 150, 450, 1050, 150, 150, 150, 300, 300, 150, 150, 150, 150, 150);
			this.level11_item_type = new Array(10, 11, 11, 11, 11);
			this.level11_item_x = new Array(42, 35, 78, 76, 3);
			this.level11_item_y = new Array(10, 29, 4, 40, 40);
			this.level11_tileSet = 4;
			this.level11_gameType = 1;
			this.level12 = new Array(54, 55, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 47, 48, 57, 58, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 47, 48, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 54, 54, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 60, 60, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 57, 58, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 0, 0, 0, 17, 18, 18, 18, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 32, 33, 33, 33, 33, 33, 33, 33, 33, 34, 0, 0, 0, 23, 24, 24, 24, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 51, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 34, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 54, 54, 54, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 57, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 56, 57, 57, 57, 57, 57, 58, 0, 0, 0, 0, 0, 0, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 20, 21, 21, 21, 21, 22, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 56, 57, 57, 57, 57, 57, 58, 0, 0, 0, 0, 0, 0, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 20, 21, 21, 21, 21, 22, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 17, 18, 19, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 59, 60, 60, 60, 60, 60, 61, 8, 9, 9, 9, 9, 10, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 20, 21, 21, 21, 21, 22, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 11, 12, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 10, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 13, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 44, 45, 46, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 16, 53, 55, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 47, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 61, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 50, 51, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 0, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 20, 21, 57, 58, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 0, 0, 0, 0, 0, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 20, 21, 57, 58, 8, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 54, 54, 55, 20, 21, 57, 58, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 57, 57, 58, 20, 21, 57, 58, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 60, 60, 60, 61, 20, 21, 57, 58, 11, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 14, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 17, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 20, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 18, 19, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 22, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 8, 9, 9, 9, 9, 10, 0, 0, 0, 0, 0, 0, 0, 26, 27, 27, 28, 11, 13, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 22, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 11, 12, 12, 12, 12, 13, 0, 0, 0, 0, 0, 0, 0, 29, 30, 30, 31, 11, 13, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 14, 15, 15, 15, 15, 16, 0, 0, 0, 0, 0, 0, 0, 29, 30, 30, 31, 11, 13, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 46, 29, 30, 30, 31, 11, 13, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 45, 46, 20, 21, 21, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 49, 32, 33, 33, 34, 11, 13, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 51, 51, 52, 23, 24, 24, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 52, 0, 0, 0, 0, 11, 13, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 48, 49, 26, 27, 27, 27, 27, 27, 27, 27, 28, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 11, 13, 48, 49, 29, 30, 30, 30, 30, 30, 30, 30, 31, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 11, 13, 48, 49, 29, 30, 30, 30, 30, 30, 30, 30, 31, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 11, 13, 48, 49, 29, 30, 30, 30, 30, 30, 30, 30, 31, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 11, 13, 51, 52, 32, 33, 33, 33, 33, 33, 33, 33, 34, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 14, 16);
			this.level12_width = 80;
			this.level12_height = 52;
			this.level12_rect_x = new Array();
			this.level12_rect_y = new Array();
			this.level12_rect_w = new Array();
			this.level12_rect_h = new Array();
			this.level12_item_type = new Array(10, 11, 11, 11);
			this.level12_item_x = new Array(34, 77, 3, 35);
			this.level12_item_y = new Array(25, 8, 6, 46);
			this.level12_tileSet = 5;
			this.level12_gameType = 1;
			this.level13 = new Array(111, 115, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 14, 113, 117, 112, 116, 27, 28, 29, 57, 58, 59, 60, 61, 94, 72, 73, 74, 75, 76, 99, 100, 101, 102, 48, 49, 50, 91, 92, 97, 93, 15, 16, 17, 18, 37, 57, 58, 59, 60, 61, 48, 49, 50, 27, 28, 29, 72, 73, 74, 75, 76, 112, 116, 112, 116, 30, 31, 32, 62, 63, 64, 65, 66, 87, 77, 78, 79, 80, 81, 103, 104, 105, 106, 51, 52, 53, 87, 89, 89, 87, 19, 20, 21, 22, 38, 62, 63, 64, 65, 66, 51, 52, 53, 30, 31, 32, 77, 78, 79, 80, 81, 112, 116, 112, 116, 33, 34, 35, 67, 68, 69, 70, 71, 88, 82, 83, 84, 85, 86, 107, 108, 109, 110, 54, 55, 56, 88, 90, 90, 88, 23, 24, 25, 26, 36, 67, 68, 69, 70, 71, 54, 55, 56, 33, 34, 35, 82, 83, 84, 85, 86, 112, 116, 111, 115, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 95, 95, 95, 9, 7, 8, 6, 7, 8, 6, 7, 8, 12, 112, 116, 113, 117, 121, 122, 130, 131, 132, 134, 124, 121, 122, 93, 135, 123, 39, 40, 41, 127, 128, 72, 73, 74, 75, 76, 48, 49, 50, 132, 39, 40, 41, 38, 123, 111, 115, 39, 40, 41, 121, 114, 118, 57, 58, 59, 60, 61, 134, 124, 111, 115, 114, 118, 94, 123, 124, 119, 120, 125, 126, 127, 128, 129, 135, 125, 42, 43, 44, 130, 131, 77, 78, 79, 80, 81, 51, 52, 53, 119, 42, 43, 44, 36, 125, 113, 117, 42, 43, 44, 129, 113, 117, 62, 63, 64, 65, 66, 125, 126, 114, 118, 113, 117, 119, 120, 72, 73, 74, 75, 76, 48, 49, 50, 135, 119, 45, 46, 47, 123, 124, 82, 83, 84, 85, 86, 54, 55, 56, 121, 45, 46, 47, 37, 94, 111, 115, 45, 46, 47, 132, 112, 116, 67, 68, 69, 70, 71, 127, 128, 112, 116, 112, 116, 121, 122, 77, 78, 79, 80, 81, 51, 52, 53, 135, 121, 72, 73, 74, 75, 76, 48, 49, 50, 124, 119, 120, 57, 58, 59, 60, 61, 120, 38, 124, 111, 115, 125, 48, 49, 50, 113, 117, 39, 40, 41, 119, 48, 49, 50, 111, 115, 111, 115, 128, 129, 82, 83, 84, 85, 86, 54, 55, 56, 135, 127, 77, 78, 79, 80, 81, 51, 52, 53, 126, 121, 122, 62, 63, 64, 65, 66, 122, 36, 126, 112, 116, 12, 51, 52, 53, 112, 116, 42, 43, 44, 121, 51, 52, 53, 112, 116, 111, 115, 57, 58, 59, 60, 61, 15, 16, 17, 18, 27, 28, 29, 82, 83, 84, 85, 86, 54, 55, 56, 127, 128, 129, 67, 68, 69, 70, 71, 124, 37, 119, 112, 116, 120, 54, 55, 56, 9, 12, 45, 46, 47, 129, 54, 55, 56, 114, 118, 112, 116, 62, 63, 64, 65, 66, 19, 20, 21, 22, 30, 31, 32, 87, 89, 57, 58, 59, 60, 61, 39, 40, 41, 132, 121, 48, 49, 50, 125, 126, 38, 121, 112, 116, 122, 130, 15, 16, 17, 18, 93, 130, 57, 58, 59, 60, 61, 114, 118, 114, 118, 67, 68, 69, 70, 71, 23, 24, 25, 26, 33, 34, 35, 88, 90, 62, 63, 64, 65, 66, 42, 43, 44, 123, 124, 51, 52, 53, 120, 127, 36, 129, 114, 118, 123, 124, 19, 20, 21, 22, 87, 123, 62, 63, 64, 65, 66, 114, 118, 113, 117, 122, 127, 128, 11, 6, 7, 8, 6, 7, 8, 6, 7, 8, 12, 67, 68, 69, 70, 71, 45, 46, 47, 125, 126, 54, 55, 56, 122, 130, 37, 132, 111, 115, 125, 126, 23, 24, 25, 26, 88, 125, 67, 68, 69, 70, 71, 112, 116, 111, 115, 129, 130, 131, 132, 113, 117, 113, 117, 114, 118, 111, 115, 48, 49, 50, 128, 129, 125, 126, 127, 128, 72, 73, 74, 75, 76, 39, 40, 41, 38, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 48, 49, 50, 126, 113, 117, 113, 117, 132, 123, 124, 119, 111, 115, 112, 116, 111, 115, 111, 115, 51, 52, 53, 131, 132, 119, 120, 130, 131, 77, 78, 79, 80, 81, 42, 43, 44, 36, 132, 125, 126, 127, 133, 129, 121, 122, 123, 124, 127, 128, 51, 52, 53, 119, 111, 115, 112, 116, 120, 125, 126, 121, 111, 115, 114, 118, 111, 115, 112, 116, 54, 55, 56, 11, 6, 7, 8, 12, 119, 82, 83, 84, 85, 86, 45, 46, 47, 37, 124, 119, 120, 130, 131, 132, 123, 124, 125, 126, 130, 131, 54, 55, 56, 121, 112, 116, 114, 118, 122, 127, 128, 129, 112, 116, 112, 116, 112, 116, 111, 115, 39, 40, 41, 91, 92, 27, 28, 29, 48, 49, 50, 57, 58, 59, 60, 61, 122, 38, 72, 73, 74, 75, 76, 48, 49, 50, 27, 28, 29, 91, 92, 39, 40, 41, 112, 116, 113, 117, 14, 130, 131, 132, 111, 115, 111, 115, 112, 116, 114, 118, 42, 43, 44, 89, 87, 30, 31, 32, 51, 52, 53, 62, 63, 64, 65, 66, 127, 36, 77, 78, 79, 80, 81, 51, 52, 53, 30, 31, 32, 89, 87, 42, 43, 44, 112, 116, 111, 115, 124, 48, 49, 50, 112, 116, 112, 116, 112, 116, 111, 115, 45, 46, 47, 90, 88, 33, 34, 35, 54, 55, 56, 67, 68, 69, 70, 71, 130, 37, 82, 83, 84, 85, 86, 54, 55, 56, 33, 34, 35, 90, 88, 45, 46, 47, 114, 118, 111, 115, 126, 51, 52, 53, 111, 115, 111, 115, 112, 116, 112, 116, 11, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 120, 39, 40, 41, 38, 119, 39, 40, 41, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 111, 115, 111, 115, 119, 54, 55, 56, 111, 115, 112, 116, 112, 116, 111, 115, 127, 128, 129, 119, 120, 127, 133, 129, 125, 126, 127, 128, 129, 121, 42, 43, 44, 36, 121, 42, 43, 44, 127, 128, 129, 77, 78, 79, 80, 81, 124, 119, 120, 127, 114, 118, 112, 116, 39, 40, 41, 132, 114, 118, 113, 117, 114, 118, 114, 118, 130, 57, 58, 59, 60, 61, 131, 132, 119, 120, 130, 131, 132, 123, 45, 46, 47, 37, 124, 45, 46, 47, 130, 131, 132, 82, 83, 84, 85, 86, 126, 121, 122, 130, 111, 115, 113, 117, 42, 43, 44, 9, 7, 8, 6, 7, 8, 12, 112, 116, 124, 62, 63, 64, 65, 66, 91, 92, 48, 49, 50, 99, 100, 101, 102, 121, 122, 38, 126, 136, 15, 16, 17, 18, 48, 49, 50, 57, 58, 59, 60, 61, 127, 128, 113, 117, 111, 115, 45, 46, 47, 125, 126, 127, 133, 129, 119, 120, 114, 118, 126, 67, 68, 69, 70, 71, 119, 120, 51, 52, 53, 103, 104, 105, 106, 124, 127, 36, 129, 136, 19, 20, 21, 22, 51, 52, 53, 62, 63, 64, 65, 66, 130, 131, 112, 116, 111, 115, 93, 27, 28, 29, 94, 99, 100, 101, 102, 122, 113, 117, 94, 93, 39, 40, 41, 126, 121, 122, 54, 55, 56, 107, 108, 109, 110, 126, 130, 37, 132, 135, 23, 24, 25, 26, 54, 55, 56, 67, 68, 69, 70, 71, 123, 124, 111, 115, 113, 117, 89, 30, 31, 32, 87, 103, 104, 105, 106, 123, 111, 115, 119, 120, 42, 43, 44, 128, 129, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 12, 127, 39, 40, 41, 126, 111, 115, 113, 117, 90, 33, 34, 35, 88, 107, 108, 109, 110, 125, 113, 117, 121, 122, 45, 46, 47, 131, 132, 123, 124, 127, 133, 129, 121, 122, 51, 52, 53, 36, 122, 135, 62, 63, 64, 65, 66, 133, 129, 119, 120, 130, 42, 43, 44, 120, 113, 117, 111, 115, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 12, 128, 129, 72, 73, 74, 75, 76, 126, 130, 131, 132, 123, 124, 54, 55, 56, 37, 124, 136, 67, 68, 69, 70, 71, 130, 132, 121, 122, 123, 45, 46, 47, 122, 112, 116, 112, 116, 57, 58, 59, 60, 61, 48, 49, 50, 124, 119, 120, 135, 130, 131, 132, 77, 78, 79, 80, 81, 119, 120, 123, 57, 58, 59, 60, 61, 122, 38, 126, 39, 40, 41, 127, 128, 129, 123, 48, 49, 50, 72, 73, 74, 75, 76, 111, 115, 112, 116, 62, 63, 64, 65, 66, 51, 52, 53, 126, 121, 122, 136, 123, 124, 127, 82, 83, 84, 85, 86, 121, 122, 125, 62, 63, 64, 65, 66, 127, 36, 129, 42, 43, 44, 130, 131, 132, 125, 51, 52, 53, 77, 78, 79, 80, 81, 111, 115, 112, 116, 67, 68, 69, 70, 71, 54, 55, 56, 39, 40, 41, 136, 125, 57, 58, 59, 60, 61, 48, 49, 50, 127, 128, 67, 68, 69, 70, 71, 130, 37, 132, 45, 46, 47, 129, 123, 124, 119, 54, 55, 56, 82, 83, 84, 85, 86, 111, 115, 111, 115, 122, 125, 39, 40, 41, 127, 128, 129, 42, 43, 44, 135, 119, 62, 63, 64, 65, 66, 51, 52, 53, 130, 131, 132, 119, 39, 40, 41, 124, 38, 72, 73, 74, 75, 76, 125, 126, 9, 7, 8, 6, 7, 8, 6, 7, 8, 114, 118, 111, 115, 128, 129, 42, 43, 44, 130, 131, 132, 45, 46, 47, 135, 121, 67, 68, 69, 70, 71, 54, 55, 56, 120, 123, 124, 121, 42, 43, 44, 126, 36, 77, 78, 79, 80, 81, 120, 127, 128, 129, 57, 58, 59, 60, 61, 133, 129, 113, 117, 113, 117, 131, 132, 45, 46, 47, 119, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 123, 45, 46, 47, 119, 37, 82, 83, 84, 85, 86, 122, 130, 131, 132, 62, 63, 64, 65, 66, 131, 132, 113, 117, 114, 118, 124, 72, 73, 74, 75, 76, 122, 15, 16, 17, 18, 136, 39, 40, 41, 98, 99, 100, 101, 102, 57, 58, 59, 60, 61, 126, 27, 28, 29, 38, 91, 92, 15, 16, 17, 18, 48, 49, 50, 67, 68, 69, 70, 71, 123, 124, 113, 117, 114, 118, 126, 77, 78, 79, 80, 81, 124, 19, 20, 21, 22, 135, 42, 43, 44, 87, 103, 104, 105, 106, 62, 63, 64, 65, 66, 119, 30, 31, 32, 36, 87, 89, 19, 20, 21, 22, 51, 52, 53, 39, 40, 41, 121, 48, 49, 50, 114, 118, 112, 116, 119, 82, 83, 84, 85, 86, 126, 23, 24, 25, 26, 135, 45, 46, 47, 88, 107, 108, 109, 110, 67, 68, 69, 70, 71, 121, 33, 34, 35, 37, 88, 90, 23, 24, 25, 26, 54, 55, 56, 42, 43, 44, 129, 51, 52, 53, 113, 117, 111, 115, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 13, 45, 46, 47, 132, 54, 55, 56, 113, 117, 111, 115, 127, 128, 129, 57, 58, 59, 60, 61, 39, 40, 41, 136, 134, 48, 49, 50, 122, 57, 58, 59, 60, 61, 39, 40, 41, 128, 129, 134, 124, 36, 39, 40, 41, 48, 49, 50, 111, 115, 120, 57, 58, 59, 60, 61, 126, 121, 114, 118, 113, 117, 130, 131, 132, 62, 63, 64, 65, 66, 42, 43, 44, 135, 125, 51, 52, 53, 127, 62, 63, 64, 65, 66, 42, 43, 44, 131, 132, 125, 126, 37, 42, 43, 44, 51, 52, 53, 114, 118, 122, 62, 63, 64, 65, 66, 127, 128, 111, 115, 114, 118, 123, 124, 119, 67, 68, 69, 70, 71, 45, 46, 47, 136, 119, 54, 55, 56, 130, 67, 68, 69, 70, 71, 45, 46, 47, 120, 127, 128, 129, 38, 45, 46, 47, 54, 55, 56, 113, 117, 125, 67, 68, 69, 70, 71, 130, 11, 111, 115, 112, 116, 72, 73, 74, 75, 76, 99, 100, 101, 102, 72, 73, 74, 75, 76, 27, 28, 29, 123, 124, 72, 73, 74, 75, 76, 57, 58, 59, 60, 61, 36, 126, 72, 73, 74, 75, 76, 111, 115, 39, 40, 41, 72, 73, 74, 75, 76, 111, 115, 112, 116, 77, 78, 79, 80, 81, 103, 104, 105, 106, 77, 78, 79, 80, 81, 30, 31, 32, 125, 126, 77, 78, 79, 80, 81, 62, 63, 64, 65, 66, 37, 119, 77, 78, 79, 80, 81, 113, 117, 42, 43, 44, 77, 78, 79, 80, 81, 113, 117, 113, 117, 82, 83, 84, 85, 86, 107, 108, 109, 110, 82, 83, 84, 85, 86, 33, 34, 35, 129, 119, 82, 83, 84, 85, 86, 67, 68, 69, 70, 71, 38, 121, 82, 83, 84, 85, 86, 112, 116, 45, 46, 47, 82, 83, 84, 85, 86, 114, 118, 114, 118, 48, 49, 50, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 13, 121, 122, 136, 121, 48, 49, 50, 39, 40, 41, 124, 36, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 39, 40, 41, 130, 112, 116, 111, 115, 51, 52, 53, 126, 62, 63, 64, 65, 66, 133, 129, 119, 42, 43, 44, 114, 118, 126, 123, 124, 136, 127, 51, 52, 53, 42, 43, 44, 126, 37, 131, 132, 135, 125, 126, 134, 62, 63, 64, 65, 66, 127, 42, 43, 44, 119, 113, 117, 112, 116, 54, 55, 56, 129, 67, 68, 69, 70, 71, 131, 132, 121, 45, 46, 47, 114, 118, 120, 125, 126, 135, 130, 54, 55, 56, 45, 46, 47, 127, 38, 123, 124, 136, 119, 120, 125, 67, 68, 69, 70, 71, 130, 45, 46, 47, 121, 111, 115, 111, 115, 126, 130, 39, 40, 41, 27, 28, 29, 93, 91, 92, 15, 16, 17, 18, 114, 118, 122, 39, 40, 41, 72, 73, 74, 75, 76, 48, 49, 50, 36, 125, 126, 135, 121, 39, 40, 41, 91, 92, 27, 28, 29, 93, 48, 49, 50, 112, 116, 112, 116, 119, 120, 42, 43, 44, 30, 31, 32, 87, 87, 89, 19, 20, 21, 22, 111, 115, 127, 42, 43, 44, 77, 78, 79, 80, 81, 51, 52, 53, 37, 119, 120, 135, 123, 42, 43, 44, 87, 89, 30, 31, 32, 87, 51, 52, 53, 111, 115, 113, 117, 121, 122, 45, 46, 47, 33, 34, 35, 88, 88, 90, 23, 24, 25, 26, 111, 115, 130, 45, 46, 47, 82, 83, 84, 85, 86, 54, 55, 56, 38, 121, 122, 136, 125, 45, 46, 47, 88, 90, 33, 34, 35, 88, 54, 55, 56, 111, 115, 113, 117, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 129, 39, 40, 41, 127, 36, 48, 49, 50, 120, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 112, 116, 113, 117, 125, 126, 121, 122, 136, 123, 51, 52, 53, 129, 125, 126, 127, 133, 129, 119, 120, 62, 63, 64, 65, 66, 130, 131, 132, 42, 43, 44, 130, 37, 51, 52, 53, 122, 125, 126, 130, 131, 132, 135, 119, 120, 134, 124, 121, 122, 111, 115, 114, 118, 120, 127, 128, 129, 135, 125, 54, 55, 56, 132, 119, 120, 130, 131, 132, 121, 122, 67, 68, 69, 70, 71, 123, 124, 119, 45, 46, 47, 120, 38, 54, 55, 56, 128, 129, 119, 120, 123, 124, 136, 121, 122, 125, 126, 127, 128, 113, 117, 113, 117, 122, 15, 16, 17, 18, 57, 58, 59, 60, 61, 121, 72, 73, 74, 75, 76, 48, 49, 50, 99, 100, 101, 102, 91, 92, 27, 28, 29, 122, 36, 93, 15, 16, 17, 18, 39, 40, 41, 126, 136, 72, 73, 74, 75, 76, 131, 112, 116, 113, 117, 129, 19, 20, 21, 22, 62, 63, 64, 65, 66, 123, 77, 78, 79, 80, 81, 51, 52, 53, 103, 104, 105, 106, 87, 89, 30, 31, 32, 129, 37, 87, 19, 20, 21, 22, 42, 43, 44, 120, 135, 77, 78, 79, 80, 81, 119, 113, 117, 111, 115, 132, 23, 24, 25, 26, 67, 68, 69, 70, 71, 125, 82, 83, 84, 85, 86, 54, 55, 56, 107, 108, 109, 110, 88, 90, 33, 34, 35, 132, 38, 88, 23, 24, 25, 26, 45, 46, 47, 122, 136, 82, 83, 84, 85, 86, 121, 112, 116, 112, 116, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 95, 95, 95, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 123, 48, 49, 50, 114, 118, 111, 115, 119, 120, 77, 78, 79, 80, 81, 129, 135, 121, 122, 127, 128, 129, 119, 120, 42, 43, 44, 125, 126, 121, 77, 78, 79, 80, 81, 119, 120, 36, 134, 124, 119, 120, 51, 52, 53, 128, 129, 135, 119, 120, 125, 51, 52, 53, 114, 118, 114, 118, 121, 122, 82, 83, 84, 85, 86, 132, 136, 123, 124, 130, 131, 132, 121, 122, 45, 46, 47, 127, 128, 129, 82, 83, 84, 85, 86, 121, 122, 37, 125, 126, 121, 122, 54, 55, 56, 131, 132, 136, 121, 122, 127, 54, 55, 56, 111, 115, 112, 116, 48, 49, 50, 39, 40, 41, 119, 120, 135, 125, 93, 99, 100, 101, 102, 27, 28, 29, 94, 57, 58, 59, 60, 61, 136, 126, 39, 40, 41, 38, 127, 128, 129, 72, 73, 74, 75, 76, 39, 40, 41, 57, 58, 59, 60, 61, 111, 115, 112, 116, 51, 52, 53, 42, 43, 44, 121, 122, 136, 127, 87, 103, 104, 105, 106, 30, 31, 32, 89, 62, 63, 64, 65, 66, 136, 119, 42, 43, 44, 36, 130, 131, 132, 77, 78, 79, 80, 81, 42, 43, 44, 62, 63, 64, 65, 66, 111, 115, 114, 118, 54, 55, 56, 45, 46, 47, 123, 124, 136, 130, 88, 107, 108, 109, 110, 33, 34, 35, 90, 67, 68, 69, 70, 71, 135, 121, 45, 46, 47, 37, 119, 120, 123, 82, 83, 84, 85, 86, 45, 46, 47, 67, 68, 69, 70, 71, 114, 118, 111, 115, 131, 132, 57, 58, 59, 60, 61, 126, 135, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 13, 48, 49, 50, 72, 73, 74, 75, 76, 132, 38, 121, 57, 58, 59, 60, 61, 131, 48, 49, 50, 9, 7, 8, 6, 7, 8, 113, 117, 112, 116, 119, 120, 62, 63, 64, 65, 66, 129, 136, 119, 120, 134, 124, 127, 128, 114, 118, 123, 124, 127, 51, 52, 53, 77, 78, 79, 80, 81, 124, 36, 127, 62, 63, 64, 65, 66, 124, 51, 52, 53, 120, 135, 127, 133, 129, 123, 114, 118, 113, 117, 121, 122, 67, 68, 69, 70, 71, 132, 135, 121, 122, 125, 126, 130, 131, 112, 116, 125, 126, 130, 54, 55, 56, 82, 83, 84, 85, 86, 126, 37, 130, 67, 68, 69, 70, 71, 126, 54, 55, 56, 122, 136, 130, 131, 132, 125, 111, 115, 111, 115, 72, 73, 74, 75, 76, 39, 40, 41, 93, 27, 28, 29, 48, 49, 50, 111, 115, 39, 40, 41, 15, 16, 17, 18, 57, 58, 59, 60, 61, 38, 48, 49, 50, 39, 40, 41, 72, 73, 74, 75, 76, 57, 58, 59, 60, 61, 113, 117, 113, 117, 77, 78, 79, 80, 81, 42, 43, 44, 87, 30, 31, 32, 51, 52, 53, 112, 116, 42, 43, 44, 19, 20, 21, 22, 62, 63, 64, 65, 66, 36, 51, 52, 53, 42, 43, 44, 77, 78, 79, 80, 81, 62, 63, 64, 65, 66, 112, 116, 111, 115, 82, 83, 84, 85, 86, 45, 46, 47, 88, 33, 34, 35, 54, 55, 56, 114, 118, 45, 46, 47, 23, 24, 25, 26, 67, 68, 69, 70, 71, 37, 54, 55, 56, 45, 46, 47, 82, 83, 84, 85, 86, 67, 68, 69, 70, 71, 112, 116, 111, 115, 95, 95, 95, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 14, 95, 95, 38, 95, 95, 95, 95, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 112, 116, 112, 116, 39, 40, 41, 48, 49, 50, 27, 28, 29, 99, 100, 101, 102, 57, 58, 59, 60, 61, 97, 48, 49, 50, 72, 73, 74, 75, 76, 91, 92, 36, 72, 73, 74, 75, 76, 99, 100, 101, 102, 93, 27, 28, 29, 39, 40, 41, 112, 116, 111, 115, 42, 43, 44, 51, 52, 53, 30, 31, 32, 103, 104, 105, 106, 62, 63, 64, 65, 66, 87, 51, 52, 53, 77, 78, 79, 80, 81, 87, 89, 37, 77, 78, 79, 80, 81, 103, 104, 105, 106, 87, 30, 31, 32, 42, 43, 44, 112, 116, 111, 115, 45, 46, 47, 54, 55, 56, 33, 34, 35, 107, 108, 109, 110, 67, 68, 69, 70, 71, 88, 54, 55, 56, 82, 83, 84, 85, 86, 88, 90, 38, 82, 83, 84, 85, 86, 107, 108, 109, 110, 88, 33, 34, 35, 45, 46, 47, 112, 116, 2, 1, 4, 2, 1, 2, 5, 4, 2, 2, 3, 4, 2, 2, 2, 5, 4, 2, 1, 4, 1, 2, 3, 2, 4, 3, 4, 2, 5, 1, 4, 1, 2, 5, 3, 2, 4, 1, 1, 5, 4, 4, 4, 1, 5, 5, 5, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.level13_width = 50;
			this.level13_height = 80;
			this.level13_rect_x = new Array(0, 0, 2400, 100, 1900, 1950, 1650, 100, 1600, 1800, 300, 250, 600, 100, 1050, 1950, 400, 100, 1850, 1600, 1800, 850, 100, 250, 850, 100, 550, 850, 250, 1800, 2100, 700, 100, 250, 850, 1750);
			this.level13_rect_y = new Array(0, 3650, 0, 0, 200, 250, 250, 200, 700, 1000, 700, 1150, 1200, 1400, 1300, 1600, 1700, 1900, 1950, 2250, 2550, 2850, 2550, 2250, 2300, 2850, 3150, 3200, 3450, 3450, 3150, 1000, 900, 650, 800, 450);
			this.level13_rect_w = new Array(100, 2500, 100, 2300, 500, 100, 100, 1650, 600, 600, 400, 450, 100, 650, 1100, 450, 900, 1950, 100, 600, 600, 1350, 1200, 750, 100, 600, 550, 100, 1200, 600, 300, 650, 50, 550, 250, 50);
			this.level13_rect_h = new Array(3650, 250, 3650, 50, 50, 300, 450, 50, 50, 50, 450, 50, 200, 50, 50, 50, 50, 50, 300, 50, 50, 50, 50, 50, 250, 50, 50, 250, 50, 50, 50, 50, 50, 50, 50, 50);
			this.level13_item_type = new Array(10, 11, 11, 11, 11, 11);
			this.level13_item_x = new Array(32, 11, 8, 9, 20, 34);
			this.level13_item_y = new Array(72, 50, 27, 3, 68, 44);
			this.level13_tileSet = 9;
			this.level13_gameType = 1;
			this.tileSet = this["level" + this.levelToLoad + "_tileSet"];
			this.level = new Vector.<uint>([]);
			this.level.fixed = false;
			this.a = 0;
			while (this.a < this["level" + this.levelToLoad].length)
			{
				
				this.level.push(this["level" + this.levelToLoad][this.a]);
				
				this.a  ++ ;
				
			}
			this.level_width = this["level" + this.levelToLoad + "_width"];
			this.level_height = this["level" + this.levelToLoad + "_height"] - 1;
			this.level_rect_x = new Vector.<int>([]);
			this.level_rect_y = new Vector.<int>([]);
			this.level_rect_w = new Vector.<int>([]);
			this.level_rect_h = new Vector.<int>([]);
			this.a = 0;
			while (this.a < this["level" + this.levelToLoad + "_rect_x"].length)
			{
				
				this.level_rect_x.push(this["level" + this.levelToLoad + "_rect_x"][this.a]);
				this.level_rect_y.push(this["level" + this.levelToLoad + "_rect_y"][this.a]);
				this.level_rect_w.push(this["level" + this.levelToLoad + "_rect_w"][this.a]);
				this.level_rect_h.push(this["level" + this.levelToLoad + "_rect_h"][this.a]);
				
				this.a  ++ ;
				
			}
			this.level_collidable = new Vector.<int>([]);
			this.a = 0;
			while (this.a < this["tileSet" + this.tileSet + "_collidable"].length)
			{
				
				this.level_collidable.push(this["tileSet" + this.tileSet + "_collidable"][this.a]);
				
				this.a  ++ ;
				
			}
			this.level.fixed = true;
			this.objective_collectables_collected = [0, 0, 0, 0];
			this.objective_score_complete = [0, 0, 0];
			this.objective_skill_complete = [0, 0];
			this.objective_briefcase_collected = false;
			this.objective_weaponProficiency = false;
			this.objective_specialKills = 0;
			this.totals = [0, 0, 0];
			this.objectives = new Array();
			this.cameraStart_x = 0;
			this.cameraStart_y = 0;
			this.objective_scores = new Array();
			this.objective_specialKills_needed = 0;
			this.objective_specialKillType = 0;
			this.objective_whichWeaponProficiency = 0;
			this.gameType = this["level" + this.levelToLoad + "_gameType"];
			if (this.gameType == 0)
			{
				this.objectives = this["level" + this.levelToLoad + "_objective_names"];
				this.objective_scores = this["level" + this.levelToLoad + "_objective_scores"];
				this.objective_specialKills_needed = this["level" + this.levelToLoad + "_objective_specialKills_needed"];
				this.objective_specialKillType = this["level" + this.levelToLoad + "_objective_specialKillType"];
				this.objective_whichWeaponProficiency = this["level" + this.levelToLoad + "_objective_whichWeaponProficiency"];
			}
			this.numberOfBloodSplatSFX = 0;
			this.acidSfx = 0;
			this.artifactSfx = 0;
			this.closestArtifact_dist = 0;
			this.closestArtifact_num = 0;
			this.simpleParticle_type = new Vector.<int>([]);
			this.simpleParticle_x = new Vector.<Number>([]);
			this.simpleParticle_y = new Vector.<Number>([]);
			this.simpleParticle_r = new Vector.<Number>([]);
			this.simpleParticle_p1 = new Vector.<Number>([]);
			this.simpleParticle_p2 = new Vector.<Number>([]);
			this.a = 0;
			while (this.a < 3)
			{
				
				this.addSimpleParticle(-1, 0, 0, 0, 0, 0);
				
				this.a  ++ ;
				
			}
			this.simpleParticle_bg_type = new Vector.<int>([]);
			this.simpleParticle_bg_x = new Vector.<Number>([]);
			this.simpleParticle_bg_y = new Vector.<Number>([]);
			this.simpleParticle_bg_r = new Vector.<Number>([]);
			this.simpleParticle_bg_p1 = new Vector.<Number>([]);
			this.simpleParticle_bg_p2 = new Vector.<Number>([]);
			this.a = 0;
			while (this.a < 3)
			{
				
				this.addSimpleParticle_bg(-1, 0, 0, 0, 0, 0);
				
				this.a  ++ ;
				
			}
			this.particle_type = new Vector.<int>([]);
			this.particle_x = new Vector.<Number>([]);
			this.particle_y = new Vector.<Number>([]);
			this.particle_r = new Vector.<Number>([]);
			this.particle_xOld = new Vector.<Number>([]);
			this.particle_yOld = new Vector.<Number>([]);
			this.particle_rOld = new Vector.<Number>([]);
			this.particle_velX = new Vector.<Number>([]);
			this.particle_velY = new Vector.<Number>([]);
			this.particle_frame = new Vector.<Number>([]);
			this.particle_p1 = new Vector.<Number>([]);
			this.particle_p2 = new Vector.<Number>([]);
			this.particle_p3 = new Vector.<Number>([]);
			this.particle_p4 = new Vector.<Number>([]);
			this.particle_p5 = new Vector.<Number>([]);
			this.a = 0;
			while (this.a < 3)
			{
				
				this.addParticle(-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				
				this.a  ++ ;
				
			}
			this.gaussStartPoint_x = 0;
			this.gaussStartPoint_y = 0;
			this.gaussLength = 0;
			this.jumpHeightInTiles = new Array(0, 14, 20, 26, 30, 32, 36);
			this.bullet_dx = 0;
			this.bullet_dy = 0;
			this.bloodLoop = 0;
			this.splatterCount = 0;
			this.a = 0;
			this.b = 0;
			this.c = 0;
			this.d = 0;
			this.e = 0;
			mc.stage.frameRate = 60;
			this.trans = new Matrix();
			this.rect = new Rectangle();
			this.tempPoint = new Point();
			this.tempInterp = new Point();
			this.tempInterpOld = new Point();
			this.tileOn = 0;
			this.screenWidth = mc.stage.stageWidth;
			this.screenHeight = mc.stage.stageHeight;
			this.screenWidth = 800;
			this.screenHeight = 600;
			this.screenWidthTiles = int(this.screenWidth / 50);
			this.screenHeightTiles = int(this.screenHeight / 50);
			this.characterStartPoint = new Point(0, 0);
			this.bm = new BitmapData(this.screenWidth, this.screenHeight, false, 0);
			this.bg = new Bitmap(this.bm);
			mc.addChild(this.bg);
			mc.swapChildren(this.bg, this.mc.fade);
			mc.swapChildren(this.mc.intro_text_back, this.bg);
			mc.swapChildren(this.mc.intro_text_back, this.mc.fade);
			mc.swapChildren(this.mc.pauseScreen, this.bg);
			this.mc.intro_text_back.x = this.bg.x + (this.screenWidth - this.mc.intro_text_back.width) * 0.5;
			this.mc.intro_text_back.y = this.bg.y + (this.screenHeight - this.mc.intro_text_back.height) * 0.25;
			this.mc.intro_text_back.fade.width = 1600;
			this.mc.intro_text_back.fade.height = 1200;
			this.mc.intro_text_back.fade.x = -350;
			this.mc.intro_text_back.fade.y = -250;
			this.userMap = new BitmapData(this.level_width, this.level_height, false, 0);
			if (this.tileSet == 1)
			{
				this.userMapColor = 7050535;
			}
			else if (this.tileSet == 2)
			{
				this.userMapColor = 0;
			}
			else if (this.tileSet == 3)
			{
				this.userMapColor = 8831188;
			}
			else if (this.tileSet == 4)
			{
				this.userMapColor = 11974326;
			}
			else if (this.tileSet == 5)
			{
				this.userMapColor = 188647;
			}
			else if (this.tileSet == 6)
			{
				this.userMapColor = 6128937;
			}
			else if (this.tileSet == 7)
			{
				this.userMapColor = 6128937;
			}
			else if (this.tileSet == 8)
			{
				this.userMapColor = 6128937;
			}
			else if (this.tileSet == 9)
			{
				this.userMapColor = 6128937;
			}
			this.a = 0;
			while (this.a < (this.level_height - 1))
			{
				
				this.b = 0;
				while (this.b < this.level_width)
				{
					
					this.tileOn = this.level[this.a * this.level_width + this.b];
					if (this.level_collidable[this.tileOn] == 1)
					{
						this.userMap.setPixel(this.b, this.a, this.userMapColor);
					}
					
					this.b  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			if (this.tileSet == 1)
			{
				this.tempMc = new tileSet_1();
			}
			else if (this.tileSet == 2)
			{
				this.tempMc = new tileSet_2();
			}
			else if (this.tileSet == 3)
			{
				this.tempMc = new tileSet_3();
			}
			else if (this.tileSet == 4)
			{
				this.tempMc = new tileSet_4();
			}
			else if (this.tileSet == 5)
			{
				this.tempMc = new tileSet_5();
			}
			else if (this.tileSet == 6)
			{
				this.tempMc = new tileSet_6();
			}
			else if (this.tileSet == 7)
			{
				this.tempMc = new tileSet_7();
			}
			else if (this.tileSet == 8)
			{
				this.tempMc = new tileSet_8();
			}
			else if (this.tileSet == 9)
			{
				this.tempMc = new tileSet_9();
			}
			this.tempMc.cacheAsBitmap = true;
			this.tileSet_bm = new BitmapData(50 * this.tempMc.totalFrames, 50, false, 0);
			this.tileSet_width = int(this.tileSet_bm.width / 50);
			this.tileSet_numOfTiles = this.tempMc.totalFrames;
			this.trans = new Matrix();
			this.a = 0;
			while (this.a < this.tileSet_numOfTiles)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.tileSet_bm.draw(this.tempMc, this.trans);
				this.trans.translate(50, 0);
				
				this.a  ++ ;
				
			}
			this.light_x = new Array();
			this.light_y = new Array();
			this.light_s = new Array();
			this.level_bm = new BitmapData(this.level_width * 50, this.level_height * 50, false, 0);
			this.precompute_time = getTimer();
			this.a = 0;
			while (this.a < (this.level_height - 1))
			{
				
				this.b = 0;
				while (this.b < this.level_width)
				{
					
					this.tileOn = this.level[this.a * this.level_width + this.b];
					switch(this.tileSet)
					{
						case 1:
						{
							if (this.tileOn != 54)
							{
							}
							if (this.tileOn == 55)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(0);
							}
							if (this.tileOn != 76)
							{
							}
							if (this.tileOn != 77)
							{
							}
							if (this.tileOn == 78)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(1);
							}
							break;
						}
						case 3:
						{
							if (this.tileOn == 86)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(0);
							}
							if (this.tileOn == 39)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(2);
							}
							break;
						}
						case 4:
						{
							if (this.tileOn == 27)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(0);
							}
							if (this.tileOn == 98)
							{
								this.light_x.push(this.b * 50 + 55);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(2);
							}
							break;
						}
						case 5:
						{
							break;
						}
						case 6:
						{
							if (this.tileOn == 22)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(0);
							}
							break;
						}
						case 7:
						{
							if (this.tileOn == 68)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(0);
							}
							if (this.tileOn == 93)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(2);
							}
							break;
						}
						case 8:
						{
							if (this.tileOn == 58)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(0);
							}
							if (this.tileOn == 15)
							{
								this.light_x.push(this.b * 50 + 55);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(2);
							}
							break;
						}
						case 9:
						{
							if (this.tileOn != 96)
							{
							}
							if (this.tileOn != 97)
							{
							}
							if (this.tileOn != 98)
							{
							}
							if (this.tileOn != 133)
							{
							}
							if (this.tileOn == 134)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(0);
							}
							if (this.tileOn == 31)
							{
								this.light_x.push(this.b * 50 + 25);
								this.light_y.push(this.a * 50 + 25);
								this.light_s.push(2);
							}
							break;
						}
						default:
						{
							break;
						}
					}
					
					this.b  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this["level" + this.levelToLoad + "_item_type"].length)
			{
				
				switch(this["level" + this.levelToLoad + "_item_type"][this.a])
				{
					case 0:
					{
						this.addSimpleParticle_bg(1, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, 0, 0);
						break;
					}
					case 1:
					{
						this.addSimpleParticle_bg(2, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, 0, 0);
						break;
					}
					case 2:
					{
						this.addSimpleParticle_bg(3, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, 0, 0);
						break;
					}
					case 3:
					{
						this.addSimpleParticle_bg(4, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, 0, 0);
						break;
					}
					case 4:
					{
						this.addParticle(4, this["level" + this.levelToLoad + "_item_x"][this.a] * 50 + 25, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 0, 0, 0, 0, 0, 0);
						break;
					}
					case 5:
					{
						this.addParticle(5, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 0, 0, 0, 0, 0, 0);
						break;
					}
					case 6:
					{
						this.addParticle(5, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 1, 0, 0, 0, 0, 0);
						break;
					}
					case 7:
					{
						this.addParticle(5, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 2, 0, 0, 0, 0, 0);
						break;
					}
					case 8:
					{
						this.addParticle(5, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 3, 0, 0, 0, 0, 0);
						break;
					}
					case 9:
					{
						this.addParticle(8, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 0, 0, 0, 0, 0, 0);
						break;
					}
					case 10:
					{
						this.characterStartPoint.x = this["level" + this.levelToLoad + "_item_x"][this.a] * 50 + 25;
						this.characterStartPoint.y = this["level" + this.levelToLoad + "_item_y"][this.a] * 50 + 52;
						this.cameraStart_x = this["level" + this.levelToLoad + "_item_x"][this.a] * 50 + 25;
						this.cameraStart_y = this["level" + this.levelToLoad + "_item_y"][this.a] * 50 + 52;
						break;
					}
					case 11:
					{
						this.addParticle(10, this["level" + this.levelToLoad + "_item_x"][this.a] * 50 + 25, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 0, 0, 0, 0, 0, 0);
						break;
					}
					case 12:
					{
						this.addParticle(11, this["level" + this.levelToLoad + "_item_x"][this.a] * 50, this["level" + this.levelToLoad + "_item_y"][this.a] * 50, 0, this.particle_x[(this.particle_x.length - 1)], this.particle_y[(this.particle_y.length - 1)], 0, 0, 0, 0, 0, 0, 0, 0, 0);
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.level_height)
			{
				
				this.b = 0;
				while (this.b < this.level_width)
				{
					
					this.tileOn = this.level[this.a * this.level_width + this.b];
					switch(this.tileSet)
					{
						case 1:
						{
							switch(this.tileOn)
							{
								case 82:
								{
									this.tileOn = this.level[this.a * this.level_width + this.b - this.level_width];
									if (this.level_collidable[this.tileOn] == 1)
									{
									}
									if (this.tileOn != 82)
									{
										this.addSimpleParticle_bg(0, this.b * 50 - 4, this.a * 50, 0, 0, 0);
									}
									break;
								}
								default:
								{
									break;
								}
							}
							break;
						}
						case 3:
						{
							switch(this.tileOn)
							{
								case 0:
								{
									this.level[this.a * this.level_width + this.b] = int(Math.random() * 8);
									break;
								}
								case 102:
								{
									this.tileOn = this.level[this.a * this.level_width + this.b - this.level_width];
									if (this.level_collidable[this.tileOn] == 1)
									{
									}
									if (this.tileOn != 102)
									{
										this.addSimpleParticle_bg(0, this.b * 50 - 4, this.a * 50, 0, 0, 0);
									}
									break;
								}
								default:
								{
									break;
								}
							}
							break;
						}
						case 4:
						{
							switch(this.tileOn)
							{
								case 105:
								{
									this.tileOn = this.level[this.a * this.level_width + this.b - this.level_width];
									if (this.level_collidable[this.tileOn] == 1)
									{
									}
									if (this.tileOn != 105)
									{
										this.addSimpleParticle_bg(0, this.b * 50 - 4, this.a * 50, 0, 0, 0);
									}
									break;
								}
								default:
								{
									break;
								}
							}
							break;
						}
						case 5:
						{
							switch(this.tileOn)
							{
								case 62:
								{
									this.tileOn = this.level[this.a * this.level_width + this.b - this.level_width];
									if (this.level_collidable[this.tileOn] == 1)
									{
									}
									if (this.tileOn != 62)
									{
										this.addSimpleParticle_bg(0, this.b * 50 - 4, this.a * 50, 0, 0, 0);
									}
									break;
								}
								default:
								{
									break;
								}
							}
							break;
						}
						case 6:
						{
							switch(this.tileOn)
							{
								case 105:
								{
									this.tileOn = this.level[this.a * this.level_width + this.b - this.level_width];
									if (this.level_collidable[this.tileOn] == 1)
									{
									}
									if (this.tileOn != 105)
									{
										this.addSimpleParticle_bg(0, this.b * 50 - 4, this.a * 50, 0, 0, 0);
									}
									break;
								}
								default:
								{
									break;
								}
							}
							break;
						}
						default:
						{
							break;
						}
					}
					
					this.b  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.level_height)
			{
				
				this.b = 0;
				while (this.b < this.level_width)
				{
					
					this.tempPoint.x = this.b * 50;
					this.tempPoint.y = this.a * 50;
					this.tileOn = this.level[this.a * this.level_width + this.b];
					this.rect.x = this.tileOn * 50;
					this.rect.y = 0;
					this.rect.width = 50;
					this.rect.height = 50;
					this.level_bm.copyPixels(this.tileSet_bm, this.rect, this.tempPoint, null, null, false);
					
					this.b  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			this.tempMc = new light_mc1();
			this.tempMc.gotoAndStop(this.tileSet);
			this.light_bm_lg = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.light_bm_lg.draw(this.tempMc);
			this.tempMc = new light_mc2();
			this.tempMc.gotoAndStop(this.tileSet);
			this.light_bm_md = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.light_bm_md.draw(this.tempMc);
			this.tempMc = new light_mc3();
			this.tempMc.gotoAndStop(this.tileSet);
			this.light_bm_sm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.light_bm_sm.draw(this.tempMc);
			if (this.tileSet == 1)
			{
				this.tempMc = new occlusion_mc_1();
			}
			else if (this.tileSet == 3)
			{
				this.tempMc = new occlusion_mc_3();
			}
			else if (this.tileSet == 4)
			{
				this.tempMc = new occlusion_mc_4();
			}
			else if (this.tileSet == 5)
			{
				this.tempMc = new occlusion_mc_5();
			}
			else if (this.tileSet == 6)
			{
				this.tempMc = new occlusion_mc_6();
			}
			else if (this.tileSet == 7)
			{
				this.tempMc = new occlusion_mc_7();
			}
			else if (this.tileSet == 8)
			{
				this.tempMc = new occlusion_mc_7();
			}
			else if (this.tileSet == 9)
			{
				this.tempMc = new occlusion_mc_7();
			}
			this.occlusion_bm = new BitmapData(50 * 12, 50, true, 0);
			this.trans = new Matrix();
			this.a = 0;
			while (this.a < 12)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.occlusion_bm.draw(this.tempMc, this.trans, null, null, null, true);
				this.trans.translate(50, 0);
				
				this.a  ++ ;
				
			}
			this.occlusionMap = new Array();
			this.a = 0;
			while (this.a < this.level.length)
			{
				
				if (this.level_collidable[this.level[this.a]] == 1)
				{
					this.occlusionMap.push(-2);
				}
				else
				{
					this.occlusionMap.push(-1);
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.occlusionMap.length)
			{
				
				if (this.occlusionMap[this.a] == -1)
				{
					if (this.occlusionMap[this.a - this.level_width] == -2)
					{
						if (this.occlusionMap[(this.a - 1)] == -2)
						{
							this.occlusionMap[this.a] = 9;
						}
						else if (this.occlusionMap[(this.a + 1)] == -2)
						{
							this.occlusionMap[this.a] = 10;
						}
						else
						{
							this.occlusionMap[this.a] = 5;
						}
					}
					else if (this.occlusionMap[this.a + this.level_width] == -2)
					{
						if (this.occlusionMap[(this.a - 1)] == -2)
						{
							this.occlusionMap[this.a] = 8;
						}
						else if (this.occlusionMap[(this.a + 1)] == -2)
						{
							this.occlusionMap[this.a] = 11;
						}
						else
						{
							this.occlusionMap[this.a] = 1;
						}
					}
					else if (this.occlusionMap[(this.a - 1)] == -2)
					{
						if (this.occlusionMap[this.a - this.level_width] == -2)
						{
							this.occlusionMap[this.a] = 9;
						}
						else if (this.occlusionMap[this.a + this.level_width] == -2)
						{
							this.occlusionMap[this.a] = 10;
						}
						else
						{
							this.occlusionMap[this.a] = 3;
						}
					}
					else if (this.occlusionMap[(this.a + 1)] == -2)
					{
						if (this.occlusionMap[this.a - this.level_width] == -2)
						{
							this.occlusionMap[this.a] = 10;
						}
						else if (this.occlusionMap[this.a + this.level_width] == -2)
						{
							this.occlusionMap[this.a] = 11;
						}
						else
						{
							this.occlusionMap[this.a] = 7;
						}
					}
					else if (this.occlusionMap[this.a - this.level_width + 1] == -2)
					{
						this.occlusionMap[this.a] = 6;
					}
					else if (this.occlusionMap[this.a - this.level_width - 1] == -2)
					{
						this.occlusionMap[this.a] = 4;
					}
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.occlusionMap.length)
			{
				
				if (this.occlusionMap[this.a - this.level_width] == 3)
				{
					if (this.occlusionMap[(this.a - 1)] != 5)
					{
					}
					if (this.occlusionMap[(this.a - 1)] == 9)
					{
						this.occlusionMap[this.a] = 4;
					}
				}
				else if (this.occlusionMap[this.a - this.level_width] == 7)
				{
					if (this.occlusionMap[(this.a + 1)] != 5)
					{
					}
					if (this.occlusionMap[(this.a + 1)] == 10)
					{
						this.occlusionMap[this.a] = 6;
					}
				}
				else if (this.occlusionMap[this.a + this.level_width] == 3)
				{
					if (this.occlusionMap[(this.a - 1)] != 1)
					{
					}
					if (this.occlusionMap[(this.a - 1)] == 8)
					{
						this.occlusionMap[this.a] = 2;
					}
				}
				else if (this.occlusionMap[this.a + this.level_width] == 7)
				{
					if (this.occlusionMap[(this.a + 1)] != 1)
					{
					}
					if (this.occlusionMap[(this.a + 1)] == 11)
					{
						this.occlusionMap[this.a] = 0;
					}
				}
				else if (this.occlusionMap[this.a + this.level_width] == 11)
				{
					if (this.occlusionMap[(this.a + 1)] == 1)
					{
						this.occlusionMap[this.a] = 0;
					}
				}
				
				this.a  ++ ;
				
			}
			this.rect.y = 0;
			this.rect.width = 50;
			this.rect.height = 50;
			this.a = 0;
			while (this.a < this.occlusionMap.length)
			{
				
				this.rect.x = this.occlusionMap[this.a] * 50;
				this.tempPoint.x = this.a % this.level_width * 50;
				this.tempPoint.y = int(this.a / this.level_width) * 50;
				if (this.occlusionMap[this.a] > -1)
				{
					this.trans.tx = this.tempPoint.x;
					this.trans.ty = this.tempPoint.y;
					this.tempMc.gotoAndStop((this.occlusionMap[this.a] + 1));
					this.level_bm.draw(this.tempMc, this.trans, null, "darken", null, true);
				}
				
				this.a  ++ ;
				
			}
			this.occlusion_bm = new BitmapData(1, 1, false, 0);
			this.occlusionMap = new Array();
			this.tempMc = new node_mc();
			this.node_bm = new BitmapData(200, 50, true, 0);
			this.a = 0;
			while (this.a < 4)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 50;
				this.trans.ty = 0;
				this.node_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new node_mc2();
			this.node_bm2 = new BitmapData(50, 50, true, 0);
			this.node_bm2.draw(this.tempMc);
			this.nodeMap = new Array();
			this.a = 0;
			while (this.a < this.level.length)
			{
				
				if (this.level_collidable[this.level[this.a]] == 1)
				{
					this.nodeMap.push(1);
				}
				else
				{
					this.nodeMap.push(0);
				}
				
				this.a  ++ ;
				
			}
			this.a = 0;
			while (this.a < this.nodeMap.length)
			{
				
				if (this.nodeMap[this.a] == 0)
				{
					if (this.nodeMap[this.a + this.level_width - 1] == 1)
					{
					}
					if (this.nodeMap[this.a - this.level_width - 1] == 0)
					{
					}
					if (this.nodeMap[this.a - this.level_width] == 0)
					{
					}
					if (this.nodeMap[(this.a - 1)] == 0)
					{
					}
					if (this.nodeMap[this.a + this.level_width] == 0)
					{
						this.nodeMap[(this.a - 1)] = 3;
						this.b = 0;
						while (this.b < 6)
						{
							
							if (this.nodeMap[this.a + this.level_width * (this.b + 2)] == 1)
							{
							}
							if (this.nodeMap[this.a + this.level_width * (this.b + 1)] == 0)
							{
								this.nodeMap[this.a + this.level_width * (this.b + 1)] = 5;
							}
							
							this.b  ++ ;
							
						}
					}
					else
					{
						if (this.nodeMap[this.a + this.level_width + 1] == 1)
						{
						}
						if (this.nodeMap[this.a - this.level_width + 1] == 0)
						{
						}
						if (this.nodeMap[this.a - this.level_width] == 0)
						{
						}
						if (this.nodeMap[(this.a + 1)] == 0)
						{
						}
						if (this.nodeMap[this.a + this.level_width] == 0)
						{
							this.nodeMap[(this.a + 1)] = 4;
							this.b = 0;
							while (this.b < 6)
							{
								
								if (this.nodeMap[this.a + this.level_width * (this.b + 2)] == 1)
								{
								}
								if (this.nodeMap[this.a + this.level_width * (this.b + 1)] == 0)
								{
									this.nodeMap[this.a + this.level_width * (this.b + 1)] = 5;
								}
								
								this.b  ++ ;
								
							}
						}
						else
						{
							if (this.nodeMap[(this.a - 1)] == 1)
							{
							}
							if (this.nodeMap[this.a + this.level_width - 1] == 1)
							{
							}
							if (this.nodeMap[this.a + this.level_width] == 1)
							{
							}
							else
							{
								if (this.nodeMap[(this.a + 1)] == 1)
								{
								}
								if (this.nodeMap[this.a + this.level_width + 1] == 1)
								{
								}
								if (this.nodeMap[this.a + this.level_width] == 1)
								{
								}
							}
						}
					}
				}
				
				this.a  ++ ;
				
			}
			this.tempMc = new alphabet_mc_lg();
			this.alphabet_bm_lg = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.alphabet_bm_lg.draw(this.tempMc);
			this.tempMc = new alphabet_sm();
			this.alphabet_bm_sm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.tempMc.gotoAndStop(1);
			this.alphabet_bm_sm.draw(this.tempMc);
			this.tempMc = new health_meter_mc();
			this.health_meter = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 50;
				this.trans.ty = 0;
				this.health_meter.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new health_meter_back_mc();
			this.health_meter_back = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.health_meter_back.draw(this.tempMc);
			this.tempMc = new health_meter_shine_mc();
			this.health_meter_top = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.health_meter_top.draw(this.tempMc);
			this.tempMc = new ammo_meter_mc();
			this.ammo_meter = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 50;
				this.trans.ty = 0;
				this.ammo_meter.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new ammo_meter_back_mc();
			this.ammo_meter_back = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.ammo_meter_back.draw(this.tempMc);
			this.tempMc = new ammo_meter_top_mc();
			this.ammo_meter_top = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.ammo_meter_top.draw(this.tempMc);
			this.tempMc = new combo_meter_mc();
			this.combo_meter = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 175;
				this.trans.ty = 0;
				this.combo_meter.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new combo_meter_back_mc();
			this.combo_meter_back = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.combo_meter_back.draw(this.tempMc);
			this.tempMc = new combo_meter_top_mc();
			this.combo_meter_top = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.combo_meter_top.draw(this.tempMc);
			this.keyHeadsUp = new BitmapData(1, 1, true, 0);
			this.keyHeadsUpFun();
			this.tempMc = new hud_back_mc();
			this.hud_back = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.hud_back.draw(this.tempMc);
			this.tempMc = new cursor_mc();
			this.cursor = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 35;
				this.trans.ty = 0;
				this.cursor.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			switch(this.tileSet)
			{
				case 1:
				{
					this.tempMc = new door_tileset1();
					break;
				}
				case 2:
				{
					this.tempMc = new door_tileset1();
					break;
				}
				case 3:
				{
					this.tempMc = new door_tileset3();
					break;
				}
				case 4:
				{
					this.tempMc = new door_tileset3();
					break;
				}
				case 5:
				{
					this.tempMc = new door_tileset5();
					break;
				}
				case 6:
				{
					this.tempMc = new door_tileset6();
					break;
				}
				case 7:
				{
					this.tempMc = new door_tileset1();
					break;
				}
				case 8:
				{
					this.tempMc = new door_tileset1();
					break;
				}
				case 9:
				{
					this.tempMc = new door_tileset1();
					break;
				}
				default:
				{
					break;
				}
			}
			this.door_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.door_bm.draw(this.tempMc);
			this.tempMc = new door_keycard_mc();
			this.door_keycard_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.door_keycard_bm.draw(this.tempMc);
			this.tempMc = new health_mc();
			this.health_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.health_bm.draw(this.tempMc);
			this.tempMc = new time_mc();
			this.time_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.time_bm.draw(this.tempMc);
			switch(this.tileSet)
			{
				case 1:
				{
					this.tempMc = new door_lock_tileset1();
					break;
				}
				case 2:
				{
					this.tempMc = new door_lock_tileset1();
					break;
				}
				case 3:
				{
					this.tempMc = new door_lock_tileset3();
					break;
				}
				case 4:
				{
					this.tempMc = new door_lock_tileset3();
					break;
				}
				case 5:
				{
					this.tempMc = new door_lock_tileset5();
					break;
				}
				case 6:
				{
					this.tempMc = new door_lock_tileset6();
					break;
				}
				case 7:
				{
					this.tempMc = new door_lock_tileset1();
					break;
				}
				case 8:
				{
					this.tempMc = new door_lock_tileset1();
					break;
				}
				case 9:
				{
					this.tempMc = new door_lock_tileset1();
					break;
				}
				default:
				{
					break;
				}
			}
			this.door_lock_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 50;
				this.trans.ty = 0;
				this.door_lock_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new collectable_gunPiece();
			this.collectable_gunPiece_bm = new BitmapData(this.tempMc.width * 4, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 75;
				this.trans.ty = 0;
				this.collectable_gunPiece_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new disc_mc();
			this.disc_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.tempMc.g.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 60;
				this.trans.ty = 0;
				this.disc_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new briefcase_mc();
			this.briefcase_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.briefcase_bm.draw(this.tempMc);
			this.tempMc = new collectStar_yellow_mc();
			this.collectStar_yellow_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 8;
				this.trans.ty = 0;
				this.collectStar_yellow_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new collectStar_red_mc();
			this.collectStar_red_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 8;
				this.trans.ty = 0;
				this.collectStar_red_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new collectStar_blue_mc();
			this.collectStar_blue_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 8;
				this.trans.ty = 0;
				this.collectStar_blue_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new collectStar_white_mc();
			this.collectStar_white_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 8;
				this.trans.ty = 0;
				this.collectStar_white_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.bloodSplatter0 = new Sprite();
			this.bloodSplatter1 = new Sprite();
			this.bloodSplatter2 = new Sprite();
			this.bloodSplatter3 = new Sprite();
			this.bloodSplatter4 = new Sprite();
			this.bloodSplatter5 = new Sprite();
			this.bloodSplatter6 = new Sprite();
			this.bloodSplatter7 = new Sprite();
			this.bloodSplatter8 = new Sprite();
			this.tempMc = new blood_mc();
			this.blood_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.bloodColorFilter = new AdjustColor();
			this.bloodColorFilter.brightness = 0;
			this.bloodColorFilter.contrast = 0;
			this.bloodColorFilter.saturation = 20;
			this.bloodColorFilter.hue = 0;
			this.bloodHueList = [-180, -130, -80, 30, 130, -50, 160, 60];
			this.a = 0;
			while (this.a < 8)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				if (this.levelToLoad != 4)
				{
				}
				if (this.levelToLoad == 12)
				{
					this.tempMc.filters = [new ColorMatrixFilter(this.bloodColorFilter.CalculateFinalFlatArray())];
					this.bloodColorFilter.hue = this.bloodHueList[this.a];
				}
				this.blood_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
				this.trans = new Matrix();
				this.trans.tx = 0;
				this.trans.ty = 0;
				this.blood_bm.draw(this.tempMc, this.trans);
				this.trans.tx = (-this.tempMc.width) * 0.5;
				this.trans.ty = (-this.tempMc.height) * 0.5;
				this["bloodSplatter" + this.a].graphics.clear();
				this["bloodSplatter" + this.a].graphics.beginBitmapFill(this.blood_bm, this.trans, false, false);
				this["bloodSplatter" + this.a].graphics.drawRect(this.trans.tx, this.trans.ty, this.blood_bm.width, this.blood_bm.height);
				
				this.a  ++ ;
				
			}
			this.tempBloodSplatter_bm = new BitmapData(200, 200, true, 16777215);
			this.tempBloodSplatter_erase = new BitmapData(50, 50, true, 16777215);
			this.tempMc = new blood_drop_mc();
			this.blood_drop = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.blood_drop.draw(this.tempMc);
			
			this.charAnim_1_head_x = new Vector.<Number>([]);
			this.charAnim_1_head_y = new Vector.<Number>([]);
			this.charAnim_1_body_x = new Vector.<Number>([]);
			this.charAnim_1_body_y = new Vector.<Number>([]);
			this.charAnim_1_body_r = new Vector.<Number>([]);
			this.charAnim_1_foot1_x = new Vector.<Number>([]);
			this.charAnim_1_foot1_y = new Vector.<Number>([]);
			this.charAnim_1_foot1_r = new Vector.<Number>([]);
			this.charAnim_1_foot2_x = new Vector.<Number>([]);
			this.charAnim_1_foot2_y = new Vector.<Number>([]);
			this.charAnim_1_foot2_r = new Vector.<Number>([]);
			this.charAnim_1_ankle1_x = new Vector.<Number>([]);
			this.charAnim_1_ankle1_y = new Vector.<Number>([]);
			this.charAnim_1_ankle1_r = new Vector.<Number>([]);
			this.charAnim_1_ankle2_x = new Vector.<Number>([]);
			this.charAnim_1_ankle2_y = new Vector.<Number>([]);
			this.charAnim_1_ankle2_r = new Vector.<Number>([]);
			this.charAnim_2_head_x = new Vector.<Number>([]);
			this.charAnim_2_head_y = new Vector.<Number>([]);
			this.charAnim_2_body_x = new Vector.<Number>([]);
			this.charAnim_2_body_y = new Vector.<Number>([]);
			this.charAnim_2_body_r = new Vector.<Number>([]);
			this.charAnim_2_foot1_x = new Vector.<Number>([]);
			this.charAnim_2_foot1_y = new Vector.<Number>([]);
			this.charAnim_2_foot1_r = new Vector.<Number>([]);
			this.charAnim_2_foot2_x = new Vector.<Number>([]);
			this.charAnim_2_foot2_y = new Vector.<Number>([]);
			this.charAnim_2_foot2_r = new Vector.<Number>([]);
			this.charAnim_2_ankle1_x = new Vector.<Number>([]);
			this.charAnim_2_ankle1_y = new Vector.<Number>([]);
			this.charAnim_2_ankle1_r = new Vector.<Number>([]);
			this.charAnim_2_ankle2_x = new Vector.<Number>([]);
			this.charAnim_2_ankle2_y = new Vector.<Number>([]);
			this.charAnim_2_ankle2_r = new Vector.<Number>([]);
			this.charAnim_3_head_x = new Vector.<Number>([]);
			this.charAnim_3_head_y = new Vector.<Number>([]);
			this.charAnim_3_body_x = new Vector.<Number>([]);
			this.charAnim_3_body_y = new Vector.<Number>([]);
			this.charAnim_3_body_r = new Vector.<Number>([]);
			this.charAnim_3_foot1_x = new Vector.<Number>([]);
			this.charAnim_3_foot1_y = new Vector.<Number>([]);
			this.charAnim_3_foot1_r = new Vector.<Number>([]);
			this.charAnim_3_foot2_x = new Vector.<Number>([]);
			this.charAnim_3_foot2_y = new Vector.<Number>([]);
			this.charAnim_3_foot2_r = new Vector.<Number>([]);
			this.charAnim_3_ankle1_x = new Vector.<Number>([]);
			this.charAnim_3_ankle1_y = new Vector.<Number>([]);
			this.charAnim_3_ankle1_r = new Vector.<Number>([]);
			this.charAnim_3_ankle2_x = new Vector.<Number>([]);
			this.charAnim_3_ankle2_y = new Vector.<Number>([]);
			this.charAnim_3_ankle2_r = new Vector.<Number>([]);
			this.charAnim_4_head_x = new Vector.<Number>([]);
			this.charAnim_4_head_y = new Vector.<Number>([]);
			this.charAnim_4_body_x = new Vector.<Number>([]);
			this.charAnim_4_body_y = new Vector.<Number>([]);
			this.charAnim_4_body_r = new Vector.<Number>([]);
			this.charAnim_4_foot1_x = new Vector.<Number>([]);
			this.charAnim_4_foot1_y = new Vector.<Number>([]);
			this.charAnim_4_foot1_r = new Vector.<Number>([]);
			this.charAnim_4_foot2_x = new Vector.<Number>([]);
			this.charAnim_4_foot2_y = new Vector.<Number>([]);
			this.charAnim_4_foot2_r = new Vector.<Number>([]);
			this.charAnim_4_ankle1_x = new Vector.<Number>([]);
			this.charAnim_4_ankle1_y = new Vector.<Number>([]);
			this.charAnim_4_ankle1_r = new Vector.<Number>([]);
			this.charAnim_4_ankle2_x = new Vector.<Number>([]);
			this.charAnim_4_ankle2_y = new Vector.<Number>([]);
			this.charAnim_4_ankle2_r = new Vector.<Number>([]);
			this.charAnim_5_head_x = new Vector.<Number>([]);
			this.charAnim_5_head_y = new Vector.<Number>([]);
			this.charAnim_5_body_x = new Vector.<Number>([]);
			this.charAnim_5_body_y = new Vector.<Number>([]);
			this.charAnim_5_body_r = new Vector.<Number>([]);
			this.charAnim_5_foot1_x = new Vector.<Number>([]);
			this.charAnim_5_foot1_y = new Vector.<Number>([]);
			this.charAnim_5_foot1_r = new Vector.<Number>([]);
			this.charAnim_5_foot2_x = new Vector.<Number>([]);
			this.charAnim_5_foot2_y = new Vector.<Number>([]);
			this.charAnim_5_foot2_r = new Vector.<Number>([]);
			this.charAnim_5_ankle1_x = new Vector.<Number>([]);
			this.charAnim_5_ankle1_y = new Vector.<Number>([]);
			this.charAnim_5_ankle1_r = new Vector.<Number>([]);
			this.charAnim_5_ankle2_x = new Vector.<Number>([]);
			this.charAnim_5_ankle2_y = new Vector.<Number>([]);
			this.charAnim_5_ankle2_r = new Vector.<Number>([]);
			this.charAnim_6_head_x = new Vector.<Number>([]);
			this.charAnim_6_head_y = new Vector.<Number>([]);
			this.charAnim_6_body_x = new Vector.<Number>([]);
			this.charAnim_6_body_y = new Vector.<Number>([]);
			this.charAnim_6_body_r = new Vector.<Number>([]);
			this.charAnim_6_foot1_x = new Vector.<Number>([]);
			this.charAnim_6_foot1_y = new Vector.<Number>([]);
			this.charAnim_6_foot1_r = new Vector.<Number>([]);
			this.charAnim_6_foot2_x = new Vector.<Number>([]);
			this.charAnim_6_foot2_y = new Vector.<Number>([]);
			this.charAnim_6_foot2_r = new Vector.<Number>([]);
			this.charAnim_6_ankle1_x = new Vector.<Number>([]);
			this.charAnim_6_ankle1_y = new Vector.<Number>([]);
			this.charAnim_6_ankle1_r = new Vector.<Number>([]);
			this.charAnim_6_ankle2_x = new Vector.<Number>([]);
			this.charAnim_6_ankle2_y = new Vector.<Number>([]);
			this.charAnim_6_ankle2_r = new Vector.<Number>([]);
			this.charAnim_7_head_x = new Vector.<Number>([]);
			this.charAnim_7_head_y = new Vector.<Number>([]);
			this.charAnim_7_body_x = new Vector.<Number>([]);
			this.charAnim_7_body_y = new Vector.<Number>([]);
			this.charAnim_7_body_r = new Vector.<Number>([]);
			this.charAnim_7_foot1_x = new Vector.<Number>([]);
			this.charAnim_7_foot1_y = new Vector.<Number>([]);
			this.charAnim_7_foot1_r = new Vector.<Number>([]);
			this.charAnim_7_foot2_x = new Vector.<Number>([]);
			this.charAnim_7_foot2_y = new Vector.<Number>([]);
			this.charAnim_7_foot2_r = new Vector.<Number>([]);
			this.charAnim_7_ankle1_x = new Vector.<Number>([]);
			this.charAnim_7_ankle1_y = new Vector.<Number>([]);
			this.charAnim_7_ankle1_r = new Vector.<Number>([]);
			this.charAnim_7_ankle2_x = new Vector.<Number>([]);
			this.charAnim_7_ankle2_y = new Vector.<Number>([]);
			this.charAnim_7_ankle2_r = new Vector.<Number>([]);
			this.charAnim_8_head_x = new Vector.<Number>([]);
			this.charAnim_8_head_y = new Vector.<Number>([]);
			this.charAnim_8_body_x = new Vector.<Number>([]);
			this.charAnim_8_body_y = new Vector.<Number>([]);
			this.charAnim_8_body_r = new Vector.<Number>([]);
			this.charAnim_8_foot1_x = new Vector.<Number>([]);
			this.charAnim_8_foot1_y = new Vector.<Number>([]);
			this.charAnim_8_foot1_r = new Vector.<Number>([]);
			this.charAnim_8_foot2_x = new Vector.<Number>([]);
			this.charAnim_8_foot2_y = new Vector.<Number>([]);
			this.charAnim_8_foot2_r = new Vector.<Number>([]);
			this.charAnim_8_ankle1_x = new Vector.<Number>([]);
			this.charAnim_8_ankle1_y = new Vector.<Number>([]);
			this.charAnim_8_ankle1_r = new Vector.<Number>([]);
			this.charAnim_8_ankle2_x = new Vector.<Number>([]);
			this.charAnim_8_ankle2_y = new Vector.<Number>([]);
			this.charAnim_8_ankle2_r = new Vector.<Number>([]);
			this.charAnim_9_head_x = new Vector.<Number>([]);
			this.charAnim_9_head_y = new Vector.<Number>([]);
			this.charAnim_9_body_x = new Vector.<Number>([]);
			this.charAnim_9_body_y = new Vector.<Number>([]);
			this.charAnim_9_body_r = new Vector.<Number>([]);
			this.charAnim_9_foot1_x = new Vector.<Number>([]);
			this.charAnim_9_foot1_y = new Vector.<Number>([]);
			this.charAnim_9_foot1_r = new Vector.<Number>([]);
			this.charAnim_9_foot2_x = new Vector.<Number>([]);
			this.charAnim_9_foot2_y = new Vector.<Number>([]);
			this.charAnim_9_foot2_r = new Vector.<Number>([]);
			this.charAnim_9_ankle1_x = new Vector.<Number>([]);
			this.charAnim_9_ankle1_y = new Vector.<Number>([]);
			this.charAnim_9_ankle1_r = new Vector.<Number>([]);
			this.charAnim_9_ankle2_x = new Vector.<Number>([]);
			this.charAnim_9_ankle2_y = new Vector.<Number>([]);
			this.charAnim_9_ankle2_r = new Vector.<Number>([]);
			this.charAnim_10_head_x = new Vector.<Number>([]);
			this.charAnim_10_head_y = new Vector.<Number>([]);
			this.charAnim_10_body_x = new Vector.<Number>([]);
			this.charAnim_10_body_y = new Vector.<Number>([]);
			this.charAnim_10_body_r = new Vector.<Number>([]);
			this.charAnim_10_foot1_x = new Vector.<Number>([]);
			this.charAnim_10_foot1_y = new Vector.<Number>([]);
			this.charAnim_10_foot1_r = new Vector.<Number>([]);
			this.charAnim_10_foot2_x = new Vector.<Number>([]);
			this.charAnim_10_foot2_y = new Vector.<Number>([]);
			this.charAnim_10_foot2_r = new Vector.<Number>([]);
			this.charAnim_10_ankle1_x = new Vector.<Number>([]);
			this.charAnim_10_ankle1_y = new Vector.<Number>([]);
			this.charAnim_10_ankle1_r = new Vector.<Number>([]);
			this.charAnim_10_ankle2_x = new Vector.<Number>([]);
			this.charAnim_10_ankle2_y = new Vector.<Number>([]);
			this.charAnim_10_ankle2_r = new Vector.<Number>([]);
			this.charAnim_11_head_x = new Vector.<Number>([]);
			this.charAnim_11_head_y = new Vector.<Number>([]);
			this.charAnim_11_head_r = new Vector.<Number>([]);
			this.charAnim_11_body_x = new Vector.<Number>([]);
			this.charAnim_11_body_y = new Vector.<Number>([]);
			this.charAnim_11_body_r = new Vector.<Number>([]);
			this.charAnim_11_foot1_x = new Vector.<Number>([]);
			this.charAnim_11_foot1_y = new Vector.<Number>([]);
			this.charAnim_11_foot1_r = new Vector.<Number>([]);
			this.charAnim_11_foot2_x = new Vector.<Number>([]);
			this.charAnim_11_foot2_y = new Vector.<Number>([]);
			this.charAnim_11_foot2_r = new Vector.<Number>([]);
			this.charAnim_11_ankle1_x = new Vector.<Number>([]);
			this.charAnim_11_ankle1_y = new Vector.<Number>([]);
			this.charAnim_11_ankle1_r = new Vector.<Number>([]);
			this.charAnim_11_ankle2_x = new Vector.<Number>([]);
			this.charAnim_11_ankle2_y = new Vector.<Number>([]);
			this.charAnim_11_ankle2_r = new Vector.<Number>([]);
			this.charAnim_12_head_x = new Vector.<Number>([]);
			this.charAnim_12_head_y = new Vector.<Number>([]);
			this.charAnim_12_head_r = new Vector.<Number>([]);
			this.charAnim_12_body_x = new Vector.<Number>([]);
			this.charAnim_12_body_y = new Vector.<Number>([]);
			this.charAnim_12_body_r = new Vector.<Number>([]);
			this.charAnim_12_foot1_x = new Vector.<Number>([]);
			this.charAnim_12_foot1_y = new Vector.<Number>([]);
			this.charAnim_12_foot1_r = new Vector.<Number>([]);
			this.charAnim_12_foot2_x = new Vector.<Number>([]);
			this.charAnim_12_foot2_y = new Vector.<Number>([]);
			this.charAnim_12_foot2_r = new Vector.<Number>([]);
			this.charAnim_12_ankle1_x = new Vector.<Number>([]);
			this.charAnim_12_ankle1_y = new Vector.<Number>([]);
			this.charAnim_12_ankle1_r = new Vector.<Number>([]);
			this.charAnim_12_ankle2_x = new Vector.<Number>([]);
			this.charAnim_12_ankle2_y = new Vector.<Number>([]);
			this.charAnim_12_ankle2_r = new Vector.<Number>([]);
			this.charAnim_13_head_x = new Vector.<Number>([]);
			this.charAnim_13_head_y = new Vector.<Number>([]);
			this.charAnim_13_head_r = new Vector.<Number>([]);
			this.charAnim_13_body_x = new Vector.<Number>([]);
			this.charAnim_13_body_y = new Vector.<Number>([]);
			this.charAnim_13_body_r = new Vector.<Number>([]);
			this.charAnim_13_foot1_x = new Vector.<Number>([]);
			this.charAnim_13_foot1_y = new Vector.<Number>([]);
			this.charAnim_13_foot1_r = new Vector.<Number>([]);
			this.charAnim_13_foot2_x = new Vector.<Number>([]);
			this.charAnim_13_foot2_y = new Vector.<Number>([]);
			this.charAnim_13_foot2_r = new Vector.<Number>([]);
			this.charAnim_13_ankle1_x = new Vector.<Number>([]);
			this.charAnim_13_ankle1_y = new Vector.<Number>([]);
			this.charAnim_13_ankle1_r = new Vector.<Number>([]);
			this.charAnim_13_ankle2_x = new Vector.<Number>([]);
			this.charAnim_13_ankle2_y = new Vector.<Number>([]);
			this.charAnim_13_ankle2_r = new Vector.<Number>([]);
			this.charAnim_14_head_x = new Vector.<Number>([]);
			this.charAnim_14_head_y = new Vector.<Number>([]);
			this.charAnim_14_head_r = new Vector.<Number>([]);
			this.charAnim_14_body_x = new Vector.<Number>([]);
			this.charAnim_14_body_y = new Vector.<Number>([]);
			this.charAnim_14_body_r = new Vector.<Number>([]);
			this.charAnim_14_foot1_x = new Vector.<Number>([]);
			this.charAnim_14_foot1_y = new Vector.<Number>([]);
			this.charAnim_14_foot1_r = new Vector.<Number>([]);
			this.charAnim_14_foot2_x = new Vector.<Number>([]);
			this.charAnim_14_foot2_y = new Vector.<Number>([]);
			this.charAnim_14_foot2_r = new Vector.<Number>([]);
			this.charAnim_14_ankle1_x = new Vector.<Number>([]);
			this.charAnim_14_ankle1_y = new Vector.<Number>([]);
			this.charAnim_14_ankle1_r = new Vector.<Number>([]);
			this.charAnim_14_ankle2_x = new Vector.<Number>([]);
			this.charAnim_14_ankle2_y = new Vector.<Number>([]);
			this.charAnim_14_ankle2_r = new Vector.<Number>([]);
			this.charAnim_15_head_x = new Vector.<Number>([]);
			this.charAnim_15_head_y = new Vector.<Number>([]);
			this.charAnim_15_head_r = new Vector.<Number>([]);
			this.charAnim_15_body_x = new Vector.<Number>([]);
			this.charAnim_15_body_y = new Vector.<Number>([]);
			this.charAnim_15_body_r = new Vector.<Number>([]);
			this.charAnim_15_foot1_x = new Vector.<Number>([]);
			this.charAnim_15_foot1_y = new Vector.<Number>([]);
			this.charAnim_15_foot1_r = new Vector.<Number>([]);
			this.charAnim_15_foot2_x = new Vector.<Number>([]);
			this.charAnim_15_foot2_y = new Vector.<Number>([]);
			this.charAnim_15_foot2_r = new Vector.<Number>([]);
			this.charAnim_15_ankle1_x = new Vector.<Number>([]);
			this.charAnim_15_ankle1_y = new Vector.<Number>([]);
			this.charAnim_15_ankle1_r = new Vector.<Number>([]);
			this.charAnim_15_ankle2_x = new Vector.<Number>([]);
			this.charAnim_15_ankle2_y = new Vector.<Number>([]);
			this.charAnim_15_ankle2_r = new Vector.<Number>([]);
			this.charAnim_16_head_x = new Vector.<Number>([]);
			this.charAnim_16_head_y = new Vector.<Number>([]);
			this.charAnim_16_head_r = new Vector.<Number>([]);
			this.charAnim_16_body_x = new Vector.<Number>([]);
			this.charAnim_16_body_y = new Vector.<Number>([]);
			this.charAnim_16_body_r = new Vector.<Number>([]);
			this.charAnim_16_foot1_x = new Vector.<Number>([]);
			this.charAnim_16_foot1_y = new Vector.<Number>([]);
			this.charAnim_16_foot1_r = new Vector.<Number>([]);
			this.charAnim_16_foot2_x = new Vector.<Number>([]);
			this.charAnim_16_foot2_y = new Vector.<Number>([]);
			this.charAnim_16_foot2_r = new Vector.<Number>([]);
			this.charAnim_16_ankle1_x = new Vector.<Number>([]);
			this.charAnim_16_ankle1_y = new Vector.<Number>([]);
			this.charAnim_16_ankle1_r = new Vector.<Number>([]);
			this.charAnim_16_ankle2_x = new Vector.<Number>([]);
			this.charAnim_16_ankle2_y = new Vector.<Number>([]);
			this.charAnim_16_ankle2_r = new Vector.<Number>([]);
			this.charAnim_17_head_x = new Vector.<Number>([]);
			this.charAnim_17_head_y = new Vector.<Number>([]);
			this.charAnim_17_head_r = new Vector.<Number>([]);
			this.charAnim_17_body_x = new Vector.<Number>([]);
			this.charAnim_17_body_y = new Vector.<Number>([]);
			this.charAnim_17_body_r = new Vector.<Number>([]);
			this.charAnim_17_foot1_x = new Vector.<Number>([]);
			this.charAnim_17_foot1_y = new Vector.<Number>([]);
			this.charAnim_17_foot1_r = new Vector.<Number>([]);
			this.charAnim_17_foot2_x = new Vector.<Number>([]);
			this.charAnim_17_foot2_y = new Vector.<Number>([]);
			this.charAnim_17_foot2_r = new Vector.<Number>([]);
			this.charAnim_17_ankle1_x = new Vector.<Number>([]);
			this.charAnim_17_ankle1_y = new Vector.<Number>([]);
			this.charAnim_17_ankle1_r = new Vector.<Number>([]);
			this.charAnim_17_ankle2_x = new Vector.<Number>([]);
			this.charAnim_17_ankle2_y = new Vector.<Number>([]);
			this.charAnim_17_ankle2_r = new Vector.<Number>([]);
			this.charAnim_18_head_x = new Vector.<Number>([]);
			this.charAnim_18_head_y = new Vector.<Number>([]);
			this.charAnim_18_head_r = new Vector.<Number>([]);
			this.charAnim_18_body_x = new Vector.<Number>([]);
			this.charAnim_18_body_y = new Vector.<Number>([]);
			this.charAnim_18_body_r = new Vector.<Number>([]);
			this.charAnim_18_foot1_x = new Vector.<Number>([]);
			this.charAnim_18_foot1_y = new Vector.<Number>([]);
			this.charAnim_18_foot1_r = new Vector.<Number>([]);
			this.charAnim_18_foot2_x = new Vector.<Number>([]);
			this.charAnim_18_foot2_y = new Vector.<Number>([]);
			this.charAnim_18_foot2_r = new Vector.<Number>([]);
			this.charAnim_18_ankle1_x = new Vector.<Number>([]);
			this.charAnim_18_ankle1_y = new Vector.<Number>([]);
			this.charAnim_18_ankle1_r = new Vector.<Number>([]);
			this.charAnim_18_ankle2_x = new Vector.<Number>([]);
			this.charAnim_18_ankle2_y = new Vector.<Number>([]);
			this.charAnim_18_ankle2_r = new Vector.<Number>([]);
			this.charAnim_19_head_x = new Vector.<Number>([]);
			this.charAnim_19_head_y = new Vector.<Number>([]);
			this.charAnim_19_head_r = new Vector.<Number>([]);
			this.charAnim_19_body_x = new Vector.<Number>([]);
			this.charAnim_19_body_y = new Vector.<Number>([]);
			this.charAnim_19_body_r = new Vector.<Number>([]);
			this.charAnim_19_foot1_x = new Vector.<Number>([]);
			this.charAnim_19_foot1_y = new Vector.<Number>([]);
			this.charAnim_19_foot1_r = new Vector.<Number>([]);
			this.charAnim_19_foot2_x = new Vector.<Number>([]);
			this.charAnim_19_foot2_y = new Vector.<Number>([]);
			this.charAnim_19_foot2_r = new Vector.<Number>([]);
			this.charAnim_19_ankle1_x = new Vector.<Number>([]);
			this.charAnim_19_ankle1_y = new Vector.<Number>([]);
			this.charAnim_19_ankle1_r = new Vector.<Number>([]);
			this.charAnim_19_ankle2_x = new Vector.<Number>([]);
			this.charAnim_19_ankle2_y = new Vector.<Number>([]);
			this.charAnim_19_ankle2_r = new Vector.<Number>([]);
			this.charAnim_20_head_x = new Vector.<Number>([]);
			this.charAnim_20_head_y = new Vector.<Number>([]);
			this.charAnim_20_head_r = new Vector.<Number>([]);
			this.charAnim_20_body_x = new Vector.<Number>([]);
			this.charAnim_20_body_y = new Vector.<Number>([]);
			this.charAnim_20_body_r = new Vector.<Number>([]);
			this.charAnim_20_foot1_x = new Vector.<Number>([]);
			this.charAnim_20_foot1_y = new Vector.<Number>([]);
			this.charAnim_20_foot1_r = new Vector.<Number>([]);
			this.charAnim_20_foot2_x = new Vector.<Number>([]);
			this.charAnim_20_foot2_y = new Vector.<Number>([]);
			this.charAnim_20_foot2_r = new Vector.<Number>([]);
			this.charAnim_20_ankle1_x = new Vector.<Number>([]);
			this.charAnim_20_ankle1_y = new Vector.<Number>([]);
			this.charAnim_20_ankle1_r = new Vector.<Number>([]);
			this.charAnim_20_ankle2_x = new Vector.<Number>([]);
			this.charAnim_20_ankle2_y = new Vector.<Number>([]);
			this.charAnim_20_ankle2_r = new Vector.<Number>([]);
			this.charAnim_21_head_x = new Vector.<Number>([]);
			this.charAnim_21_head_y = new Vector.<Number>([]);
			this.charAnim_21_head_r = new Vector.<Number>([]);
			this.charAnim_21_body_x = new Vector.<Number>([]);
			this.charAnim_21_body_y = new Vector.<Number>([]);
			this.charAnim_21_body_r = new Vector.<Number>([]);
			this.charAnim_21_foot1_x = new Vector.<Number>([]);
			this.charAnim_21_foot1_y = new Vector.<Number>([]);
			this.charAnim_21_foot1_r = new Vector.<Number>([]);
			this.charAnim_21_foot2_x = new Vector.<Number>([]);
			this.charAnim_21_foot2_y = new Vector.<Number>([]);
			this.charAnim_21_foot2_r = new Vector.<Number>([]);
			this.charAnim_21_ankle1_x = new Vector.<Number>([]);
			this.charAnim_21_ankle1_y = new Vector.<Number>([]);
			this.charAnim_21_ankle1_r = new Vector.<Number>([]);
			this.charAnim_21_ankle2_x = new Vector.<Number>([]);
			this.charAnim_21_ankle2_y = new Vector.<Number>([]);
			this.charAnim_21_ankle2_r = new Vector.<Number>([]);
			this.charAnim_22_head_x = new Vector.<Number>([]);
			this.charAnim_22_head_y = new Vector.<Number>([]);
			this.charAnim_22_head_r = new Vector.<Number>([]);
			this.charAnim_22_body_x = new Vector.<Number>([]);
			this.charAnim_22_body_y = new Vector.<Number>([]);
			this.charAnim_22_body_r = new Vector.<Number>([]);
			this.charAnim_22_foot1_x = new Vector.<Number>([]);
			this.charAnim_22_foot1_y = new Vector.<Number>([]);
			this.charAnim_22_foot1_r = new Vector.<Number>([]);
			this.charAnim_22_foot2_x = new Vector.<Number>([]);
			this.charAnim_22_foot2_y = new Vector.<Number>([]);
			this.charAnim_22_foot2_r = new Vector.<Number>([]);
			this.charAnim_22_ankle1_x = new Vector.<Number>([]);
			this.charAnim_22_ankle1_y = new Vector.<Number>([]);
			this.charAnim_22_ankle1_r = new Vector.<Number>([]);
			this.charAnim_22_ankle2_x = new Vector.<Number>([]);
			this.charAnim_22_ankle2_y = new Vector.<Number>([]);
			this.charAnim_22_ankle2_r = new Vector.<Number>([]);
			this.charAnim_23_head_x = new Vector.<Number>([]);
			this.charAnim_23_head_y = new Vector.<Number>([]);
			this.charAnim_23_head_r = new Vector.<Number>([]);
			this.charAnim_23_body_x = new Vector.<Number>([]);
			this.charAnim_23_body_y = new Vector.<Number>([]);
			this.charAnim_23_body_r = new Vector.<Number>([]);
			this.charAnim_23_foot1_x = new Vector.<Number>([]);
			this.charAnim_23_foot1_y = new Vector.<Number>([]);
			this.charAnim_23_foot1_r = new Vector.<Number>([]);
			this.charAnim_23_foot2_x = new Vector.<Number>([]);
			this.charAnim_23_foot2_y = new Vector.<Number>([]);
			this.charAnim_23_foot2_r = new Vector.<Number>([]);
			this.charAnim_23_ankle1_x = new Vector.<Number>([]);
			this.charAnim_23_ankle1_y = new Vector.<Number>([]);
			this.charAnim_23_ankle1_r = new Vector.<Number>([]);
			this.charAnim_23_ankle2_x = new Vector.<Number>([]);
			this.charAnim_23_ankle2_y = new Vector.<Number>([]);
			this.charAnim_23_ankle2_r = new Vector.<Number>([]);
			this.charAnim_24_head_x = new Vector.<Number>([]);
			this.charAnim_24_head_y = new Vector.<Number>([]);
			this.charAnim_24_head_r = new Vector.<Number>([]);
			this.charAnim_24_body_x = new Vector.<Number>([]);
			this.charAnim_24_body_y = new Vector.<Number>([]);
			this.charAnim_24_body_r = new Vector.<Number>([]);
			this.charAnim_24_foot1_x = new Vector.<Number>([]);
			this.charAnim_24_foot1_y = new Vector.<Number>([]);
			this.charAnim_24_foot1_r = new Vector.<Number>([]);
			this.charAnim_24_foot2_x = new Vector.<Number>([]);
			this.charAnim_24_foot2_y = new Vector.<Number>([]);
			this.charAnim_24_foot2_r = new Vector.<Number>([]);
			this.charAnim_24_ankle1_x = new Vector.<Number>([]);
			this.charAnim_24_ankle1_y = new Vector.<Number>([]);
			this.charAnim_24_ankle1_r = new Vector.<Number>([]);
			this.charAnim_24_ankle2_x = new Vector.<Number>([]);
			this.charAnim_24_ankle2_y = new Vector.<Number>([]);
			this.charAnim_24_ankle2_r = new Vector.<Number>([]);
			this.charAnim_24_hand1_x = new Vector.<Number>([]);
			this.charAnim_24_hand1_y = new Vector.<Number>([]);
			this.charAnim_24_hand1_r = new Vector.<Number>([]);
			this.charAnim_24_hand2_x = new Vector.<Number>([]);
			this.charAnim_24_hand2_y = new Vector.<Number>([]);
			this.charAnim_24_hand2_r = new Vector.<Number>([]);
			this.charAnim_25_head_x = new Vector.<Number>([]);
			this.charAnim_25_head_y = new Vector.<Number>([]);
			this.charAnim_25_head_r = new Vector.<Number>([]);
			this.charAnim_25_body_x = new Vector.<Number>([]);
			this.charAnim_25_body_y = new Vector.<Number>([]);
			this.charAnim_25_body_r = new Vector.<Number>([]);
			this.charAnim_25_foot1_x = new Vector.<Number>([]);
			this.charAnim_25_foot1_y = new Vector.<Number>([]);
			this.charAnim_25_foot1_r = new Vector.<Number>([]);
			this.charAnim_25_foot2_x = new Vector.<Number>([]);
			this.charAnim_25_foot2_y = new Vector.<Number>([]);
			this.charAnim_25_foot2_r = new Vector.<Number>([]);
			this.charAnim_25_ankle1_x = new Vector.<Number>([]);
			this.charAnim_25_ankle1_y = new Vector.<Number>([]);
			this.charAnim_25_ankle1_r = new Vector.<Number>([]);
			this.charAnim_25_ankle2_x = new Vector.<Number>([]);
			this.charAnim_25_ankle2_y = new Vector.<Number>([]);
			this.charAnim_25_ankle2_r = new Vector.<Number>([]);
			this.charAnim_25_hand1_x = new Vector.<Number>([]);
			this.charAnim_25_hand1_y = new Vector.<Number>([]);
			this.charAnim_25_hand1_r = new Vector.<Number>([]);
			this.charAnim_25_hand2_x = new Vector.<Number>([]);
			this.charAnim_25_hand2_y = new Vector.<Number>([]);
			this.charAnim_25_hand2_r = new Vector.<Number>([]);
			this.charAnim_26_head_x = new Vector.<Number>([]);
			this.charAnim_26_head_y = new Vector.<Number>([]);
			this.charAnim_26_head_r = new Vector.<Number>([]);
			this.charAnim_26_body_x = new Vector.<Number>([]);
			this.charAnim_26_body_y = new Vector.<Number>([]);
			this.charAnim_26_body_r = new Vector.<Number>([]);
			this.charAnim_26_foot1_x = new Vector.<Number>([]);
			this.charAnim_26_foot1_y = new Vector.<Number>([]);
			this.charAnim_26_foot1_r = new Vector.<Number>([]);
			this.charAnim_26_foot2_x = new Vector.<Number>([]);
			this.charAnim_26_foot2_y = new Vector.<Number>([]);
			this.charAnim_26_foot2_r = new Vector.<Number>([]);
			this.charAnim_26_ankle1_x = new Vector.<Number>([]);
			this.charAnim_26_ankle1_y = new Vector.<Number>([]);
			this.charAnim_26_ankle1_r = new Vector.<Number>([]);
			this.charAnim_26_ankle2_x = new Vector.<Number>([]);
			this.charAnim_26_ankle2_y = new Vector.<Number>([]);
			this.charAnim_26_ankle2_r = new Vector.<Number>([]);
			this.charAnim_26_hand1_x = new Vector.<Number>([]);
			this.charAnim_26_hand1_y = new Vector.<Number>([]);
			this.charAnim_26_hand1_r = new Vector.<Number>([]);
			this.charAnim_26_hand2_x = new Vector.<Number>([]);
			this.charAnim_26_hand2_y = new Vector.<Number>([]);
			this.charAnim_26_hand2_r = new Vector.<Number>([]);
			this.charAnim_27_head_x = new Vector.<Number>([]);
			this.charAnim_27_head_y = new Vector.<Number>([]);
			this.charAnim_27_head_r = new Vector.<Number>([]);
			this.charAnim_27_body_x = new Vector.<Number>([]);
			this.charAnim_27_body_y = new Vector.<Number>([]);
			this.charAnim_27_body_r = new Vector.<Number>([]);
			this.charAnim_27_foot1_x = new Vector.<Number>([]);
			this.charAnim_27_foot1_y = new Vector.<Number>([]);
			this.charAnim_27_foot1_r = new Vector.<Number>([]);
			this.charAnim_27_foot2_x = new Vector.<Number>([]);
			this.charAnim_27_foot2_y = new Vector.<Number>([]);
			this.charAnim_27_foot2_r = new Vector.<Number>([]);
			this.charAnim_27_ankle1_x = new Vector.<Number>([]);
			this.charAnim_27_ankle1_y = new Vector.<Number>([]);
			this.charAnim_27_ankle1_r = new Vector.<Number>([]);
			this.charAnim_27_ankle2_x = new Vector.<Number>([]);
			this.charAnim_27_ankle2_y = new Vector.<Number>([]);
			this.charAnim_27_ankle2_r = new Vector.<Number>([]);
			this.charAnim_27_hand1_x = new Vector.<Number>([]);
			this.charAnim_27_hand1_y = new Vector.<Number>([]);
			this.charAnim_27_hand1_r = new Vector.<Number>([]);
			this.charAnim_27_hand2_x = new Vector.<Number>([]);
			this.charAnim_27_hand2_y = new Vector.<Number>([]);
			this.charAnim_27_hand2_r = new Vector.<Number>([]);
			this.charAnim_28_head_x = new Vector.<Number>([]);
			this.charAnim_28_head_y = new Vector.<Number>([]);
			this.charAnim_28_head_r = new Vector.<Number>([]);
			this.charAnim_28_body_x = new Vector.<Number>([]);
			this.charAnim_28_body_y = new Vector.<Number>([]);
			this.charAnim_28_body_r = new Vector.<Number>([]);
			this.charAnim_28_foot1_x = new Vector.<Number>([]);
			this.charAnim_28_foot1_y = new Vector.<Number>([]);
			this.charAnim_28_foot1_r = new Vector.<Number>([]);
			this.charAnim_28_foot2_x = new Vector.<Number>([]);
			this.charAnim_28_foot2_y = new Vector.<Number>([]);
			this.charAnim_28_foot2_r = new Vector.<Number>([]);
			this.charAnim_28_ankle1_x = new Vector.<Number>([]);
			this.charAnim_28_ankle1_y = new Vector.<Number>([]);
			this.charAnim_28_ankle1_r = new Vector.<Number>([]);
			this.charAnim_28_ankle2_x = new Vector.<Number>([]);
			this.charAnim_28_ankle2_y = new Vector.<Number>([]);
			this.charAnim_28_ankle2_r = new Vector.<Number>([]);
			this.charAnim_28_hand1_x = new Vector.<Number>([]);
			this.charAnim_28_hand1_y = new Vector.<Number>([]);
			this.charAnim_28_hand1_r = new Vector.<Number>([]);
			this.charAnim_28_hand2_x = new Vector.<Number>([]);
			this.charAnim_28_hand2_y = new Vector.<Number>([]);
			this.charAnim_28_hand2_r = new Vector.<Number>([]);
			this.charAnim_29_head_x = new Vector.<Number>([]);
			this.charAnim_29_head_y = new Vector.<Number>([]);
			this.charAnim_29_head_r = new Vector.<Number>([]);
			this.charAnim_29_body_x = new Vector.<Number>([]);
			this.charAnim_29_body_y = new Vector.<Number>([]);
			this.charAnim_29_body_r = new Vector.<Number>([]);
			this.charAnim_29_foot1_x = new Vector.<Number>([]);
			this.charAnim_29_foot1_y = new Vector.<Number>([]);
			this.charAnim_29_foot1_r = new Vector.<Number>([]);
			this.charAnim_29_foot2_x = new Vector.<Number>([]);
			this.charAnim_29_foot2_y = new Vector.<Number>([]);
			this.charAnim_29_foot2_r = new Vector.<Number>([]);
			this.charAnim_29_ankle1_x = new Vector.<Number>([]);
			this.charAnim_29_ankle1_y = new Vector.<Number>([]);
			this.charAnim_29_ankle1_r = new Vector.<Number>([]);
			this.charAnim_29_ankle2_x = new Vector.<Number>([]);
			this.charAnim_29_ankle2_y = new Vector.<Number>([]);
			this.charAnim_29_ankle2_r = new Vector.<Number>([]);
			this.charAnim_29_hand1_x = new Vector.<Number>([]);
			this.charAnim_29_hand1_y = new Vector.<Number>([]);
			this.charAnim_29_hand1_r = new Vector.<Number>([]);
			this.charAnim_29_hand2_x = new Vector.<Number>([]);
			this.charAnim_29_hand2_y = new Vector.<Number>([]);
			this.charAnim_29_hand2_r = new Vector.<Number>([]);
			this.maxFrames = new Array();
			this.charAnim_headRot = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
			this.charAnim_hasHands = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1);
			this.tempMc = new character_animation_container();
			this.maxFrames.push(0);
			this.a = 1;
			while (this.a < (this.tempMc.totalFrames + 1))
			{
				
				this.tempMc.gotoAndStop(this.a);
				this.maxFrames.push((this.tempMc.c.totalFrames - 1));
				this.b = 1;
				while (this.b < (this.tempMc.c.totalFrames + 1))
				{
					
					this.tempMc.c.gotoAndStop(this.b);
					this["charAnim_" + this.a + "_head_x"].push(this.tempMc.c.head.x);
					this["charAnim_" + this.a + "_head_y"].push(this.tempMc.c.head.y);
					if (this.charAnim_headRot[this.a] == 1)
					{
						this["charAnim_" + this.a + "_head_r"].push(int(this.tempMc.c.head.rotation / (180 / Math.PI) * 1000) / 1000);
					}
					this["charAnim_" + this.a + "_body_x"].push(this.tempMc.c.body.x);
					this["charAnim_" + this.a + "_body_y"].push(this.tempMc.c.body.y);
					this["charAnim_" + this.a + "_body_r"].push(int(this.tempMc.c.body.rotation / (180 / Math.PI) * 1000) / 1000);
					this["charAnim_" + this.a + "_foot1_x"].push(this.tempMc.c.foot1.x);
					this["charAnim_" + this.a + "_foot1_y"].push(this.tempMc.c.foot1.y);
					this["charAnim_" + this.a + "_foot1_r"].push(int(this.tempMc.c.foot1.rotation / (180 / Math.PI) * 1000) / 1000);
					this["charAnim_" + this.a + "_foot2_x"].push(this.tempMc.c.foot2.x);
					this["charAnim_" + this.a + "_foot2_y"].push(this.tempMc.c.foot2.y);
					this["charAnim_" + this.a + "_foot2_r"].push(int(this.tempMc.c.foot2.rotation / (180 / Math.PI) * 1000) / 1000);
					this["charAnim_" + this.a + "_ankle1_x"].push(this.tempMc.c.ankle1.x);
					this["charAnim_" + this.a + "_ankle1_y"].push(this.tempMc.c.ankle1.y);
					this["charAnim_" + this.a + "_ankle1_r"].push(int(this.tempMc.c.ankle1.rotation / (180 / Math.PI) * 1000) / 1000);
					this["charAnim_" + this.a + "_ankle2_x"].push(this.tempMc.c.ankle2.x);
					this["charAnim_" + this.a + "_ankle2_y"].push(this.tempMc.c.ankle2.y);
					this["charAnim_" + this.a + "_ankle2_r"].push(int(this.tempMc.c.ankle2.rotation / (180 / Math.PI) * 1000) / 1000);
					if (this.charAnim_hasHands[this.a] == 1)
					{
						this["charAnim_" + this.a + "_hand1_x"].push(this.tempMc.c.hand1.x);
						this["charAnim_" + this.a + "_hand1_y"].push(this.tempMc.c.hand1.y);
						this["charAnim_" + this.a + "_hand1_r"].push(int(this.tempMc.c.hand1.rotation / (180 / Math.PI) * 1000) / 1000);
						this["charAnim_" + this.a + "_hand2_x"].push(this.tempMc.c.hand2.x);
						this["charAnim_" + this.a + "_hand2_y"].push(this.tempMc.c.hand2.y);
						this["charAnim_" + this.a + "_hand2_r"].push(int(this.tempMc.c.hand2.rotation / (180 / Math.PI) * 1000) / 1000);
					}
					
					this.b  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			this.char_head_0 = new Sprite();
			this.char_head_0_bm = new BitmapData(1, 1, true, 0);
			this.char_body_0 = new Sprite();
			this.char_body_0_bm = new BitmapData(1, 1, true, 0);
			this.char_foot_0 = new Sprite();
			this.char_foot_0_bm = new BitmapData(1, 1, true, 0);
			this.char_ankle_0 = new Sprite();
			this.char_ankle_0_bm = new BitmapData(1, 1, true, 0);
			this.char_hand1_0 = new Sprite();
			this.char_hand1_0_bm = new BitmapData(1, 1, true, 0);
			this.char_hand2_0 = new Sprite();
			this.char_hand2_0_bm = new BitmapData(1, 1, true, 0);
			this.character_appearance_0 = this.character_appearance;
			this.character_colors_0 = [this.character_color_values[this.character_colors[0]], this.character_color_values[this.character_colors[1]], this.character_color_values[this.character_colors[2]], this.character_color_values[this.character_colors[3]], this.character_color_values[this.character_colors[4]], this.character_color_values[this.character_colors[5]], this.character_color_values[this.character_colors[6]], this.character_color_values[this.character_colors[7]], this.character_color_values[this.character_colors[8]], this.character_color_values[this.character_colors[9]]];
			this.char_head_1 = new Sprite();
			this.char_head_1_bm = new BitmapData(1, 1, true, 0);
			this.char_body_1 = new Sprite();
			this.char_body_1_bm = new BitmapData(1, 1, true, 0);
			this.char_foot_1 = new Sprite();
			this.char_foot_1_bm = new BitmapData(1, 1, true, 0);
			this.char_ankle_1 = new Sprite();
			this.char_ankle_1_bm = new BitmapData(1, 1, true, 0);
			this.char_hand1_1 = new Sprite();
			this.char_hand1_1_bm = new BitmapData(1, 1, true, 0);
			this.char_hand2_1 = new Sprite();
			this.char_hand2_1_bm = new BitmapData(1, 1, true, 0);
			this.character_appearance_1 = [];
			this.character_colors_1 = [];
			switch(this.tileSet)
			{
				case 1:
				{
					this.character_appearance_1 = [26, 9, 5, 2, 2, 1];
					this.character_colors_1 = [7312495, 3355443, 3355443, 3355443, 7312495, 3355443, 7312495, 3355443, 3355443, 7312495];
					break;
				}
				case 3:
				{
					this.character_appearance_1 = [5, 9, 2, 2, 3, 1];
					this.character_colors_1 = [3702459, 3355443, 3355443, 3355443, 3702459, 11461375, 3702459, 3355443, 3702459, 10066329];
					break;
				}
				case 4:
				{
					this.character_appearance_1 = [9, 6, 2, 2, 3, 13];
					this.character_colors_1 = [6985647, 3355443, 3355443, 3355443, 3355443, 6985647, 3355443, 3355443, 3355443, 6985647];
					break;
				}
				case 6:
				{
					this.character_appearance_1 = [23, 3, 11, 1, 4, 2];
					this.character_colors_1 = [8097599, 3355443, 3355443, 3355443, 8097599, 4277760, 3355443, 3355443, 8097599, 4277760];
					break;
				}
				case 5:
				{
					this.character_appearance_1 = [35, 4, 16, 1, 9, 1];
					this.character_colors_1 = [16740721, 3355443, 16723245, 3355443, 16740721, 3702459, 3702459, 3355443, 16740721, 8206257];
					break;
				}
				case 8:
				{
					this.character_appearance_1 = [43, 9, 21, 5, 7, 1];
					this.character_colors_1 = [16754688, 3355443, 10027008, 3355443, 16754688, 3355443, 16754688, 3355443, 16754688, 3355443];
					break;
				}
				case 7:
				{
					this.character_appearance_1 = [36, 14, 5, 5, 2, 1];
					this.character_colors_1 = [4539776, 3355443, 3355443, 16777215, 4539776, 3355443, 4539776, 3355443, 4539776, 3355443];
					break;
				}
				case 9:
				{
					this.character_appearance_1 = [44, 2, 10, 2, 3, 1];
					this.character_colors_1 = [3702459, 3355443, 10027008, 3355443, 3355443, 3702459, 3355443, 3355443, 3355443, 3702459];
					break;
				}
				default:
				{
					this.character_appearance_1 = [6, 2, 1, 1, 1, 3];
					this.character_colors_1 = [3702459, 10066329, 3355443, 3355443, 3355443, 3702459, 3355443, 3702459, 3355443, 3355443];
					break;
					break;
				}
			}
			this.char_head_2 = new Sprite();
			this.char_head_2_bm = new BitmapData(1, 1, true, 0);
			this.char_body_2 = new Sprite();
			this.char_body_2_bm = new BitmapData(1, 1, true, 0);
			this.char_foot_2 = new Sprite();
			this.char_foot_2_bm = new BitmapData(1, 1, true, 0);
			this.char_ankle_2 = new Sprite();
			this.char_ankle_2_bm = new BitmapData(1, 1, true, 0);
			this.char_hand1_2 = new Sprite();
			this.char_hand1_2_bm = new BitmapData(1, 1, true, 0);
			this.char_hand2_2 = new Sprite();
			this.char_hand2_2_bm = new BitmapData(1, 1, true, 0);
			this.character_appearance_2 = [];
			this.character_colors_2 = [];
			switch(this.tileSet)
			{
				case 1:
				{
					this.character_appearance_2 = [51, 9, 20, 5, 5, 1];
					this.character_colors_2 = [7439218, 12834130, 3355443, 3355443, 7439218, 10027008, 7439218, 3355443, 7439218, 3355443];
					break;
				}
				case 3:
				{
					this.character_appearance_2 = [48, 9, 19, 5, 2, 1];
					this.character_colors_2 = [7450623, 5263440, 3355443, 3355443, 7450623, 5263440, 7450623, 3355443, 7450623, 5263440];
					break;
				}
				case 4:
				{
					this.character_appearance_2 = [44, 6, 22, 3, 7, 13];
					this.character_colors_2 = [13092807, 4812160, 3355443, 3355443, 4812160, 13092807, 4812160, 3355443, 4812160, 13092807];
					break;
				}
				case 6:
				{
					this.character_appearance_2 = [16, 1, 19, 1, 2, 7];
					this.character_colors_2 = [11055422, 3355443, 3355443, 3355443, 11055422, 4277760, 3355443, 3355443, 11055422, 4277760];
					break;
				}
				case 5:
				{
					this.character_appearance_2 = [56, 12, 18, 4, 2, 14];
					this.character_colors_2 = [16740721, 3355443, 16723245, 16777215, 3702459, 3702459, 3702459, 3355443, 3355443, 3702459];
					break;
				}
				case 8:
				{
					this.character_appearance_2 = [42, 9, 21, 3, 3, 1];
					this.character_colors_2 = [14969600, 3355443, 10027008, 3355443, 14969600, 3355443, 14969600, 3355443, 14969600, 3355443];
					break;
				}
				case 7:
				{
					this.character_appearance_2 = [12, 14, 6, 3, 1, 1];
					this.character_colors_2 = [5131872, 3355443, 3355443, 16777215, 5131872, 3355443, 5131872, 3355443, 5131872, 3355443];
					break;
				}
				case 9:
				{
					this.character_appearance_2 = [9, 2, 4, 2, 4, 1];
					this.character_colors_2 = [4239974, 3355443, 10027008, 3355443, 3355443, 3702459, 6962539, 3355443, 3355443, 10027008];
					break;
				}
				default:
				{
					this.character_appearance_2 = [6, 2, 1, 1, 1, 3];
					this.character_colors_2 = [3702459, 10066329, 3355443, 3355443, 3355443, 3702459, 3355443, 3702459, 3355443, 3355443];
					break;
					break;
				}
			}
			this.char_head_3 = new Sprite();
			this.char_head_3_bm = new BitmapData(1, 1, true, 0);
			this.char_body_3 = new Sprite();
			this.char_body_3_bm = new BitmapData(1, 1, true, 0);
			this.char_foot_3 = new Sprite();
			this.char_foot_3_bm = new BitmapData(1, 1, true, 0);
			this.char_ankle_3 = new Sprite();
			this.char_ankle_3_bm = new BitmapData(1, 1, true, 0);
			this.char_hand1_3 = new Sprite();
			this.char_hand1_3_bm = new BitmapData(1, 1, true, 0);
			this.char_hand2_3 = new Sprite();
			this.char_hand2_3_bm = new BitmapData(1, 1, true, 0);
			this.character_appearance_3 = [];
			this.character_colors_3 = [];
			switch(this.tileSet)
			{
				case 1:
				{
					this.character_appearance_3 = [46, 14, 23, 4, 10, 1];
					this.character_colors_3 = [4554562, 3355443, 3492147, 16777215, 4554562, 3355443, 4554562, 3355443, 2703654, 4554562];
					break;
				}
				case 3:
				{
					this.character_appearance_3 = [36, 2, 10, 4, 5, 6];
					this.character_colors_3 = [3626651, 15658734, 3355443, 3355443, 3626651, 3355443, 3626651, 3355443, 3626651, 5263440];
					break;
				}
				case 4:
				{
					this.character_appearance_3 = [40, 3, 21, 4, 3, 1];
					this.character_colors_3 = [3355443, 6321586, 3355443, 3355443, 6321586, 3355443, 6321586, 3355443, 3355443, 6321586];
					break;
				}
				case 6:
				{
					this.character_appearance_3 = [26, 7, 18, 1, 1, 3];
					this.character_colors_3 = [6056509, 3355443, 10074990, 3355443, 6056509, 4277760, 3355443, 3355443, 6056509, 2569216];
					break;
				}
				case 5:
				{
					this.character_appearance_3 = [20, 1, 2, 4, 6, 2];
					this.character_colors_3 = [16766254, 3355443, 16723245, 16777215, 16766254, 3355443, 16766254, 3355443, 3355443, 16766254];
					break;
				}
				case 8:
				{
					this.character_appearance_3 = [46, 13, 23, 2, 3, 1];
					this.character_colors_3 = [8741888, 3355443, 16748288, 16777215, 8741888, 3355443, 8741888, 3355443, 8741888, 3355443];
					break;
				}
				case 7:
				{
					this.character_appearance_3 = [26, 14, 20, 4, 3, 1];
					this.character_colors_3 = [7237265, 3355443, 3355443, 16777215, 7237265, 3355443, 7237265, 3355443, 7237265, 3355443];
					break;
				}
				case 9:
				{
					this.character_appearance_3 = [37, 2, 5, 5, 6, 1];
					this.character_colors_3 = [5455446, 3355443, 10027008, 3355443, 5455446, 3355443, 5455446, 3355443, 3355443, 5455446];
					break;
				}
				default:
				{
					this.character_appearance_3 = [6, 2, 1, 1, 1, 3];
					this.character_colors_3 = [3702459, 10066329, 3355443, 3355443, 3355443, 3702459, 3355443, 3702459, 3355443, 3355443];
					break;
					break;
				}
			}
			this.char_head_4 = new Sprite();
			this.char_head_4_bm = new BitmapData(1, 1, true, 0);
			this.char_body_4 = new Sprite();
			this.char_body_4_bm = new BitmapData(1, 1, true, 0);
			this.char_foot_4 = new Sprite();
			this.char_foot_4_bm = new BitmapData(1, 1, true, 0);
			this.char_ankle_4 = new Sprite();
			this.char_ankle_4_bm = new BitmapData(1, 1, true, 0);
			this.char_hand1_4 = new Sprite();
			this.char_hand1_4_bm = new BitmapData(1, 1, true, 0);
			this.char_hand2_4 = new Sprite();
			this.char_hand2_4_bm = new BitmapData(1, 1, true, 0);
			this.character_appearance_4 = [];
			this.character_colors_4 = [];
			switch(this.tileSet)
			{
				case 1:
				{
					this.character_appearance_4 = [17, 14, 18, 4, 1, 1];
					this.character_colors_4 = [4344881, 3355443, 3492147, 14024605, 9084243, 3355443, 5857336, 3355443, 3818551, 9084243];
					break;
				}
				case 3:
				{
					this.character_appearance_4 = [18, 7, 5, 3, 1, 2];
					this.character_colors_4 = [3515605, 15658734, 3355443, 3355443, 3515605, 5263440, 3515605, 3355443, 3515605, 5263440];
					break;
				}
				case 4:
				{
					this.character_appearance_4 = [25, 3, 23, 2, 10, 1];
					this.character_colors_4 = [3355443, 6116246, 3355443, 3355443, 6116246, 3355443, 6116246, 3355443, 3355443, 6116246];
					break;
				}
				case 6:
				{
					this.character_appearance_4 = [2, 2, 13, 1, 1, 1];
					this.character_colors_4 = [12109372, 3355443, 10074990, 3355443, 12109372, 5862400, 3355443, 3355443, 12109372, 5862400];
					break;
				}
				case 5:
				{
					this.character_appearance_4 = [27, 10, 5, 3, 4, 10];
					this.character_colors_4 = [5231808, 3355443, 7471103, 16777215, 5231808, 3355443, 5231808, 3355443, 3355443, 5231808];
					break;
				}
				case 8:
				{
					this.character_appearance_4 = [41, 13, 21, 2, 5, 1];
					this.character_colors_4 = [16742656, 3355443, 16748288, 16777215, 16742656, 3355443, 16742656, 3355443, 16742656, 3355443];
					break;
				}
				case 7:
				{
					this.character_appearance_4 = [29, 14, 2, 5, 2, 1];
					this.character_colors_4 = [7829401, 3355443, 3355443, 16777215, 7829401, 3355443, 7829401, 3355443, 7829401, 3355443];
					break;
				}
				case 9:
				{
					this.character_appearance_4 = [5, 2, 2, 2, 1, 1];
					this.character_colors_4 = [3355443, 3355443, 10027008, 3355443, 9264429, 3355443, 9264429, 3355443, 3355443, 10066329];
					break;
				}
				default:
				{
					this.character_appearance_4 = [6, 2, 1, 1, 1, 3];
					this.character_colors_4 = [3702459, 10066329, 3355443, 3355443, 3355443, 3702459, 3355443, 3702459, 3355443, 3355443];
					break;
					break;
				}
			}
			this.char_head_5 = new Sprite();
			this.char_head_5_bm = new BitmapData(1, 1, true, 0);
			this.char_body_5 = new Sprite();
			this.char_body_5_bm = new BitmapData(1, 1, true, 0);
			this.char_foot_5 = new Sprite();
			this.char_foot_5_bm = new BitmapData(1, 1, true, 0);
			this.char_ankle_5 = new Sprite();
			this.char_ankle_5_bm = new BitmapData(1, 1, true, 0);
			this.char_hand1_5 = new Sprite();
			this.char_hand1_5_bm = new BitmapData(1, 1, true, 0);
			this.char_hand2_5 = new Sprite();
			this.char_hand2_5_bm = new BitmapData(1, 1, true, 0);
			this.character_appearance_5 = [];
			this.character_colors_5 = [];
			switch(this.tileSet)
			{
				case 1:
				{
					this.character_appearance_5 = [16, 13, 2, 4, 2, 1];
					this.character_colors_5 = [6971696, 3355443, 3492147, 16777215, 5722159, 3355443, 6971696, 3355443, 4799524, 8943927];
					break;
				}
				case 3:
				{
					this.character_appearance_5 = [37, 2, 10, 3, 1, 2];
					this.character_colors_5 = [2125465, 15658734, 3355443, 3355443, 2125465, 5263440, 2125465, 3355443, 2125465, 5263440];
					break;
				}
				case 4:
				{
					this.character_appearance_5 = [17, 9, 10, 2, 2, 11];
					this.character_colors_5 = [10524389, 13024239, 3355443, 3355443, 10524389, 3355443, 10524389, 3355443, 3355443, 10524389];
					break;
				}
				case 6:
				{
					this.character_appearance_5 = [38, 2, 19, 1, 4, 1];
					this.character_colors_5 = [11723886, 6381921, 10074990, 3355443, 11723886, 5862400, 3355443, 3355443, 11723886, 5862400];
					break;
				}
				case 5:
				{
					this.character_appearance_5 = [52, 10, 7, 5, 8, 8];
					this.character_colors_5 = [10027008, 3355443, 10027008, 16777215, 10027008, 3355443, 10027008, 3355443, 3355443, 10027008];
					break;
				}
				case 8:
				{
					this.character_appearance_5 = [40, 13, 22, 5, 7, 1];
					this.character_colors_5 = [15284992, 3355443, 10107392, 16777215, 15284992, 3355443, 15284992, 3355443, 15284992, 3355443];
					break;
				}
				case 7:
				{
					this.character_appearance_5 = [55, 14, 18, 4, 1, 14];
					this.character_colors_5 = [7829401, 3355443, 3355443, 16777215, 4534362, 3355443, 4534362, 3355443, 4534362, 3355443];
					break;
				}
				case 9:
				{
					this.character_appearance_5 = [32, 5, 16, 5, 1, 1];
					this.character_colors_5 = [3355443, 3355443, 10027008, 3355443, 10027008, 16777215, 10027008, 3355443, 3355443, 10027008];
					break;
				}
				default:
				{
					this.character_appearance_5 = [6, 2, 1, 1, 1, 3];
					this.character_colors_5 = [3702459, 10066329, 3355443, 3355443, 3355443, 3702459, 3355443, 3702459, 3355443, 3355443];
					break;
					break;
				}
			}
			this.levelColorFilter = new AdjustColor();
			switch(this.tileSet)
			{
				case 1:
				{
					this.levelColorFilter.brightness = -15;
					this.levelColorFilter.contrast = 5;
					this.levelColorFilter.saturation = -25;
					this.levelColorFilter.hue = 0;
					break;
				}
				case 2:
				{
					this.levelColorFilter.brightness = 0;
					this.levelColorFilter.contrast = 0;
					this.levelColorFilter.saturation = 0;
					this.levelColorFilter.hue = 0;
					break;
				}
				case 3:
				{
					this.levelColorFilter.brightness = 25;
					this.levelColorFilter.contrast = 10;
					this.levelColorFilter.saturation = -40;
					this.levelColorFilter.hue = 0;
					break;
				}
				case 4:
				{
					this.levelColorFilter.brightness = 0;
					this.levelColorFilter.contrast = 0;
					this.levelColorFilter.saturation = 0;
					this.levelColorFilter.hue = 0;
					break;
				}
				case 5:
				{
					this.levelColorFilter.brightness = 0;
					this.levelColorFilter.contrast = 0;
					this.levelColorFilter.saturation = 0;
					this.levelColorFilter.hue = 0;
					break;
				}
				case 6:
				{
					this.levelColorFilter.brightness = 30;
					this.levelColorFilter.contrast = -10;
					this.levelColorFilter.saturation = -40;
					this.levelColorFilter.hue = 0;
					break;
				}
				case 8:
				{
					this.levelColorFilter.brightness = -10;
					this.levelColorFilter.contrast = 30;
					this.levelColorFilter.saturation = 0;
					this.levelColorFilter.hue = 0;
					break;
				}
				default:
				{
					this.levelColorFilter.brightness = 0;
					this.levelColorFilter.contrast = 0;
					this.levelColorFilter.saturation = 0;
					this.levelColorFilter.hue = 0;
					break;
					break;
				}
			}
			this.smoothPlayer = true;
			this.smoothEnemies = true;
			this.a = 0;
			while (this.a < 6)
			{
				
				trace("char " + this.a);
				this.tempMc = new character_head_mc();
				this.tempMc.gotoAndStop(this["character_appearance_" + this.a][0]);
				this.tempMc.eye.gotoAndStop(this["character_appearance_" + this.a][1]);
				this.tempMc.face.gotoAndStop(this["character_appearance_" + this.a][5]);
				this.character_colorTransform = this.tempMc.color1.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][0];
				this.tempMc.color1.transform.colorTransform = this.character_colorTransform;
				this.character_colorTransform = this.tempMc.color2.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][1];
				this.tempMc.color2.transform.colorTransform = this.character_colorTransform;
				this.character_colorTransform = this.tempMc.color3.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][0];
				this.tempMc.color3.transform.colorTransform = this.character_colorTransform;
				this.character_colorTransform = this.tempMc.eye.color1.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][2];
				this.tempMc.eye.color1.transform.colorTransform = this.character_colorTransform;
				this.character_colorTransform = this.tempMc.eye.color2.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][3];
				this.tempMc.eye.color2.transform.colorTransform = this.character_colorTransform;
				this["char_head_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["char_head_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["char_head_" + this.a].graphics.clear();
				if (this.a == 0)
				{
				}
				if (this.smoothPlayer != true)
				{
					if (this.a > 0)
					{
					}
				}
				if (this.smoothEnemies == true)
				{
					this["char_head_" + this.a].graphics.beginBitmapFill(this["char_head_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["char_head_" + this.a].graphics.beginBitmapFill(this["char_head_" + this.a + "_bm"], this.trans, false, false);
				}
				this["char_head_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new character_body_mc();
				this.tempMc.gotoAndStop(this["character_appearance_" + this.a][2]);
				this.character_colorTransform = this.tempMc.color1.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][4];
				this.tempMc.color1.transform.colorTransform = this.character_colorTransform;
				this.character_colorTransform = this.tempMc.color2.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][5];
				this.tempMc.color2.transform.colorTransform = this.character_colorTransform;
				this["char_body_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["char_body_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["char_body_" + this.a].graphics.clear();
				if (this.a == 0)
				{
				}
				if (this.smoothPlayer != true)
				{
					if (this.a > 0)
					{
					}
				}
				if (this.smoothEnemies == true)
				{
					this["char_body_" + this.a].graphics.beginBitmapFill(this["char_body_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["char_body_" + this.a].graphics.beginBitmapFill(this["char_body_" + this.a + "_bm"], this.trans, false, false);
				}
				this["char_body_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new character_foot_mc();
				this.tempMc.gotoAndStop(this["character_appearance_" + this.a][4]);
				this["char_foot_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.character_colorTransform = this.tempMc.color1.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][8];
				this.tempMc.color1.transform.colorTransform = this.character_colorTransform;
				this.character_colorTransform = this.tempMc.color2.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][9];
				this.tempMc.color2.transform.colorTransform = this.character_colorTransform;
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["char_foot_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["char_foot_" + this.a].graphics.clear();
				if (this.a == 0)
				{
				}
				if (this.smoothPlayer != true)
				{
					if (this.a > 0)
					{
					}
				}
				if (this.smoothEnemies == true)
				{
					this["char_foot_" + this.a].graphics.beginBitmapFill(this["char_foot_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["char_foot_" + this.a].graphics.beginBitmapFill(this["char_foot_" + this.a + "_bm"], this.trans, false, false);
				}
				this["char_foot_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new character_ankle_mc();
				this.tempMc.gotoAndStop(this["character_appearance_" + this.a][4]);
				this.character_colorTransform = this.tempMc.color1.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][8];
				this.tempMc.color1.transform.colorTransform = this.character_colorTransform;
				this["char_ankle_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["char_ankle_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["char_ankle_" + this.a].graphics.clear();
				this["char_ankle_" + this.a].graphics.beginBitmapFill(this["char_ankle_" + this.a + "_bm"], this.trans, false, false);
				this["char_ankle_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new character_hand1_mc();
				this.tempMc.gotoAndStop(this["character_appearance_" + this.a][3]);
				this.character_colorTransform = this.tempMc.color1.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][6];
				this.tempMc.color1.transform.colorTransform = this.character_colorTransform;
				this["char_hand1_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["char_hand1_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["char_hand1_" + this.a].graphics.clear();
				if (this.a == 0)
				{
				}
				if (this.smoothPlayer != true)
				{
					if (this.a > 0)
					{
					}
				}
				if (this.smoothEnemies == true)
				{
					this["char_hand1_" + this.a].graphics.beginBitmapFill(this["char_hand1_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["char_hand1_" + this.a].graphics.beginBitmapFill(this["char_hand1_" + this.a + "_bm"], this.trans, false, false);
				}
				this["char_hand1_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new character_hand2_mc();
				this.tempMc.gotoAndStop(this["character_appearance_" + this.a][3]);
				this.character_colorTransform = this.tempMc.color1.transform.colorTransform;
				this.character_colorTransform.color = this["character_colors_" + this.a][6];
				this.tempMc.color1.transform.colorTransform = this.character_colorTransform;
				this["char_hand2_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["char_hand2_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["char_hand2_" + this.a].graphics.clear();
				if (this.a == 0)
				{
				}
				if (this.smoothPlayer != true)
				{
					if (this.a > 0)
					{
					}
				}
				if (this.smoothEnemies == true)
				{
					this["char_hand2_" + this.a].graphics.beginBitmapFill(this["char_hand2_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["char_hand2_" + this.a].graphics.beginBitmapFill(this["char_hand2_" + this.a + "_bm"], this.trans, false, false);
				}
				this["char_hand2_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				
				this.a  ++ ;
				
			}
			this.enemy_large1_anim1_head_x = new Vector.<Number>;
			this.enemy_large1_anim1_head_y = new Vector.<Number>;
			this.enemy_large1_anim1_head_r = new Vector.<Number>;
			this.enemy_large1_anim1_body_x = new Vector.<Number>;
			this.enemy_large1_anim1_body_y = new Vector.<Number>;
			this.enemy_large1_anim1_body_r = new Vector.<Number>;
			this.enemy_large1_anim1_foot1_x = new Vector.<Number>;
			this.enemy_large1_anim1_foot1_y = new Vector.<Number>;
			this.enemy_large1_anim1_foot1_r = new Vector.<Number>;
			this.enemy_large1_anim1_foot2_x = new Vector.<Number>;
			this.enemy_large1_anim1_foot2_y = new Vector.<Number>;
			this.enemy_large1_anim1_foot2_r = new Vector.<Number>;
			this.enemy_large1_anim1_ankle1_x = new Vector.<Number>;
			this.enemy_large1_anim1_ankle1_y = new Vector.<Number>;
			this.enemy_large1_anim1_ankle1_r = new Vector.<Number>;
			this.enemy_large1_anim1_ankle2_x = new Vector.<Number>;
			this.enemy_large1_anim1_ankle2_y = new Vector.<Number>;
			this.enemy_large1_anim1_ankle2_r = new Vector.<Number>;
			this.enemy_large1_anim1_gun_x = new Vector.<Number>;
			this.enemy_large1_anim1_gun_y = new Vector.<Number>;
			this.enemy_large1_anim1_gun_r = new Vector.<Number>;
			this.enemy_large1_anim1_sword_x = new Vector.<Number>;
			this.enemy_large1_anim1_sword_y = new Vector.<Number>;
			this.enemy_large1_anim1_sword_r = new Vector.<Number>;
			this.enemy_large1_anim1_shoulder_x = new Vector.<Number>;
			this.enemy_large1_anim1_shoulder_y = new Vector.<Number>;
			this.enemy_large1_anim1_shoulder_r = new Vector.<Number>;
			this.enemy_large1_anim1_pad1_x = new Vector.<Number>;
			this.enemy_large1_anim1_pad1_y = new Vector.<Number>;
			this.enemy_large1_anim1_pad1_r = new Vector.<Number>;
			this.enemy_large1_anim1_pad2_x = new Vector.<Number>;
			this.enemy_large1_anim1_pad2_y = new Vector.<Number>;
			this.enemy_large1_anim1_pad2_r = new Vector.<Number>;
			
			this.enemy_large1_anim2_head_x = new Vector.<Number>;
			this.enemy_large1_anim2_head_y = new Vector.<Number>;
			this.enemy_large1_anim2_head_r = new Vector.<Number>;
			this.enemy_large1_anim2_body_x = new Vector.<Number>;
			this.enemy_large1_anim2_body_y = new Vector.<Number>;
			this.enemy_large1_anim2_body_r = new Vector.<Number>;
			this.enemy_large1_anim2_foot1_x = new Vector.<Number>;
			this.enemy_large1_anim2_foot1_y = new Vector.<Number>;
			this.enemy_large1_anim2_foot1_r = new Vector.<Number>;
			this.enemy_large1_anim2_foot2_x = new Vector.<Number>;
			this.enemy_large1_anim2_foot2_y = new Vector.<Number>;
			this.enemy_large1_anim2_foot2_r = new Vector.<Number>;
			this.enemy_large1_anim2_ankle1_x = new Vector.<Number>;
			this.enemy_large1_anim2_ankle1_y = new Vector.<Number>;
			this.enemy_large1_anim2_ankle1_r = new Vector.<Number>;
			this.enemy_large1_anim2_ankle2_x = new Vector.<Number>;
			this.enemy_large1_anim2_ankle2_y = new Vector.<Number>;
			this.enemy_large1_anim2_ankle2_r = new Vector.<Number>;
			this.enemy_large1_anim2_gun_x = new Vector.<Number>;
			this.enemy_large1_anim2_gun_y = new Vector.<Number>;
			this.enemy_large1_anim2_gun_r = new Vector.<Number>;
			this.enemy_large1_anim2_sword_x = new Vector.<Number>;
			this.enemy_large1_anim2_sword_y = new Vector.<Number>;
			this.enemy_large1_anim2_sword_r = new Vector.<Number>;
			this.enemy_large1_anim2_shoulder_x = new Vector.<Number>;
			this.enemy_large1_anim2_shoulder_y = new Vector.<Number>;
			this.enemy_large1_anim2_shoulder_r = new Vector.<Number>;
			this.enemy_large1_anim2_pad1_x = new Vector.<Number>;
			this.enemy_large1_anim2_pad1_y = new Vector.<Number>;
			this.enemy_large1_anim2_pad1_r = new Vector.<Number>;
			this.enemy_large1_anim2_pad2_x = new Vector.<Number>;
			this.enemy_large1_anim2_pad2_y = new Vector.<Number>;
			this.enemy_large1_anim2_pad2_r = new Vector.<Number>;
			this.enemy_large1_anim3_head_x = new Vector.<Number>;
			this.enemy_large1_anim3_head_y = new Vector.<Number>;
			this.enemy_large1_anim3_head_r = new Vector.<Number>;
			this.enemy_large1_anim3_body_x = new Vector.<Number>;
			this.enemy_large1_anim3_body_y = new Vector.<Number>;
			this.enemy_large1_anim3_body_r = new Vector.<Number>;
			this.enemy_large1_anim3_foot1_x = new Vector.<Number>;
			this.enemy_large1_anim3_foot1_y = new Vector.<Number>;
			this.enemy_large1_anim3_foot1_r = new Vector.<Number>;
			this.enemy_large1_anim3_foot2_x = new Vector.<Number>;
			this.enemy_large1_anim3_foot2_y = new Vector.<Number>;
			this.enemy_large1_anim3_foot2_r = new Vector.<Number>;
			this.enemy_large1_anim3_ankle1_x = new Vector.<Number>;
			this.enemy_large1_anim3_ankle1_y = new Vector.<Number>;
			this.enemy_large1_anim3_ankle1_r = new Vector.<Number>;
			this.enemy_large1_anim3_ankle2_x = new Vector.<Number>;
			this.enemy_large1_anim3_ankle2_y = new Vector.<Number>;
			this.enemy_large1_anim3_ankle2_r = new Vector.<Number>;
			this.enemy_large1_anim3_gun_x = new Vector.<Number>;
			this.enemy_large1_anim3_gun_y = new Vector.<Number>;
			this.enemy_large1_anim3_gun_r = new Vector.<Number>;
			this.enemy_large1_anim3_sword_x = new Vector.<Number>;
			this.enemy_large1_anim3_sword_y = new Vector.<Number>;
			this.enemy_large1_anim3_sword_r = new Vector.<Number>;
			this.enemy_large1_anim3_shoulder_x = new Vector.<Number>;
			this.enemy_large1_anim3_shoulder_y = new Vector.<Number>;
			this.enemy_large1_anim3_shoulder_r = new Vector.<Number>;
			this.enemy_large1_anim3_pad1_x = new Vector.<Number>;
			this.enemy_large1_anim3_pad1_y = new Vector.<Number>;
			this.enemy_large1_anim3_pad1_r = new Vector.<Number>;
			this.enemy_large1_anim3_pad2_x = new Vector.<Number>;
			this.enemy_large1_anim3_pad2_y = new Vector.<Number>;
			this.enemy_large1_anim3_pad2_r = new Vector.<Number>;
			this.enemy_large1_anim4_head_x = new Vector.<Number>;
			this.enemy_large1_anim4_head_y = new Vector.<Number>;
			this.enemy_large1_anim4_head_r = new Vector.<Number>;
			this.enemy_large1_anim4_body_x = new Vector.<Number>;
			this.enemy_large1_anim4_body_y = new Vector.<Number>;
			this.enemy_large1_anim4_body_r = new Vector.<Number>;
			this.enemy_large1_anim4_foot1_x = new Vector.<Number>;
			this.enemy_large1_anim4_foot1_y = new Vector.<Number>;
			this.enemy_large1_anim4_foot1_r = new Vector.<Number>;
			this.enemy_large1_anim4_foot2_x = new Vector.<Number>;
			this.enemy_large1_anim4_foot2_y = new Vector.<Number>;
			this.enemy_large1_anim4_foot2_r = new Vector.<Number>;
			this.enemy_large1_anim4_ankle1_x = new Vector.<Number>;
			this.enemy_large1_anim4_ankle1_y = new Vector.<Number>;
			this.enemy_large1_anim4_ankle1_r = new Vector.<Number>;
			this.enemy_large1_anim4_ankle2_x = new Vector.<Number>;
			this.enemy_large1_anim4_ankle2_y = new Vector.<Number>;
			this.enemy_large1_anim4_ankle2_r = new Vector.<Number>;
			this.enemy_large1_anim4_gun_x = new Vector.<Number>;
			this.enemy_large1_anim4_gun_y = new Vector.<Number>;
			this.enemy_large1_anim4_gun_r = new Vector.<Number>;
			this.enemy_large1_anim4_sword_x = new Vector.<Number>;
			this.enemy_large1_anim4_sword_y = new Vector.<Number>;
			this.enemy_large1_anim4_sword_r = new Vector.<Number>;
			this.enemy_large1_anim4_shoulder_x = new Vector.<Number>;
			this.enemy_large1_anim4_shoulder_y = new Vector.<Number>;
			this.enemy_large1_anim4_shoulder_r = new Vector.<Number>;
			this.enemy_large1_anim4_pad1_x = new Vector.<Number>;
			this.enemy_large1_anim4_pad1_y = new Vector.<Number>;
			this.enemy_large1_anim4_pad1_r = new Vector.<Number>;
			this.enemy_large1_anim4_pad2_x = new Vector.<Number>;
			this.enemy_large1_anim4_pad2_y = new Vector.<Number>;
			this.enemy_large1_anim4_pad2_r = new Vector.<Number>;
			this.enemy_large1_anim5_head_x = new Vector.<Number>;
			this.enemy_large1_anim5_head_y = new Vector.<Number>;
			this.enemy_large1_anim5_head_r = new Vector.<Number>;
			this.enemy_large1_anim5_body_x = new Vector.<Number>;
			this.enemy_large1_anim5_body_y = new Vector.<Number>;
			this.enemy_large1_anim5_body_r = new Vector.<Number>;
			this.enemy_large1_anim5_foot1_x = new Vector.<Number>;
			this.enemy_large1_anim5_foot1_y = new Vector.<Number>;
			this.enemy_large1_anim5_foot1_r = new Vector.<Number>;
			this.enemy_large1_anim5_foot2_x = new Vector.<Number>;
			this.enemy_large1_anim5_foot2_y = new Vector.<Number>;
			this.enemy_large1_anim5_foot2_r = new Vector.<Number>;
			this.enemy_large1_anim5_ankle1_x = new Vector.<Number>;
			this.enemy_large1_anim5_ankle1_y = new Vector.<Number>;
			this.enemy_large1_anim5_ankle1_r = new Vector.<Number>;
			this.enemy_large1_anim5_ankle2_x = new Vector.<Number>;
			this.enemy_large1_anim5_ankle2_y = new Vector.<Number>;
			this.enemy_large1_anim5_ankle2_r = new Vector.<Number>;
			this.enemy_large1_anim5_gun_x = new Vector.<Number>;
			this.enemy_large1_anim5_gun_y = new Vector.<Number>;
			this.enemy_large1_anim5_gun_r = new Vector.<Number>;
			this.enemy_large1_anim5_sword_x = new Vector.<Number>;
			this.enemy_large1_anim5_sword_y = new Vector.<Number>;
			this.enemy_large1_anim5_sword_r = new Vector.<Number>;
			this.enemy_large1_anim5_shoulder_x = new Vector.<Number>;
			this.enemy_large1_anim5_shoulder_y = new Vector.<Number>;
			this.enemy_large1_anim5_shoulder_r = new Vector.<Number>;
			this.enemy_large1_anim5_pad1_x = new Vector.<Number>;
			this.enemy_large1_anim5_pad1_y = new Vector.<Number>;
			this.enemy_large1_anim5_pad1_r = new Vector.<Number>;
			this.enemy_large1_anim5_pad2_x = new Vector.<Number>;
			this.enemy_large1_anim5_pad2_y = new Vector.<Number>;
			this.enemy_large1_anim5_pad2_r = new Vector.<Number>;
			this.enemy_large1_anim6_head_x = new Vector.<Number>;
			this.enemy_large1_anim6_head_y = new Vector.<Number>;
			this.enemy_large1_anim6_head_r = new Vector.<Number>;
			this.enemy_large1_anim6_body_x = new Vector.<Number>;
			this.enemy_large1_anim6_body_y = new Vector.<Number>;
			this.enemy_large1_anim6_body_r = new Vector.<Number>;
			this.enemy_large1_anim6_foot1_x = new Vector.<Number>;
			this.enemy_large1_anim6_foot1_y = new Vector.<Number>;
			this.enemy_large1_anim6_foot1_r = new Vector.<Number>;
			this.enemy_large1_anim6_foot2_x = new Vector.<Number>;
			this.enemy_large1_anim6_foot2_y = new Vector.<Number>;
			this.enemy_large1_anim6_foot2_r = new Vector.<Number>;
			this.enemy_large1_anim6_ankle1_x = new Vector.<Number>;
			this.enemy_large1_anim6_ankle1_y = new Vector.<Number>;
			this.enemy_large1_anim6_ankle1_r = new Vector.<Number>;
			this.enemy_large1_anim6_ankle2_x = new Vector.<Number>;
			this.enemy_large1_anim6_ankle2_y = new Vector.<Number>;
			this.enemy_large1_anim6_ankle2_r = new Vector.<Number>;
			this.enemy_large1_anim6_gun_x = new Vector.<Number>;
			this.enemy_large1_anim6_gun_y = new Vector.<Number>;
			this.enemy_large1_anim6_gun_r = new Vector.<Number>;
			this.enemy_large1_anim6_sword_x = new Vector.<Number>;
			this.enemy_large1_anim6_sword_y = new Vector.<Number>;
			this.enemy_large1_anim6_sword_r = new Vector.<Number>;
			this.enemy_large1_anim6_shoulder_x = new Vector.<Number>;
			this.enemy_large1_anim6_shoulder_y = new Vector.<Number>;
			this.enemy_large1_anim6_shoulder_r = new Vector.<Number>;
			this.enemy_large1_anim6_pad1_x = new Vector.<Number>;
			this.enemy_large1_anim6_pad1_y = new Vector.<Number>;
			this.enemy_large1_anim6_pad1_r = new Vector.<Number>;
			this.enemy_large1_anim6_pad2_x = new Vector.<Number>;
			this.enemy_large1_anim6_pad2_y = new Vector.<Number>;
			this.enemy_large1_anim6_pad2_r = new Vector.<Number>;
			this.enemy_large1_anim7_head_x = new Vector.<Number>;
			this.enemy_large1_anim7_head_y = new Vector.<Number>;
			this.enemy_large1_anim7_head_r = new Vector.<Number>;
			this.enemy_large1_anim7_body_x = new Vector.<Number>;
			this.enemy_large1_anim7_body_y = new Vector.<Number>;
			this.enemy_large1_anim7_body_r = new Vector.<Number>;
			this.enemy_large1_anim7_foot1_x = new Vector.<Number>;
			this.enemy_large1_anim7_foot1_y = new Vector.<Number>;
			this.enemy_large1_anim7_foot1_r = new Vector.<Number>;
			this.enemy_large1_anim7_foot2_x = new Vector.<Number>;
			this.enemy_large1_anim7_foot2_y = new Vector.<Number>;
			this.enemy_large1_anim7_foot2_r = new Vector.<Number>;
			this.enemy_large1_anim7_ankle1_x = new Vector.<Number>;
			this.enemy_large1_anim7_ankle1_y = new Vector.<Number>;
			this.enemy_large1_anim7_ankle1_r = new Vector.<Number>;
			this.enemy_large1_anim7_ankle2_x = new Vector.<Number>;
			this.enemy_large1_anim7_ankle2_y = new Vector.<Number>;
			this.enemy_large1_anim7_ankle2_r = new Vector.<Number>;
			this.enemy_large1_anim7_gun_x = new Vector.<Number>;
			this.enemy_large1_anim7_gun_y = new Vector.<Number>;
			this.enemy_large1_anim7_gun_r = new Vector.<Number>;
			this.enemy_large1_anim7_sword_x = new Vector.<Number>;
			this.enemy_large1_anim7_sword_y = new Vector.<Number>;
			this.enemy_large1_anim7_sword_r = new Vector.<Number>;
			this.enemy_large1_anim7_shoulder_x = new Vector.<Number>;
			this.enemy_large1_anim7_shoulder_y = new Vector.<Number>;
			this.enemy_large1_anim7_shoulder_r = new Vector.<Number>;
			this.enemy_large1_anim7_pad1_x = new Vector.<Number>;
			this.enemy_large1_anim7_pad1_y = new Vector.<Number>;
			this.enemy_large1_anim7_pad1_r = new Vector.<Number>;
			this.enemy_large1_anim7_pad2_x = new Vector.<Number>;
			this.enemy_large1_anim7_pad2_y = new Vector.<Number>;
			this.enemy_large1_anim7_pad2_r = new Vector.<Number>;
			this.enemy_large1_anim8_head_x = new Vector.<Number>;
			this.enemy_large1_anim8_head_y = new Vector.<Number>;
			this.enemy_large1_anim8_head_r = new Vector.<Number>;
			this.enemy_large1_anim8_body_x = new Vector.<Number>;
			this.enemy_large1_anim8_body_y = new Vector.<Number>;
			this.enemy_large1_anim8_body_r = new Vector.<Number>;
			this.enemy_large1_anim8_foot1_x = new Vector.<Number>;
			this.enemy_large1_anim8_foot1_y = new Vector.<Number>;
			this.enemy_large1_anim8_foot1_r = new Vector.<Number>;
			this.enemy_large1_anim8_foot2_x = new Vector.<Number>;
			this.enemy_large1_anim8_foot2_y = new Vector.<Number>;
			this.enemy_large1_anim8_foot2_r = new Vector.<Number>;
			this.enemy_large1_anim8_ankle1_x = new Vector.<Number>;
			this.enemy_large1_anim8_ankle1_y = new Vector.<Number>;
			this.enemy_large1_anim8_ankle1_r = new Vector.<Number>;
			this.enemy_large1_anim8_ankle2_x = new Vector.<Number>;
			this.enemy_large1_anim8_ankle2_y = new Vector.<Number>;
			this.enemy_large1_anim8_ankle2_r = new Vector.<Number>;
			this.enemy_large1_anim8_gun_x = new Vector.<Number>;
			this.enemy_large1_anim8_gun_y = new Vector.<Number>;
			this.enemy_large1_anim8_gun_r = new Vector.<Number>;
			this.enemy_large1_anim8_sword_x = new Vector.<Number>;
			this.enemy_large1_anim8_sword_y = new Vector.<Number>;
			this.enemy_large1_anim8_sword_r = new Vector.<Number>;
			this.enemy_large1_anim8_shoulder_x = new Vector.<Number>;
			this.enemy_large1_anim8_shoulder_y = new Vector.<Number>;
			this.enemy_large1_anim8_shoulder_r = new Vector.<Number>;
			this.enemy_large1_anim8_pad1_x = new Vector.<Number>;
			this.enemy_large1_anim8_pad1_y = new Vector.<Number>;
			this.enemy_large1_anim8_pad1_r = new Vector.<Number>;
			this.enemy_large1_anim8_pad2_x = new Vector.<Number>;
			this.enemy_large1_anim8_pad2_y = new Vector.<Number>;
			this.enemy_large1_anim8_pad2_r = new Vector.<Number>;
			this.tempMc = new enemy_large1_animationContainer();
			this.enemy_large1_maxFrames = new Array();
			this.enemy_large1_maxFrames.push(0);
			this.a = 1;
			while (this.a < (this.tempMc.totalFrames + 1))
			{
				
				this.tempMc.gotoAndStop(this.a);
				this.enemy_large1_maxFrames.push((this.tempMc.c.totalFrames - 1));
				this.b = 1;
				while (this.b < (this.tempMc.c.totalFrames + 1))
				{
					
					this.tempMc.c.gotoAndStop(this.b);
					this["enemy_large1_anim" + this.a + "_head_x"].push(this.tempMc.c.head.x);
					this["enemy_large1_anim" + this.a + "_head_y"].push(this.tempMc.c.head.y);
					this["enemy_large1_anim" + this.a + "_head_r"].push(this.tempMc.c.head.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_body_x"].push(this.tempMc.c.body.x);
					this["enemy_large1_anim" + this.a + "_body_y"].push(this.tempMc.c.body.y);
					this["enemy_large1_anim" + this.a + "_body_r"].push(this.tempMc.c.body.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_foot1_x"].push(this.tempMc.c.foot1.x);
					this["enemy_large1_anim" + this.a + "_foot1_y"].push(this.tempMc.c.foot1.y);
					this["enemy_large1_anim" + this.a + "_foot1_r"].push(this.tempMc.c.foot1.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_foot2_x"].push(this.tempMc.c.foot2.x);
					this["enemy_large1_anim" + this.a + "_foot2_y"].push(this.tempMc.c.foot2.y);
					this["enemy_large1_anim" + this.a + "_foot2_r"].push(this.tempMc.c.foot2.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_ankle1_x"].push(this.tempMc.c.ankle1.x);
					this["enemy_large1_anim" + this.a + "_ankle1_y"].push(this.tempMc.c.ankle1.y);
					this["enemy_large1_anim" + this.a + "_ankle1_r"].push(this.tempMc.c.ankle1.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_ankle2_x"].push(this.tempMc.c.ankle2.x);
					this["enemy_large1_anim" + this.a + "_ankle2_y"].push(this.tempMc.c.ankle2.y);
					this["enemy_large1_anim" + this.a + "_ankle2_r"].push(this.tempMc.c.ankle2.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_gun_x"].push(this.tempMc.c.gun.x);
					this["enemy_large1_anim" + this.a + "_gun_y"].push(this.tempMc.c.gun.y);
					this["enemy_large1_anim" + this.a + "_gun_r"].push(this.tempMc.c.gun.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_sword_x"].push(this.tempMc.c.sword.x);
					this["enemy_large1_anim" + this.a + "_sword_y"].push(this.tempMc.c.sword.y);
					this["enemy_large1_anim" + this.a + "_sword_r"].push(this.tempMc.c.sword.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_shoulder_x"].push(this.tempMc.c.shoulder.x);
					this["enemy_large1_anim" + this.a + "_shoulder_y"].push(this.tempMc.c.shoulder.y);
					this["enemy_large1_anim" + this.a + "_shoulder_r"].push(this.tempMc.c.shoulder.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_pad1_x"].push(this.tempMc.c.pad1.x);
					this["enemy_large1_anim" + this.a + "_pad1_y"].push(this.tempMc.c.pad1.y);
					this["enemy_large1_anim" + this.a + "_pad1_r"].push(this.tempMc.c.pad1.rotation / (180 / Math.PI));
					this["enemy_large1_anim" + this.a + "_pad2_x"].push(this.tempMc.c.pad2.x);
					this["enemy_large1_anim" + this.a + "_pad2_y"].push(this.tempMc.c.pad2.y);
					this["enemy_large1_anim" + this.a + "_pad2_r"].push(this.tempMc.c.pad2.rotation / (180 / Math.PI));
					
					this.b  ++ ;
					
				}
				
				this.a  ++ ;
				
			}
			this.enemy_large1_head = new Sprite();
			this.enemy_large1_head_bm = new BitmapData(1, 1, true, 0);
			this.enemy_large1_body = new Sprite();
			this.enemy_large1_body_bm = new BitmapData(1, 1, true, 0);
			this.enemy_large1_foot = new Sprite();
			this.enemy_large1_foot_bm = new BitmapData(1, 1, true, 0);
			this.enemy_large1_ankle = new Sprite();
			this.enemy_large1_ankle_bm = new BitmapData(1, 1, true, 0);
			this.enemy_large1_gun = new Sprite();
			this.enemy_large1_gun_bm = new BitmapData(1, 1, true, 0);
			this.enemy_large1_sword = new Sprite();
			this.enemy_large1_sword_bm = new BitmapData(1, 1, true, 0);
			this.enemy_large1_shoulder = new Sprite();
			this.enemy_large1_shoulder_bm = new BitmapData(1, 1, true, 0);
			this.enemy_large1_pad1 = new Sprite();
			this.enemy_large1_pad1_bm = new BitmapData(1, 1, true, 0);
			this.enemy_large1_pad2 = new Sprite();
			this.enemy_large1_pad2_bm = new BitmapData(1, 1, true, 0);
			this.tempParts = new Array(0, "head", "body", "foot", "ankle", "gun", "sword", "shoulder", "pad1", "pad2");
			this.a = 1;
			while (this.a < 10)
			{
				
				switch(this.a)
				{
					case 1:
					{
						this.tempMc = new enemy_large1_head_mc();
						break;
					}
					case 2:
					{
						this.tempMc = new enemy_large1_body_mc();
						break;
					}
					case 3:
					{
						this.tempMc = new enemy_large1_foot_mc();
						break;
					}
					case 4:
					{
						this.tempMc = new enemy_large1_ankle_mc();
						break;
					}
					case 5:
					{
						this.tempMc = new enemy_large1_gun_mc();
						break;
					}
					case 6:
					{
						this.tempMc = new enemy_large1_sword_mc();
						break;
					}
					case 7:
					{
						this.tempMc = new enemy_large1_shoulder_mc();
						break;
					}
					case 8:
					{
						this.tempMc = new enemy_large1_pad1_mc();
						break;
					}
					case 9:
					{
						this.tempMc = new enemy_large1_pad2_mc();
						break;
					}
					default:
					{
						break;
					}
				}
				this["enemy_large1_" + this.tempParts[this.a] + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["enemy_large1_" + this.tempParts[this.a] + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["enemy_large1_" + this.tempParts[this.a]].graphics.clear();
				this["enemy_large1_" + this.tempParts[this.a]].graphics.beginBitmapFill(this["enemy_large1_" + this.tempParts[this.a] + "_bm"], this.trans, false, true);
				this["enemy_large1_" + this.tempParts[this.a]].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				
				this.a  ++ ;
				
			}
			this.tempPartToRender = "";
			this.tempPartSprite = "";
			this.enemy_large1_renderOrder = new Array("gun", "foot2", "ankle2", "pad2", "body", "head", "shoulder", "pad1", "foot1", "ankle1", "sword");
			this.enemy_large1_spriteOrder = new Array("gun", "foot", "ankle", "pad2", "body", "head", "shoulder", "pad1", "foot", "ankle", "sword");
			this.enemy_large1_frame = 0;
			this.beanAnimWidth = new Array();
			this.beanAnimHeight = new Array();
			this.beanAnimOrigin_x = new Array();
			this.beanAnimOrigin_y = new Array();
			this.beanAnimFrMax = new Array();
			this.teenieAnimWidth = new Array();
			this.teenieAnimHeight = new Array();
			this.teenieAnimOrigin_x = new Array();
			this.teenieAnimOrigin_y = new Array();
			this.teenieAnimFrMax = new Array();
			this.bean_anim0_0 = new BitmapData(1, 1, true, 0);
			this.bean_anim1_0 = new BitmapData(1, 1, true, 0);
			this.bean_anim2_0 = new BitmapData(1, 1, true, 0);
			this.bean_anim3_0 = new BitmapData(1, 1, true, 0);
			this.bean_anim4_0 = new BitmapData(1, 1, true, 0);
			this.bean_anim5_0 = new BitmapData(1, 1, true, 0);
			this.bean_anim6_0 = new BitmapData(1, 1, true, 0);
			this.bean_anim0_1 = new BitmapData(1, 1, true, 0);
			this.bean_anim1_1 = new BitmapData(1, 1, true, 0);
			this.bean_anim2_1 = new BitmapData(1, 1, true, 0);
			this.bean_anim3_1 = new BitmapData(1, 1, true, 0);
			this.bean_anim4_1 = new BitmapData(1, 1, true, 0);
			this.bean_anim5_1 = new BitmapData(1, 1, true, 0);
			this.bean_anim6_1 = new BitmapData(1, 1, true, 0);
			this.teenie_anim0_0 = new BitmapData(1, 1, true, 0);
			this.teenie_anim1_0 = new BitmapData(1, 1, true, 0);
			this.teenie_anim2_0 = new BitmapData(1, 1, true, 0);
			this.teenie_anim3_0 = new BitmapData(1, 1, true, 0);
			this.teenie_anim4_0 = new BitmapData(1, 1, true, 0);
			this.teenie_anim5_0 = new BitmapData(1, 1, true, 0);
			this.teenie_anim0_1 = new BitmapData(1, 1, true, 0);
			this.teenie_anim1_1 = new BitmapData(1, 1, true, 0);
			this.teenie_anim2_1 = new BitmapData(1, 1, true, 0);
			this.teenie_anim3_1 = new BitmapData(1, 1, true, 0);
			this.teenie_anim4_1 = new BitmapData(1, 1, true, 0);
			this.teenie_anim5_1 = new BitmapData(1, 1, true, 0);
			if (this.stinkyBeanMode == true)
			{
				this.tempMc = new stinkyBean_anim();
				this.a = 0;
				while (this.a < this.tempMc.totalFrames)
				{
					
					this.tempMc.gotoAndStop((this.a + 1));
					this.beanAnimWidth.push(this.tempMc.width);
					this.beanAnimHeight.push(this.tempMc.height);
					this.beanAnimOrigin_x.push(this.tempMc.anim.origin.x);
					this.beanAnimOrigin_y.push(this.tempMc.anim.origin.y);
					this.beanAnimFrMax.push((this.tempMc.anim.totalFrames - 1));
					this["bean_anim" + this.a + "_0"] = new BitmapData(this.tempMc.width * this.tempMc.anim.totalFrames, this.tempMc.height, true, 0);
					this["bean_anim" + this.a + "_1"] = new BitmapData(this.tempMc.width * this.tempMc.anim.totalFrames, this.tempMc.height, true, 0);
					this.trans = new Matrix();
					this.b = 0;
					while (this.b < this.tempMc.anim.totalFrames)
					{
						
						this.tempMc.anim.gotoAndStop((this.b + 1));
						this.trans.tx = this.b * this.tempMc.width;
						this.trans.ty = 0;
						this["bean_anim" + this.a + "_0"].draw(this.tempMc, this.trans);
						
						this.b  ++ ;
						
					}
					this.trans = new Matrix();
					this.trans.a = -1;
					this.b = 0;
					while (this.b < this.tempMc.anim.totalFrames)
					{
						
						this.tempMc.anim.gotoAndStop((this.b + 1));
						this.trans.tx = (this.b + 1) * this.tempMc.width;
						this.trans.ty = 0;
						this["bean_anim" + this.a + "_1"].draw(this.tempMc, this.trans);
						
						this.b  ++ ;
						
					}
					
					this.a  ++ ;
					
				}
				this.tempMc = new teenieBeanie_anim();
				this.a = 0;
				while (this.a < this.tempMc.totalFrames)
				{
					
					this.tempMc.gotoAndStop((this.a + 1));
					this.teenieAnimWidth.push(this.tempMc.width);
					this.teenieAnimHeight.push(this.tempMc.height);
					this.teenieAnimOrigin_x.push(this.tempMc.anim.origin.x);
					this.teenieAnimOrigin_y.push(this.tempMc.anim.origin.y);
					this.teenieAnimFrMax.push((this.tempMc.anim.totalFrames - 1));
					this["teenie_anim" + this.a + "_0"] = new BitmapData(this.tempMc.width * this.tempMc.anim.totalFrames, this.tempMc.height, true, 0);
					this["teenie_anim" + this.a + "_1"] = new BitmapData(this.tempMc.width * this.tempMc.anim.totalFrames, this.tempMc.height, true, 0);
					this.trans = new Matrix();
					this.b = 0;
					while (this.b < this.tempMc.anim.totalFrames)
					{
						
						this.tempMc.anim.gotoAndStop((this.b + 1));
						this.trans.tx = this.b * this.tempMc.width;
						this.trans.ty = 0;
						this["teenie_anim" + this.a + "_0"].draw(this.tempMc, this.trans);
						
						this.b  ++ ;
						
					}
					this.trans = new Matrix();
					this.trans.a = -1;
					this.b = 0;
					while (this.b < this.tempMc.anim.totalFrames)
					{
						
						this.tempMc.anim.gotoAndStop((this.b + 1));
						this.trans.tx = (this.b + 1) * this.tempMc.width;
						this.trans.ty = 0;
						this["teenie_anim" + this.a + "_1"].draw(this.tempMc, this.trans);
						
						this.b  ++ ;
						
					}
					
					this.a  ++ ;
					
				}
			}
			this.zombieAnim_1_head_x = new Vector.<Number>([]);
			this.zombieAnim_1_head_y = new Vector.<Number>([]);
			this.zombieAnim_1_head_r = new Vector.<Number>([]);
			this.zombieAnim_1_body_x = new Vector.<Number>([]);
			this.zombieAnim_1_body_y = new Vector.<Number>([]);
			this.zombieAnim_1_body_r = new Vector.<Number>([]);
			this.zombieAnim_1_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_1_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_1_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_1_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_1_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_1_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_1_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_1_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_1_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_1_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_1_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_1_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_1_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_1_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_1_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_1_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_1_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_1_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_2_head_x = new Vector.<Number>([]);
			this.zombieAnim_2_head_y = new Vector.<Number>([]);
			this.zombieAnim_2_head_r = new Vector.<Number>([]);
			this.zombieAnim_2_body_x = new Vector.<Number>([]);
			this.zombieAnim_2_body_y = new Vector.<Number>([]);
			this.zombieAnim_2_body_r = new Vector.<Number>([]);
			this.zombieAnim_2_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_2_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_2_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_2_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_2_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_2_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_2_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_2_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_2_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_2_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_2_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_2_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_2_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_2_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_2_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_2_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_2_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_2_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_3_head_x = new Vector.<Number>([]);
			this.zombieAnim_3_head_y = new Vector.<Number>([]);
			this.zombieAnim_3_head_r = new Vector.<Number>([]);
			this.zombieAnim_3_body_x = new Vector.<Number>([]);
			this.zombieAnim_3_body_y = new Vector.<Number>([]);
			this.zombieAnim_3_body_r = new Vector.<Number>([]);
			this.zombieAnim_3_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_3_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_3_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_3_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_3_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_3_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_3_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_3_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_3_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_3_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_3_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_3_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_3_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_3_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_3_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_3_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_3_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_3_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_4_head_x = new Vector.<Number>([]);
			this.zombieAnim_4_head_y = new Vector.<Number>([]);
			this.zombieAnim_4_head_r = new Vector.<Number>([]);
			this.zombieAnim_4_body_x = new Vector.<Number>([]);
			this.zombieAnim_4_body_y = new Vector.<Number>([]);
			this.zombieAnim_4_body_r = new Vector.<Number>([]);
			this.zombieAnim_4_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_4_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_4_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_4_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_4_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_4_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_4_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_4_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_4_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_4_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_4_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_4_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_4_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_4_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_4_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_4_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_4_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_4_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_5_head_x = new Vector.<Number>([]);
			this.zombieAnim_5_head_y = new Vector.<Number>([]);
			this.zombieAnim_5_head_r = new Vector.<Number>([]);
			this.zombieAnim_5_body_x = new Vector.<Number>([]);
			this.zombieAnim_5_body_y = new Vector.<Number>([]);
			this.zombieAnim_5_body_r = new Vector.<Number>([]);
			this.zombieAnim_5_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_5_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_5_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_5_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_5_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_5_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_5_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_5_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_5_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_5_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_5_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_5_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_5_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_5_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_5_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_5_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_5_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_5_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_6_head_x = new Vector.<Number>([]);
			this.zombieAnim_6_head_y = new Vector.<Number>([]);
			this.zombieAnim_6_head_r = new Vector.<Number>([]);
			this.zombieAnim_6_body_x = new Vector.<Number>([]);
			this.zombieAnim_6_body_y = new Vector.<Number>([]);
			this.zombieAnim_6_body_r = new Vector.<Number>([]);
			this.zombieAnim_6_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_6_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_6_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_6_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_6_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_6_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_6_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_6_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_6_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_6_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_6_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_6_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_6_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_6_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_6_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_6_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_6_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_6_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_7_head_x = new Vector.<Number>([]);
			this.zombieAnim_7_head_y = new Vector.<Number>([]);
			this.zombieAnim_7_head_r = new Vector.<Number>([]);
			this.zombieAnim_7_body_x = new Vector.<Number>([]);
			this.zombieAnim_7_body_y = new Vector.<Number>([]);
			this.zombieAnim_7_body_r = new Vector.<Number>([]);
			this.zombieAnim_7_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_7_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_7_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_7_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_7_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_7_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_7_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_7_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_7_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_7_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_7_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_7_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_7_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_7_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_7_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_7_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_7_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_7_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_8_head_x = new Vector.<Number>([]);
			this.zombieAnim_8_head_y = new Vector.<Number>([]);
			this.zombieAnim_8_head_r = new Vector.<Number>([]);
			this.zombieAnim_8_body_x = new Vector.<Number>([]);
			this.zombieAnim_8_body_y = new Vector.<Number>([]);
			this.zombieAnim_8_body_r = new Vector.<Number>([]);
			this.zombieAnim_8_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_8_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_8_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_8_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_8_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_8_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_8_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_8_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_8_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_8_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_8_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_8_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_8_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_8_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_8_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_8_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_8_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_8_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_9_head_x = new Vector.<Number>([]);
			this.zombieAnim_9_head_y = new Vector.<Number>([]);
			this.zombieAnim_9_head_r = new Vector.<Number>([]);
			this.zombieAnim_9_body_x = new Vector.<Number>([]);
			this.zombieAnim_9_body_y = new Vector.<Number>([]);
			this.zombieAnim_9_body_r = new Vector.<Number>([]);
			this.zombieAnim_9_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_9_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_9_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_9_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_9_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_9_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_9_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_9_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_9_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_9_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_9_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_9_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_9_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_9_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_9_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_9_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_9_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_9_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_10_head_x = new Vector.<Number>([]);
			this.zombieAnim_10_head_y = new Vector.<Number>([]);
			this.zombieAnim_10_head_r = new Vector.<Number>([]);
			this.zombieAnim_10_body_x = new Vector.<Number>([]);
			this.zombieAnim_10_body_y = new Vector.<Number>([]);
			this.zombieAnim_10_body_r = new Vector.<Number>([]);
			this.zombieAnim_10_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_10_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_10_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_10_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_10_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_10_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_10_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_10_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_10_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_10_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_10_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_10_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_10_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_10_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_10_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_10_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_10_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_10_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_11_head_x = new Vector.<Number>([]);
			this.zombieAnim_11_head_y = new Vector.<Number>([]);
			this.zombieAnim_11_head_r = new Vector.<Number>([]);
			this.zombieAnim_11_body_x = new Vector.<Number>([]);
			this.zombieAnim_11_body_y = new Vector.<Number>([]);
			this.zombieAnim_11_body_r = new Vector.<Number>([]);
			this.zombieAnim_11_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_11_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_11_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_11_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_11_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_11_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_11_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_11_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_11_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_11_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_11_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_11_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_11_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_11_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_11_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_11_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_11_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_11_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_12_head_x = new Vector.<Number>([]);
			this.zombieAnim_12_head_y = new Vector.<Number>([]);
			this.zombieAnim_12_head_r = new Vector.<Number>([]);
			this.zombieAnim_12_body_x = new Vector.<Number>([]);
			this.zombieAnim_12_body_y = new Vector.<Number>([]);
			this.zombieAnim_12_body_r = new Vector.<Number>([]);
			this.zombieAnim_12_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_12_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_12_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_12_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_12_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_12_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_12_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_12_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_12_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_12_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_12_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_12_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_12_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_12_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_12_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_12_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_12_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_12_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_13_head_x = new Vector.<Number>([]);
			this.zombieAnim_13_head_y = new Vector.<Number>([]);
			this.zombieAnim_13_head_r = new Vector.<Number>([]);
			this.zombieAnim_13_body_x = new Vector.<Number>([]);
			this.zombieAnim_13_body_y = new Vector.<Number>([]);
			this.zombieAnim_13_body_r = new Vector.<Number>([]);
			this.zombieAnim_13_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_13_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_13_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_13_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_13_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_13_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_13_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_13_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_13_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_13_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_13_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_13_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_13_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_13_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_13_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_13_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_13_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_13_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_14_head_x = new Vector.<Number>([]);
			this.zombieAnim_14_head_y = new Vector.<Number>([]);
			this.zombieAnim_14_head_r = new Vector.<Number>([]);
			this.zombieAnim_14_body_x = new Vector.<Number>([]);
			this.zombieAnim_14_body_y = new Vector.<Number>([]);
			this.zombieAnim_14_body_r = new Vector.<Number>([]);
			this.zombieAnim_14_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_14_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_14_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_14_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_14_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_14_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_14_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_14_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_14_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_14_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_14_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_14_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_14_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_14_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_14_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_14_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_14_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_14_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_15_head_x = new Vector.<Number>([]);
			this.zombieAnim_15_head_y = new Vector.<Number>([]);
			this.zombieAnim_15_head_r = new Vector.<Number>([]);
			this.zombieAnim_15_body_x = new Vector.<Number>([]);
			this.zombieAnim_15_body_y = new Vector.<Number>([]);
			this.zombieAnim_15_body_r = new Vector.<Number>([]);
			this.zombieAnim_15_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_15_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_15_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_15_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_15_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_15_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_15_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_15_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_15_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_15_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_15_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_15_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_15_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_15_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_15_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_15_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_15_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_15_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_16_head_x = new Vector.<Number>([]);
			this.zombieAnim_16_head_y = new Vector.<Number>([]);
			this.zombieAnim_16_head_r = new Vector.<Number>([]);
			this.zombieAnim_16_body_x = new Vector.<Number>([]);
			this.zombieAnim_16_body_y = new Vector.<Number>([]);
			this.zombieAnim_16_body_r = new Vector.<Number>([]);
			this.zombieAnim_16_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_16_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_16_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_16_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_16_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_16_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_16_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_16_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_16_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_16_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_16_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_16_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_16_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_16_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_16_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_16_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_16_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_16_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_17_head_x = new Vector.<Number>([]);
			this.zombieAnim_17_head_y = new Vector.<Number>([]);
			this.zombieAnim_17_head_r = new Vector.<Number>([]);
			this.zombieAnim_17_body_x = new Vector.<Number>([]);
			this.zombieAnim_17_body_y = new Vector.<Number>([]);
			this.zombieAnim_17_body_r = new Vector.<Number>([]);
			this.zombieAnim_17_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_17_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_17_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_17_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_17_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_17_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_17_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_17_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_17_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_17_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_17_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_17_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_17_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_17_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_17_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_17_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_17_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_17_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_18_head_x = new Vector.<Number>([]);
			this.zombieAnim_18_head_y = new Vector.<Number>([]);
			this.zombieAnim_18_head_r = new Vector.<Number>([]);
			this.zombieAnim_18_body_x = new Vector.<Number>([]);
			this.zombieAnim_18_body_y = new Vector.<Number>([]);
			this.zombieAnim_18_body_r = new Vector.<Number>([]);
			this.zombieAnim_18_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_18_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_18_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_18_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_18_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_18_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_18_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_18_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_18_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_18_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_18_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_18_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_18_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_18_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_18_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_18_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_18_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_18_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_19_head_x = new Vector.<Number>([]);
			this.zombieAnim_19_head_y = new Vector.<Number>([]);
			this.zombieAnim_19_head_r = new Vector.<Number>([]);
			this.zombieAnim_19_body_x = new Vector.<Number>([]);
			this.zombieAnim_19_body_y = new Vector.<Number>([]);
			this.zombieAnim_19_body_r = new Vector.<Number>([]);
			this.zombieAnim_19_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_19_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_19_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_19_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_19_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_19_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_19_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_19_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_19_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_19_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_19_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_19_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_19_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_19_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_19_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_19_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_19_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_19_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_20_head_x = new Vector.<Number>([]);
			this.zombieAnim_20_head_y = new Vector.<Number>([]);
			this.zombieAnim_20_head_r = new Vector.<Number>([]);
			this.zombieAnim_20_body_x = new Vector.<Number>([]);
			this.zombieAnim_20_body_y = new Vector.<Number>([]);
			this.zombieAnim_20_body_r = new Vector.<Number>([]);
			this.zombieAnim_20_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_20_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_20_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_20_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_20_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_20_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_20_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_20_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_20_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_20_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_20_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_20_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_20_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_20_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_20_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_20_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_20_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_20_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_21_head_x = new Vector.<Number>([]);
			this.zombieAnim_21_head_y = new Vector.<Number>([]);
			this.zombieAnim_21_head_r = new Vector.<Number>([]);
			this.zombieAnim_21_body_x = new Vector.<Number>([]);
			this.zombieAnim_21_body_y = new Vector.<Number>([]);
			this.zombieAnim_21_body_r = new Vector.<Number>([]);
			this.zombieAnim_21_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_21_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_21_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_21_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_21_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_21_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_21_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_21_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_21_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_21_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_21_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_21_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_21_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_21_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_21_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_21_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_21_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_21_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_22_head_x = new Vector.<Number>([]);
			this.zombieAnim_22_head_y = new Vector.<Number>([]);
			this.zombieAnim_22_head_r = new Vector.<Number>([]);
			this.zombieAnim_22_body_x = new Vector.<Number>([]);
			this.zombieAnim_22_body_y = new Vector.<Number>([]);
			this.zombieAnim_22_body_r = new Vector.<Number>([]);
			this.zombieAnim_22_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_22_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_22_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_22_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_22_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_22_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_22_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_22_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_22_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_22_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_22_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_22_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_22_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_22_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_22_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_22_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_22_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_22_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_23_head_x = new Vector.<Number>([]);
			this.zombieAnim_23_head_y = new Vector.<Number>([]);
			this.zombieAnim_23_head_r = new Vector.<Number>([]);
			this.zombieAnim_23_body_x = new Vector.<Number>([]);
			this.zombieAnim_23_body_y = new Vector.<Number>([]);
			this.zombieAnim_23_body_r = new Vector.<Number>([]);
			this.zombieAnim_23_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_23_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_23_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_23_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_23_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_23_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_23_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_23_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_23_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_23_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_23_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_23_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_23_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_23_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_23_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_23_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_23_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_23_hand2_r = new Vector.<Number>([]);
			this.zombieAnim_24_head_x = new Vector.<Number>([]);
			this.zombieAnim_24_head_y = new Vector.<Number>([]);
			this.zombieAnim_24_head_r = new Vector.<Number>([]);
			this.zombieAnim_24_body_x = new Vector.<Number>([]);
			this.zombieAnim_24_body_y = new Vector.<Number>([]);
			this.zombieAnim_24_body_r = new Vector.<Number>([]);
			this.zombieAnim_24_foot1_x = new Vector.<Number>([]);
			this.zombieAnim_24_foot1_y = new Vector.<Number>([]);
			this.zombieAnim_24_foot1_r = new Vector.<Number>([]);
			this.zombieAnim_24_foot2_x = new Vector.<Number>([]);
			this.zombieAnim_24_foot2_y = new Vector.<Number>([]);
			this.zombieAnim_24_foot2_r = new Vector.<Number>([]);
			this.zombieAnim_24_ankle1_x = new Vector.<Number>([]);
			this.zombieAnim_24_ankle1_y = new Vector.<Number>([]);
			this.zombieAnim_24_ankle1_r = new Vector.<Number>([]);
			this.zombieAnim_24_ankle2_x = new Vector.<Number>([]);
			this.zombieAnim_24_ankle2_y = new Vector.<Number>([]);
			this.zombieAnim_24_ankle2_r = new Vector.<Number>([]);
			this.zombieAnim_24_hand1_x = new Vector.<Number>([]);
			this.zombieAnim_24_hand1_y = new Vector.<Number>([]);
			this.zombieAnim_24_hand1_r = new Vector.<Number>([]);
			this.zombieAnim_24_hand2_x = new Vector.<Number>([]);
			this.zombieAnim_24_hand2_y = new Vector.<Number>([]);
			this.zombieAnim_24_hand2_r = new Vector.<Number>([]);
			this.zombie_maxFrames = new Array();
			if (this.zombieMode == true)
			{
				this.tempMc = new zombie_animation_container();
				this.zombie_maxFrames.push(0);
				this.a = 1;
				while (this.a < (this.tempMc.totalFrames + 1))
				{
					
					this.tempMc.gotoAndStop(this.a);
					this.zombie_maxFrames.push((this.tempMc.c.totalFrames - 1));
					this.b = 1;
					while (this.b < (this.tempMc.c.totalFrames + 1))
					{
						
						this.tempMc.c.gotoAndStop(this.b);
						this["zombieAnim_" + this.a + "_head_x"].push(this.tempMc.c.head.x);
						this["zombieAnim_" + this.a + "_head_y"].push(this.tempMc.c.head.y);
						this["zombieAnim_" + this.a + "_head_r"].push(int(this.tempMc.c.head.rotation / (180 / Math.PI) * 1000) / 1000);
						this["zombieAnim_" + this.a + "_body_x"].push(this.tempMc.c.body.x);
						this["zombieAnim_" + this.a + "_body_y"].push(this.tempMc.c.body.y);
						this["zombieAnim_" + this.a + "_body_r"].push(int(this.tempMc.c.body.rotation / (180 / Math.PI) * 1000) / 1000);
						this["zombieAnim_" + this.a + "_foot1_x"].push(this.tempMc.c.foot1.x);
						this["zombieAnim_" + this.a + "_foot1_y"].push(this.tempMc.c.foot1.y);
						this["zombieAnim_" + this.a + "_foot1_r"].push(int(this.tempMc.c.foot1.rotation / (180 / Math.PI) * 1000) / 1000);
						this["zombieAnim_" + this.a + "_foot2_x"].push(this.tempMc.c.foot2.x);
						this["zombieAnim_" + this.a + "_foot2_y"].push(this.tempMc.c.foot2.y);
						this["zombieAnim_" + this.a + "_foot2_r"].push(int(this.tempMc.c.foot2.rotation / (180 / Math.PI) * 1000) / 1000);
						this["zombieAnim_" + this.a + "_ankle1_x"].push(this.tempMc.c.ankle1.x);
						this["zombieAnim_" + this.a + "_ankle1_y"].push(this.tempMc.c.ankle1.y);
						this["zombieAnim_" + this.a + "_ankle1_r"].push(int(this.tempMc.c.ankle1.rotation / (180 / Math.PI) * 1000) / 1000);
						this["zombieAnim_" + this.a + "_ankle2_x"].push(this.tempMc.c.ankle2.x);
						this["zombieAnim_" + this.a + "_ankle2_y"].push(this.tempMc.c.ankle2.y);
						this["zombieAnim_" + this.a + "_ankle2_r"].push(int(this.tempMc.c.ankle2.rotation / (180 / Math.PI) * 1000) / 1000);
						this["zombieAnim_" + this.a + "_hand1_x"].push(this.tempMc.c.hand1.x);
						this["zombieAnim_" + this.a + "_hand1_y"].push(this.tempMc.c.hand1.y);
						this["zombieAnim_" + this.a + "_hand1_r"].push(int(this.tempMc.c.hand1.rotation / (180 / Math.PI) * 1000) / 1000);
						this["zombieAnim_" + this.a + "_hand2_x"].push(this.tempMc.c.hand2.x);
						this["zombieAnim_" + this.a + "_hand2_y"].push(this.tempMc.c.hand2.y);
						this["zombieAnim_" + this.a + "_hand2_r"].push(int(this.tempMc.c.hand2.rotation / (180 / Math.PI) * 1000) / 1000);
						
						this.b  ++ ;
						
					}
					
					this.a  ++ ;
					
				}
			}
			this.zombie_head_0 = new Sprite();
			this.zombie_head_0_bm = new BitmapData(1, 1, true, 0);
			this.zombie_body_0 = new Sprite();
			this.zombie_body_0_bm = new BitmapData(1, 1, true, 0);
			this.zombie_foot_0 = new Sprite();
			this.zombie_foot_0_bm = new BitmapData(1, 1, true, 0);
			this.zombie_ankle_0 = new Sprite();
			this.zombie_ankle_0_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand1_0 = new Sprite();
			this.zombie_hand1_0_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand2_0 = new Sprite();
			this.zombie_hand2_0_bm = new BitmapData(1, 1, true, 0);
			this.zombie_head_1 = new Sprite();
			this.zombie_head_1_bm = new BitmapData(1, 1, true, 0);
			this.zombie_body_1 = new Sprite();
			this.zombie_body_1_bm = new BitmapData(1, 1, true, 0);
			this.zombie_foot_1 = new Sprite();
			this.zombie_foot_1_bm = new BitmapData(1, 1, true, 0);
			this.zombie_ankle_1 = new Sprite();
			this.zombie_ankle_1_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand1_1 = new Sprite();
			this.zombie_hand1_1_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand2_1 = new Sprite();
			this.zombie_hand2_1_bm = new BitmapData(1, 1, true, 0);
			this.zombie_head_2 = new Sprite();
			this.zombie_head_2_bm = new BitmapData(1, 1, true, 0);
			this.zombie_body_2 = new Sprite();
			this.zombie_body_2_bm = new BitmapData(1, 1, true, 0);
			this.zombie_foot_2 = new Sprite();
			this.zombie_foot_2_bm = new BitmapData(1, 1, true, 0);
			this.zombie_ankle_2 = new Sprite();
			this.zombie_ankle_2_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand1_2 = new Sprite();
			this.zombie_hand1_2_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand2_2 = new Sprite();
			this.zombie_hand2_2_bm = new BitmapData(1, 1, true, 0);
			this.zombie_head_3 = new Sprite();
			this.zombie_head_3_bm = new BitmapData(1, 1, true, 0);
			this.zombie_body_3 = new Sprite();
			this.zombie_body_3_bm = new BitmapData(1, 1, true, 0);
			this.zombie_foot_3 = new Sprite();
			this.zombie_foot_3_bm = new BitmapData(1, 1, true, 0);
			this.zombie_ankle_3 = new Sprite();
			this.zombie_ankle_3_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand1_3 = new Sprite();
			this.zombie_hand1_3_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand2_3 = new Sprite();
			this.zombie_hand2_3_bm = new BitmapData(1, 1, true, 0);
			this.zombie_head_4 = new Sprite();
			this.zombie_head_4_bm = new BitmapData(1, 1, true, 0);
			this.zombie_body_4 = new Sprite();
			this.zombie_body_4_bm = new BitmapData(1, 1, true, 0);
			this.zombie_foot_4 = new Sprite();
			this.zombie_foot_4_bm = new BitmapData(1, 1, true, 0);
			this.zombie_ankle_4 = new Sprite();
			this.zombie_ankle_4_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand1_4 = new Sprite();
			this.zombie_hand1_4_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand2_4 = new Sprite();
			this.zombie_hand2_4_bm = new BitmapData(1, 1, true, 0);
			this.zombie_head_5 = new Sprite();
			this.zombie_head_5_bm = new BitmapData(1, 1, true, 0);
			this.zombie_body_5 = new Sprite();
			this.zombie_body_5_bm = new BitmapData(1, 1, true, 0);
			this.zombie_foot_5 = new Sprite();
			this.zombie_foot_5_bm = new BitmapData(1, 1, true, 0);
			this.zombie_ankle_5 = new Sprite();
			this.zombie_ankle_5_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand1_5 = new Sprite();
			this.zombie_hand1_5_bm = new BitmapData(1, 1, true, 0);
			this.zombie_hand2_5 = new Sprite();
			this.zombie_hand2_5_bm = new BitmapData(1, 1, true, 0);
			this.a = 0;
			while (this.a < 6)
			{
				
				this.tempMc = new zombie_head_mc();
				this.tempMc.gotoAndStop(this.a);
				this["zombie_head_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["zombie_head_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["zombie_head_" + this.a].graphics.clear();
				if (this.smoothEnemies == true)
				{
					this["zombie_head_" + this.a].graphics.beginBitmapFill(this["zombie_head_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["zombie_head_" + this.a].graphics.beginBitmapFill(this["zombie_head_" + this.a + "_bm"], this.trans, false, false);
				}
				this["zombie_head_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new zombie_body_mc();
				this.tempMc.gotoAndStop(this.a);
				this["zombie_body_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["zombie_body_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["zombie_body_" + this.a].graphics.clear();
				if (this.smoothEnemies == true)
				{
					this["zombie_body_" + this.a].graphics.beginBitmapFill(this["zombie_body_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["zombie_body_" + this.a].graphics.beginBitmapFill(this["zombie_body_" + this.a + "_bm"], this.trans, false, false);
				}
				this["zombie_body_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new zombie_foot_mc();
				this.tempMc.gotoAndStop(this.a);
				this["zombie_foot_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["zombie_foot_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["zombie_foot_" + this.a].graphics.clear();
				if (this.smoothEnemies == true)
				{
					this["zombie_foot_" + this.a].graphics.beginBitmapFill(this["zombie_foot_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["zombie_foot_" + this.a].graphics.beginBitmapFill(this["zombie_foot_" + this.a + "_bm"], this.trans, false, false);
				}
				this["zombie_foot_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new zombie_ankle_mc();
				this.tempMc.gotoAndStop(this.a);
				this["zombie_ankle_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["zombie_ankle_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["zombie_ankle_" + this.a].graphics.clear();
				this["zombie_ankle_" + this.a].graphics.beginBitmapFill(this["zombie_ankle_" + this.a + "_bm"], this.trans, false, false);
				this["zombie_ankle_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new zombie_hand1_mc();
				this.tempMc.gotoAndStop(this.a);
				this["zombie_hand1_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["zombie_hand1_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["zombie_hand1_" + this.a].graphics.clear();
				if (this.smoothEnemies == true)
				{
					this["zombie_hand1_" + this.a].graphics.beginBitmapFill(this["zombie_hand1_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["zombie_hand1_" + this.a].graphics.beginBitmapFill(this["zombie_hand1_" + this.a + "_bm"], this.trans, false, false);
				}
				this["zombie_hand1_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				this.tempMc = new zombie_hand2_mc();
				this.tempMc.gotoAndStop(this.a);
				this["zombie_hand2_" + this.a + "_bm"] = new BitmapData(this.tempMc.box.width, this.tempMc.box.height, true, 0);
				this.tempMc.box.visible = false;
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.trans = new Matrix();
				this.trans.tx = -this.tempMc.box.x;
				this.trans.ty = -this.tempMc.box.y;
				this["zombie_hand2_" + this.a + "_bm"].draw(this.tempMc, this.trans);
				this.trans.tx = this.tempMc.box.x;
				this.trans.ty = this.tempMc.box.y;
				this["zombie_hand2_" + this.a].graphics.clear();
				if (this.smoothEnemies == true)
				{
					this["zombie_hand2_" + this.a].graphics.beginBitmapFill(this["zombie_hand2_" + this.a + "_bm"], this.trans, false, true);
				}
				else
				{
					this["zombie_hand2_" + this.a].graphics.beginBitmapFill(this["zombie_hand2_" + this.a + "_bm"], this.trans, false, false);
				}
				this["zombie_hand2_" + this.a].graphics.drawRect(this.tempMc.box.x, this.tempMc.box.y, this.tempMc.box.width, this.tempMc.box.height);
				
				this.a  ++ ;
				
			}
			this.gun_flash_0 = new Sprite();
			this.gun_flash_1 = new Sprite();
			this.gun_flash_2 = new Sprite();
			this.gun_flash_3 = new Sprite();
			this.gun_flash_4 = new Sprite();
			this.tempMc = new gun_flash_mc();
			this.gun_flash_bm = new BitmapData(1, 1, true, 0);
			this.a = 0;
			while (this.a < 5)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans = new Matrix();
				this.gun_flash_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
				this.gun_flash_bm.draw(this.tempMc, this.trans, null, null, null, true);
				this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
				this["gun_flash_" + this.a].graphics.clear();
				this["gun_flash_" + this.a].graphics.beginBitmapFill(this.gun_flash_bm, this.trans, false, true);
				this["gun_flash_" + this.a].graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_flash_smoke();
			this.smokeWidth = this.tempMc.width;
			this.gun_flash_smoke_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.smokeWidth;
				this.trans.ty = 0;
				this.gun_flash_smoke_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_boolit_mc();
			this.boolitWidth = this.tempMc.width;
			this.gun_boolit = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.boolitWidth;
				this.trans.ty = 0;
				this.gun_boolit.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_rocket_mc();
			this.gun_rocket = new Sprite();
			this.trans = new Matrix();
			this.rocket_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.rocket_bm.draw(this.tempMc, this.trans, null, null, null, false);
			this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
			this.gun_rocket.graphics.clear();
			this.gun_rocket.graphics.beginBitmapFill(this.rocket_bm, this.trans, false, true);
			this.gun_rocket.graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
			this.tempMc = new gun_acidBomb_mc();
			this.gun_acidBomb = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.gun_acidBomb.draw(this.tempMc);
			this.tempMc = new gun_acidBomb_drip_mc();
			this.gun_acidBomb_drip = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.tempMc.width;
				this.trans.ty = 0;
				this.gun_acidBomb_drip.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_airsoftPellet_mc();
			this.airsoftPellet = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.airsoftPellet.draw(this.tempMc);
			this.tempMc = new gun_blackhole_mc();
			this.gun_blackhole_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.tempMc.lightning.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 40;
				this.trans.ty = 0;
				this.gun_blackhole_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_blackhole_fx();
			this.gun_blackhole_fx_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.tempMc.fx.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.tempMc.width;
				this.trans.ty = 0;
				this.gun_blackhole_fx_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.gaussTrail = new gun_gaussTrail();
			this.tempMc = new gun_incindary_impact();
			this.gun_incindary_impact_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 65;
				this.trans.ty = 0;
				this.gun_incindary_impact_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new explosion_large();
			this.explosion = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.tempMc.s.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.tempMc.width;
				this.trans.ty = 0;
				this.explosion.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_blood_impact1();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.gun_blood_impact_bm1 = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.tempMc.width;
				this.trans.ty = 0;
				this.gun_blood_impact_bm1.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_blood_impact2();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.gun_blood_impact_bm2 = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.tempMc.width;
				this.trans.ty = 0;
				this.gun_blood_impact_bm2.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_blood_impact3();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.gun_blood_impact3_fr0 = new Sprite();
			this.gun_blood_impact3_fr1 = new Sprite();
			this.gun_blood_impact3_fr2 = new Sprite();
			this.gun_blood_impact3_fr3 = new Sprite();
			this.gun_blood_impact3_fr4 = new Sprite();
			this.gun_blood_impact3_fr5 = new Sprite();
			this.gun_blood_impact3_fr6 = new Sprite();
			this.gun_blood_impact3_fr7 = new Sprite();
			this.gun_blood_impact3_fr8 = new Sprite();
			this.gun_blood_impact3_fr9 = new Sprite();
			this.gun_blood_impact3_fr10 = new Sprite();
			this.gun_blood_impact3_fr11 = new Sprite();
			this.gun_blood_impact3_fr12 = new Sprite();
			this.gun_blood_impact3_fr13 = new Sprite();
			this.gun_blood_impact3_fr14 = new Sprite();
			this.gun_blood_impact_bm3 = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans = new Matrix();
				this.gun_blood_impact_bm3 = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
				this.gun_blood_impact_bm3.draw(this.tempMc, this.trans, null, null, null, false);
				this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
				this["gun_blood_impact3_fr" + this.a].graphics.clear();
				this["gun_blood_impact3_fr" + this.a].graphics.beginBitmapFill(this.gun_blood_impact_bm3, this.trans, false, true);
				this["gun_blood_impact3_fr" + this.a].graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_blood_impact4();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.gun_blood_impact4_fr0 = new Sprite();
			this.gun_blood_impact4_fr1 = new Sprite();
			this.gun_blood_impact4_fr2 = new Sprite();
			this.gun_blood_impact4_fr3 = new Sprite();
			this.gun_blood_impact4_fr4 = new Sprite();
			this.gun_blood_impact4_fr5 = new Sprite();
			this.gun_blood_impact4_fr6 = new Sprite();
			this.gun_blood_impact4_fr7 = new Sprite();
			this.gun_blood_impact4_fr8 = new Sprite();
			this.gun_blood_impact_bm4 = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans = new Matrix();
				this.gun_blood_impact_bm4 = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
				this.gun_blood_impact_bm4.draw(this.tempMc, this.trans, null, null, null, false);
				this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
				this["gun_blood_impact4_fr" + this.a].graphics.clear();
				this["gun_blood_impact4_fr" + this.a].graphics.beginBitmapFill(this.gun_blood_impact_bm4, this.trans, false, true);
				this["gun_blood_impact4_fr" + this.a].graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_blood_impact5();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.gun_blood_impact_bm5 = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.tempMc.width;
				this.trans.ty = 0;
				this.gun_blood_impact_bm5.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_blood_impact6();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.gun_blood_impact_bm6 = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * this.tempMc.width;
				this.trans.ty = 0;
				this.gun_blood_impact_bm6.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.giblets_human_sprite0 = new Sprite();
			this.giblets_human_sprite1 = new Sprite();
			this.giblets_human_sprite2 = new Sprite();
			this.giblets_human_sprite3 = new Sprite();
			this.giblets_human_sprite4 = new Sprite();
			this.giblets_human_sprite5 = new Sprite();
			this.giblets_human_sprite6 = new Sprite();
			this.giblets_human_sprite7 = new Sprite();
			this.giblets_human_sprite8 = new Sprite();
			this.giblets_human_sprite9 = new Sprite();
			this.tempMc = new giblets_human_mc();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.giblets_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
			this.giblet_height = [];
			this.giblet_posX = [0, 0, 0, 0, 0, -10, -10, 10, 0];
			this.giblet_posY = [0, 0, 0, 0, 0, -15, 15, -5, 0];
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.giblet_height.push(this.tempMc.pivot.y);
				this.trans = new Matrix();
				this.giblets_bm = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
				this.giblets_bm.draw(this.tempMc, this.trans, null, null, null, false);
				this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
				this["giblets_human_sprite" + this.a].graphics.clear();
				this["giblets_human_sprite" + this.a].graphics.beginBitmapFill(this.giblets_bm, this.trans, false, true);
				this["giblets_human_sprite" + this.a].graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
				
				this.a  ++ ;
				
			}
			this.tempMc = new giblets_small_mc();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.giblets_small_bm = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.a = 0;
			while (this.a < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.a + 1));
				this.trans.tx = this.a * 10;
				this.trans.ty = 0;
				this.giblets_small_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.tempMc = new gun_casing();
			this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
			this.gun_casing0 = new BitmapData(1, 1, true, 0);
			this.gun_casing1 = new BitmapData(1, 1, true, 0);
			this.gun_casing2 = new BitmapData(1, 1, true, 0);
			this.gun_casing3 = new BitmapData(1, 1, true, 0);
			this.gun_casing4 = new BitmapData(1, 1, true, 0);
			this.gun_casing5 = new BitmapData(1, 1, true, 0);
			this.gun_casing6 = new BitmapData(1, 1, true, 0);
			this.gun_casing7 = new BitmapData(1, 1, true, 0);
			this.gun_casing8 = new BitmapData(1, 1, true, 0);
			this.gunCasingWidth = new Array();
			this.casingFrames = 16;
			this.trans = new Matrix();
			this.tempMc.gotoAndStop(1);
			this["gun_casing" + 0] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this["gun_casing" + 0].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc.gotoAndStop(18);
			this[("gun_casing" + 1)] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(18 + this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this[("gun_casing" + 1)].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc.gotoAndStop(35);
			this["gun_casing" + 2] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(35 + this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this["gun_casing" + 2].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc.gotoAndStop(52);
			this["gun_casing" + 3] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(52 + this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this["gun_casing" + 3].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc.gotoAndStop(69);
			this["gun_casing" + 4] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(69 + this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this["gun_casing" + 4].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc.gotoAndStop(86);
			this["gun_casing" + 5] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(86 + this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this["gun_casing" + 5].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc.gotoAndStop(103);
			this["gun_casing" + 6] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(103 + this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this["gun_casing" + 6].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc.gotoAndStop(121);
			this["gun_casing" + 7] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(121 + this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this["gun_casing" + 7].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc.gotoAndStop(137);
			this["gun_casing" + 8] = new BitmapData(this.tempMc.width * this.casingFrames, this.tempMc.height, true, 0);
			this.gunCasingWidth.push(this.tempMc.width);
			this.b = 0;
			while (this.b < this.casingFrames)
			{
				
				this.tempMc.gotoAndStop(137 + this.b);
				this.trans.tx = this.b * this.tempMc.width;
				this["gun_casing" + 8].draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempMc = new gun_sparks_mc();
			this.spark_bm = new BitmapData(12 * 15, 12, true, 0);
			this.a = 0;
			while (this.a < 15)
			{
				
				this.trans.tx = 12 * this.a;
				this.trans.ty = 0;
				this.tempMc.gotoAndStop((this.a + 1));
				this.spark_bm.draw(this.tempMc, this.trans);
				
				this.a  ++ ;
				
			}
			this.trans = new Matrix();
			this.tempMc = new bean_gib_eyes();
			this.bean_gib_eye = new BitmapData(this.tempMc.width * this.tempMc.totalFrames, this.tempMc.height, true, 0);
			this.b = 0;
			while (this.b < this.tempMc.totalFrames)
			{
				
				this.tempMc.gotoAndStop((this.b + 1));
				this.trans.tx = this.b * this.tempMc.width;
				this.bean_gib_eye.draw(this.tempMc, this.trans);
				
				this.b  ++ ;
				
			}
			this.tempGunBM = new BitmapData(1, 1, true, 0);
			this.gunShoulder_x = new Vector.<int>([]);
			this.gunShoulder_y = new Vector.<int>([]);
			this.gun_barrel_x = new Vector.<Number>([]);
			this.gun_barrel_y = new Vector.<Number>([]);
			this.gun_eject_x = new Vector.<int>([]);
			this.gun_eject_y = new Vector.<int>([]);
			this.gun_dist = new Array(45, 60, 60, 60, 30, 35, 45, 45, 40, 40, 40, 30, 30, 35, 45, 15, 25, 40, 40, 40, 40);
			this.gun_coolDown = new Array(5, 17, 9, 25, 2, 3, 5, 1, 10, 15, 25, 15, 30, 5, 5, 5, 1, 3, 2, 1, 2);
			this.gun_auto = new Array(0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1);
			this.gun_casingType = new Array(0, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0);
			this.gun_bulletType = new Array(0, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 5, 10, 7, 7, 8, 0, 0, 0, 0, 9);
			this.gun_isIncindiary = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.gun_frameToEjectShellOn = new Array(2, 10, 8, 13, 2, 2, 2, 2, 100, 100, 100, 100, 100, 100, 100, 100, 2, 2, 2, 100, 100);
			this.gun_names = ["SPECTRE 9MM", "M1370 PG", "M1370", "IL DUCE", "PDW+9", "XR+556", "UDP 10MM", "AP+1", "MODEL 6+357", "MODEL 5+454", "SS+500", "ACID LOBBER", "ARTIFACT 23", "GAUSS RIFLE", "GAUSS PISTOL", "M35 LAUNCHER", "M3+556 MINIGUN", "KRINKOV", "KRINKOV MOD+0", "MURDER SNUB", "HYPER DEATH BLASTER"];
			this.gun_sfx = new Array(7, 6, 6, 11, 4, 0, 7, 4, 5, 5, 5, 3, 12, 1, 1, 13, 14, 0, 0, 5, 15);
			this.gun_atp = new Array(2, 2.5, 2.5, 2.5, 1, 2.5, 2.5, 0.75, 2.5, 10, 25, 2, 2, 1.75, 1, 6, 1, 2.5, 1, 2.5, 0.05);
			this.gun_atp_enemy = new Array(0.75, 1, 0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 0.05);
			this.gun_mag_size = new Array(20, 5, 4, 2, 32, 30, 12, 65, 6, 5, 4, 3, 1, 1, 1, 2, 120, 30, 30, 5, 200);
			this.gun_ammo = new Array(20, 5, 4, 2, 32, 30, 12, 65, 6, 5, 4, 3, 1, 1, 1, 2, 120, 30, 30, 5, 200);
			this.gun_total_ammo = new Array(500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 10000);
			this.gun_reload_time = new Array(20, 45, 30, 30, 30, 30, 30, 15, 16, 30, 30, 30, 30, 1, 1, 30, 120, 30, 16, 10, 10);
			if (this.gameVersion == 1)
			{
				this.gun_atp[20] = 1;
				this.gun_reload_time[12] = 60;
			}
			this.gun_recoil_x = new Array(10, 55, 50, 50, 15, 10, 15, 10, 20, 50, 110, 55, 100, 30, 30, 70, 15, 30, 30, 30, 0);
			this.gun_recoil_rot = new Array(0.8, 1.9, 1.5, 2.1, 1, 1, 1.5, 1, 2, 2.2, 3, 2, 1, 1.5, 1.5, 1, 0.1, 1, 1, 1.2, 0);
			this.gun_recoil_dampening = new Array(0.65, 0.65, 0.6, 0.675, 0.65, 0.65, 0.65, 0.65, 0.65, 0.675, 0.675, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.4);
			this.gun_recoil_xRecover = new Array(0.6, 0.7, 0.6, 0.5, 0.8, 0.8, 0.6, 0.6, 0.6, 0.5, 0.25, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6);
			this.gun_hasReloadAnim = new Array(1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0);
			this.gun_magDropFrame = new Array(11, 0, 0, 0, 15, 9, 18, 12, 8, 8, 8, 0, 0, 0, 0, 0, 0, 11, 11, 18);
			this.gun_magType = new Array(1, 0, 0, 0, 1, 3, 1, 1, 4, 5, 9, 0, 0, 0, 0, 0, 0, 6, 7, 8);
			this.gun_reload_x = new Array();
			this.gun_reload_y = new Array();
			this.gun_reload_w = new Array();
			this.gun_reload_mag_x = new Array();
			this.gun_reload_mag_y = new Array();
			this.shellHeight = new Array(2, 2, 4, 3, 6, 6, 6, 6, 8);
			this.gunFrames_0 = new Array(0, 4, 4, 3, 2, 1);
			this.gunFrames_1 = new Array(0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 3, 2, 1);
			this.gunFrames_2 = new Array(0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 3, 2, 1);
			this.gunFrames_3 = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 7, 7, 7, 7, 7, 7, 6, 5, 4, 3, 2, 1);
			this.gunFrames_4 = new Array(0, 3, 2, 1);
			this.gunFrames_5 = new Array(0, 3, 2, 1);
			this.gunFrames_6 = new Array(0, 4, 3, 2, 1);
			this.gunFrames_7 = new Array(0, 4, 3, 2, 1);
			this.gunFrames_8 = new Array(0, 0, 0);
			this.gunFrames_9 = new Array(0, 0, 0);
			this.gunFrames_10 = new Array(0, 0, 0);
			this.gunFrames_11 = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3);
			this.gunFrames_12 = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8);
			this.gunFrames_13 = new Array(0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5);
			this.gunFrames_14 = new Array(0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5);
			this.gunFrames_15 = new Array(0, 0, 0);
			this.gunFrames_16 = new Array(0, 1, 1);
			this.gunFrames_17 = new Array(0, 3, 2, 1);
			this.gunFrames_18 = new Array(0, 3, 2, 1);
			this.gunFrames_19 = new Array(0, 0, 0);
			this.gunFrames_20 = new Array(0, 0, 0);
			this.gun_0_right_0 = new Sprite();
			this.gun_0_right_1 = new Sprite();
			this.gun_0_right_2 = new Sprite();
			this.gun_0_right_3 = new Sprite();
			this.gun_0_right_4 = new Sprite();
			this.gun_0_left_0 = new Sprite();
			this.gun_0_left_1 = new Sprite();
			this.gun_0_left_2 = new Sprite();
			this.gun_0_left_3 = new Sprite();
			this.gun_0_left_4 = new Sprite();
			this.gun_0_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_0_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_1_right_0 = new Sprite();
			this.gun_1_right_1 = new Sprite();
			this.gun_1_right_2 = new Sprite();
			this.gun_1_right_3 = new Sprite();
			this.gun_1_right_4 = new Sprite();
			this.gun_1_left_0 = new Sprite();
			this.gun_1_left_1 = new Sprite();
			this.gun_1_left_2 = new Sprite();
			this.gun_1_left_3 = new Sprite();
			this.gun_1_left_4 = new Sprite();
			this.gun_1_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_1_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_2_right_0 = new Sprite();
			this.gun_2_right_1 = new Sprite();
			this.gun_2_right_2 = new Sprite();
			this.gun_2_right_3 = new Sprite();
			this.gun_2_right_4 = new Sprite();
			this.gun_2_left_0 = new Sprite();
			this.gun_2_left_1 = new Sprite();
			this.gun_2_left_2 = new Sprite();
			this.gun_2_left_3 = new Sprite();
			this.gun_2_left_4 = new Sprite();
			this.gun_2_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_2_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_3_right_0 = new Sprite();
			this.gun_3_right_1 = new Sprite();
			this.gun_3_right_2 = new Sprite();
			this.gun_3_right_3 = new Sprite();
			this.gun_3_right_4 = new Sprite();
			this.gun_3_right_5 = new Sprite();
			this.gun_3_right_6 = new Sprite();
			this.gun_3_right_7 = new Sprite();
			this.gun_3_left_0 = new Sprite();
			this.gun_3_left_1 = new Sprite();
			this.gun_3_left_2 = new Sprite();
			this.gun_3_left_3 = new Sprite();
			this.gun_3_left_4 = new Sprite();
			this.gun_3_left_5 = new Sprite();
			this.gun_3_left_6 = new Sprite();
			this.gun_3_left_7 = new Sprite();
			this.gun_3_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_3_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_4_right_0 = new Sprite();
			this.gun_4_right_1 = new Sprite();
			this.gun_4_right_2 = new Sprite();
			this.gun_4_right_3 = new Sprite();
			this.gun_4_right_4 = new Sprite();
			this.gun_4_left_0 = new Sprite();
			this.gun_4_left_1 = new Sprite();
			this.gun_4_left_2 = new Sprite();
			this.gun_4_left_3 = new Sprite();
			this.gun_4_left_4 = new Sprite();
			this.gun_4_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_4_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_5_right_0 = new Sprite();
			this.gun_5_right_1 = new Sprite();
			this.gun_5_right_2 = new Sprite();
			this.gun_5_right_3 = new Sprite();
			this.gun_5_right_4 = new Sprite();
			this.gun_5_left_0 = new Sprite();
			this.gun_5_left_1 = new Sprite();
			this.gun_5_left_2 = new Sprite();
			this.gun_5_left_3 = new Sprite();
			this.gun_5_left_4 = new Sprite();
			this.gun_5_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_5_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_6_right_0 = new Sprite();
			this.gun_6_right_1 = new Sprite();
			this.gun_6_right_2 = new Sprite();
			this.gun_6_right_3 = new Sprite();
			this.gun_6_right_4 = new Sprite();
			this.gun_6_left_0 = new Sprite();
			this.gun_6_left_1 = new Sprite();
			this.gun_6_left_2 = new Sprite();
			this.gun_6_left_3 = new Sprite();
			this.gun_6_left_4 = new Sprite();
			this.gun_6_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_6_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_7_right_0 = new Sprite();
			this.gun_7_right_1 = new Sprite();
			this.gun_7_right_2 = new Sprite();
			this.gun_7_right_3 = new Sprite();
			this.gun_7_right_4 = new Sprite();
			this.gun_7_left_0 = new Sprite();
			this.gun_7_left_1 = new Sprite();
			this.gun_7_left_2 = new Sprite();
			this.gun_7_left_3 = new Sprite();
			this.gun_7_left_4 = new Sprite();
			this.gun_7_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_7_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_8_right_0 = new Sprite();
			this.gun_8_left_0 = new Sprite();
			this.gun_8_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_8_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_9_right_0 = new Sprite();
			this.gun_9_left_0 = new Sprite();
			this.gun_9_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_9_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_10_right_0 = new Sprite();
			this.gun_10_left_0 = new Sprite();
			this.gun_10_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_10_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_11_right_0 = new Sprite();
			this.gun_11_right_1 = new Sprite();
			this.gun_11_right_2 = new Sprite();
			this.gun_11_right_3 = new Sprite();
			this.gun_11_left_0 = new Sprite();
			this.gun_11_left_1 = new Sprite();
			this.gun_11_left_2 = new Sprite();
			this.gun_11_left_3 = new Sprite();
			this.gun_11_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_11_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_12_right_0 = new Sprite();
			this.gun_12_right_1 = new Sprite();
			this.gun_12_right_2 = new Sprite();
			this.gun_12_right_3 = new Sprite();
			this.gun_12_right_4 = new Sprite();
			this.gun_12_right_5 = new Sprite();
			this.gun_12_right_6 = new Sprite();
			this.gun_12_right_7 = new Sprite();
			this.gun_12_right_8 = new Sprite();
			this.gun_12_right_9 = new Sprite();
			this.gun_12_left_0 = new Sprite();
			this.gun_12_left_1 = new Sprite();
			this.gun_12_left_2 = new Sprite();
			this.gun_12_left_3 = new Sprite();
			this.gun_12_left_4 = new Sprite();
			this.gun_12_left_5 = new Sprite();
			this.gun_12_left_6 = new Sprite();
			this.gun_12_left_7 = new Sprite();
			this.gun_12_left_8 = new Sprite();
			this.gun_12_left_9 = new Sprite();
			this.gun_12_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_12_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_13_right_0 = new Sprite();
			this.gun_13_right_1 = new Sprite();
			this.gun_13_right_2 = new Sprite();
			this.gun_13_right_3 = new Sprite();
			this.gun_13_right_4 = new Sprite();
			this.gun_13_right_5 = new Sprite();
			this.gun_13_left_0 = new Sprite();
			this.gun_13_left_1 = new Sprite();
			this.gun_13_left_2 = new Sprite();
			this.gun_13_left_3 = new Sprite();
			this.gun_13_left_4 = new Sprite();
			this.gun_13_left_5 = new Sprite();
			this.gun_13_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_13_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_14_right_0 = new Sprite();
			this.gun_14_right_1 = new Sprite();
			this.gun_14_right_2 = new Sprite();
			this.gun_14_right_3 = new Sprite();
			this.gun_14_right_4 = new Sprite();
			this.gun_14_right_5 = new Sprite();
			this.gun_14_left_0 = new Sprite();
			this.gun_14_left_1 = new Sprite();
			this.gun_14_left_2 = new Sprite();
			this.gun_14_left_3 = new Sprite();
			this.gun_14_left_4 = new Sprite();
			this.gun_14_left_5 = new Sprite();
			this.gun_14_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_14_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_15_right_0 = new Sprite();
			this.gun_15_left_0 = new Sprite();
			this.gun_15_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_15_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_16_right_0 = new Sprite();
			this.gun_16_right_1 = new Sprite();
			this.gun_16_left_0 = new Sprite();
			this.gun_16_left_1 = new Sprite();
			this.gun_16_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_16_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_17_right_0 = new Sprite();
			this.gun_17_right_1 = new Sprite();
			this.gun_17_right_2 = new Sprite();
			this.gun_17_right_3 = new Sprite();
			this.gun_17_left_0 = new Sprite();
			this.gun_17_left_1 = new Sprite();
			this.gun_17_left_2 = new Sprite();
			this.gun_17_left_3 = new Sprite();
			this.gun_17_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_17_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_18_right_0 = new Sprite();
			this.gun_18_right_1 = new Sprite();
			this.gun_18_right_2 = new Sprite();
			this.gun_18_right_3 = new Sprite();
			this.gun_18_left_0 = new Sprite();
			this.gun_18_left_1 = new Sprite();
			this.gun_18_left_2 = new Sprite();
			this.gun_18_left_3 = new Sprite();
			this.gun_18_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_18_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_19_right_0 = new Sprite();
			this.gun_19_left_0 = new Sprite();
			this.gun_19_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_19_reload_left = new BitmapData(1, 1, true, 0);
			this.gun_20_right_0 = new Sprite();
			this.gun_20_left_0 = new Sprite();
			this.gun_20_reload_right = new BitmapData(1, 1, true, 0);
			this.gun_20_reload_left = new BitmapData(1, 1, true, 0);
			this.numberOfGuns = 21;
			this.b = 0;
			while (this.b < this.numberOfGuns)
			{
				
				if (this.b == 0)
				{
					this.tempMc = new gun0();
				}
				else if (this.b == 1)
				{
					this.tempMc = new gun1();
				}
				else if (this.b == 2)
				{
					this.tempMc = new gun2();
				}
				else if (this.b == 3)
				{
					this.tempMc = new gun3();
				}
				else if (this.b == 4)
				{
					this.tempMc = new gun4();
				}
				else if (this.b == 5)
				{
					this.tempMc = new gun5();
				}
				else if (this.b == 6)
				{
					this.tempMc = new gun6();
				}
				else if (this.b == 7)
				{
					this.tempMc = new gun7();
				}
				else if (this.b == 8)
				{
					this.tempMc = new gun8();
				}
				else if (this.b == 9)
				{
					this.tempMc = new gun9();
				}
				else if (this.b == 10)
				{
					this.tempMc = new gun10();
				}
				else if (this.b == 11)
				{
					this.tempMc = new gun11();
				}
				else if (this.b == 12)
				{
					this.tempMc = new gun12();
				}
				else if (this.b == 13)
				{
					this.tempMc = new gun13();
				}
				else if (this.b == 14)
				{
					this.tempMc = new gun14();
				}
				else if (this.b == 15)
				{
					this.tempMc = new gun15();
				}
				else if (this.b == 16)
				{
					this.tempMc = new gun16();
				}
				else if (this.b == 17)
				{
					this.tempMc = new gun17();
				}
				else if (this.b == 18)
				{
					this.tempMc = new gun18();
				}
				else if (this.b == 19)
				{
					this.tempMc = new gun19();
				}
				else if (this.b == 20)
				{
					this.tempMc = new gun20();
				}
				else if (this.b == 21)
				{
				}
				else if (this.b == 22)
				{
				}
				else if (this.b == 23)
				{
				}
				else if (this.b == 24)
				{
				}
				else if (this.b == 25)
				{
				}
				else if (this.b == 26)
				{
				}
				else if (this.b == 27)
				{
				}
				else if (this.b == 28)
				{
				}
				else if (this.b == 29)
				{
				}
				else if (this.b == 30)
				{
				}
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.gunShoulder_x.push(-this.tempMc.pivot.x);
				this.gunShoulder_y.push(-this.tempMc.pivot.y);
				this.gun_barrel_x.push(this.tempMc.barrel.x - this.tempMc.pivot.x);
				this.gun_barrel_y.push(this.tempMc.barrel.y - this.tempMc.pivot.y);
				this.gun_eject_x.push(this.tempMc.eject.x - this.tempMc.pivot.x);
				this.gun_eject_y.push(this.tempMc.eject.y - this.tempMc.pivot.y);
				if (this.b != this.character_weapons[0])
				{
				}
				if (this.b == this.character_weapons[1])
				{
					this.a = 0;
					while (this.a < this.tempMc.totalFrames / 2)
					{
						
						this.trans = new Matrix();
						this.tempMc.gotoAndStop((this.a + 1));
						this.tempMc.hand1.gotoAndStop(this.character_appearance[3]);
						this.tempMc.hand2.gotoAndStop(this.character_appearance[3]);
						this.character_colorTransform = this.tempMc.hand1.color1.transform.colorTransform;
						this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
						this.tempMc.hand1.color1.transform.colorTransform = this.character_colorTransform;
						this.character_colorTransform = this.tempMc.hand2.color1.transform.colorTransform;
						this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
						this.tempMc.hand2.color1.transform.colorTransform = this.character_colorTransform;
						this.tempGunBM = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
						this.tempGunBM.draw(this.tempMc, this.trans, null, null, null, true);
						this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
						this["gun_" + this.b + "_right_" + this.a].graphics.clear();
						this["gun_" + this.b + "_right_" + this.a].graphics.beginBitmapFill(this.tempGunBM, this.trans, false, true);
						this["gun_" + this.b + "_right_" + this.a].graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
						
						this.a  ++ ;
						
					}
					this.a = 0;
					while (this.a < this.tempMc.totalFrames / 2)
					{
						
						this.trans = new Matrix();
						this.tempMc.gotoAndStop(this.a + this.tempMc.totalFrames / 2 + 1);
						this.tempMc.hand1.gotoAndStop(this.character_appearance[3]);
						this.tempMc.hand2.gotoAndStop(this.character_appearance[3]);
						this.tempMc.hand3.gotoAndStop(this.character_appearance[3]);
						this.character_colorTransform = this.tempMc.hand1.color1.transform.colorTransform;
						this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
						this.tempMc.hand1.color1.transform.colorTransform = this.character_colorTransform;
						this.character_colorTransform = this.tempMc.hand2.color1.transform.colorTransform;
						this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
						this.tempMc.hand2.color1.transform.colorTransform = this.character_colorTransform;
						this.tempGunBM = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
						this.tempGunBM.draw(this.tempMc, this.trans, null, null, null, true);
						this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
						this["gun_" + this.b + "_left_" + this.a].graphics.clear();
						this["gun_" + this.b + "_left_" + this.a].graphics.beginBitmapFill(this.tempGunBM, this.trans, false, true);
						this["gun_" + this.b + "_left_" + this.a].graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
						
						this.a  ++ ;
						
					}
				}
				
				this.b  ++ ;
				
			}
			this.enemy_gun_0_right_0 = new Sprite();
			this.enemy_gun_0_right_1 = new Sprite();
			this.enemy_gun_0_right_2 = new Sprite();
			this.enemy_gun_0_right_3 = new Sprite();
			this.enemy_gun_0_right_4 = new Sprite();
			this.enemy_gun_0_right_5 = new Sprite();
			this.enemy_gun_0_right_6 = new Sprite();
			this.enemy_gun_0_right_7 = new Sprite();
			this.enemy_gun_0_left_0 = new Sprite();
			this.enemy_gun_0_left_1 = new Sprite();
			this.enemy_gun_0_left_2 = new Sprite();
			this.enemy_gun_0_left_3 = new Sprite();
			this.enemy_gun_0_left_4 = new Sprite();
			this.enemy_gun_0_left_5 = new Sprite();
			this.enemy_gun_0_left_6 = new Sprite();
			this.enemy_gun_0_left_7 = new Sprite();
			this.enemy_gun_1_right_0 = new Sprite();
			this.enemy_gun_1_right_1 = new Sprite();
			this.enemy_gun_1_right_2 = new Sprite();
			this.enemy_gun_1_right_3 = new Sprite();
			this.enemy_gun_1_right_4 = new Sprite();
			this.enemy_gun_1_right_5 = new Sprite();
			this.enemy_gun_1_right_6 = new Sprite();
			this.enemy_gun_1_right_7 = new Sprite();
			this.enemy_gun_1_left_0 = new Sprite();
			this.enemy_gun_1_left_1 = new Sprite();
			this.enemy_gun_1_left_2 = new Sprite();
			this.enemy_gun_1_left_3 = new Sprite();
			this.enemy_gun_1_left_4 = new Sprite();
			this.enemy_gun_1_left_5 = new Sprite();
			this.enemy_gun_1_left_6 = new Sprite();
			this.enemy_gun_1_left_7 = new Sprite();
			this.enemy_gun_2_right_0 = new Sprite();
			this.enemy_gun_2_right_1 = new Sprite();
			this.enemy_gun_2_right_2 = new Sprite();
			this.enemy_gun_2_right_3 = new Sprite();
			this.enemy_gun_2_right_4 = new Sprite();
			this.enemy_gun_2_right_5 = new Sprite();
			this.enemy_gun_2_right_6 = new Sprite();
			this.enemy_gun_2_right_7 = new Sprite();
			this.enemy_gun_2_left_0 = new Sprite();
			this.enemy_gun_2_left_1 = new Sprite();
			this.enemy_gun_2_left_2 = new Sprite();
			this.enemy_gun_2_left_3 = new Sprite();
			this.enemy_gun_2_left_4 = new Sprite();
			this.enemy_gun_2_left_5 = new Sprite();
			this.enemy_gun_2_left_6 = new Sprite();
			this.enemy_gun_2_left_7 = new Sprite();
			this.enemy_gun_3_right_0 = new Sprite();
			this.enemy_gun_3_right_1 = new Sprite();
			this.enemy_gun_3_right_2 = new Sprite();
			this.enemy_gun_3_right_3 = new Sprite();
			this.enemy_gun_3_right_4 = new Sprite();
			this.enemy_gun_3_right_5 = new Sprite();
			this.enemy_gun_3_right_6 = new Sprite();
			this.enemy_gun_3_right_7 = new Sprite();
			this.enemy_gun_3_left_0 = new Sprite();
			this.enemy_gun_3_left_1 = new Sprite();
			this.enemy_gun_3_left_2 = new Sprite();
			this.enemy_gun_3_left_3 = new Sprite();
			this.enemy_gun_3_left_4 = new Sprite();
			this.enemy_gun_3_left_5 = new Sprite();
			this.enemy_gun_3_left_6 = new Sprite();
			this.enemy_gun_3_left_7 = new Sprite();
			this.enemy_gun_4_right_0 = new Sprite();
			this.enemy_gun_4_right_1 = new Sprite();
			this.enemy_gun_4_right_2 = new Sprite();
			this.enemy_gun_4_right_3 = new Sprite();
			this.enemy_gun_4_right_4 = new Sprite();
			this.enemy_gun_4_right_5 = new Sprite();
			this.enemy_gun_4_right_6 = new Sprite();
			this.enemy_gun_4_right_7 = new Sprite();
			this.enemy_gun_4_left_0 = new Sprite();
			this.enemy_gun_4_left_1 = new Sprite();
			this.enemy_gun_4_left_2 = new Sprite();
			this.enemy_gun_4_left_3 = new Sprite();
			this.enemy_gun_4_left_4 = new Sprite();
			this.enemy_gun_4_left_5 = new Sprite();
			this.enemy_gun_4_left_6 = new Sprite();
			this.enemy_gun_4_left_7 = new Sprite();
			this.enemy_gun_5_right_0 = new Sprite();
			this.enemy_gun_5_right_1 = new Sprite();
			this.enemy_gun_5_right_2 = new Sprite();
			this.enemy_gun_5_right_3 = new Sprite();
			this.enemy_gun_5_right_4 = new Sprite();
			this.enemy_gun_5_right_5 = new Sprite();
			this.enemy_gun_5_right_6 = new Sprite();
			this.enemy_gun_5_right_7 = new Sprite();
			this.enemy_gun_5_left_0 = new Sprite();
			this.enemy_gun_5_left_1 = new Sprite();
			this.enemy_gun_5_left_2 = new Sprite();
			this.enemy_gun_5_left_3 = new Sprite();
			this.enemy_gun_5_left_4 = new Sprite();
			this.enemy_gun_5_left_5 = new Sprite();
			this.enemy_gun_5_left_6 = new Sprite();
			this.enemy_gun_5_left_7 = new Sprite();
			this.enemyWeapons = [];
			switch(this.levelToLoad)
			{
				case 0:
				{
					this.enemyWeapons = [6, 7, 0, 18, 2];
					break;
				}
				case 2:
				{
					this.enemyWeapons = [0, 4, 0, 19, 8];
					break;
				}
				case 3:
				{
					this.enemyWeapons = [5, 7, 0, 19, 2];
					break;
				}
				case 4:
				{
					this.enemyWeapons = [5, 2, 1, 18, 10];
					break;
				}
				case 5:
				{
					this.enemyWeapons = [17, 4, 0, 1, 9];
					break;
				}
				default:
				{
					this.enemyWeapons = [6, 4, 0, 19, 2];
					break;
					break;
				}
			}
			this.b = 0;
			while (this.b < this.enemyWeapons.length)
			{
				
				if (this.enemyWeapons[this.b] == 0)
				{
					this.tempMc = new gun0();
				}
				else if (this.enemyWeapons[this.b] == 1)
				{
					this.tempMc = new gun1();
				}
				else if (this.enemyWeapons[this.b] == 2)
				{
					this.tempMc = new gun2();
				}
				else if (this.enemyWeapons[this.b] == 3)
				{
					this.tempMc = new gun3();
				}
				else if (this.enemyWeapons[this.b] == 4)
				{
					this.tempMc = new gun4();
				}
				else if (this.enemyWeapons[this.b] == 5)
				{
					this.tempMc = new gun5();
				}
				else if (this.enemyWeapons[this.b] == 6)
				{
					this.tempMc = new gun6();
				}
				else if (this.enemyWeapons[this.b] == 7)
				{
					this.tempMc = new gun7();
				}
				else if (this.enemyWeapons[this.b] == 8)
				{
					this.tempMc = new gun8();
				}
				else if (this.enemyWeapons[this.b] == 9)
				{
					this.tempMc = new gun9();
				}
				else if (this.enemyWeapons[this.b] == 10)
				{
					this.tempMc = new gun10();
				}
				else if (this.enemyWeapons[this.b] == 11)
				{
					this.tempMc = new gun11();
				}
				else if (this.enemyWeapons[this.b] == 12)
				{
					this.tempMc = new gun12();
				}
				else if (this.enemyWeapons[this.b] == 13)
				{
					this.tempMc = new gun13();
				}
				else if (this.enemyWeapons[this.b] == 14)
				{
					this.tempMc = new gun14();
				}
				else if (this.enemyWeapons[this.b] == 15)
				{
					this.tempMc = new gun15();
				}
				else if (this.enemyWeapons[this.b] == 16)
				{
					this.tempMc = new gun16();
				}
				else if (this.enemyWeapons[this.b] == 17)
				{
					this.tempMc = new gun17();
				}
				else if (this.enemyWeapons[this.b] == 18)
				{
					this.tempMc = new gun18();
				}
				else if (this.enemyWeapons[this.b] == 19)
				{
					this.tempMc = new gun19();
				}
				else if (this.enemyWeapons[this.b] == 20)
				{
					this.tempMc = new gun20();
				}
				else if (this.enemyWeapons[this.b] == 21)
				{
				}
				else if (this.enemyWeapons[this.b] == 22)
				{
				}
				else if (this.enemyWeapons[this.b] == 23)
				{
				}
				else if (this.enemyWeapons[this.b] == 24)
				{
				}
				else if (this.enemyWeapons[this.b] == 25)
				{
				}
				else if (this.enemyWeapons[this.b] == 26)
				{
				}
				else if (this.enemyWeapons[this.b] == 27)
				{
				}
				else if (this.enemyWeapons[this.b] == 28)
				{
				}
				else if (this.enemyWeapons[this.b] == 29)
				{
				}
				else if (this.enemyWeapons[this.b] == 30)
				{
				}
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				this.a = 0;
				while (this.a < this.tempMc.totalFrames / 2)
				{
					
					this.trans = new Matrix();
					this.tempMc.gotoAndStop((this.a + 1));
					this.tempMc.hand1.gotoAndStop(this["character_appearance_" + (this.b + 1)][3]);
					this.tempMc.hand2.gotoAndStop(this["character_appearance_" + (this.b + 1)][3]);
					this.character_colorTransform = this.tempMc.hand1.color1.transform.colorTransform;
					this.character_colorTransform.color = this["character_colors_" + (this.b + 1)][6];
					this.tempMc.hand1.color1.transform.colorTransform = this.character_colorTransform;
					this.character_colorTransform = this.tempMc.hand2.color1.transform.colorTransform;
					this.character_colorTransform.color = this["character_colors_" + (this.b + 1)][6];
					this.tempMc.hand2.color1.transform.colorTransform = this.character_colorTransform;
					this.tempGunBM = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
					this.tempGunBM.draw(this.tempMc, this.trans, null, null, null, true);
					this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
					this["enemy_gun_" + this.b + "_right_" + this.a].graphics.clear();
					if (this.smoothEnemies == true)
					{
						this["enemy_gun_" + this.b + "_right_" + this.a].graphics.beginBitmapFill(this.tempGunBM, this.trans, false, true);
					}
					else
					{
						this["enemy_gun_" + this.b + "_right_" + this.a].graphics.beginBitmapFill(this.tempGunBM, this.trans, false, false);
					}
					this["enemy_gun_" + this.b + "_right_" + this.a].graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
					
					this.a  ++ ;
					
				}
				this.a = 0;
				while (this.a < this.tempMc.totalFrames / 2)
				{
					
					this.trans = new Matrix();
					this.tempMc.gotoAndStop(this.a + this.tempMc.totalFrames / 2 + 1);
					this.tempMc.hand1.gotoAndStop(this["character_appearance_" + (this.b + 1)][3]);
					this.tempMc.hand2.gotoAndStop(this["character_appearance_" + (this.b + 1)][3]);
					this.tempMc.hand3.gotoAndStop(this["character_appearance_" + (this.b + 1)][3]);
					this.character_colorTransform = this.tempMc.hand1.color1.transform.colorTransform;
					this.character_colorTransform.color = this["character_colors_" + (this.b + 1)][6];
					this.tempMc.hand1.color1.transform.colorTransform = this.character_colorTransform;
					this.character_colorTransform = this.tempMc.hand2.color1.transform.colorTransform;
					this.character_colorTransform.color = this["character_colors_" + (this.b + 1)][6];
					this.tempMc.hand2.color1.transform.colorTransform = this.character_colorTransform;
					this.tempGunBM = new BitmapData(this.tempMc.width, this.tempMc.height, true, 0);
					this.tempGunBM.draw(this.tempMc, this.trans, null, null, null, true);
					this.trans.translate(-this.tempMc.pivot.x, -this.tempMc.pivot.y);
					this["enemy_gun_" + this.b + "_left_" + this.a].graphics.clear();
					if (this.smoothEnemies == true)
					{
						this["enemy_gun_" + this.b + "_left_" + this.a].graphics.beginBitmapFill(this.tempGunBM, this.trans, false, true);
					}
					else
					{
						this["enemy_gun_" + this.b + "_left_" + this.a].graphics.beginBitmapFill(this.tempGunBM, this.trans, false, false);
					}
					this["enemy_gun_" + this.b + "_left_" + this.a].graphics.drawRect(-this.tempMc.pivot.x, -this.tempMc.pivot.y, this.tempMc.width, this.tempMc.height);
					
					this.a  ++ ;
					
				}
				
				this.b  ++ ;
				
			}
			this.b = 0;
			while (this.b < this.numberOfGuns)
			{
				
				if (this.b == 0)
				{
					this.tempMc = new gun0_reload();
				}
				else if (this.b == 1)
				{
					this.tempMc = new gun1_reload();
				}
				else if (this.b == 2)
				{
					this.tempMc = new gun2_reload();
				}
				else if (this.b == 3)
				{
				}
				else if (this.b == 4)
				{
					this.tempMc = new gun4_reload();
				}
				else if (this.b == 5)
				{
					this.tempMc = new gun5_reload();
				}
				else if (this.b == 6)
				{
					this.tempMc = new gun6_reload();
				}
				else if (this.b == 7)
				{
					this.tempMc = new gun7_reload();
				}
				else if (this.b == 8)
				{
					this.tempMc = new gun8_reload();
				}
				else if (this.b == 9)
				{
					this.tempMc = new gun9_reload();
				}
				else if (this.b == 10)
				{
					this.tempMc = new gun10_reload();
				}
				else if (this.b == 11)
				{
					this.tempMc = new gun11_reload();
				}
				else if (this.b == 12)
				{
				}
				else if (this.b == 13)
				{
				}
				else if (this.b == 14)
				{
				}
				else if (this.b == 15)
				{
				}
				else if (this.b == 16)
				{
				}
				else if (this.b == 17)
				{
					this.tempMc = new gun17_reload();
				}
				else if (this.b == 18)
				{
					this.tempMc = new gun18_reload();
				}
				else if (this.b == 19)
				{
					this.tempMc = new gun19_reload();
				}
				else if (this.b == 20)
				{
				}
				else if (this.b == 21)
				{
				}
				else if (this.b == 22)
				{
				}
				else if (this.b == 23)
				{
				}
				else if (this.b == 24)
				{
				}
				else if (this.b == 25)
				{
				}
				else if (this.b == 26)
				{
				}
				else if (this.b == 27)
				{
				}
				else if (this.b == 28)
				{
				}
				else if (this.b == 29)
				{
				}
				else if (this.b == 30)
				{
				}
				this.tempMc.filters = [new ColorMatrixFilter(this.levelColorFilter.CalculateFinalFlatArray())];
				if (this.gun_hasReloadAnim[this.b] == 1)
				{
					if (this.b != this.character_weapons[0])
					{
					}
					if (this.b == this.character_weapons[1])
					{
						this.trans = new Matrix();
						this["gun_" + this.b + "_reload_right"] = new BitmapData(this.tempMc.width * (this.tempMc.totalFrames / 2), this.tempMc.height, true, 0);
						this.gun_reload_x[this.b] = -this.tempMc.origin.x;
						this.gun_reload_y[this.b] = -this.tempMc.origin.y;
						this.gun_reload_w[this.b] = this.tempMc.width;
						this.gun_reload_mag_x[this.b] = this.tempMc.mag.x;
						this.gun_reload_mag_y[this.b] = this.tempMc.mag.y;
						this.a = 0;
						while (this.a < this.tempMc.totalFrames / 2)
						{
							
							this.tempMc.gotoAndStop((this.a + 1));
							this.tempMc.hand1.gotoAndStop(this.character_appearance[3]);
							this.tempMc.hand2.gotoAndStop(this.character_appearance[3]);
							this.character_colorTransform = this.tempMc.hand1.color1.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
							this.tempMc.hand1.color1.transform.colorTransform = this.character_colorTransform;
							this.character_colorTransform = this.tempMc.hand2.color1.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
							this.tempMc.hand2.color1.transform.colorTransform = this.character_colorTransform;
							this["gun_" + this.b + "_reload_right"].draw(this.tempMc, this.trans, null, null, null, true);
							this.trans.translate(this.tempMc.width, 0);
							
							this.a  ++ ;
							
						}
						this.trans = new Matrix();
						this.trans.scale(-1, 1);
						this["gun_" + this.b + "_reload_left"] = new BitmapData(this.tempMc.width * (this.tempMc.totalFrames / 2), this.tempMc.height, true, 0);
						this.trans.translate(this.tempMc.width, 0);
						this.a = 31;
						while (this.a < 61)
						{
							
							this.tempMc.gotoAndStop(this.a);
							this.tempMc.hand1.gotoAndStop(this.character_appearance[3]);
							this.tempMc.hand2.gotoAndStop(this.character_appearance[3]);
							this.tempMc.hand3.gotoAndStop(this.character_appearance[3]);
							this.character_colorTransform = this.tempMc.hand1.color1.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
							this.tempMc.hand1.color1.transform.colorTransform = this.character_colorTransform;
							this.character_colorTransform = this.tempMc.hand2.color1.transform.colorTransform;
							this.character_colorTransform.color = this.character_color_values[this.character_colors[6]];
							this.tempMc.hand2.color1.transform.colorTransform = this.character_colorTransform;
							this["gun_" + this.b + "_reload_left"].draw(this.tempMc, this.trans, null, null, null, true);
							this.trans.translate(this.tempMc.width, 0);
							
							this.a  ++ ;
							
						}
					}
				}
				
				this.b  ++ ;
				
			}
			Mouse.hide();
			mc.stage.addEventListener(KeyboardEvent.KEY_DOWN, this.keyPressed);
			mc.stage.addEventListener(KeyboardEvent.KEY_UP, this.keyUnpressed);
			mc.stage.addEventListener(MouseEvent.MOUSE_WHEEL, this.mouseWheel);
			this.mouseDown = false;
			mc.stage.addEventListener(MouseEvent.MOUSE_DOWN, this.md);
			mc.stage.addEventListener(MouseEvent.MOUSE_UP, this.mu);
			this.gun16time = 0;
			this.noRecoil = false;
			this.score = 0;
			this.multiplier = 1;
			this.multiplier_countdown = 0;
			this.max_multiplier_countdown = 210;
			this.character_health = 25;
			this.character_maxHealth = this.character_health;
			this.character_hurtTime = 0;
			this.character_invincibleTime = 0;
			if (this.isHackedVersion == true)
			{
				if (mc.loaderInfo.url.indexOf("crazymonkeygames.com") > -1)
				{
				}
				else
				{
					this.character_health = 0;
					this.character_maxHealth = 0;
				}
			}
			this.character_x = this.characterStartPoint.x;
			this.character_y = this.characterStartPoint.y;
			this.character_xOld = this.character_x;
			this.character_yOld = this.character_y;
			this.character_gunX = this.character_x;
			this.character_gunY = this.character_y;
			this.character_gunXOld = this.character_gunX;
			this.character_gunYOld = this.character_gunY;
			this.character_gunRot = 0;
			this.character_gunRotOld = 0;
			this.character_gunDX = 0;
			this.character_gunDY = 0;
			this.character_headRot = 0;
			this.character_gunEquipped = this.character_weapons[0];
			this.character_recoil_rot = 0;
			this.character_recoil_x = 0;
			this.character_recoil_y = 0;
			this.character_gunCoolDown = 0;
			this.character_gunFrame = 0;
			this.character_burstLength = 0;
			this.character_reloadTime = 0;
			this.character_velX = 0;
			this.character_velY = 0;
			this.runSpeed = 16;
			this.runSpeed = 18;
			this.jump = false;
			this.releaseJump = false;
			this.character_face = 0;
			this.character_keycards = 0;
			this.radTo = 0;
			this.pi_halved = int(Math.PI / 2 * 100) / 100;
			this.pi_180 = int(180 / Math.PI * 1000) / 1000;
			this.gunFlash_pt = new Point(0, 0);
			this.gunFlash_pt2 = new Point(0, 0);
			this.gunTempRand = 0;
			this.gunTempSpd = 0;
			this.anim = 1;
			this.fr = 20;
			this.frOld = 20;
			this.aimPan = 0;
			this.aimPanOld = 0;
			this.hasDroppedMag = false;
			this.idleTime = 0;
			this.idle_x = 0;
			this.idle_x_last = 0;
			this.idle_change_x = 0;
			this.idle_movement = 0;
			this.idle_timePlus = 0;
			this.recoilRotVel = 0;
			this.enemyRunSpeed = 12;
			this.enemy_type = new Vector.<int>([]);
			this.enemy_health_head = new Vector.<Number>([]);
			this.enemy_health_body = new Vector.<Number>([]);
			this.enemy_health_foot = new Vector.<Number>([]);
			this.enemy_health_headMax = new Vector.<Number>([]);
			this.enemy_health_bodyMax = new Vector.<Number>([]);
			this.enemy_health_footMax = new Vector.<Number>([]);
			this.enemy_health_headOld = new Vector.<Number>([]);
			this.enemy_health_bodyOld = new Vector.<Number>([]);
			this.enemy_health_footOld = new Vector.<Number>([]);
			this.enemy_damagedBy = new Vector.<int>([]);
			this.enemy_spriteSet = new Vector.<Number>([]);
			this.enemy_face = new Vector.<Number>([]);
			this.enemy_anim = new Vector.<Number>([]);
			this.enemy_fr = new Vector.<Number>([]);
			this.enemy_frOld = new Vector.<Number>([]);
			this.enemy_x = new Vector.<Number>([]);
			this.enemy_y = new Vector.<Number>([]);
			this.enemy_xOld = new Vector.<Number>([]);
			this.enemy_yOld = new Vector.<Number>([]);
			this.enemy_velX = new Vector.<Number>([]);
			this.enemy_velY = new Vector.<Number>([]);
			this.enemy_jump = new Vector.<Boolean>([]);
			this.enemy_gunX = new Vector.<Number>([]);
			this.enemy_gunY = new Vector.<Number>([]);
			this.enemy_gunXOld = new Vector.<Number>([]);
			this.enemy_gunYOld = new Vector.<Number>([]);
			this.enemy_gunRot = new Vector.<Number>([]);
			this.enemy_gunRotOld = new Vector.<Number>([]);
			this.enemy_headRot = new Vector.<Number>([]);
			this.enemy_radTo = new Vector.<Number>([]);
			this.enemy_gunEquipped = new Vector.<Number>([]);
			this.enemy_recoil_rot = new Vector.<Number>([]);
			this.enemy_recoil_rotVel = new Vector.<Number>([]);
			this.enemy_recoil_x = new Vector.<Number>([]);
			this.enemy_recoil_y = new Vector.<Number>([]);
			this.enemy_gunCoolDown = new Vector.<Number>([]);
			this.enemy_gunFrame = new Vector.<Number>([]);
			this.enemy_burstLength = new Vector.<Number>([]);
			this.enemy_engagementDistance = new Vector.<Number>([]);
			this.enemy_lineOfSightTimer = new Vector.<int>([]);
			this.enemy_nextNode = new Vector.<int>([]);
			this.enemy_aiState = new Vector.<int>([]);
			this.enemy_maxJumpHeight = new Vector.<int>([]);
			this.enemy_hasLineOfSight = new Vector.<Boolean>([]);
			this.enemy_lineOfSightCountdown = new Vector.<int>([]);
			this.enemy_markedForRemoval = new Vector.<Boolean>([]);
			this.enemy_isHeadless = new Vector.<Boolean>([]);
			this.enemy_statusEffect = new Vector.<int>([]);
			this.enemy_statusEffect_atp = new Vector.<Number>([]);
			this.enemy_inacc_x = new Vector.<Number>([]);
			this.enemy_inacc_y = new Vector.<Number>([]);
			this.enemy_inacc_x_target = new Vector.<Number>([]);
			this.enemy_inacc_y_target = new Vector.<Number>([]);
			this.enemy_initialized = new Vector.<Number>([]);
			this.multiKillCount = 0;
			this.multiKillTime = 0;
			this.tempNumOfEnemies = 0;
			this.addEnemy(-1, 0, 0, 0, 0, 0, 0);
			this.addEnemy(-1, 0, 0, 0, 0, 0, 0);
			if (this.levelToLoad == 2)
			{
			}
			this.a = 0;
			while (this.a < this["level" + this.levelToLoad + "_item_type"].length)
			{
				
				switch(this["level" + this.levelToLoad + "_item_type"][this.a])
				{
					case 13:
					{
						this.addEnemy(3, 1, 1, 1, 0, this["level" + this.levelToLoad + "_item_x"][this.a] * 50 + 25, this["level" + this.levelToLoad + "_item_y"][this.a] * 50 + 25);
						break;
					}
					default:
					{
						break;
					}
				}
				
				this.a  ++ ;
				
			}
			this.timePassed = 0;
			this.maxNumOfEnemies = 3;
			this.maxNumOfEnemies_forReal = 3;
			this.has_line_of_sight = false;
			this.enemy_dX = 0;
			this.enemy_dY = 0;
			this.enemy_tempRise = 0;
			this.enemy_tempRun = 0;
			this.enemy_dist = 0;
			this.enemy_isMoving = false;
			this.tempScoreQue = "";
			this.enemy_tempPos_x = 0;
			this.enemy_tempPos_y = 0;
			this.enemy_tempPos_face = 0;
			this.enemy_tempVel_x = 0;
			this.enemy_tempVel_y = 0;
			this.enemy_ragdoll_type = new Vector.<int>([]);
			this.enemy_ragdoll_outfit = new Vector.<int>([]);
			this.enemy_ragdoll_face = new Vector.<int>([]);
			this.enemy_head_x = new Vector.<Number>([]);
			this.enemy_head_y = new Vector.<Number>([]);
			this.enemy_head_r = new Vector.<Number>([]);
			this.enemy_head_xOld = new Vector.<Number>([]);
			this.enemy_head_yOld = new Vector.<Number>([]);
			this.enemy_head_rOld = new Vector.<Number>([]);
			this.enemy_head_velX = new Vector.<Number>([]);
			this.enemy_head_velY = new Vector.<Number>([]);
			this.enemy_body_x = new Vector.<Number>([]);
			this.enemy_body_y = new Vector.<Number>([]);
			this.enemy_body_r = new Vector.<Number>([]);
			this.enemy_body_xOld = new Vector.<Number>([]);
			this.enemy_body_yOld = new Vector.<Number>([]);
			this.enemy_body_rOld = new Vector.<Number>([]);
			this.enemy_body_velX = new Vector.<Number>([]);
			this.enemy_body_velY = new Vector.<Number>([]);
			this.enemy_body2_x = new Vector.<Number>([]);
			this.enemy_body2_y = new Vector.<Number>([]);
			this.enemy_body2_r = new Vector.<Number>([]);
			this.enemy_body2_xOld = new Vector.<Number>([]);
			this.enemy_body2_yOld = new Vector.<Number>([]);
			this.enemy_body2_rOld = new Vector.<Number>([]);
			this.enemy_body2_velX = new Vector.<Number>([]);
			this.enemy_body2_velY = new Vector.<Number>([]);
			this.enemy_foot1_x = new Vector.<Number>([]);
			this.enemy_foot1_y = new Vector.<Number>([]);
			this.enemy_foot1_r = new Vector.<Number>([]);
			this.enemy_foot1_xOld = new Vector.<Number>([]);
			this.enemy_foot1_yOld = new Vector.<Number>([]);
			this.enemy_foot1_rOld = new Vector.<Number>([]);
			this.enemy_foot1_velX = new Vector.<Number>([]);
			this.enemy_foot1_velY = new Vector.<Number>([]);
			this.enemy_foot2_x = new Vector.<Number>([]);
			this.enemy_foot2_y = new Vector.<Number>([]);
			this.enemy_foot2_r = new Vector.<Number>([]);
			this.enemy_foot2_xOld = new Vector.<Number>([]);
			this.enemy_foot2_yOld = new Vector.<Number>([]);
			this.enemy_foot2_rOld = new Vector.<Number>([]);
			this.enemy_foot2_velX = new Vector.<Number>([]);
			this.enemy_foot2_velY = new Vector.<Number>([]);
			this.addEnemyRagdoll(-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.addEnemyRagdoll(-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			this.tempRad = 0;
			this.wasGibbed = false;
			this.timeBeforeRoundBegins = 0;
			this.timeRemaining = 4500 + this.timeBeforeRoundBegins;
			if (this.levelToLoad == 4)
			{
				this.timeRemaining = 6300 + this.timeBeforeRoundBegins;
			}
			this.time_min = 0;
			this.time_sec = 0;
			this.intro_countdown = 10;
			this.intro_cameraX = 500;
			this.intro_cameraY = 500;
			this.intro_cameraXOld = 0;
			this.intro_cameraYOld = 0;
			this.intro_cameraVelX = 20;
			this.intro_cameraVelY = 0;
			this.objective_visibleLetters = 0;
			this.objectiveOn = 0;
			this.objectiveOn_sub = 0;
			this.objectiveTime = -10;
			this.mc.intro_text_back.alpha = 1;
			this.mc.intro_text_back.fade.alpha = 2.5;
			this.discsDestroyed = 0;
			this.playMusic_levelObjective();
			this.lightMask = new Shape();
			this.globalIllumination = 0.5;
			this.shadowColor = 0;
			switch(this.tileSet)
			{
				case 1:
				{
					this.globalIllumination = 0.6;
					break;
				}
				case 3:
				{
					this.globalIllumination = 0.7;
					break;
				}
				case 4:
				{
					this.globalIllumination = 0.7;
					break;
				}
				case 6:
				{
					this.globalIllumination = 0.7;
					break;
				}
				default:
				{
					break;
				}
			}
			this.tempSlope = 0;
			this.tempRise = 0;
			this.tempRun = 0;
			this.tempDist = 0;
			this.lineLength = 0;
			this.endPoint = new Point();
			this.endPoint2 = new Point();
			this.lightMatrix = new Matrix();
			this.lightTransform = new ColorTransform(1, 1, 1, this.globalIllumination, 0, 0, 0, 0);
			this.lightMatrix2 = new Matrix();
			this.shadowMapScale = 4;
			this.shadowBuffer = new BitmapData(this.level_bm.width / this.shadowMapScale, this.level_bm.height / this.shadowMapScale, false, this.shadowColor);
			this.lightTexture = new BitmapData(1000 / this.shadowMapScale, 1000 / this.shadowMapScale, false, 0);
			this.tempRect_x = 0;
			this.tempRect_y = 0;
			this.tempRect_width = 0;
			this.tempRect_height = 0;
			this.tempRect_x_width = 0;
			this.tempRect_y_height = 0;
			this.tempLight = new Point();
			this.lightSizeHalf = 0;
			this.cursorFrame = 0;
			this.cameraX = 0;
			this.cameraY = 0;
			this.tempLightPoint = new Point();
			this.tempHeadRot = 0;
			this.rotInterp = 0;
			this.enemiesOnScreen = 0;
			this.tempInterpPoint = new Point(0, 0);
			this.tempInterpPointOld = new Point(0, 0);
			this.interpFinal = new Point(0, 0);
			this.interpFrame = 0;
			this.displayMiniMap = this.mapToggled;
			trace("Map Stuff: " + (getTimer() - this.precompute_time) + "ms");
			this.precompute_time = getTimer();
			this.bf = new BlurFilter(16, 16, 1);
			this.light_num = 0;
			this.finished_lights = false;
			this.rect.width = this.screenWidth;
			this.rect.height = this.screenHeight;
			this.rect.x = 0;
			this.rect.y = 0;
			this.shadowBuffer.fillRect(this.rect, 0);
			this.doLights = true;
			trace("Lights: " + (getTimer() - this.precompute_time) + "ms");
			this.precompute_time = getTimer();
			this.cameraShakeX = 0;
			this.cameraShakeY = 0;
			this.cameraShakeXOld = 0;
			this.cameraShakeYOld = 0;
			this.messageTime = 0;
			this.messageText = "";
			this.messageTime2 = 0;
			this.messageText2 = "";
			this.scoreQue = [];
			this.scoreNames = ["KILL + 10", "HEADSHOT + 5", "CENTER MASS + 5", "LAST CALL + 5", "AND STAY DOWN! + 5", "GIBBED + 10", "AIRBURST + 5", "OBJECTIVE COMPLETE + 100", "FLYING HEADSHOT + 5", "BLOODBATH! + 25", "LOOK AT THIS MESS! + 50", "SERIOUSLY...WHO IS GOING TO CLEAN THIS UP + 100", "WEAPON PROFICIENCY: " + this.gun_names[0] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[1] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[2] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[3] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[4] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[5] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[6] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[7] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[8] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[9] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[10] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[11] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[12] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[13] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[14] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[15] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[16] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[17] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[18] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[19] + " + 100", "WEAPON PROFICIENCY: " + this.gun_names[20] + " + 100", "MULTI KILL X2 + 5", "MULTI KILL X3 + 10", "MULTI KILL X4 + 15", "MULTI KILL X5 + 20", "MULTI KILL X6 + 25", "MULTI KILL X7 + 30", "MULTI KILL X8 + 35", "MULTI KILL X9 + 40", "MULTI KILL X10 + 45"];
			this.scoreTimesEarned = [];
			this.a = 0;
			while (this.a < this.scoreNames.length)
			{
				
				this.scoreTimesEarned.push(0);
				
				this.a  ++ ;
				
			}
			this.weaponProficiencyKills = [];
			this.a = 0;
			while (this.a < this.gun_names.length)
			{
				
				this.weaponProficiencyKills.push(0);
				
				this.a  ++ ;
				
			}
			this.scoreTally = 0;
			this.scoreQueTime = 0;
			this.healthFrame = 0;
			this.healthPixels = 0;
			this.keyHeadsUp_frame = 0;
			this.keyHeadsUp_visible = false;
			mc.stage.align = StageAlign.TOP_LEFT;
			mc.stage.scaleMode = StageScaleMode.NO_SCALE;
			this.newTime = 0;
			this.frameTime = 0;
			this.currentTime = 0;
			this.accumulator = 0;
			this.framesPerSecond = 0.035;
			this.interpAmount = 0;
			this.pauseState = 1;
			this.didLastRender = false;
			this.mc.fade.alpha = 0;
			this.tempObjectivesCompleted = 0;
			this.deathScreenBuffer = new BitmapData(1, 1, false, 0);
			this.fpsCounterT = getTimer();
			this.fpsCounterFps = 0;
			this.fpsCounter_count = 0;
			this.avgFPS = 0;
			this.renderRepeats = 0;
			
			mc.addEventListener(Event.ENTER_FRAME, this.enterFrameFun);
			return;
		}// end function
		
		function frame15()
		{
			mc.stage.frameRate = 30;
			System.gc();
			this.mc.player_score.text = "SCORE: " + this.score;
			this.mc.player_id.text = this.playerName;
			if (this.gameVersion == 0)
			{
				this.mc.objectives_complete.text = "OBJECTIVES COMPLETED: " + this.tempObjectivesCompleted + "/9";
			}
			else if (this.gameVersion == 1)
			{
				this.mc.objectives_complete.text = "";
				if (this.isHackedVersion == true)
				{
					this.mc.player_id.visible = false;
					this.mc.btn_submit.visible = false;
					this.mc.submit_text.visible = false;
				}
			}
			this.mc.returnToTitle.addEventListener(MouseEvent.CLICK, this.fun_returnToTitle);
			this.mc.btn_tryAgain.addEventListener(MouseEvent.CLICK, this.fun_tryAgain);
			this.mc.btn_moarResults.addEventListener(MouseEvent.CLICK, this.fun_moarResults);
			
			this.hasSubmitted = false;
			this.hax = false;
			this.tempURL = mc.loaderInfo.url;
			this.tempURL = this.tempURL.split("://");
			this.tempURL = this.tempURL[1].split("/");
			this.disallowedURLs = new Array("arcadeprehacks.com", "hackedarcadegames.com", "www.prehackshub.com", "www.arcadeprehacks.org", "www.jeux-hack.com", "www.hackedfreegames.com", "www.prehackshub.com");
			this.a = 0;
			while (this.a < this.disallowedURLs.length)
			{
				
				if (this.tempURL == this.disallowedURLs[this.a])
				{
					this.hax = true;
				}
				
				this.a  ++ ;
				
			}
			this.mc.btn_submit.addEventListener(MouseEvent.CLICK, this.onMouseUpHandler_SubmitScore);
			this.mc.btn_view.addEventListener(MouseEvent.CLICK, this.viewScores);
			Mouse.show();
			//this.mc.loading.visible = false;
			return;
		}// end function
		
		function frame16()
		{
			mc.stage.frameRate = 30;
			System.gc();
			this.mc.returnToTitle.addEventListener(MouseEvent.CLICK, this.dieScreen_returnToTitle);
			this.mc.btn_tryAgain.addEventListener(MouseEvent.CLICK, this.dieScreen_tryAgain);
			if (this.isHackedVersion == true)
			{
				this.mc.btn_playHax.visible = false;
			}
			else
			{
				this.mc.btn_playHax.visible = true;
			}
			this.mc.btn_playHax.btn.addEventListener(MouseEvent.CLICK, this.playHaxFun);
			Mouse.show();
			//this.mc.loading.visible = false;
			return;
		}// end function
		
	}
}










